
VL53L0X_GestureDetect_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d070  0800d070  00020810  2**0
                  CONTENTS
  4 .ARM          00000008  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d078  0800d078  00020810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d078  0800d078  0001d078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d080  0800d080  0001d080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000810  20000000  0800d088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000810  0800d898  00020810  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800d898  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020810  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d0b  00000000  00000000  0002083a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000456c  00000000  00000000  0004a545  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  0004eab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a8  00000000  00000000  00050210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b842  00000000  00000000  000517b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018f89  00000000  00000000  0007cffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6ed9  00000000  00000000  00095f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018ce5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006714  00000000  00000000  0018ced8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000810 	.word	0x20000810
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca74 	.word	0x0800ca74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000814 	.word	0x20000814
 80001cc:	0800ca74 	.word	0x0800ca74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b972 	b.w	8000e68 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14b      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	d967      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0720 	rsb	r7, r2, #32
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000bc2:	4095      	lsls	r5, r2
 8000bc4:	ea47 0803 	orr.w	r8, r7, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be0:	fb07 f10c 	mul.w	r1, r7, ip
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18eb      	adds	r3, r5, r3
 8000bea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bee:	f080 811b 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8118 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000bf8:	3f02      	subs	r7, #2
 8000bfa:	442b      	add	r3, r5
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	192c      	adds	r4, r5, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000c24:	3802      	subs	r0, #2
 8000c26:	442c      	add	r4, r5
 8000c28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2c:	eba4 040c 	sub.w	r4, r4, ip
 8000c30:	2700      	movs	r7, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xbe>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80eb 	beq.w	8000e22 <__udivmoddi4+0x286>
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c52:	4638      	mov	r0, r7
 8000c54:	4639      	mov	r1, r7
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f783 	clz	r7, r3
 8000c5e:	2f00      	cmp	r7, #0
 8000c60:	d147      	bne.n	8000cf2 <__udivmoddi4+0x156>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd0>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2c4>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000c7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xe8>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 808f 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8e:	1b49      	subs	r1, r1, r5
 8000c90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c94:	fa1f f885 	uxth.w	r8, r5
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9e:	0c23      	lsrs	r3, r4, #16
 8000ca0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cb0:	18eb      	adds	r3, r5, r3
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	f200 80cd 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1a59      	subs	r1, r3, r1
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x14c>
 8000cd8:	192c      	adds	r4, r5, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x14a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80b6 	bhi.w	8000e52 <__udivmoddi4+0x2b6>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e79f      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf6:	40bb      	lsls	r3, r7
 8000cf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d00:	fa01 f407 	lsl.w	r4, r1, r7
 8000d04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d10:	4325      	orrs	r5, r4
 8000d12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d16:	0c2c      	lsrs	r4, r5, #16
 8000d18:	fb08 3319 	mls	r3, r8, r9, r3
 8000d1c:	fa1f fa8e 	uxth.w	sl, lr
 8000d20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d24:	fb09 f40a 	mul.w	r4, r9, sl
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1e 0303 	adds.w	r3, lr, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d3c:	f080 8087 	bcs.w	8000e4e <__udivmoddi4+0x2b2>
 8000d40:	429c      	cmp	r4, r3
 8000d42:	f240 8084 	bls.w	8000e4e <__udivmoddi4+0x2b2>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4473      	add	r3, lr
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d60:	45a2      	cmp	sl, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1e 0404 	adds.w	r4, lr, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	d26b      	bcs.n	8000e46 <__udivmoddi4+0x2aa>
 8000d6e:	45a2      	cmp	sl, r4
 8000d70:	d969      	bls.n	8000e46 <__udivmoddi4+0x2aa>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4474      	add	r4, lr
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	eba4 040a 	sub.w	r4, r4, sl
 8000d82:	454c      	cmp	r4, r9
 8000d84:	46c2      	mov	sl, r8
 8000d86:	464b      	mov	r3, r9
 8000d88:	d354      	bcc.n	8000e34 <__udivmoddi4+0x298>
 8000d8a:	d051      	beq.n	8000e30 <__udivmoddi4+0x294>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d069      	beq.n	8000e64 <__udivmoddi4+0x2c8>
 8000d90:	ebb1 050a 	subs.w	r5, r1, sl
 8000d94:	eb64 0403 	sbc.w	r4, r4, r3
 8000d98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d9c:	40fd      	lsrs	r5, r7
 8000d9e:	40fc      	lsrs	r4, r7
 8000da0:	ea4c 0505 	orr.w	r5, ip, r5
 8000da4:	e9c6 5400 	strd	r5, r4, [r6]
 8000da8:	2700      	movs	r7, #0
 8000daa:	e747      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f703 	lsr.w	r7, r0, r3
 8000db4:	4095      	lsls	r5, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc2:	4338      	orrs	r0, r7
 8000dc4:	0c01      	lsrs	r1, r0, #16
 8000dc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dca:	fa1f f885 	uxth.w	r8, r5
 8000dce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb07 f308 	mul.w	r3, r7, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x256>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de8:	d22f      	bcs.n	8000e4a <__udivmoddi4+0x2ae>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d92d      	bls.n	8000e4a <__udivmoddi4+0x2ae>
 8000dee:	3f02      	subs	r7, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	b281      	uxth	r1, r0
 8000df6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb00 f308 	mul.w	r3, r0, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x27e>
 8000e0a:	1869      	adds	r1, r5, r1
 8000e0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e10:	d217      	bcs.n	8000e42 <__udivmoddi4+0x2a6>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d915      	bls.n	8000e42 <__udivmoddi4+0x2a6>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4429      	add	r1, r5
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e20:	e73b      	b.n	8000c9a <__udivmoddi4+0xfe>
 8000e22:	4637      	mov	r7, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e709      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e28:	4607      	mov	r7, r0
 8000e2a:	e6e7      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e30:	4541      	cmp	r1, r8
 8000e32:	d2ab      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e38:	eb69 020e 	sbc.w	r2, r9, lr
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	4613      	mov	r3, r2
 8000e40:	e7a4      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e42:	4660      	mov	r0, ip
 8000e44:	e7e9      	b.n	8000e1a <__udivmoddi4+0x27e>
 8000e46:	4618      	mov	r0, r3
 8000e48:	e795      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4a:	4667      	mov	r7, ip
 8000e4c:	e7d1      	b.n	8000df2 <__udivmoddi4+0x256>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e77c      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e52:	3802      	subs	r0, #2
 8000e54:	442c      	add	r4, r5
 8000e56:	e747      	b.n	8000ce8 <__udivmoddi4+0x14c>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	442b      	add	r3, r5
 8000e5e:	e72f      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e60:	4638      	mov	r0, r7
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xda>
 8000e64:	4637      	mov	r7, r6
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8000e76:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e94:	4845      	ldr	r0, [pc, #276]	; (8000fac <_I2cFailRecover+0x140>)
 8000e96:	f005 ff64 	bl	8006d62 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4842      	ldr	r0, [pc, #264]	; (8000fac <_I2cFailRecover+0x140>)
 8000ea2:	f005 ff5e 	bl	8006d62 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 8000ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eac:	2311      	movs	r3, #17
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	483c      	ldr	r0, [pc, #240]	; (8000fac <_I2cFailRecover+0x140>)
 8000ebc:	f005 fd8e 	bl	80069dc <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec4:	e014      	b.n	8000ef0 <_I2cFailRecover+0x84>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4837      	ldr	r0, [pc, #220]	; (8000fac <_I2cFailRecover+0x140>)
 8000ece:	f005 ff48 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f005 f9fe 	bl	80062d4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	4833      	ldr	r0, [pc, #204]	; (8000fac <_I2cFailRecover+0x140>)
 8000ee0:	f005 ff3f 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f005 f9f5 	bl	80062d4 <HAL_Delay>
        for( i=0; i<10; i++){
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	dde7      	ble.n	8000ec6 <_I2cFailRecover+0x5a>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	482c      	ldr	r0, [pc, #176]	; (8000fac <_I2cFailRecover+0x140>)
 8000efc:	f005 ff1a 	bl	8006d34 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d104      	bne.n	8000f10 <_I2cFailRecover+0xa4>
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	623a      	str	r2, [r7, #32]
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	ddd7      	ble.n	8000ec0 <_I2cFailRecover+0x54>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8000f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f14:	4825      	ldr	r0, [pc, #148]	; (8000fac <_I2cFailRecover+0x140>)
 8000f16:	f005 ff0d 	bl	8006d34 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d13e      	bne.n	8000f9e <_I2cFailRecover+0x132>
        __GPIOA_CLK_ENABLE();
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <_I2cFailRecover+0x13c>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f005 fd45 	bl	80069dc <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2120      	movs	r1, #32
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f005 ff02 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000f5e:	2021      	movs	r0, #33	; 0x21
 8000f60:	f005 f9b8 	bl	80062d4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f005 fef9 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000f70:	2021      	movs	r0, #33	; 0x21
 8000f72:	f005 f9af 	bl	80062d4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f005 fef0 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000f82:	2021      	movs	r0, #33	; 0x21
 8000f84:	f005 f9a6 	bl	80062d4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f005 fee7 	bl	8006d62 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8000f94:	f44f 7025 	mov.w	r0, #660	; 0x294
 8000f98:	f005 f99c 	bl	80062d4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f9c:	e7d9      	b.n	8000f52 <_I2cFailRecover+0xe6>
        }while(1);
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 8000fb6:	f7ff ff59 	bl	8000e6c <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a24      	ldr	r2, [pc, #144]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fee:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <XNUCLEO53L0A1_I2C1Configure+0xa4>)
 8001008:	f005 fce8 	bl	80069dc <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <XNUCLEO53L0A1_I2C1Configure+0xac>)
 8001010:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001016:	605a      	str	r2, [r3, #4]
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800103e:	f005 febf 	bl	8006dc0 <HAL_I2C_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	61fb      	str	r3, [r7, #28]
    return status;
 8001046:	69fb      	ldr	r3, [r7, #28]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400
 8001058:	20000954 	.word	0x20000954
 800105c:	40005400 	.word	0x40005400
 8001060:	00300f38 	.word	0x00300f38

08001064 <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 800106a:	f000 fa7d 	bl	8001568 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 800106e:	f7ff ff9f 	bl	8000fb0 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8001072:	463a      	mov	r2, r7
 8001074:	2302      	movs	r3, #2
 8001076:	2100      	movs	r1, #0
 8001078:	2086      	movs	r0, #134	; 0x86
 800107a:	f000 f925 	bl	80012c8 <_ExpanderRd>
 800107e:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <XNUCLEO53L0A1_Init+0x2e>
 8001086:	783b      	ldrb	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <XNUCLEO53L0A1_Init+0x2e>
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b16      	cmp	r3, #22
 8001090:	d007      	beq.n	80010a2 <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 8001092:	2386      	movs	r3, #134	; 0x86
 8001094:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001098:	4931      	ldr	r1, [pc, #196]	; (8001160 <XNUCLEO53L0A1_Init+0xfc>)
 800109a:	4832      	ldr	r0, [pc, #200]	; (8001164 <XNUCLEO53L0A1_Init+0x100>)
 800109c:	f000 fa20 	bl	80014e0 <uart_printf>
        goto done_err;
 80010a0:	e058      	b.n	8001154 <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80010a2:	463a      	mov	r2, r7
 80010a4:	2302      	movs	r3, #2
 80010a6:	2100      	movs	r1, #0
 80010a8:	2084      	movs	r0, #132	; 0x84
 80010aa:	f000 f90d 	bl	80012c8 <_ExpanderRd>
 80010ae:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <XNUCLEO53L0A1_Init+0x5e>
 80010b6:	783b      	ldrb	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <XNUCLEO53L0A1_Init+0x5e>
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b16      	cmp	r3, #22
 80010c0:	d007      	beq.n	80010d2 <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 80010c2:	2384      	movs	r3, #132	; 0x84
 80010c4:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80010c8:	4925      	ldr	r1, [pc, #148]	; (8001160 <XNUCLEO53L0A1_Init+0xfc>)
 80010ca:	4826      	ldr	r0, [pc, #152]	; (8001164 <XNUCLEO53L0A1_Init+0x100>)
 80010cc:	f000 fa08 	bl	80014e0 <uart_printf>
        goto done_err;
 80010d0:	e040      	b.n	8001154 <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <XNUCLEO53L0A1_Init+0x104>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 80010dc:	23ff      	movs	r3, #255	; 0xff
 80010de:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 80010e0:	463a      	mov	r2, r7
 80010e2:	2302      	movs	r3, #2
 80010e4:	2114      	movs	r1, #20
 80010e6:	2086      	movs	r0, #134	; 0x86
 80010e8:	f000 f920 	bl	800132c <_ExpanderWR>
 80010ec:	6078      	str	r0, [r7, #4]
    if (status) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 80010f4:	2386      	movs	r3, #134	; 0x86
 80010f6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80010fa:	4919      	ldr	r1, [pc, #100]	; (8001160 <XNUCLEO53L0A1_Init+0xfc>)
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <XNUCLEO53L0A1_Init+0x108>)
 80010fe:	f000 f9ef 	bl	80014e0 <uart_printf>
        goto done_err;
 8001102:	e027      	b.n	8001154 <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 8001104:	23ff      	movs	r3, #255	; 0xff
 8001106:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8001108:	23bf      	movs	r3, #191	; 0xbf
 800110a:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 800110c:	463a      	mov	r2, r7
 800110e:	2302      	movs	r3, #2
 8001110:	2114      	movs	r1, #20
 8001112:	2084      	movs	r0, #132	; 0x84
 8001114:	f000 f90a 	bl	800132c <_ExpanderWR>
 8001118:	6078      	str	r0, [r7, #4]
    if (status) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8001120:	2384      	movs	r3, #132	; 0x84
 8001122:	f240 129f 	movw	r2, #415	; 0x19f
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <XNUCLEO53L0A1_Init+0xfc>)
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <XNUCLEO53L0A1_Init+0x108>)
 800112a:	f000 f9d9 	bl	80014e0 <uart_printf>
        goto done_err;
 800112e:	e011      	b.n	8001154 <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <XNUCLEO53L0A1_Init+0x104>)
 8001132:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001136:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8001138:	f000 f8a6 	bl	8001288 <_ExpandersSetAllIO>
 800113c:	6078      	str	r0, [r7, #4]
    if( status ){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 8001144:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001148:	4905      	ldr	r1, [pc, #20]	; (8001160 <XNUCLEO53L0A1_Init+0xfc>)
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <XNUCLEO53L0A1_Init+0x10c>)
 800114c:	f000 f9c8 	bl	80014e0 <uart_printf>
 8001150:	e000      	b.n	8001154 <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 8001152:	bf00      	nop
    return status;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0800ccc4 	.word	0x0800ccc4
 8001164:	0800cab4 	.word	0x0800cab4
 8001168:	2000082c 	.word	0x2000082c
 800116c:	0800cae8 	.word	0x0800cae8
 8001170:	0800cb10 	.word	0x0800cb10

08001174 <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d03e      	beq.n	8001202 <XNUCLEO53L0A1_ResetId+0x8e>
 8001184:	2b02      	cmp	r3, #2
 8001186:	dc04      	bgt.n	8001192 <XNUCLEO53L0A1_ResetId+0x1e>
 8001188:	2b00      	cmp	r3, #0
 800118a:	d021      	beq.n	80011d0 <XNUCLEO53L0A1_ResetId+0x5c>
 800118c:	2b01      	cmp	r3, #1
 800118e:	d006      	beq.n	800119e <XNUCLEO53L0A1_ResetId+0x2a>
 8001190:	e050      	b.n	8001234 <XNUCLEO53L0A1_ResetId+0xc0>
 8001192:	2b6c      	cmp	r3, #108	; 0x6c
 8001194:	d01c      	beq.n	80011d0 <XNUCLEO53L0A1_ResetId+0x5c>
 8001196:	2b72      	cmp	r3, #114	; 0x72
 8001198:	d033      	beq.n	8001202 <XNUCLEO53L0A1_ResetId+0x8e>
 800119a:	2b63      	cmp	r3, #99	; 0x63
 800119c:	d14a      	bne.n	8001234 <XNUCLEO53L0A1_ResetId+0xc0>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011a0:	78db      	ldrb	r3, [r3, #3]
 80011a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011aa:	70da      	strb	r2, [r3, #3]
        if( state )
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <XNUCLEO53L0A1_ResetId+0x4c>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011b4:	78db      	ldrb	r3, [r3, #3]
 80011b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011be:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80011c0:	2301      	movs	r3, #1
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <XNUCLEO53L0A1_ResetId+0x100>)
 80011c4:	2113      	movs	r1, #19
 80011c6:	2084      	movs	r0, #132	; 0x84
 80011c8:	f000 f8b0 	bl	800132c <_ExpanderWR>
 80011cc:	60f8      	str	r0, [r7, #12]
        break;
 80011ce:	e03c      	b.n	800124a <XNUCLEO53L0A1_ResetId+0xd6>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011dc:	705a      	strb	r2, [r3, #1]
        if( state )
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <XNUCLEO53L0A1_ResetId+0x7e>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 80011f0:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80011f2:	2301      	movs	r3, #1
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <XNUCLEO53L0A1_ResetId+0x104>)
 80011f6:	2113      	movs	r1, #19
 80011f8:	2086      	movs	r0, #134	; 0x86
 80011fa:	f000 f897 	bl	800132c <_ExpanderWR>
 80011fe:	60f8      	str	r0, [r7, #12]
        break;
 8001200:	e023      	b.n	800124a <XNUCLEO53L0A1_ResetId+0xd6>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 800120e:	705a      	strb	r2, [r3, #1]
        if( state )
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <XNUCLEO53L0A1_ResetId+0xb0>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001222:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001224:	2301      	movs	r3, #1
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <XNUCLEO53L0A1_ResetId+0x104>)
 8001228:	2113      	movs	r1, #19
 800122a:	2086      	movs	r0, #134	; 0x86
 800122c:	f000 f87e 	bl	800132c <_ExpanderWR>
 8001230:	60f8      	str	r0, [r7, #12]
        break;
 8001232:	e00a      	b.n	800124a <XNUCLEO53L0A1_ResetId+0xd6>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <XNUCLEO53L0A1_ResetId+0x108>)
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <XNUCLEO53L0A1_ResetId+0x10c>)
 800123e:	f000 f94f 	bl	80014e0 <uart_printf>
        status = -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	60fb      	str	r3, [r7, #12]
        goto done;
 8001248:	e00d      	b.n	8001266 <XNUCLEO53L0A1_ResetId+0xf2>
    }
//error with valid id
    if( status ){
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <XNUCLEO53L0A1_ResetId+0xf0>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <XNUCLEO53L0A1_ResetId+0x108>)
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <XNUCLEO53L0A1_ResetId+0x110>)
 800125e:	f000 f93f 	bl	80014e0 <uart_printf>
 8001262:	e000      	b.n	8001266 <XNUCLEO53L0A1_ResetId+0xf2>
    }
done:
 8001264:	bf00      	nop
    return status;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000082c 	.word	0x2000082c
 8001274:	2000082f 	.word	0x2000082f
 8001278:	2000082d 	.word	0x2000082d
 800127c:	0800ccf0 	.word	0x0800ccf0
 8001280:	0800ca90 	.word	0x0800ca90
 8001284:	0800cb50 	.word	0x0800cb50

08001288 <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 800128e:	2302      	movs	r3, #2
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <_ExpandersSetAllIO+0x38>)
 8001292:	2112      	movs	r1, #18
 8001294:	2086      	movs	r0, #134	; 0x86
 8001296:	f000 f849 	bl	800132c <_ExpanderWR>
 800129a:	6078      	str	r0, [r7, #4]
    if( status ){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80012a2:	2302      	movs	r3, #2
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <_ExpandersSetAllIO+0x3c>)
 80012a6:	2112      	movs	r1, #18
 80012a8:	2084      	movs	r0, #132	; 0x84
 80012aa:	f000 f83f 	bl	800132c <_ExpanderWR>
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	e000      	b.n	80012b4 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 80012b2:	bf00      	nop
done_err:
    return status;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000082c 	.word	0x2000082c
 80012c4:	2000082e 	.word	0x2000082e

080012c8 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	b299      	uxth	r1, r3
 80012e0:	f107 0213 	add.w	r2, r7, #19
 80012e4:	2364      	movs	r3, #100	; 0x64
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	480f      	ldr	r0, [pc, #60]	; (8001328 <_ExpanderRd+0x60>)
 80012ec:	f005 fdfc 	bl	8006ee8 <HAL_I2C_Master_Transmit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]
        if (status)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d110      	bne.n	800131c <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b299      	uxth	r1, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b298      	uxth	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4603      	mov	r3, r0
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <_ExpanderRd+0x60>)
 8001312:	f005 fee9 	bl	80070e8 <HAL_I2C_Master_Receive>
 8001316:	4603      	mov	r3, r0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e000      	b.n	800131e <_ExpanderRd+0x56>
            break;
 800131c:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 800131e:	697b      	ldr	r3, [r7, #20]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000954 	.word	0x20000954

0800132c <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af02      	add	r7, sp, #8
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	3301      	adds	r3, #1
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f00a ff32 	bl	800c1b4 <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	b299      	uxth	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	3301      	adds	r3, #1
 800135a:	b298      	uxth	r0, r3
 800135c:	f107 0214 	add.w	r2, r7, #20
 8001360:	2364      	movs	r3, #100	; 0x64
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	4603      	mov	r3, r0
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <_ExpanderWR+0x50>)
 8001368:	f005 fdbe 	bl	8006ee8 <HAL_I2C_Master_Transmit>
 800136c:	4603      	mov	r3, r0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001372:	4618      	mov	r0, r3
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000954 	.word	0x20000954

08001380 <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e027      	b.n	80013de <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a6:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	217f      	movs	r1, #127	; 0x7f
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	43d2      	mvns	r2, r2
 80013c0:	4013      	ands	r3, r2
 80013c2:	4a20      	ldr	r2, [pc, #128]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80013c4:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	6939      	ldr	r1, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80013d6:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	dc17      	bgt.n	8001414 <XNUCLEO53L0A1_SetDisplayString+0x94>
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1ce      	bne.n	800138e <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 80013f0:	e010      	b.n	8001414 <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	217f      	movs	r1, #127	; 0x7f
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4313      	orrs	r3, r2
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800140c:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b03      	cmp	r3, #3
 8001418:	ddeb      	ble.n	80013f2 <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 800141a:	f7ff ff35 	bl	8001288 <_ExpandersSetAllIO>
 800141e:	60b8      	str	r0, [r7, #8]
    if( status ){
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 8001426:	f240 320f 	movw	r2, #783	; 0x30f
 800142a:	4907      	ldr	r1, [pc, #28]	; (8001448 <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 800142e:	f000 f857 	bl	80014e0 <uart_printf>
    }
    return status;
 8001432:	68bb      	ldr	r3, [r7, #8]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800cb8c 	.word	0x0800cb8c
 8001440:	20000000 	.word	0x20000000
 8001444:	2000082c 	.word	0x2000082c
 8001448:	0800cd08 	.word	0x0800cd08
 800144c:	0800cc8c 	.word	0x0800cc8c

08001450 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_UART_TxCpltCallback+0x18>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000830 	.word	0x20000830

0800146c <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8001476:	e000      	b.n	800147a <uart_vprintf+0xe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001478:	bf30      	wfi
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <uart_vprintf+0x64>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1fa      	bne.n	8001478 <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <uart_vprintf+0x64>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <uart_vprintf+0x64>)
 800148c:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <uart_vprintf+0x68>)
 8001498:	f00a fef4 	bl	800c284 <vsniprintf>
 800149c:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	490b      	ldr	r1, [pc, #44]	; (80014d4 <uart_vprintf+0x68>)
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <uart_vprintf+0x6c>)
 80014a8:	f008 f9ee 	bl	8009888 <HAL_UART_Transmit_DMA>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60bb      	str	r3, [r7, #8]
    if( status ){
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <uart_vprintf+0x5a>
        UartErrCnt++;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <uart_vprintf+0x70>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <uart_vprintf+0x70>)
 80014be:	6013      	str	r3, [r2, #0]
        InUsed=0;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <uart_vprintf+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    }
    return n;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000830 	.word	0x20000830
 80014d4:	20000834 	.word	0x20000834
 80014d8:	200009e8 	.word	0x200009e8
 80014dc:	20000934 	.word	0x20000934

080014e0 <uart_printf>:

int uart_printf(const char *msg, ...){
 80014e0:	b40f      	push	{r0, r1, r2, r3}
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 80014e8:	e000      	b.n	80014ec <uart_printf+0xc>
 80014ea:	bf30      	wfi
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <uart_printf+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1fa      	bne.n	80014ea <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	6938      	ldr	r0, [r7, #16]
 80014fe:	f7ff ffb5 	bl	800146c <uart_vprintf>
 8001502:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001510:	b004      	add	sp, #16
 8001512:	4770      	bx	lr
 8001514:	20000830 	.word	0x20000830

08001518 <DMA1_Channel7_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA1_Channel7_IRQHandler+0x10>)
 800151e:	f005 f981 	bl	8006824 <HAL_DMA_IRQHandler>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200009a0 	.word	0x200009a0

0800152c <MX_DMA_Init>:
#endif
/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_DMA_Init+0x38>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <MX_DMA_Init+0x38>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6493      	str	r3, [r2, #72]	; 0x48
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_DMA_Init+0x38>)
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
#if VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
#endif
#if VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2011      	movs	r0, #17
 8001550:	f004 ffa9 	bl	80064a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001554:	2011      	movs	r0, #17
 8001556:	f004 ffc2 	bl	80064de <HAL_NVIC_EnableIRQ>
#endif

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <XNUCLEO53L0A1_USART2_UART_Init>:

/* USART2 init function */
void XNUCLEO53L0A1_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  MX_DMA_Init();
 800156c:	f7ff ffde 	bl	800152c <MX_DMA_Init>
  huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <XNUCLEO53L0A1_USART2_UART_Init+0x54>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART2_BAUD_RATE;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 80015b0:	f008 f918 	bl	80097e4 <HAL_UART_Init>

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200009e8 	.word	0x200009e8
 80015bc:	40004400 	.word	0x40004400

080015c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_UART_MspInit+0xac>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d148      	bne.n	8001664 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_UART_MspInit+0xb0>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_UART_MspInit+0xb0>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_UART_MspInit+0xb0>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ea:	230c      	movs	r3, #12
 80015ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fa:	2307      	movs	r3, #7
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f005 f9e8 	bl	80069dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <HAL_UART_MspInit+0xb8>)
 8001610:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001614:	2202      	movs	r2, #2
 8001616:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800161a:	2210      	movs	r2, #16
 800161c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_tx);
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001644:	f004 ff8e 	bl	8006564 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800164c:	661a      	str	r2, [r3, #96]	; 0x60
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif

    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2026      	movs	r0, #38	; 0x26
 800165a:	f004 ff24 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800165e:	2026      	movs	r0, #38	; 0x26
 8001660:	f004 ff3d 	bl	80064de <HAL_NVIC_EnableIRQ>

  }
/* USER CODE BEGIN USART2_MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004400 	.word	0x40004400
 8001670:	40021000 	.word	0x40021000
 8001674:	200009a0 	.word	0x200009a0
 8001678:	40020080 	.word	0x40020080

0800167c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <USART2_IRQHandler+0x10>)
 8001682:	f008 f96f 	bl	8009964 <HAL_UART_IRQHandler>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200009e8 	.word	0x200009e8

08001690 <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	2b80      	cmp	r3, #128	; 0x80
 800169e:	d00b      	beq.n	80016b8 <HAL_GPIO_EXTI_Callback+0x28>
 80016a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a4:	d00e      	beq.n	80016c4 <HAL_GPIO_EXTI_Callback+0x34>
 80016a6:	2b10      	cmp	r3, #16
 80016a8:	d000      	beq.n	80016ac <HAL_GPIO_EXTI_Callback+0x1c>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 80016aa:	e011      	b.n	80016d0 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4619      	mov	r1, r3
 80016b0:	2001      	movs	r0, #1
 80016b2:	f009 fde5 	bl	800b280 <VL53L0A1_EXTI_Callback>
        break;
 80016b6:	e00b      	b.n	80016d0 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2000      	movs	r0, #0
 80016be:	f009 fddf 	bl	800b280 <VL53L0A1_EXTI_Callback>
        break;
 80016c2:	e005      	b.n	80016d0 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2002      	movs	r0, #2
 80016ca:	f009 fdd9 	bl	800b280 <VL53L0A1_EXTI_Callback>
        break;
 80016ce:	bf00      	nop
    }
#endif
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 80016dc:	2010      	movs	r0, #16
 80016de:	f005 fb57 	bl	8006d90 <HAL_GPIO_EXTI_IRQHandler>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 80016ea:	2080      	movs	r0, #128	; 0x80
 80016ec:	f005 fb50 	bl	8006d90 <HAL_GPIO_EXTI_IRQHandler>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 80016f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016fc:	f005 fb48 	bl	8006d90 <HAL_GPIO_EXTI_IRQHandler>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	330a      	adds	r3, #10
 8001714:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001722:	b299      	uxth	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f005 fbda 	bl	8006ee8 <HAL_I2C_Master_Transmit>
 8001734:	4603      	mov	r3, r0
 8001736:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8001738:	693b      	ldr	r3, [r7, #16]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001742:	b580      	push	{r7, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	af02      	add	r7, sp, #8
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	330a      	adds	r3, #10
 8001752:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	b299      	uxth	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	b29a      	uxth	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f005 fcb8 	bl	80070e8 <HAL_I2C_Master_Receive>
 8001778:	4603      	mov	r3, r0
 800177a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800177c:	693b      	ldr	r3, [r7, #16]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	460b      	mov	r3, r1
 8001796:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b3f      	cmp	r3, #63	; 0x3f
 80017a0:	d902      	bls.n	80017a8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80017a2:	f06f 0303 	mvn.w	r3, #3
 80017a6:	e016      	b.n	80017d6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <VL53L0X_WriteMulti+0x58>)
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <VL53L0X_WriteMulti+0x5c>)
 80017b4:	f00a fcfe 	bl	800c1b4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	461a      	mov	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <VL53L0X_WriteMulti+0x58>)
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff ff9f 	bl	8001704 <_I2CWrite>
 80017c6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80017ce:	23ec      	movs	r3, #236	; 0xec
 80017d0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80017d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000a58 	.word	0x20000a58
 80017e4:	20000a59 	.word	0x20000a59

080017e8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	460b      	mov	r3, r1
 80017f6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80017fc:	f107 030b 	add.w	r3, r7, #11
 8001800:	2201      	movs	r2, #1
 8001802:	4619      	mov	r1, r3
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff ff7d 	bl	8001704 <_I2CWrite>
 800180a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001812:	23ec      	movs	r3, #236	; 0xec
 8001814:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001816:	e00c      	b.n	8001832 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff ff90 	bl	8001742 <_I2CRead>
 8001822:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800182a:	23ec      	movs	r3, #236	; 0xec
 800182c:	75fb      	strb	r3, [r7, #23]
 800182e:	e000      	b.n	8001832 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8001830:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8001832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
 800184c:	4613      	mov	r3, r2
 800184e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <VL53L0X_WrByte+0x44>)
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <VL53L0X_WrByte+0x44>)
 800185c:	78bb      	ldrb	r3, [r7, #2]
 800185e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001860:	2202      	movs	r2, #2
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <VL53L0X_WrByte+0x44>)
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff4d 	bl	8001704 <_I2CWrite>
 800186a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001872:	23ec      	movs	r3, #236	; 0xec
 8001874:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000a58 	.word	0x20000a58

08001888 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
 8001894:	4613      	mov	r3, r2
 8001896:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <VL53L0X_WrWord+0x50>)
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <VL53L0X_WrWord+0x50>)
 80018ac:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <VL53L0X_WrWord+0x50>)
 80018b4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80018b6:	2203      	movs	r2, #3
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <VL53L0X_WrWord+0x50>)
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff22 	bl	8001704 <_I2CWrite>
 80018c0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80018c8:	23ec      	movs	r3, #236	; 0xec
 80018ca:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80018cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000a58 	.word	0x20000a58

080018dc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	70fb      	strb	r3, [r7, #3]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70bb      	strb	r3, [r7, #2]
 80018f2:	4613      	mov	r3, r2
 80018f4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80018fa:	f107 020e 	add.w	r2, r7, #14
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f81e 	bl	8001944 <VL53L0X_RdByte>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d110      	bne.n	8001936 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8001914:	7bba      	ldrb	r2, [r7, #14]
 8001916:	78bb      	ldrb	r3, [r7, #2]
 8001918:	4013      	ands	r3, r2
 800191a:	b2da      	uxtb	r2, r3
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	4313      	orrs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8001924:	7bba      	ldrb	r2, [r7, #14]
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff88 	bl	8001840 <VL53L0X_WrByte>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e000      	b.n	8001938 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8001936:	bf00      	nop
done:
    return Status;
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	460b      	mov	r3, r1
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001956:	f107 030b 	add.w	r3, r7, #11
 800195a:	2201      	movs	r2, #1
 800195c:	4619      	mov	r1, r3
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff fed0 	bl	8001704 <_I2CWrite>
 8001964:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800196c:	23ec      	movs	r3, #236	; 0xec
 800196e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001970:	e00c      	b.n	800198c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7ff fee3 	bl	8001742 <_I2CRead>
 800197c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001984:	23ec      	movs	r3, #236	; 0xec
 8001986:	75fb      	strb	r3, [r7, #23]
 8001988:	e000      	b.n	800198c <VL53L0X_RdByte+0x48>
    }
done:
 800198a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800198c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	460b      	mov	r3, r1
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80019aa:	f107 030b 	add.w	r3, r7, #11
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff fea6 	bl	8001704 <_I2CWrite>
 80019b8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019c0:	23ec      	movs	r3, #236	; 0xec
 80019c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80019c4:	e017      	b.n	80019f6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80019c6:	2202      	movs	r2, #2
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <VL53L0X_RdWord+0x6c>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff feb9 	bl	8001742 <_I2CRead>
 80019d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019d8:	23ec      	movs	r3, #236	; 0xec
 80019da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80019dc:	e00b      	b.n	80019f6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <VL53L0X_RdWord+0x6c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <VL53L0X_RdWord+0x6c>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80019f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000a58 	.word	0x20000a58

08001a08 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	460b      	mov	r3, r1
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001a1a:	f107 030b 	add.w	r3, r7, #11
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4619      	mov	r1, r3
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fe6e 	bl	8001704 <_I2CWrite>
 8001a28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a30:	23ec      	movs	r3, #236	; 0xec
 8001a32:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001a34:	e01b      	b.n	8001a6e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8001a36:	2204      	movs	r2, #4
 8001a38:	4910      	ldr	r1, [pc, #64]	; (8001a7c <VL53L0X_RdDWord+0x74>)
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fe81 	bl	8001742 <_I2CRead>
 8001a40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a48:	23ec      	movs	r3, #236	; 0xec
 8001a4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001a4c:	e00f      	b.n	8001a6e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <VL53L0X_RdDWord+0x74>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	061a      	lsls	r2, r3, #24
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <VL53L0X_RdDWord+0x74>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	441a      	add	r2, r3
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <VL53L0X_RdDWord+0x74>)
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	4413      	add	r3, r2
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <VL53L0X_RdDWord+0x74>)
 8001a66:	78d2      	ldrb	r2, [r2, #3]
 8001a68:	441a      	add	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000a58 	.word	0x20000a58

08001a80 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f004 fc21 	bl	80062d4 <HAL_Delay>
    return status;
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f001 fcbb 	bl	800342a <VL53L0X_get_offset_calibration_data_micro_meter>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	218a      	movs	r1, #138	; 0x8a
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff feae 	bl	8001840 <VL53L0X_WrByte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b096      	sub	sp, #88	; 0x58
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001b02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2188      	movs	r1, #136	; 0x88
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fe96 	bl	8001840 <VL53L0X_WrByte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b28:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b32:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a9e      	ldr	r2, [pc, #632]	; (8001db4 <VL53L0X_DataInit+0x2c0>)
 8001b3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a9d      	ldr	r2, [pc, #628]	; (8001db8 <VL53L0X_DataInit+0x2c4>)
 8001b42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fab4 	bl	80020c0 <VL53L0X_GetDeviceParameters>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001b5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d112      	bne.n	8001b8c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f103 0410 	add.w	r4, r3, #16
 8001b74:	f107 0510 	add.w	r5, r7, #16
 8001b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2264      	movs	r2, #100	; 0x64
 8001b90:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001b9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ba4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001bae:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe3e 	bl	8001840 <VL53L0X_WrByte>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	21ff      	movs	r1, #255	; 0xff
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe32 	bl	8001840 <VL53L0X_WrByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fe26 	bl	8001840 <VL53L0X_WrByte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001c02:	f107 030f 	add.w	r3, r7, #15
 8001c06:	461a      	mov	r2, r3
 8001c08:	2191      	movs	r1, #145	; 0x91
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe9a 	bl	8001944 <VL53L0X_RdByte>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe08 	bl	8001840 <VL53L0X_WrByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	21ff      	movs	r1, #255	; 0xff
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fdfc 	bl	8001840 <VL53L0X_WrByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fdf0 	bl	8001840 <VL53L0X_WrByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	653b      	str	r3, [r7, #80]	; 0x50
 8001c72:	e014      	b.n	8001c9e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8001c74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d114      	bne.n	8001ca6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2201      	movs	r2, #1
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fd29 	bl	80026dc <VL53L0X_SetLimitCheckEnable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8001c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	dde7      	ble.n	8001c74 <VL53L0X_DataInit+0x180>
 8001ca4:	e000      	b.n	8001ca8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8001ca6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001ca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fd11 	bl	80026dc <VL53L0X_SetLimitCheckEnable>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001cc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2103      	movs	r1, #3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fd05 	bl	80026dc <VL53L0X_SetLimitCheckEnable>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001cd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fcf9 	bl	80026dc <VL53L0X_SetLimitCheckEnable>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001cf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fced 	bl	80026dc <VL53L0X_SetLimitCheckEnable>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001d08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d108      	bne.n	8001d22 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001d10:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001d14:	2100      	movs	r1, #0
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fd8e 	bl	8002838 <VL53L0X_SetLimitCheckValue>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001d22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	2101      	movs	r1, #1
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fd81 	bl	8002838 <VL53L0X_SetLimitCheckValue>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001d3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d108      	bne.n	8001d56 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001d44:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fd74 	bl	8002838 <VL53L0X_SetLimitCheckValue>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2103      	movs	r1, #3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fd68 	bl	8002838 <VL53L0X_SetLimitCheckValue>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001d6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	22ff      	movs	r2, #255	; 0xff
 8001d7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	2101      	movs	r1, #1
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fd5c 	bl	8001840 <VL53L0X_WrByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001d96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8001da6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3758      	adds	r7, #88	; 0x58
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	00016b85 	.word	0x00016b85
 8001db8:	000970a4 	.word	0x000970a4

08001dbc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b09e      	sub	sp, #120	; 0x78
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00a f9f9 	bl	800c1ca <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f002 fa55 	bl	80042aa <VL53L0X_get_info_from_device>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d80d      	bhi.n	8001e3c <VL53L0X_StaticInit+0x80>
 8001e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8001e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d806      	bhi.n	8001e3c <VL53L0X_StaticInit+0x80>
 8001e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d90b      	bls.n	8001e54 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001e3c:	f107 0218 	add.w	r2, r7, #24
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f001 fce9 	bl	800381e <VL53L0X_perform_ref_spad_management>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e52:	e009      	b.n	8001e68 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f001 feea 	bl	8003c36 <VL53L0X_set_reference_spads>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8001e68:	4b94      	ldr	r3, [pc, #592]	; (80020bc <VL53L0X_StaticInit+0x300>)
 8001e6a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001e6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10f      	bne.n	8001e94 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e8e:	e001      	b.n	8001e94 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001e90:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <VL53L0X_StaticInit+0x300>)
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001e94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001e9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f003 fb1e 	bl	80054e0 <VL53L0X_load_tuning_settings>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8001eaa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10a      	bne.n	8001ec8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 f8e3 	bl	8003088 <VL53L0X_SetGpioConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ec8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d121      	bne.n	8001f14 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	21ff      	movs	r1, #255	; 0xff
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fcb3 	bl	8001840 <VL53L0X_WrByte>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001ee0:	f107 031a 	add.w	r3, r7, #26
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2184      	movs	r1, #132	; 0x84
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd55 	bl	8001998 <VL53L0X_RdWord>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001efc:	2200      	movs	r2, #0
 8001efe:	21ff      	movs	r1, #255	; 0xff
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fc9d 	bl	8001840 <VL53L0X_WrByte>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001f14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001f28:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8c2 	bl	80020c0 <VL53L0X_GetDeviceParameters>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8001f42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d110      	bne.n	8001f6c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001f4a:	f107 0319 	add.w	r3, r7, #25
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f99f 	bl	8002294 <VL53L0X_GetFractionEnable>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001f5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001f64:	7e7a      	ldrb	r2, [r7, #25]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001f6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10e      	bne.n	8001f92 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0410 	add.w	r4, r3, #16
 8001f7a:	f107 051c 	add.w	r5, r7, #28
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001f92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d111      	bne.n	8001fbe <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8001f9a:	f107 0319 	add.w	r3, r7, #25
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fcce 	bl	8001944 <VL53L0X_RdByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001fae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001fb6:	7e7a      	ldrb	r2, [r7, #25]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9be 	bl	800234c <VL53L0X_SetSequenceStepEnable>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9b2 	bl	800234c <VL53L0X_SetSequenceStepEnable>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001fee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001ffe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002006:	f107 0313 	add.w	r3, r7, #19
 800200a:	461a      	mov	r2, r3
 800200c:	2100      	movs	r1, #0
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f985 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800201a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002022:	7cfa      	ldrb	r2, [r7, #19]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800202a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002032:	f107 0313 	add.w	r3, r7, #19
 8002036:	461a      	mov	r2, r3
 8002038:	2101      	movs	r1, #1
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f96f 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8002040:	4603      	mov	r3, r0
 8002042:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002046:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800204e:	7cfa      	ldrb	r2, [r7, #19]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002056:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	461a      	mov	r2, r3
 8002064:	2103      	movs	r1, #3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f002 fe9e 	bl	8004da8 <get_sequence_step_timeout>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002072:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002082:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	461a      	mov	r2, r3
 8002090:	2104      	movs	r1, #4
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f002 fe88 	bl	8004da8 <get_sequence_step_timeout>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800209e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3770      	adds	r7, #112	; 0x70
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000010 	.word	0x20000010

080020c0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8cc 	bl	8002270 <VL53L0X_GetDeviceMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3308      	adds	r3, #8
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa7a 	bl	80025e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3310      	adds	r3, #16
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 faaf 	bl	8002674 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fcb8 	bl	8001a9e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d134      	bne.n	80021a4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	e02a      	b.n	8002196 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d12a      	bne.n	800219e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	b299      	uxth	r1, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3308      	adds	r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	461a      	mov	r2, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fbce 	bl	80028fc <VL53L0X_GetLimitCheckValue>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	4313      	orrs	r3, r2
 8002168:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d117      	bne.n	80021a2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	b299      	uxth	r1, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3318      	adds	r3, #24
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	461a      	mov	r2, r3
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fb37 	bl	80027f4 <VL53L0X_GetLimitCheckEnable>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4313      	orrs	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3301      	adds	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	ddd1      	ble.n	8002140 <VL53L0X_GetDeviceParameters+0x80>
 800219c:	e002      	b.n	80021a4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80021a2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fc30 	bl	8002a18 <VL53L0X_GetWrapAroundCheckEnable>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f894 	bl	80022f8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	2b15      	cmp	r3, #21
 80021f4:	d832      	bhi.n	800225c <VL53L0X_SetDeviceMode+0x7c>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <VL53L0X_SetDeviceMode+0x1c>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002255 	.word	0x08002255
 8002200:	08002255 	.word	0x08002255
 8002204:	0800225d 	.word	0x0800225d
 8002208:	08002255 	.word	0x08002255
 800220c:	0800225d 	.word	0x0800225d
 8002210:	0800225d 	.word	0x0800225d
 8002214:	0800225d 	.word	0x0800225d
 8002218:	0800225d 	.word	0x0800225d
 800221c:	0800225d 	.word	0x0800225d
 8002220:	0800225d 	.word	0x0800225d
 8002224:	0800225d 	.word	0x0800225d
 8002228:	0800225d 	.word	0x0800225d
 800222c:	0800225d 	.word	0x0800225d
 8002230:	0800225d 	.word	0x0800225d
 8002234:	0800225d 	.word	0x0800225d
 8002238:	0800225d 	.word	0x0800225d
 800223c:	0800225d 	.word	0x0800225d
 8002240:	0800225d 	.word	0x0800225d
 8002244:	0800225d 	.word	0x0800225d
 8002248:	0800225d 	.word	0x0800225d
 800224c:	08002255 	.word	0x08002255
 8002250:	08002255 	.word	0x08002255
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	741a      	strb	r2, [r3, #16]
		break;
 800225a:	e001      	b.n	8002260 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800225c:	23f8      	movs	r3, #248	; 0xf8
 800225e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7c1a      	ldrb	r2, [r3, #16]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	2109      	movs	r1, #9
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fb4c 	bl	8001944 <VL53L0X_RdByte>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f002 ff6a 	bl	80051bc <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80022ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f003 f837 	bl	800537c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	460b      	mov	r3, r1
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4619      	mov	r1, r3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f002 ff09 	bl	800514e <VL53L0X_get_vcsel_pulse_period>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002340:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
 8002358:	4613      	mov	r3, r2
 800235a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800235c:	2300      	movs	r3, #0
 800235e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002368:	f107 030f 	add.w	r3, r7, #15
 800236c:	461a      	mov	r2, r3
 800236e:	2101      	movs	r1, #1
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fae7 	bl	8001944 <VL53L0X_RdByte>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d15a      	bne.n	800243c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8002386:	78bb      	ldrb	r3, [r7, #2]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d12b      	bne.n	80023e4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d825      	bhi.n	80023de <VL53L0X_SetSequenceStepEnable+0x92>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023ad 	.word	0x080023ad
 800239c:	080023b7 	.word	0x080023b7
 80023a0:	080023c1 	.word	0x080023c1
 80023a4:	080023cb 	.word	0x080023cb
 80023a8:	080023d5 	.word	0x080023d5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80023ac:	7dbb      	ldrb	r3, [r7, #22]
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	75bb      	strb	r3, [r7, #22]
				break;
 80023b4:	e043      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80023b6:	7dbb      	ldrb	r3, [r7, #22]
 80023b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80023bc:	75bb      	strb	r3, [r7, #22]
				break;
 80023be:	e03e      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80023c0:	7dbb      	ldrb	r3, [r7, #22]
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	75bb      	strb	r3, [r7, #22]
				break;
 80023c8:	e039      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80023ca:	7dbb      	ldrb	r3, [r7, #22]
 80023cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d0:	75bb      	strb	r3, [r7, #22]
				break;
 80023d2:	e034      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80023d4:	7dbb      	ldrb	r3, [r7, #22]
 80023d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023da:	75bb      	strb	r3, [r7, #22]
				break;
 80023dc:	e02f      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80023de:	23fc      	movs	r3, #252	; 0xfc
 80023e0:	75fb      	strb	r3, [r7, #23]
 80023e2:	e02c      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d825      	bhi.n	8002436 <VL53L0X_SetSequenceStepEnable+0xea>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002405 	.word	0x08002405
 80023f4:	0800240f 	.word	0x0800240f
 80023f8:	08002419 	.word	0x08002419
 80023fc:	08002423 	.word	0x08002423
 8002400:	0800242d 	.word	0x0800242d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002404:	7dbb      	ldrb	r3, [r7, #22]
 8002406:	f023 0310 	bic.w	r3, r3, #16
 800240a:	75bb      	strb	r3, [r7, #22]
				break;
 800240c:	e017      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800240e:	7dbb      	ldrb	r3, [r7, #22]
 8002410:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002414:	75bb      	strb	r3, [r7, #22]
				break;
 8002416:	e012      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002418:	7dbb      	ldrb	r3, [r7, #22]
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	75bb      	strb	r3, [r7, #22]
				break;
 8002420:	e00d      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002422:	7dbb      	ldrb	r3, [r7, #22]
 8002424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002428:	75bb      	strb	r3, [r7, #22]
				break;
 800242a:	e008      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800242c:	7dbb      	ldrb	r3, [r7, #22]
 800242e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002432:	75bb      	strb	r3, [r7, #22]
				break;
 8002434:	e003      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002436:	23fc      	movs	r3, #252	; 0xfc
 8002438:	75fb      	strb	r3, [r7, #23]
 800243a:	e000      	b.n	800243e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800243c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	7dba      	ldrb	r2, [r7, #22]
 8002442:	429a      	cmp	r2, r3
 8002444:	d01e      	beq.n	8002484 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800244e:	7dbb      	ldrb	r3, [r7, #22]
 8002450:	461a      	mov	r2, r3
 8002452:	2101      	movs	r1, #1
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff f9f3 	bl	8001840 <VL53L0X_WrByte>
 800245a:	4603      	mov	r3, r0
 800245c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800245e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7dba      	ldrb	r2, [r7, #22]
 800246a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800246e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff27 	bl	80022d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8002484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	72fb      	strb	r3, [r7, #11]
 800249e:	4613      	mov	r3, r2
 80024a0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d836      	bhi.n	8002520 <sequence_step_enabled+0x90>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <sequence_step_enabled+0x28>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024cd 	.word	0x080024cd
 80024bc:	080024df 	.word	0x080024df
 80024c0:	080024f1 	.word	0x080024f1
 80024c4:	08002503 	.word	0x08002503
 80024c8:	08002515 	.word	0x08002515
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80024cc:	7abb      	ldrb	r3, [r7, #10]
 80024ce:	111b      	asrs	r3, r3, #4
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	701a      	strb	r2, [r3, #0]
		break;
 80024dc:	e022      	b.n	8002524 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80024de:	7abb      	ldrb	r3, [r7, #10]
 80024e0:	10db      	asrs	r3, r3, #3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	701a      	strb	r2, [r3, #0]
		break;
 80024ee:	e019      	b.n	8002524 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80024f0:	7abb      	ldrb	r3, [r7, #10]
 80024f2:	109b      	asrs	r3, r3, #2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	701a      	strb	r2, [r3, #0]
		break;
 8002500:	e010      	b.n	8002524 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002502:	7abb      	ldrb	r3, [r7, #10]
 8002504:	119b      	asrs	r3, r3, #6
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	701a      	strb	r2, [r3, #0]
		break;
 8002512:	e007      	b.n	8002524 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002514:	7abb      	ldrb	r3, [r7, #10]
 8002516:	09db      	lsrs	r3, r3, #7
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	701a      	strb	r2, [r3, #0]
		break;
 800251e:	e001      	b.n	8002524 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002520:	23fc      	movs	r3, #252	; 0xfc
 8002522:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002524:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002546:	f107 030e 	add.w	r3, r7, #14
 800254a:	461a      	mov	r2, r3
 800254c:	2101      	movs	r1, #1
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff f9f8 	bl	8001944 <VL53L0X_RdByte>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8002560:	7bba      	ldrb	r2, [r7, #14]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff92 	bl	8002490 <sequence_step_enabled>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002578:	7bba      	ldrb	r2, [r7, #14]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	3302      	adds	r3, #2
 800257e:	2101      	movs	r1, #1
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff85 	bl	8002490 <sequence_step_enabled>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d108      	bne.n	80025a4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8002592:	7bba      	ldrb	r2, [r7, #14]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	2102      	movs	r1, #2
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff78 	bl	8002490 <sequence_step_enabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d108      	bne.n	80025be <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80025ac:	7bba      	ldrb	r2, [r7, #14]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3303      	adds	r3, #3
 80025b2:	2103      	movs	r1, #3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff6b 	bl	8002490 <sequence_step_enabled>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80025c6:	7bba      	ldrb	r2, [r7, #14]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	3304      	adds	r3, #4
 80025cc:	2104      	movs	r1, #4
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff5e 	bl	8002490 <sequence_step_enabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	461a      	mov	r2, r3
 80025f8:	21f8      	movs	r1, #248	; 0xf8
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff f9cc 	bl	8001998 <VL53L0X_RdWord>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d108      	bne.n	800261e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	461a      	mov	r2, r3
 8002612:	2104      	movs	r1, #4
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff f9f7 	bl	8001a08 <VL53L0X_RdDWord>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800261e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8002626:	89bb      	ldrh	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	89ba      	ldrh	r2, [r7, #12]
 8002630:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7f1b      	ldrb	r3, [r3, #28]
 800265e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7bba      	ldrb	r2, [r7, #14]
 8002664:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8002682:	f107 030e 	add.w	r3, r7, #14
 8002686:	461a      	mov	r2, r3
 8002688:	2120      	movs	r1, #32
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff f984 	bl	8001998 <VL53L0X_RdWord>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d118      	bne.n	80026ce <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
 80026b4:	e00b      	b.n	80026ce <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d902      	bls.n	8002708 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002702:	23fc      	movs	r3, #252	; 0xfc
 8002704:	75fb      	strb	r3, [r7, #23]
 8002706:	e05b      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	73bb      	strb	r3, [r7, #14]
 800271a:	e00a      	b.n	8002732 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	330c      	adds	r3, #12
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d841      	bhi.n	80027bc <VL53L0X_SetLimitCheckEnable+0xe0>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <VL53L0X_SetLimitCheckEnable+0x64>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002759 	.word	0x08002759
 8002744:	08002763 	.word	0x08002763
 8002748:	08002779 	.word	0x08002779
 800274c:	08002783 	.word	0x08002783
 8002750:	0800278d 	.word	0x0800278d
 8002754:	080027a5 	.word	0x080027a5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002760:	e02e      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	2144      	movs	r1, #68	; 0x44
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff f88b 	bl	8001888 <VL53L0X_WrWord>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]

			break;
 8002776:	e023      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002780:	e01e      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800278a:	e019      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800278c:	7bbb      	ldrb	r3, [r7, #14]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	22fe      	movs	r2, #254	; 0xfe
 8002796:	2160      	movs	r1, #96	; 0x60
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff f89f 	bl	80018dc <VL53L0X_UpdateByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80027a2:	e00d      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	22ef      	movs	r2, #239	; 0xef
 80027ae:	2160      	movs	r1, #96	; 0x60
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff f893 	bl	80018dc <VL53L0X_UpdateByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80027ba:	e001      	b.n	80027c0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80027bc:	23fc      	movs	r3, #252	; 0xfc
 80027be:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80027c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80027da:	e005      	b.n	80027e8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	460b      	mov	r3, r1
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d905      	bls.n	8002818 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800280c:	23fc      	movs	r3, #252	; 0xfc
 800280e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e008      	b.n	800282a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002822:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7dba      	ldrb	r2, [r7, #22]
 8002828:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800282a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800282e:	4618      	mov	r0, r3
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	460b      	mov	r3, r1
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002854:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002856:	7dbb      	ldrb	r3, [r7, #22]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800285c:	897b      	ldrh	r3, [r7, #10]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	330c      	adds	r3, #12
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	e040      	b.n	80028ee <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d830      	bhi.n	80028d4 <VL53L0X_SetLimitCheckValue+0x9c>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <VL53L0X_SetLimitCheckValue+0x40>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002891 	.word	0x08002891
 800287c:	08002899 	.word	0x08002899
 8002880:	080028af 	.word	0x080028af
 8002884:	080028b7 	.word	0x080028b7
 8002888:	080028bf 	.word	0x080028bf
 800288c:	080028bf 	.word	0x080028bf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002896:	e01f      	b.n	80028d8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	2144      	movs	r1, #68	; 0x44
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7fe fff0 	bl	8001888 <VL53L0X_WrWord>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80028ac:	e014      	b.n	80028d8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80028b4:	e010      	b.n	80028d8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80028bc:	e00c      	b.n	80028d8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7fe ffdd 	bl	8001888 <VL53L0X_WrWord>
 80028ce:	4603      	mov	r3, r0
 80028d0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80028d2:	e001      	b.n	80028d8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80028d4:	23fc      	movs	r3, #252	; 0xfc
 80028d6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80028d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80028e0:	897b      	ldrh	r3, [r7, #10]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	330c      	adds	r3, #12
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80028ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop

080028fc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	460b      	mov	r3, r1
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d847      	bhi.n	80029a8 <VL53L0X_GetLimitCheckValue+0xac>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <VL53L0X_GetLimitCheckValue+0x24>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002939 	.word	0x08002939
 8002924:	08002945 	.word	0x08002945
 8002928:	0800296b 	.word	0x0800296b
 800292c:	08002977 	.word	0x08002977
 8002930:	08002983 	.word	0x08002983
 8002934:	08002983 	.word	0x08002983

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	77bb      	strb	r3, [r7, #30]
		break;
 8002942:	e033      	b.n	80029ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002944:	f107 0316 	add.w	r3, r7, #22
 8002948:	461a      	mov	r2, r3
 800294a:	2144      	movs	r1, #68	; 0x44
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff f823 	bl	8001998 <VL53L0X_RdWord>
 8002952:	4603      	mov	r3, r0
 8002954:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800295e:	8afb      	ldrh	r3, [r7, #22]
 8002960:	025b      	lsls	r3, r3, #9
 8002962:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	77bb      	strb	r3, [r7, #30]
		break;
 8002968:	e020      	b.n	80029ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	77bb      	strb	r3, [r7, #30]
		break;
 8002974:	e01a      	b.n	80029ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	77bb      	strb	r3, [r7, #30]
		break;
 8002980:	e014      	b.n	80029ac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002982:	f107 0316 	add.w	r3, r7, #22
 8002986:	461a      	mov	r2, r3
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff f804 	bl	8001998 <VL53L0X_RdWord>
 8002990:	4603      	mov	r3, r0
 8002992:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800299c:	8afb      	ldrh	r3, [r7, #22]
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	77bb      	strb	r3, [r7, #30]
		break;
 80029a6:	e001      	b.n	80029ac <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029a8:	23fc      	movs	r3, #252	; 0xfc
 80029aa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80029ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d12a      	bne.n	8002a0a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80029b4:	7fbb      	ldrb	r3, [r7, #30]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d124      	bne.n	8002a04 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d110      	bne.n	80029e2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	330c      	adds	r3, #12
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80029e0:	e013      	b.n	8002a0a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80029e8:	897b      	ldrh	r3, [r7, #10]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	330c      	adds	r3, #12
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a02:	e002      	b.n	8002a0a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002a26:	f107 030e 	add.w	r3, r7, #14
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe ff88 	bl	8001944 <VL53L0X_RdByte>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10e      	bne.n	8002a5e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002a40:	7bba      	ldrb	r2, [r7, #14]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	b25b      	sxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da03      	bge.n	8002a58 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002a88:	f107 030e 	add.w	r3, r7, #14
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fbee 	bl	8002270 <VL53L0X_GetDeviceMode>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f898 	bl	8002bdc <VL53L0X_StartMeasurement>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d104      	bne.n	8002ac2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 fb3e 	bl	800413a <VL53L0X_measurement_poll_for_completion>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8002ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002af4:	2301      	movs	r3, #1
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f001 fae0 	bl	80040c0 <VL53L0X_perform_ref_calibration>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8002b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002b26:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002b28:	7dbb      	ldrb	r3, [r7, #22]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002b2e:	7dbb      	ldrb	r3, [r7, #22]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d002      	beq.n	8002b3a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002b34:	7dbb      	ldrb	r3, [r7, #22]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d147      	bne.n	8002bca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	f107 0210 	add.w	r2, r7, #16
 8002b42:	2101      	movs	r1, #1
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fbc3 	bl	80032d0 <VL53L0X_GetInterruptThresholds>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002b54:	d803      	bhi.n	8002b5e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002b56:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002b58:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002b5c:	d935      	bls.n	8002bca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d131      	bne.n	8002bca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002b6c:	491a      	ldr	r1, [pc, #104]	; (8002bd8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f002 fcb6 	bl	80054e0 <VL53L0X_load_tuning_settings>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]
 8002b78:	e027      	b.n	8002bca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	21ff      	movs	r1, #255	; 0xff
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fe5e 	bl	8001840 <VL53L0X_WrByte>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2170      	movs	r1, #112	; 0x70
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe fe54 	bl	8001840 <VL53L0X_WrByte>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	21ff      	movs	r1, #255	; 0xff
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fe4a 	bl	8001840 <VL53L0X_WrByte>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fe40 	bl	8001840 <VL53L0X_WrByte>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002bca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000104 	.word	0x20000104

08002bdc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002bec:	f107 030e 	add.w	r3, r7, #14
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fb3c 	bl	8002270 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fe1f 	bl	8001840 <VL53L0X_WrByte>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c06:	2201      	movs	r2, #1
 8002c08:	21ff      	movs	r1, #255	; 0xff
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fe18 	bl	8001840 <VL53L0X_WrByte>
 8002c10:	4603      	mov	r3, r0
 8002c12:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7fe fe11 	bl	8001840 <VL53L0X_WrByte>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2191      	movs	r1, #145	; 0x91
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe fe07 	bl	8001840 <VL53L0X_WrByte>
 8002c32:	4603      	mov	r3, r0
 8002c34:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002c36:	2201      	movs	r2, #1
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fe00 	bl	8001840 <VL53L0X_WrByte>
 8002c40:	4603      	mov	r3, r0
 8002c42:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c44:	2200      	movs	r2, #0
 8002c46:	21ff      	movs	r1, #255	; 0xff
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe fdf9 	bl	8001840 <VL53L0X_WrByte>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fdf2 	bl	8001840 <VL53L0X_WrByte>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d037      	beq.n	8002cd6 <VL53L0X_StartMeasurement+0xfa>
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d04f      	beq.n	8002d0a <VL53L0X_StartMeasurement+0x12e>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d167      	bne.n	8002d3e <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2100      	movs	r1, #0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fde4 	bl	8001840 <VL53L0X_WrByte>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d15d      	bne.n	8002d44 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8002c92:	f107 030d 	add.w	r3, r7, #13
 8002c96:	461a      	mov	r2, r3
 8002c98:	2100      	movs	r1, #0
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fe52 	bl	8001944 <VL53L0X_RdByte>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002caa:	7b7a      	ldrb	r2, [r7, #13]
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002cc6:	d3e1      	bcc.n	8002c8c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002cce:	d339      	bcc.n	8002d44 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002cd0:	23f9      	movs	r3, #249	; 0xf9
 8002cd2:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002cd4:	e036      	b.n	8002d44 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff15 	bl	8002b10 <VL53L0X_CheckAndLoadInterruptSettings>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002cea:	2202      	movs	r2, #2
 8002cec:	2100      	movs	r1, #0
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fda6 	bl	8001840 <VL53L0X_WrByte>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d123      	bne.n	8002d48 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2204      	movs	r2, #4
 8002d04:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002d08:	e01e      	b.n	8002d48 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002d12:	2101      	movs	r1, #1
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fefb 	bl	8002b10 <VL53L0X_CheckAndLoadInterruptSettings>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002d1e:	2204      	movs	r2, #4
 8002d20:	2100      	movs	r1, #0
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fd8c 	bl	8001840 <VL53L0X_WrByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2204      	movs	r2, #4
 8002d38:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002d3c:	e006      	b.n	8002d4c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002d3e:	23f8      	movs	r3, #248	; 0xf8
 8002d40:	75fb      	strb	r3, [r7, #23]
 8002d42:	e004      	b.n	8002d4e <VL53L0X_StartMeasurement+0x172>
		break;
 8002d44:	bf00      	nop
 8002d46:	e002      	b.n	8002d4e <VL53L0X_StartMeasurement+0x172>
		break;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <VL53L0X_StartMeasurement+0x172>
		break;
 8002d4c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002d6e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8002d70:	7bbb      	ldrb	r3, [r7, #14]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d112      	bne.n	8002d9c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb1d 	bl	80033bc <VL53L0X_GetInterruptMaskStatus>
 8002d82:	4603      	mov	r3, r0
 8002d84:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d103      	bne.n	8002d94 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e01c      	b.n	8002dce <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e018      	b.n	8002dce <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002d9c:	f107 030d 	add.w	r3, r7, #13
 8002da0:	461a      	mov	r2, r3
 8002da2:	2114      	movs	r1, #20
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fe fdcd 	bl	8001944 <VL53L0X_RdByte>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e002      	b.n	8002dce <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002ddc:	b5b0      	push	{r4, r5, r7, lr}
 8002dde:	b096      	sub	sp, #88	; 0x58
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002dec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002df0:	230c      	movs	r3, #12
 8002df2:	2114      	movs	r1, #20
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe fcf7 	bl	80017e8 <VL53L0X_ReadMulti>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002e00:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 80d2 	bne.w	8002fae <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002e16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002e32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	025b      	lsls	r3, r3, #9
 8002e48:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e4e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002e50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002e72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002e8e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002e90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8002e9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002ea6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb0:	d047      	beq.n	8002f42 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8002eb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002eb4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <VL53L0X_GetRangingMeasurementData+0x248>)
 8002ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec6:	1192      	asrs	r2, r2, #6
 8002ec8:	17db      	asrs	r3, r3, #31
 8002eca:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002ecc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7f1b      	ldrb	r3, [r3, #28]
 8002eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02d      	beq.n	8002f42 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8002ee6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ee8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	121b      	asrs	r3, r3, #8
 8002ef2:	461a      	mov	r2, r3
				if ((SignalRate
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10d      	bne.n	8002f16 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8002efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8002f02:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8002f06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f0a:	e016      	b.n	8002f3a <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8002f0c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002f10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f14:	e011      	b.n	8002f3a <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8002f16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f1c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002f20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f22:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002f2a:	121b      	asrs	r3, r3, #8
 8002f2c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f30:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8002f36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002f3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002f42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002f4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002f56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	75da      	strb	r2, [r3, #23]
 8002f64:	e006      	b.n	8002f74 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002f6c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002f74:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f78:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002f7c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f002 ff50 	bl	8005e30 <VL53L0X_get_pal_range_status>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002f9e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002fa6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12f      	bne.n	8003016 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f107 040c 	add.w	r4, r7, #12
 8002fbc:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8002fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002fd0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002fde:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8002fe4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002fea:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002ff0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8002ff6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002ffc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003006:	f107 050c 	add.w	r5, r7, #12
 800300a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800300c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003016:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800301a:	4618      	mov	r0, r3
 800301c:	3750      	adds	r7, #80	; 0x50
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003036:	2100      	movs	r1, #0
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff f8d1 	bl	80021e0 <VL53L0X_SetDeviceMode>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fd16 	bl	8002a7c <VL53L0X_PerformSingleMeasurement>
 8003050:	4603      	mov	r3, r0
 8003052:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff febc 	bl	8002ddc <VL53L0X_GetRangingMeasurementData>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003070:	2100      	movs	r1, #0
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f962 	bl	800333c <VL53L0X_ClearInterruptMask>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800307c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	460b      	mov	r3, r1
 800309c:	70bb      	strb	r3, [r7, #2]
 800309e:	4613      	mov	r3, r2
 80030a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80030ac:	23f6      	movs	r3, #246	; 0xf6
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e107      	b.n	80032c2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80030b2:	78bb      	ldrb	r3, [r7, #2]
 80030b4:	2b14      	cmp	r3, #20
 80030b6:	d110      	bne.n	80030da <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80030b8:	7e3b      	ldrb	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80030be:	2310      	movs	r3, #16
 80030c0:	73bb      	strb	r3, [r7, #14]
 80030c2:	e001      	b.n	80030c8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	461a      	mov	r2, r3
 80030cc:	2184      	movs	r1, #132	; 0x84
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe fbb6 	bl	8001840 <VL53L0X_WrByte>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e0f3      	b.n	80032c2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80030da:	78bb      	ldrb	r3, [r7, #2]
 80030dc:	2b15      	cmp	r3, #21
 80030de:	f040 8097 	bne.w	8003210 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80030e2:	2201      	movs	r2, #1
 80030e4:	21ff      	movs	r1, #255	; 0xff
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fbaa 	bl	8001840 <VL53L0X_WrByte>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe fba0 	bl	8001840 <VL53L0X_WrByte>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4313      	orrs	r3, r2
 8003108:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800310a:	2200      	movs	r2, #0
 800310c:	21ff      	movs	r1, #255	; 0xff
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fb96 	bl	8001840 <VL53L0X_WrByte>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	4313      	orrs	r3, r2
 800311c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800311e:	2201      	movs	r2, #1
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fb8c 	bl	8001840 <VL53L0X_WrByte>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4313      	orrs	r3, r2
 8003130:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003132:	2202      	movs	r2, #2
 8003134:	2185      	movs	r1, #133	; 0x85
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fb82 	bl	8001840 <VL53L0X_WrByte>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	4313      	orrs	r3, r2
 8003144:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003146:	2204      	movs	r2, #4
 8003148:	21ff      	movs	r1, #255	; 0xff
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fb78 	bl	8001840 <VL53L0X_WrByte>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	4313      	orrs	r3, r2
 8003158:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800315a:	2200      	movs	r2, #0
 800315c:	21cd      	movs	r1, #205	; 0xcd
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fb6e 	bl	8001840 <VL53L0X_WrByte>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4313      	orrs	r3, r2
 800316c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800316e:	2211      	movs	r2, #17
 8003170:	21cc      	movs	r1, #204	; 0xcc
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe fb64 	bl	8001840 <VL53L0X_WrByte>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4313      	orrs	r3, r2
 8003180:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003182:	2207      	movs	r2, #7
 8003184:	21ff      	movs	r1, #255	; 0xff
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fb5a 	bl	8001840 <VL53L0X_WrByte>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	4313      	orrs	r3, r2
 8003194:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003196:	2200      	movs	r2, #0
 8003198:	21be      	movs	r1, #190	; 0xbe
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe fb50 	bl	8001840 <VL53L0X_WrByte>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80031aa:	2206      	movs	r2, #6
 80031ac:	21ff      	movs	r1, #255	; 0xff
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe fb46 	bl	8001840 <VL53L0X_WrByte>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80031be:	2209      	movs	r2, #9
 80031c0:	21cc      	movs	r1, #204	; 0xcc
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fb3c 	bl	8001840 <VL53L0X_WrByte>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80031d2:	2200      	movs	r2, #0
 80031d4:	21ff      	movs	r1, #255	; 0xff
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe fb32 	bl	8001840 <VL53L0X_WrByte>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80031e6:	2201      	movs	r2, #1
 80031e8:	21ff      	movs	r1, #255	; 0xff
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe fb28 	bl	8001840 <VL53L0X_WrByte>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fb1e 	bl	8001840 <VL53L0X_WrByte>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	4313      	orrs	r3, r2
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e058      	b.n	80032c2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d121      	bne.n	800325c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d81b      	bhi.n	8003256 <VL53L0X_SetGpioConfig+0x1ce>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <VL53L0X_SetGpioConfig+0x19c>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003239 	.word	0x08003239
 8003228:	0800323f 	.word	0x0800323f
 800322c:	08003245 	.word	0x08003245
 8003230:	0800324b 	.word	0x0800324b
 8003234:	08003251 	.word	0x08003251
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003238:	2300      	movs	r3, #0
 800323a:	73bb      	strb	r3, [r7, #14]
				break;
 800323c:	e00f      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800323e:	2301      	movs	r3, #1
 8003240:	73bb      	strb	r3, [r7, #14]
				break;
 8003242:	e00c      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003244:	2302      	movs	r3, #2
 8003246:	73bb      	strb	r3, [r7, #14]
				break;
 8003248:	e009      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800324a:	2303      	movs	r3, #3
 800324c:	73bb      	strb	r3, [r7, #14]
				break;
 800324e:	e006      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003250:	2304      	movs	r3, #4
 8003252:	73bb      	strb	r3, [r7, #14]
				break;
 8003254:	e003      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8003256:	23f5      	movs	r3, #245	; 0xf5
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	e000      	b.n	800325e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800325c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8003266:	7bbb      	ldrb	r3, [r7, #14]
 8003268:	461a      	mov	r2, r3
 800326a:	210a      	movs	r1, #10
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fe fae7 	bl	8001840 <VL53L0X_WrByte>
 8003272:	4603      	mov	r3, r0
 8003274:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800327e:	7e3b      	ldrb	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	73bb      	strb	r3, [r7, #14]
 8003288:	e001      	b.n	800328e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800328a:	2310      	movs	r3, #16
 800328c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	22ef      	movs	r2, #239	; 0xef
 8003292:	2184      	movs	r1, #132	; 0x84
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fe fb21 	bl	80018dc <VL53L0X_UpdateByte>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	787a      	ldrb	r2, [r7, #1]
 80032aa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80032b6:	2100      	movs	r1, #0
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f83f 	bl	800333c <VL53L0X_ClearInterruptMask>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop

080032d0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	460b      	mov	r3, r1
 80032de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	461a      	mov	r2, r3
 80032ea:	210e      	movs	r1, #14
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7fe fb53 	bl	8001998 <VL53L0X_RdWord>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80032f6:	8abb      	ldrh	r3, [r7, #20]
 80032f8:	045b      	lsls	r3, r3, #17
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <VL53L0X_GetInterruptThresholds+0x68>)
 80032fe:	4013      	ands	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	461a      	mov	r2, r3
 8003312:	210c      	movs	r1, #12
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7fe fb3f 	bl	8001998 <VL53L0X_RdWord>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800331e:	8abb      	ldrh	r3, [r7, #20]
 8003320:	045b      	lsls	r3, r3, #17
 8003322:	461a      	mov	r2, r3
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <VL53L0X_GetInterruptThresholds+0x68>)
 8003326:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800332c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	1ffe0000 	.word	0x1ffe0000

0800333c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800334e:	2201      	movs	r2, #1
 8003350:	210b      	movs	r1, #11
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fa74 	bl	8001840 <VL53L0X_WrByte>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800335c:	2200      	movs	r2, #0
 800335e:	210b      	movs	r1, #11
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe fa6d 	bl	8001840 <VL53L0X_WrByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	4313      	orrs	r3, r2
 800336e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003370:	f107 030d 	add.w	r3, r7, #13
 8003374:	461a      	mov	r2, r3
 8003376:	2113      	movs	r1, #19
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe fae3 	bl	8001944 <VL53L0X_RdByte>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4313      	orrs	r3, r2
 8003386:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003388:	7bbb      	ldrb	r3, [r7, #14]
 800338a:	3301      	adds	r3, #1
 800338c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800338e:	7b7b      	ldrb	r3, [r7, #13]
 8003390:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003398:	7bbb      	ldrb	r3, [r7, #14]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d803      	bhi.n	80033a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0d3      	beq.n	800334e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80033ac:	23f4      	movs	r3, #244	; 0xf4
 80033ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80033ca:	f107 030e 	add.w	r3, r7, #14
 80033ce:	461a      	mov	r2, r3
 80033d0:	2113      	movs	r1, #19
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fab6 	bl	8001944 <VL53L0X_RdByte>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80033dc:	7bbb      	ldrb	r3, [r7, #14]
 80033de:	f003 0207 	and.w	r2, r3, #7
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	f003 0318 	and.w	r3, r3, #24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80033f0:	23fa      	movs	r3, #250	; 0xfa
 80033f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80033f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa02 	bl	800381e <VL53L0X_perform_ref_spad_management>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800341e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8003438:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800343c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800343e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003442:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	461a      	mov	r2, r3
 800344a:	2128      	movs	r1, #40	; 0x28
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fe faa3 	bl	8001998 <VL53L0X_RdWord>
 8003452:	4603      	mov	r3, r0
 8003454:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8003456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11e      	bne.n	800349c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	b29b      	uxth	r3, r3
 8003466:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	461a      	mov	r2, r3
 800346c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	dd0b      	ble.n	800348c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003474:	893a      	ldrh	r2, [r7, #8]
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	b21b      	sxth	r3, r3
 800347e:	461a      	mov	r2, r3
					* 250;
 8003480:	23fa      	movs	r3, #250	; 0xfa
 8003482:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e007      	b.n	800349c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	b21b      	sxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	23fa      	movs	r3, #250	; 0xfa
 8003494:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800349c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b08b      	sub	sp, #44	; 0x2c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80034b6:	2308      	movs	r3, #8
 80034b8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	fb01 f202 	mul.w	r2, r1, r2
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e030      	b.n	800354a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	4413      	add	r3, r2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80034f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d11e      	bne.n	800353c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80034fe:	7ffa      	ldrb	r2, [r7, #31]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	fa42 f303 	asr.w	r3, r2, r3
 8003506:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800350c:	e016      	b.n	800353c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <get_next_good_spad+0x88>
				success = 1;
 8003518:	2301      	movs	r3, #1
 800351a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	fb02 f203 	mul.w	r2, r2, r3
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	4413      	add	r3, r2
 8003528:	461a      	mov	r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	601a      	str	r2, [r3, #0]
				break;
 800352e:	e009      	b.n	8003544 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	3301      	adds	r3, #1
 800353a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	d3e4      	bcc.n	800350e <get_next_good_spad+0x66>
				coarseIndex++) {
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	3301      	adds	r3, #1
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d202      	bcs.n	8003558 <get_next_good_spad+0xb0>
 8003552:	7fbb      	ldrb	r3, [r7, #30]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0c7      	beq.n	80034e8 <get_next_good_spad+0x40>
		}
	}
}
 8003558:	bf00      	nop
 800355a:	372c      	adds	r7, #44	; 0x2c
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <is_aperture+0x30>)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <is_aperture+0x22>
		isAperture = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200002bc 	.word	0x200002bc

08003598 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80035a8:	2308      	movs	r3, #8
 80035aa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	fb01 f202 	mul.w	r2, r1, r2
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80035d0:	23ce      	movs	r3, #206	; 0xce
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e010      	b.n	80035f8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b25a      	sxtb	r2, r3
 80035e0:	2101      	movs	r1, #1
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b259      	sxtb	r1, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2ca      	uxtb	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]

	return status;
 80035f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3724      	adds	r7, #36	; 0x24
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003610:	2306      	movs	r3, #6
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	21b0      	movs	r1, #176	; 0xb0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe f8b6 	bl	8001788 <VL53L0X_WriteMulti>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8003620:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003636:	2306      	movs	r3, #6
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	21b0      	movs	r1, #176	; 0xb0
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe f8d3 	bl	80017e8 <VL53L0X_ReadMulti>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08c      	sub	sp, #48	; 0x30
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800366c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	e02b      	b.n	80036ce <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	6a3a      	ldr	r2, [r7, #32]
 800367c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ff12 	bl	80034a8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d103      	bne.n	8003694 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800368c:	23ce      	movs	r3, #206	; 0xce
 800368e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003692:	e020      	b.n	80036d6 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	461a      	mov	r2, r3
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	4413      	add	r3, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff61 	bl	8003564 <is_aperture>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	7afb      	ldrb	r3, [r7, #11]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80036ac:	23ce      	movs	r3, #206	; 0xce
 80036ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80036b2:	e010      	b.n	80036d6 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036bc:	6838      	ldr	r0, [r7, #0]
 80036be:	f7ff ff6b 	bl	8003598 <enable_spad_bit>
		currentSpad++;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	3301      	adds	r3, #1
 80036c6:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	3301      	adds	r3, #1
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3cf      	bcc.n	8003676 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80036dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ff8d 	bl	8003606 <set_ref_spad_map>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80036f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d121      	bne.n	800373e <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	4619      	mov	r1, r3
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff ff93 	bl	800362c <get_ref_spad_map>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003710:	e011      	b.n	8003736 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	4413      	add	r3, r2
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	f107 0114 	add.w	r1, r7, #20
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	440b      	add	r3, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d003      	beq.n	8003730 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003728:	23ce      	movs	r3, #206	; 0xce
 800372a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800372e:	e006      	b.n	800373e <enable_ref_spads+0xec>
			}
			i++;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	3301      	adds	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	429a      	cmp	r2, r3
 800373c:	d3e9      	bcc.n	8003712 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800373e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003742:	4618      	mov	r0, r3
 8003744:	3730      	adds	r7, #48	; 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800376a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003772:	22c0      	movs	r2, #192	; 0xc0
 8003774:	2101      	movs	r1, #1
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe f862 	bl	8001840 <VL53L0X_WrByte>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fc49 	bl	8003028 <VL53L0X_PerformSingleRangingMeasurement>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800379c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80037a4:	2201      	movs	r2, #1
 80037a6:	21ff      	movs	r1, #255	; 0xff
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe f849 	bl	8001840 <VL53L0X_WrByte>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80037b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	21b6      	movs	r1, #182	; 0xb6
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe f8e9 	bl	8001998 <VL53L0X_RdWord>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80037cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80037d4:	2200      	movs	r2, #0
 80037d6:	21ff      	movs	r1, #255	; 0xff
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7fe f831 	bl	8001840 <VL53L0X_WrByte>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80037e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d112      	bne.n	8003812 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80037ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037f0:	461a      	mov	r2, r3
 80037f2:	2101      	movs	r1, #1
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fe f823 	bl	8001840 <VL53L0X_WrByte>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800380e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003816:	4618      	mov	r0, r3
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800381e:	b590      	push	{r4, r7, lr}
 8003820:	b09d      	sub	sp, #116	; 0x74
 8003822:	af06      	add	r7, sp, #24
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003830:	23b4      	movs	r3, #180	; 0xb4
 8003832:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003836:	2303      	movs	r3, #3
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800383a:	232c      	movs	r3, #44	; 0x2c
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800384a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800384e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003858:	2306      	movs	r3, #6
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8003882:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003884:	2300      	movs	r3, #0
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	e009      	b.n	800389e <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388e:	4413      	add	r3, r2
 8003890:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389a:	3301      	adds	r3, #1
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
 800389e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3f1      	bcc.n	800388a <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80038a6:	2201      	movs	r2, #1
 80038a8:	21ff      	movs	r1, #255	; 0xff
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7fd ffc8 	bl	8001840 <VL53L0X_WrByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80038b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80038be:	2200      	movs	r2, #0
 80038c0:	214f      	movs	r1, #79	; 0x4f
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7fd ffbc 	bl	8001840 <VL53L0X_WrByte>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80038ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80038d6:	222c      	movs	r2, #44	; 0x2c
 80038d8:	214e      	movs	r1, #78	; 0x4e
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7fd ffb0 	bl	8001840 <VL53L0X_WrByte>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80038e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80038ee:	2200      	movs	r2, #0
 80038f0:	21ff      	movs	r1, #255	; 0xff
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7fd ffa4 	bl	8001840 <VL53L0X_WrByte>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80038fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003906:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800390a:	461a      	mov	r2, r3
 800390c:	21b6      	movs	r1, #182	; 0xb6
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7fd ff96 	bl	8001840 <VL53L0X_WrByte>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800391a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003922:	2200      	movs	r2, #0
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7fd ff8a 	bl	8001840 <VL53L0X_WrByte>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003932:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800393a:	f107 0210 	add.w	r2, r7, #16
 800393e:	f107 0111 	add.w	r1, r7, #17
 8003942:	2300      	movs	r3, #0
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fbbb 	bl	80040c0 <VL53L0X_perform_ref_calibration>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003950:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003954:	2b00      	cmp	r3, #0
 8003956:	d121      	bne.n	800399c <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003966:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003974:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003978:	f107 0218 	add.w	r2, r7, #24
 800397c:	9204      	str	r2, [sp, #16]
 800397e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003980:	9203      	str	r2, [sp, #12]
 8003982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4623      	mov	r3, r4
 800398e:	4602      	mov	r2, r0
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff fe5e 	bl	8003652 <enable_ref_spads>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800399c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d174      	bne.n	8003a8e <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80039a8:	f107 0312 	add.w	r3, r7, #18
 80039ac:	4619      	mov	r1, r3
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fecb 	bl	800374a <perform_ref_signal_measurement>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80039ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d161      	bne.n	8003a86 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80039c2:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80039c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d25d      	bcs.n	8003a86 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ce:	e009      	b.n	80039e4 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e0:	3301      	adds	r3, #1
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3f1      	bcc.n	80039d0 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80039ec:	e002      	b.n	80039f4 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	3301      	adds	r3, #1
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80039f4:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80039f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fa:	4413      	add	r3, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fdb1 	bl	8003564 <is_aperture>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3ee      	bcc.n	80039ee <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003a10:	2301      	movs	r3, #1
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a16:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003a24:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003a28:	f107 0218 	add.w	r2, r7, #24
 8003a2c:	9204      	str	r2, [sp, #16]
 8003a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a30:	9203      	str	r2, [sp, #12]
 8003a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a34:	9202      	str	r2, [sp, #8]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fe06 	bl	8003652 <enable_ref_spads>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003a4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11b      	bne.n	8003a8c <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003a58:	f107 0312 	add.w	r3, r7, #18
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fe73 	bl	800374a <perform_ref_signal_measurement>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003a6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003a72:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003a74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d208      	bcs.n	8003a8c <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003a84:	e002      	b.n	8003a8c <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a8a:	e000      	b.n	8003a8e <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003a8c:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003a8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 80af 	bne.w	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003a98:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003a9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f240 80aa 	bls.w	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fb7b 	bl	800c1b4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003abe:	8a7b      	ldrh	r3, [r7, #18]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bfb8      	it	lt
 8003aca:	425b      	neglt	r3, r3
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003ad4:	e086      	b.n	8003be4 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae4:	f7ff fce0 	bl	80034a8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d103      	bne.n	8003af8 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003af0:	23ce      	movs	r3, #206	; 0xce
 8003af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003af6:	e07e      	b.n	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003af8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd2f 	bl	8003564 <is_aperture>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8003b16:	e06e      	b.n	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003b28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fd33 	bl	8003598 <enable_spad_bit>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003b38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b42:	3301      	adds	r3, #1
 8003b44:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff fd59 	bl	8003606 <set_ref_spad_map>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003b5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d146      	bne.n	8003bf0 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003b62:	f107 0312 	add.w	r3, r7, #18
 8003b66:	4619      	mov	r1, r3
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fdee 	bl	800374a <perform_ref_signal_measurement>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003b74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13b      	bne.n	8003bf4 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003b7c:	8a7b      	ldrh	r3, [r7, #18]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bfb8      	it	lt
 8003b88:	425b      	neglt	r3, r3
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003b8c:	8a7b      	ldrh	r3, [r7, #18]
 8003b8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d21c      	bcs.n	8003bce <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d914      	bls.n	8003bc6 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fd2f 	bl	8003606 <set_ref_spad_map>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8003bb4:	f107 011c 	add.w	r1, r7, #28
 8003bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f008 fafa 	bl	800c1b4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bcc:	e00a      	b.n	8003be4 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bde:	4618      	mov	r0, r3
 8003be0:	f008 fae8 	bl	800c1b4 <memcpy>
		while (!complete) {
 8003be4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f43f af74 	beq.w	8003ad6 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003bee:	e002      	b.n	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003bf4:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d115      	bne.n	8003c2a <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c02:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003c0a:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003c2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	375c      	adds	r7, #92	; 0x5c
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b093      	sub	sp, #76	; 0x4c
 8003c3a:	af06      	add	r7, sp, #24
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003c4e:	23b4      	movs	r3, #180	; 0xb4
 8003c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003c54:	2306      	movs	r3, #6
 8003c56:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003c58:	232c      	movs	r3, #44	; 0x2c
 8003c5a:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	21ff      	movs	r1, #255	; 0xff
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7fd fded 	bl	8001840 <VL53L0X_WrByte>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003c6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003c74:	2200      	movs	r2, #0
 8003c76:	214f      	movs	r1, #79	; 0x4f
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7fd fde1 	bl	8001840 <VL53L0X_WrByte>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003c84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8003c8c:	222c      	movs	r2, #44	; 0x2c
 8003c8e:	214e      	movs	r1, #78	; 0x4e
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7fd fdd5 	bl	8001840 <VL53L0X_WrByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003c9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	21ff      	movs	r1, #255	; 0xff
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7fd fdc9 	bl	8001840 <VL53L0X_WrByte>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	21b6      	movs	r1, #182	; 0xb6
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7fd fdbb 	bl	8001840 <VL53L0X_WrByte>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e009      	b.n	8003cea <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3f1      	bcc.n	8003cd6 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d011      	beq.n	8003d1c <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003cf8:	e002      	b.n	8003d00 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003d00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	4413      	add	r3, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fc2b 	bl	8003564 <is_aperture>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <VL53L0X_set_reference_spads+0xe6>
 8003d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d3ee      	bcc.n	8003cfa <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8003d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d2c:	79f9      	ldrb	r1, [r7, #7]
 8003d2e:	f107 0214 	add.w	r2, r7, #20
 8003d32:	9204      	str	r2, [sp, #16]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4623      	mov	r3, r4
 8003d44:	4602      	mov	r2, r0
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fc83 	bl	8003652 <enable_ref_spads>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8003d52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	79fa      	ldrb	r2, [r7, #7]
 8003d70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8003d74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3734      	adds	r7, #52	; 0x34
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	2100      	movs	r1, #0
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fd fd4b 	bl	8001840 <VL53L0X_WrByte>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9bf 	bl	800413a <VL53L0X_measurement_poll_for_completion>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fab6 	bl	800333c <VL53L0X_ClearInterruptMask>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2100      	movs	r1, #0
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fd fd2d 	bl	8001840 <VL53L0X_WrByte>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	461a      	mov	r2, r3
 8003e04:	4603      	mov	r3, r0
 8003e06:	70fb      	strb	r3, [r7, #3]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70bb      	strb	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	21ff      	movs	r1, #255	; 0xff
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fd fd0f 	bl	8001840 <VL53L0X_WrByte>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fd fd05 	bl	8001840 <VL53L0X_WrByte>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e40:	2200      	movs	r2, #0
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fd fcfb 	bl	8001840 <VL53L0X_WrByte>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01e      	beq.n	8003e98 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8003e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	21cb      	movs	r1, #203	; 0xcb
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fd6c 	bl	8001944 <VL53L0X_RdByte>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003e76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02a      	beq.n	8003ed4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003e7e:	f107 030e 	add.w	r3, r7, #14
 8003e82:	461a      	mov	r2, r3
 8003e84:	21ee      	movs	r1, #238	; 0xee
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fd5c 	bl	8001944 <VL53L0X_RdByte>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	73fb      	strb	r3, [r7, #15]
 8003e96:	e01d      	b.n	8003ed4 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8003e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8003ea0:	78bb      	ldrb	r3, [r7, #2]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	21cb      	movs	r1, #203	; 0xcb
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd fcca 	bl	8001840 <VL53L0X_WrByte>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003ebe:	787b      	ldrb	r3, [r7, #1]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	21ee      	movs	r1, #238	; 0xee
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd fd09 	bl	80018dc <VL53L0X_UpdateByte>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	21ff      	movs	r1, #255	; 0xff
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd fcb1 	bl	8001840 <VL53L0X_WrByte>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	2100      	movs	r1, #0
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fd fca7 	bl	8001840 <VL53L0X_WrByte>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003efc:	2200      	movs	r2, #0
 8003efe:	21ff      	movs	r1, #255	; 0xff
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fd fc9d 	bl	8001840 <VL53L0X_WrByte>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003f10:	7bbb      	ldrb	r3, [r7, #14]
 8003f12:	f023 0310 	bic.w	r3, r3, #16
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	701a      	strb	r2, [r3, #0]

	return Status;
 8003f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af04      	add	r7, sp, #16
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	460b      	mov	r3, r1
 8003f38:	71fb      	strb	r3, [r7, #7]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003f52:	79bb      	ldrb	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003f5e:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003f60:	2201      	movs	r2, #1
 8003f62:	2101      	movs	r1, #1
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7fd fc6b 	bl	8001840 <VL53L0X_WrByte>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff ff01 	bl	8003d80 <VL53L0X_perform_single_ref_calibration>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d115      	bne.n	8003fb6 <VL53L0X_perform_vhv_calibration+0x8e>
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d112      	bne.n	8003fb6 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003f90:	7d39      	ldrb	r1, [r7, #20]
 8003f92:	7d7a      	ldrb	r2, [r7, #21]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9302      	str	r3, [sp, #8]
 8003f9c:	f107 0313 	add.w	r3, r7, #19
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	2101      	movs	r1, #1
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff23 	bl	8003df6 <VL53L0X_ref_calibration_io>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]
 8003fb4:	e002      	b.n	8003fbc <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d112      	bne.n	8003fea <VL53L0X_perform_vhv_calibration+0xc2>
 8003fc4:	79bb      	ldrb	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00f      	beq.n	8003fea <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003fca:	7dbb      	ldrb	r3, [r7, #22]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7fd fc35 	bl	8001840 <VL53L0X_WrByte>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	7dba      	ldrb	r2, [r7, #22]
 8003fe6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b08a      	sub	sp, #40	; 0x28
 8003ffa:	af04      	add	r7, sp, #16
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	4611      	mov	r1, r2
 8004002:	461a      	mov	r2, r3
 8004004:	460b      	mov	r3, r1
 8004006:	71fb      	strb	r3, [r7, #7]
 8004008:	4613      	mov	r3, r2
 800400a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800401c:	79bb      	ldrb	r3, [r7, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004028:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800402a:	2202      	movs	r2, #2
 800402c:	2101      	movs	r1, #1
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7fd fc06 	bl	8001840 <VL53L0X_WrByte>
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004040:	2100      	movs	r1, #0
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff fe9c 	bl	8003d80 <VL53L0X_perform_single_ref_calibration>
 8004048:	4603      	mov	r3, r0
 800404a:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800404c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d115      	bne.n	8004080 <VL53L0X_perform_phase_calibration+0x8a>
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d112      	bne.n	8004080 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800405a:	7d39      	ldrb	r1, [r7, #20]
 800405c:	7d7a      	ldrb	r2, [r7, #21]
 800405e:	2301      	movs	r3, #1
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	2300      	movs	r3, #0
 8004064:	9302      	str	r3, [sp, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	f107 0313 	add.w	r3, r7, #19
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	2101      	movs	r1, #1
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff febe 	bl	8003df6 <VL53L0X_ref_calibration_io>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
 800407e:	e002      	b.n	8004086 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004086:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d112      	bne.n	80040b4 <VL53L0X_perform_phase_calibration+0xbe>
 800408e:	79bb      	ldrb	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004094:	7dbb      	ldrb	r3, [r7, #22]
 8004096:	461a      	mov	r2, r3
 8004098:	2101      	movs	r1, #1
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7fd fbd0 	bl	8001840 <VL53L0X_WrByte>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80040a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	7dba      	ldrb	r2, [r7, #22]
 80040b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80040b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80040dc:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	2300      	movs	r3, #0
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff ff1f 	bl	8003f28 <VL53L0X_perform_vhv_calibration>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80040ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	2300      	movs	r3, #0
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff ff7a 	bl	8003ff6 <VL53L0X_perform_phase_calibration>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800410e:	7dbb      	ldrb	r3, [r7, #22]
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fd fb93 	bl	8001840 <VL53L0X_WrByte>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800411e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	7dba      	ldrb	r2, [r7, #22]
 800412a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800412e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800414e:	f107 030f 	add.w	r3, r7, #15
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fe fe00 	bl	8002d5a <VL53L0X_GetMeasurementDataReady>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800415e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d110      	bne.n	8004188 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00f      	beq.n	800418c <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3301      	adds	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004178:	d302      	bcc.n	8004180 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800417a:	23f9      	movs	r3, #249	; 0xf9
 800417c:	75fb      	strb	r3, [r7, #23]
			break;
 800417e:	e006      	b.n	800418e <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fd fc7d 	bl	8001a80 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004186:	e7e2      	b.n	800414e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800418c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800418e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	3301      	adds	r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80041ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ce:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80041d0:	e002      	b.n	80041d8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d8f8      	bhi.n	80041d2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80041e0:	e017      	b.n	8004212 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4413      	add	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d30b      	bcc.n	8004206 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4413      	add	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e4      	bne.n	80041e2 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004218:	68fb      	ldr	r3, [r7, #12]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004230:	2200      	movs	r2, #0
 8004232:	2183      	movs	r1, #131	; 0x83
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd fb03 	bl	8001840 <VL53L0X_WrByte>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	4313      	orrs	r3, r2
 8004242:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8004244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11e      	bne.n	800428a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004250:	f107 030f 	add.w	r3, r7, #15
 8004254:	461a      	mov	r2, r3
 8004256:	2183      	movs	r1, #131	; 0x83
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fd fb73 	bl	8001944 <VL53L0X_RdByte>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <VL53L0X_device_read_strobe+0x5a>
 8004268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3301      	adds	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800427c:	d3e8      	bcc.n	8004250 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004284:	d301      	bcc.n	800428a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004286:	23f9      	movs	r3, #249	; 0xf9
 8004288:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800428a:	2201      	movs	r2, #1
 800428c:	2183      	movs	r1, #131	; 0x83
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fad6 	bl	8001840 <VL53L0X_WrByte>
 8004294:	4603      	mov	r3, r0
 8004296:	461a      	mov	r2, r3
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	4313      	orrs	r3, r2
 800429c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800429e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b098      	sub	sp, #96	; 0x60
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80042da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80042de:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80042f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80042f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042fa:	2b07      	cmp	r3, #7
 80042fc:	f000 8408 	beq.w	8004b10 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004300:	2201      	movs	r2, #1
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fd fa9b 	bl	8001840 <VL53L0X_WrByte>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004312:	4313      	orrs	r3, r2
 8004314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004318:	2201      	movs	r2, #1
 800431a:	21ff      	movs	r1, #255	; 0xff
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fd fa8f 	bl	8001840 <VL53L0X_WrByte>
 8004322:	4603      	mov	r3, r0
 8004324:	461a      	mov	r2, r3
 8004326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800432a:	4313      	orrs	r3, r2
 800432c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004330:	2200      	movs	r2, #0
 8004332:	2100      	movs	r1, #0
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fd fa83 	bl	8001840 <VL53L0X_WrByte>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004342:	4313      	orrs	r3, r2
 8004344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004348:	2206      	movs	r2, #6
 800434a:	21ff      	movs	r1, #255	; 0xff
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fd fa77 	bl	8001840 <VL53L0X_WrByte>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800435a:	4313      	orrs	r3, r2
 800435c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004360:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004364:	461a      	mov	r2, r3
 8004366:	2183      	movs	r1, #131	; 0x83
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fd faeb 	bl	8001944 <VL53L0X_RdByte>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004376:	4313      	orrs	r3, r2
 8004378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800437c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	2183      	movs	r1, #131	; 0x83
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd fa58 	bl	8001840 <VL53L0X_WrByte>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004398:	4313      	orrs	r3, r2
 800439a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800439e:	2207      	movs	r2, #7
 80043a0:	21ff      	movs	r1, #255	; 0xff
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fa4c 	bl	8001840 <VL53L0X_WrByte>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80043b6:	2201      	movs	r2, #1
 80043b8:	2181      	movs	r1, #129	; 0x81
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fa40 	bl	8001840 <VL53L0X_WrByte>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd fb56 	bl	8001a80 <VL53L0X_PollingDelay>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043dc:	4313      	orrs	r3, r2
 80043de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80043e2:	2201      	movs	r2, #1
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fa2a 	bl	8001840 <VL53L0X_WrByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8098 	beq.w	8004536 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004406:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800440a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 8091 	bne.w	8004536 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8004414:	226b      	movs	r2, #107	; 0x6b
 8004416:	2194      	movs	r1, #148	; 0x94
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd fa11 	bl	8001840 <VL53L0X_WrByte>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004426:	4313      	orrs	r3, r2
 8004428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fef9 	bl	8004224 <VL53L0X_device_read_strobe>
 8004432:	4603      	mov	r3, r0
 8004434:	461a      	mov	r2, r3
 8004436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800443a:	4313      	orrs	r3, r2
 800443c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004444:	461a      	mov	r2, r3
 8004446:	2190      	movs	r1, #144	; 0x90
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fadd 	bl	8001a08 <VL53L0X_RdDWord>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004456:	4313      	orrs	r3, r2
 8004458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004466:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	0bdb      	lsrs	r3, r3, #15
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004478:	2224      	movs	r2, #36	; 0x24
 800447a:	2194      	movs	r1, #148	; 0x94
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fd f9df 	bl	8001840 <VL53L0X_WrByte>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800448a:	4313      	orrs	r3, r2
 800448c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fec7 	bl	8004224 <VL53L0X_device_read_strobe>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800449e:	4313      	orrs	r3, r2
 80044a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80044a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a8:	461a      	mov	r2, r3
 80044aa:	2190      	movs	r1, #144	; 0x90
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd faab 	bl	8001a08 <VL53L0X_RdDWord>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	0e1b      	lsrs	r3, r3, #24
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80044de:	2225      	movs	r2, #37	; 0x25
 80044e0:	2194      	movs	r1, #148	; 0x94
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd f9ac 	bl	8001840 <VL53L0X_WrByte>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fe94 	bl	8004224 <VL53L0X_device_read_strobe>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004504:	4313      	orrs	r3, r2
 8004506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800450a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800450e:	461a      	mov	r2, r3
 8004510:	2190      	movs	r1, #144	; 0x90
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fa78 	bl	8001a08 <VL53L0X_RdDWord>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004520:	4313      	orrs	r3, r2
 8004522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	0e1b      	lsrs	r3, r3, #24
 800452a:	b2db      	uxtb	r3, r3
 800452c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8189 	beq.w	8004854 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004546:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 8182 	bne.w	8004854 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8004550:	2202      	movs	r2, #2
 8004552:	2194      	movs	r1, #148	; 0x94
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fd f973 	bl	8001840 <VL53L0X_WrByte>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004562:	4313      	orrs	r3, r2
 8004564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fe5b 	bl	8004224 <VL53L0X_device_read_strobe>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004576:	4313      	orrs	r3, r2
 8004578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800457c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004580:	461a      	mov	r2, r3
 8004582:	2190      	movs	r1, #144	; 0x90
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fd f9dd 	bl	8001944 <VL53L0X_RdByte>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004592:	4313      	orrs	r3, r2
 8004594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004598:	227b      	movs	r2, #123	; 0x7b
 800459a:	2194      	movs	r1, #148	; 0x94
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fd f94f 	bl	8001840 <VL53L0X_WrByte>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fe37 	bl	8004224 <VL53L0X_device_read_strobe>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045be:	4313      	orrs	r3, r2
 80045c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80045c4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80045c8:	461a      	mov	r2, r3
 80045ca:	2190      	movs	r1, #144	; 0x90
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fd f9b9 	bl	8001944 <VL53L0X_RdByte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045da:	4313      	orrs	r3, r2
 80045dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80045e0:	2277      	movs	r2, #119	; 0x77
 80045e2:	2194      	movs	r1, #148	; 0x94
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fd f92b 	bl	8001840 <VL53L0X_WrByte>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fe13 	bl	8004224 <VL53L0X_device_read_strobe>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004606:	4313      	orrs	r3, r2
 8004608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800460c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004610:	461a      	mov	r2, r3
 8004612:	2190      	movs	r1, #144	; 0x90
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fd f9f7 	bl	8001a08 <VL53L0X_RdDWord>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004622:	4313      	orrs	r3, r2
 8004624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	0e5b      	lsrs	r3, r3, #25
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004632:	b2db      	uxtb	r3, r3
 8004634:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	0c9b      	lsrs	r3, r3, #18
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004640:	b2db      	uxtb	r3, r3
 8004642:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	0adb      	lsrs	r3, r3, #11
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	b2db      	uxtb	r3, r3
 8004650:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465c:	b2db      	uxtb	r3, r3
 800465e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	b2db      	uxtb	r3, r3
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004672:	2278      	movs	r2, #120	; 0x78
 8004674:	2194      	movs	r1, #148	; 0x94
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd f8e2 	bl	8001840 <VL53L0X_WrByte>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004684:	4313      	orrs	r3, r2
 8004686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fdca 	bl	8004224 <VL53L0X_device_read_strobe>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004698:	4313      	orrs	r3, r2
 800469a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800469e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046a2:	461a      	mov	r2, r3
 80046a4:	2190      	movs	r1, #144	; 0x90
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd f9ae 	bl	8001a08 <VL53L0X_RdDWord>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	0f5b      	lsrs	r3, r3, #29
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80046c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046ca:	4413      	add	r3, r2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	0d9b      	lsrs	r3, r3, #22
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	0bdb      	lsrs	r3, r3, #15
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004704:	b2db      	uxtb	r3, r3
 8004706:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	b2db      	uxtb	r3, r3
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800471a:	2279      	movs	r2, #121	; 0x79
 800471c:	2194      	movs	r1, #148	; 0x94
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd f88e 	bl	8001840 <VL53L0X_WrByte>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800472c:	4313      	orrs	r3, r2
 800472e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fd76 	bl	8004224 <VL53L0X_device_read_strobe>
 8004738:	4603      	mov	r3, r0
 800473a:	461a      	mov	r2, r3
 800473c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004740:	4313      	orrs	r3, r2
 8004742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800474a:	461a      	mov	r2, r3
 800474c:	2190      	movs	r1, #144	; 0x90
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f95a 	bl	8001a08 <VL53L0X_RdDWord>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800475c:	4313      	orrs	r3, r2
 800475e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800476e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004772:	4413      	add	r3, r2
 8004774:	b2db      	uxtb	r3, r3
 8004776:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	0cdb      	lsrs	r3, r3, #19
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004782:	b2db      	uxtb	r3, r3
 8004784:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	0b1b      	lsrs	r3, r3, #12
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004790:	b2db      	uxtb	r3, r3
 8004792:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80047b4:	227a      	movs	r2, #122	; 0x7a
 80047b6:	2194      	movs	r1, #148	; 0x94
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd f841 	bl	8001840 <VL53L0X_WrByte>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fd29 	bl	8004224 <VL53L0X_device_read_strobe>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047da:	4313      	orrs	r3, r2
 80047dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047e4:	461a      	mov	r2, r3
 80047e6:	2190      	movs	r1, #144	; 0x90
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fd f90d 	bl	8001a08 <VL53L0X_RdDWord>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	0f9b      	lsrs	r3, r3, #30
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004806:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800480c:	4413      	add	r3, r2
 800480e:	b2db      	uxtb	r3, r3
 8004810:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	0ddb      	lsrs	r3, r3, #23
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	b2db      	uxtb	r3, r3
 800481e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	b2db      	uxtb	r3, r3
 800482c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	0a5b      	lsrs	r3, r3, #9
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800484e:	2300      	movs	r3, #0
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80f1 	beq.w	8004a42 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004860:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004864:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 80ea 	bne.w	8004a42 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800486e:	227b      	movs	r2, #123	; 0x7b
 8004870:	2194      	movs	r1, #148	; 0x94
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc ffe4 	bl	8001840 <VL53L0X_WrByte>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004880:	4313      	orrs	r3, r2
 8004882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fccc 	bl	8004224 <VL53L0X_device_read_strobe>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004894:	4313      	orrs	r3, r2
 8004896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800489a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800489e:	461a      	mov	r2, r3
 80048a0:	2190      	movs	r1, #144	; 0x90
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f8b0 	bl	8001a08 <VL53L0X_RdDWord>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80048b6:	227c      	movs	r2, #124	; 0x7c
 80048b8:	2194      	movs	r1, #148	; 0x94
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc ffc0 	bl	8001840 <VL53L0X_WrByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fca8 	bl	8004224 <VL53L0X_device_read_strobe>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048dc:	4313      	orrs	r3, r2
 80048de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80048e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e6:	461a      	mov	r2, r3
 80048e8:	2190      	movs	r1, #144	; 0x90
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f88c 	bl	8001a08 <VL53L0X_RdDWord>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80048fe:	2273      	movs	r2, #115	; 0x73
 8004900:	2194      	movs	r1, #148	; 0x94
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc ff9c 	bl	8001840 <VL53L0X_WrByte>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004910:	4313      	orrs	r3, r2
 8004912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fc84 	bl	8004224 <VL53L0X_device_read_strobe>
 800491c:	4603      	mov	r3, r0
 800491e:	461a      	mov	r2, r3
 8004920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004924:	4313      	orrs	r3, r2
 8004926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800492a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800492e:	461a      	mov	r2, r3
 8004930:	2190      	movs	r1, #144	; 0x90
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd f868 	bl	8001a08 <VL53L0X_RdDWord>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004940:	4313      	orrs	r3, r2
 8004942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800494a:	b29b      	uxth	r3, r3
 800494c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800494e:	2274      	movs	r2, #116	; 0x74
 8004950:	2194      	movs	r1, #148	; 0x94
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc ff74 	bl	8001840 <VL53L0X_WrByte>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004960:	4313      	orrs	r3, r2
 8004962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fc5c 	bl	8004224 <VL53L0X_device_read_strobe>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004974:	4313      	orrs	r3, r2
 8004976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800497a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800497e:	461a      	mov	r2, r3
 8004980:	2190      	movs	r1, #144	; 0x90
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd f840 	bl	8001a08 <VL53L0X_RdDWord>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004990:	4313      	orrs	r3, r2
 8004992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800499a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800499c:	4313      	orrs	r3, r2
 800499e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80049a0:	2275      	movs	r2, #117	; 0x75
 80049a2:	2194      	movs	r1, #148	; 0x94
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc ff4b 	bl	8001840 <VL53L0X_WrByte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fc33 	bl	8004224 <VL53L0X_device_read_strobe>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80049cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049d0:	461a      	mov	r2, r3
 80049d2:	2190      	movs	r1, #144	; 0x90
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fd f817 	bl	8001a08 <VL53L0X_RdDWord>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80049f0:	2276      	movs	r2, #118	; 0x76
 80049f2:	2194      	movs	r1, #148	; 0x94
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fc ff23 	bl	8001840 <VL53L0X_WrByte>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fc0b 	bl	8004224 <VL53L0X_device_read_strobe>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461a      	mov	r2, r3
 8004a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a20:	461a      	mov	r2, r3
 8004a22:	2190      	movs	r1, #144	; 0x90
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fc ffef 	bl	8001a08 <VL53L0X_RdDWord>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004a3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2181      	movs	r1, #129	; 0x81
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fefa 	bl	8001840 <VL53L0X_WrByte>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	21ff      	movs	r1, #255	; 0xff
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc feee 	bl	8001840 <VL53L0X_WrByte>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004a72:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004a76:	461a      	mov	r2, r3
 8004a78:	2183      	movs	r1, #131	; 0x83
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc ff62 	bl	8001944 <VL53L0X_RdByte>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461a      	mov	r2, r3
 8004a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004a8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2183      	movs	r1, #131	; 0x83
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc fecf 	bl	8001840 <VL53L0X_WrByte>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	21ff      	movs	r1, #255	; 0xff
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fc fec3 	bl	8001840 <VL53L0X_WrByte>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ac8:	2201      	movs	r2, #1
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fc feb7 	bl	8001840 <VL53L0X_WrByte>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	21ff      	movs	r1, #255	; 0xff
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc feab 	bl	8001840 <VL53L0X_WrByte>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc fe9f 	bl	8001840 <VL53L0X_WrByte>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004b10:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 808f 	bne.w	8004c38 <VL53L0X_get_info_from_device+0x98e>
 8004b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b1e:	2b07      	cmp	r3, #7
 8004b20:	f000 808a 	beq.w	8004c38 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d024      	beq.n	8004b78 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b32:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11e      	bne.n	8004b78 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004b40:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004b4a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004b4e:	2300      	movs	r3, #0
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b52:	e00e      	b.n	8004b72 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004b54:	f107 0208 	add.w	r2, r7, #8
 8004b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5a:	4413      	add	r3, r2
 8004b5c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004b68:	460a      	mov	r2, r1
 8004b6a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6e:	3301      	adds	r3, #1
 8004b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	dded      	ble.n	8004b54 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d018      	beq.n	8004bb4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b86:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d112      	bne.n	8004bb4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004b98:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	33f3      	adds	r3, #243	; 0xf3
 8004ba6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004ba8:	f107 0310 	add.w	r3, r7, #16
 8004bac:	4619      	mov	r1, r3
 8004bae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bb0:	f007 fb34 	bl	800c21c <strcpy>

		}

		if (((option & 4) == 4) &&
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d030      	beq.n	8004c20 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bc2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d12a      	bne.n	8004c20 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	025b      	lsls	r3, r3, #9
 8004bde:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004c08:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004c0c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c10:	425b      	negs	r3, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004c18:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004c20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004c2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c38:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3760      	adds	r7, #96	; 0x60
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8004c44:	b490      	push	{r4, r7}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004c50:	f240 6377 	movw	r3, #1655	; 0x677
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8004c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004c60:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8004c72:	68bb      	ldr	r3, [r7, #8]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc90      	pop	{r4, r7}
 8004c7c:	4770      	bx	lr

08004c7e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004c9e:	e005      	b.n	8004cac <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f4      	bne.n	8004ca0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004cc8:	8afb      	ldrh	r3, [r7, #22]

}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	0a12      	lsrs	r2, r2, #8
 8004cea:	b292      	uxth	r2, r2
 8004cec:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
	...

08004d00 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	4619      	mov	r1, r3
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ff94 	bl	8004c44 <VL53L0X_calc_macro_period_ps>
 8004d1c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d24:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <VL53L0X_calc_timeout_mclks+0x50>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d34:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	441a      	add	r2, r3
	timeout_period_mclks =
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8004d46:	69fb      	ldr	r3, [r7, #28]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	10624dd3 	.word	0x10624dd3

08004d54 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
 8004d60:	4613      	mov	r3, r2
 8004d62:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004d68:	787b      	ldrb	r3, [r7, #1]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff69 	bl	8004c44 <VL53L0X_calc_macro_period_ps>
 8004d72:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <VL53L0X_calc_timeout_us+0x50>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004d90:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <VL53L0X_calc_timeout_us+0x50>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	10624dd3 	.word	0x10624dd3

08004da8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	; 0x30
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	460b      	mov	r3, r1
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <get_sequence_step_timeout+0x38>
 8004dd4:	7afb      	ldrb	r3, [r7, #11]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d002      	beq.n	8004de0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004dda:	7afb      	ldrb	r3, [r7, #11]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d128      	bne.n	8004e32 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004de0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004de4:	461a      	mov	r2, r3
 8004de6:	2100      	movs	r1, #0
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7fd fa98 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004dfc:	f107 0320 	add.w	r3, r7, #32
 8004e00:	461a      	mov	r2, r3
 8004e02:	2146      	movs	r1, #70	; 0x46
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7fc fd9d 	bl	8001944 <VL53L0X_RdByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff5c 	bl	8004cd4 <VL53L0X_decode_timeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004e20:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e26:	4619      	mov	r1, r3
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff ff93 	bl	8004d54 <VL53L0X_calc_timeout_us>
 8004e2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004e30:	e092      	b.n	8004f58 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d135      	bne.n	8004ea4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004e38:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2100      	movs	r1, #0
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7fd fa6c 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004e4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 8081 	bne.w	8004f58 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004e56:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7fd fa5d 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8004e6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8004e72:	f107 031e 	add.w	r3, r7, #30
 8004e76:	461a      	mov	r2, r3
 8004e78:	2151      	movs	r1, #81	; 0x51
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7fc fd8c 	bl	8001998 <VL53L0X_RdWord>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004e86:	8bfb      	ldrh	r3, [r7, #30]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff ff23 	bl	8004cd4 <VL53L0X_decode_timeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004e92:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e98:	4619      	mov	r1, r3
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff ff5a 	bl	8004d54 <VL53L0X_calc_timeout_us>
 8004ea0:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ea2:	e059      	b.n	8004f58 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004ea4:	7afb      	ldrb	r3, [r7, #11]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d156      	bne.n	8004f58 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7fd fb3f 	bl	8002534 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01d      	beq.n	8004efc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004ec0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fd fa28 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8004edc:	f107 031e 	add.w	r3, r7, #30
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2151      	movs	r1, #81	; 0x51
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7fc fd57 	bl	8001998 <VL53L0X_RdWord>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004ef0:	8bfb      	ldrh	r3, [r7, #30]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff feee 	bl	8004cd4 <VL53L0X_decode_timeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004f04:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fd fa06 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004f18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10f      	bne.n	8004f40 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8004f20:	f107 031c 	add.w	r3, r7, #28
 8004f24:	461a      	mov	r2, r3
 8004f26:	2171      	movs	r1, #113	; 0x71
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7fc fd35 	bl	8001998 <VL53L0X_RdWord>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004f34:	8bbb      	ldrh	r3, [r7, #28]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fecc 	bl	8004cd4 <VL53L0X_decode_timeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004f40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004f48:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f4e:	4619      	mov	r1, r3
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff feff 	bl	8004d54 <VL53L0X_calc_timeout_us>
 8004f56:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	601a      	str	r2, [r3, #0]

	return Status;
 8004f5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3730      	adds	r7, #48	; 0x30
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b08a      	sub	sp, #40	; 0x28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	460b      	mov	r3, r1
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <set_sequence_step_timeout+0x26>
 8004f84:	7afb      	ldrb	r3, [r7, #11]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d002      	beq.n	8004f90 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d138      	bne.n	8005002 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004f90:	f107 031b 	add.w	r3, r7, #27
 8004f94:	461a      	mov	r2, r3
 8004f96:	2100      	movs	r1, #0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fd f9c0 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11a      	bne.n	8004fe2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004fac:	7efb      	ldrb	r3, [r7, #27]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fea4 	bl	8004d00 <VL53L0X_calc_timeout_mclks>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004fbc:	8bbb      	ldrh	r3, [r7, #28]
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d903      	bls.n	8004fcc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004fc4:	23ff      	movs	r3, #255	; 0xff
 8004fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004fca:	e004      	b.n	8004fd6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004fcc:	8bbb      	ldrh	r3, [r7, #28]
 8004fce:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004fe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 80ab 	bne.w	8005142 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2146      	movs	r1, #70	; 0x46
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7fc fc23 	bl	8001840 <VL53L0X_WrByte>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005000:	e09f      	b.n	8005142 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d135      	bne.n	8005074 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11b      	bne.n	8005048 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005010:	f107 031b 	add.w	r3, r7, #27
 8005014:	461a      	mov	r2, r3
 8005016:	2100      	movs	r1, #0
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7fd f980 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005024:	7efb      	ldrb	r3, [r7, #27]
 8005026:	461a      	mov	r2, r3
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fe68 	bl	8004d00 <VL53L0X_calc_timeout_mclks>
 8005030:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005032:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fe21 	bl	8004c7e <VL53L0X_encode_timeout>
 800503c:	4603      	mov	r3, r0
 800503e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005040:	8b3a      	ldrh	r2, [r7, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005050:	8b3b      	ldrh	r3, [r7, #24]
 8005052:	461a      	mov	r2, r3
 8005054:	2151      	movs	r1, #81	; 0x51
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7fc fc16 	bl	8001888 <VL53L0X_WrWord>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005062:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005066:	2b00      	cmp	r3, #0
 8005068:	d16b      	bne.n	8005142 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005072:	e066      	b.n	8005142 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005074:	7afb      	ldrb	r3, [r7, #11]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d160      	bne.n	800513c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	4619      	mov	r1, r3
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fd fa57 	bl	8002534 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01d      	beq.n	80050cc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005090:	f107 031b 	add.w	r3, r7, #27
 8005094:	461a      	mov	r2, r3
 8005096:	2100      	movs	r1, #0
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7fd f940 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80050a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80050ac:	f107 0318 	add.w	r3, r7, #24
 80050b0:	461a      	mov	r2, r3
 80050b2:	2151      	movs	r1, #81	; 0x51
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7fc fc6f 	bl	8001998 <VL53L0X_RdWord>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80050c0:	8b3b      	ldrh	r3, [r7, #24]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe06 	bl	8004cd4 <VL53L0X_decode_timeout>
 80050c8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80050ca:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80050cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050d4:	f107 031b 	add.w	r3, r7, #27
 80050d8:	461a      	mov	r2, r3
 80050da:	2101      	movs	r1, #1
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7fd f91e 	bl	800231e <VL53L0X_GetVcselPulsePeriod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80050e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d128      	bne.n	8005142 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80050f0:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80050f2:	461a      	mov	r2, r3
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7ff fe02 	bl	8004d00 <VL53L0X_calc_timeout_mclks>
 80050fc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80050fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	4413      	add	r3, r2
 8005104:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8005106:	6a38      	ldr	r0, [r7, #32]
 8005108:	f7ff fdb9 	bl	8004c7e <VL53L0X_encode_timeout>
 800510c:	4603      	mov	r3, r0
 800510e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8005110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005118:	8bfb      	ldrh	r3, [r7, #30]
 800511a:	461a      	mov	r2, r3
 800511c:	2171      	movs	r1, #113	; 0x71
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7fc fbb2 	bl	8001888 <VL53L0X_WrWord>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800512a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800513a:	e002      	b.n	8005142 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800513c:	23fc      	movs	r3, #252	; 0xfc
 800513e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005142:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005146:	4618      	mov	r0, r3
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	460b      	mov	r3, r1
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005160:	7afb      	ldrb	r3, [r7, #11]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005166:	2b01      	cmp	r3, #1
 8005168:	d00a      	beq.n	8005180 <VL53L0X_get_vcsel_pulse_period+0x32>
 800516a:	e013      	b.n	8005194 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800516c:	f107 0316 	add.w	r3, r7, #22
 8005170:	461a      	mov	r2, r3
 8005172:	2150      	movs	r1, #80	; 0x50
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7fc fbe5 	bl	8001944 <VL53L0X_RdByte>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800517e:	e00b      	b.n	8005198 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005180:	f107 0316 	add.w	r3, r7, #22
 8005184:	461a      	mov	r2, r3
 8005186:	2170      	movs	r1, #112	; 0x70
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7fc fbdb 	bl	8001944 <VL53L0X_RdByte>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005192:	e001      	b.n	8005198 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005194:	23fc      	movs	r3, #252	; 0xfc
 8005196:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80051a0:	7dbb      	ldrb	r3, [r7, #22]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fff9 	bl	800419a <VL53L0X_decode_vcsel_period>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	701a      	strb	r2, [r3, #0]

	return Status;
 80051b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b092      	sub	sp, #72	; 0x48
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80051cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80051d0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80051d2:	f240 7376 	movw	r3, #1910	; 0x776
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80051d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80051dc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80051de:	f44f 7325 	mov.w	r3, #660	; 0x294
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80051e4:	f240 234e 	movw	r3, #590	; 0x24e
 80051e8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80051ea:	f240 23b2 	movw	r3, #690	; 0x2b2
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80051f0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80051f6:	f240 2326 	movw	r3, #550	; 0x226
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005200:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005204:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	429a      	cmp	r2, r3
 8005210:	d205      	bcs.n	800521e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005212:	23fc      	movs	r3, #252	; 0xfc
 8005214:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005218:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800521c:	e0aa      	b.n	8005374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800521e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fd f97f 	bl	8002534 <VL53L0X_GetSequenceStepEnables>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800523c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005240:	2b00      	cmp	r3, #0
 8005242:	d15b      	bne.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8005244:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800524a:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8005250:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d052      	beq.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005256:	f107 0310 	add.w	r3, r7, #16
 800525a:	461a      	mov	r2, r3
 800525c:	2102      	movs	r1, #2
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fda2 	bl	8004da8 <get_sequence_step_timeout>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800526a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8005272:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005276:	e07d      	b.n	8005374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005278:	7d3b      	ldrb	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00f      	beq.n	800529e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800527e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	429a      	cmp	r2, r3
 800528c:	d204      	bcs.n	8005298 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800528e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
 8005296:	e002      	b.n	800529e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005298:	23fc      	movs	r3, #252	; 0xfc
 800529a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800529e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80052a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80052aa:	e063      	b.n	8005374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80052ac:	7dbb      	ldrb	r3, [r7, #22]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	4413      	add	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d204      	bcs.n	80052ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80052c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	643b      	str	r3, [r7, #64]	; 0x40
 80052cc:	e016      	b.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052ce:	23fc      	movs	r3, #252	; 0xfc
 80052d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80052d4:	e012      	b.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80052d6:	7d7b      	ldrb	r3, [r7, #21]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e0:	4413      	add	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d204      	bcs.n	80052f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80052ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	643b      	str	r3, [r7, #64]	; 0x40
 80052f4:	e002      	b.n	80052fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052f6:	23fc      	movs	r3, #252	; 0xfc
 80052f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80052fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005304:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005308:	e034      	b.n	8005374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	461a      	mov	r2, r3
 8005316:	2103      	movs	r1, #3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fd45 	bl	8004da8 <get_sequence_step_timeout>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005330:	429a      	cmp	r2, r3
 8005332:	d204      	bcs.n	800533e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	643b      	str	r3, [r7, #64]	; 0x40
 800533c:	e002      	b.n	8005344 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800533e:	23fc      	movs	r3, #252	; 0xfc
 8005340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005344:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800534c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800535a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535c:	2104      	movs	r1, #4
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe03 	bl	8004f6a <set_sequence_step_timeout>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005370:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005374:	4618      	mov	r0, r3
 8005376:	3748      	adds	r7, #72	; 0x48
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b090      	sub	sp, #64	; 0x40
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800538c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005390:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005392:	f240 7376 	movw	r3, #1910	; 0x776
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005398:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800539e:	f44f 7325 	mov.w	r3, #660	; 0x294
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80053a4:	f240 234e 	movw	r3, #590	; 0x24e
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80053aa:	f240 23b2 	movw	r3, #690	; 0x2b2
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80053b0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80053b6:	f240 2326 	movw	r3, #550	; 0x226
 80053ba:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80053c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	441a      	add	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fd f8af 	bl	8002534 <VL53L0X_GetSequenceStepEnables>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80053dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80053e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053e8:	e075      	b.n	80054d6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80053ea:	7e3b      	ldrb	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80053f0:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80053f6:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d030      	beq.n	800545e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80053fc:	f107 0310 	add.w	r3, r7, #16
 8005400:	461a      	mov	r2, r3
 8005402:	2102      	movs	r1, #2
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fccf 	bl	8004da8 <get_sequence_step_timeout>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005410:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005414:	2b00      	cmp	r3, #0
 8005416:	d122      	bne.n	800545e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005418:	7e3b      	ldrb	r3, [r7, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005422:	6939      	ldr	r1, [r7, #16]
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005428:	441a      	add	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800542e:	7ebb      	ldrb	r3, [r7, #26]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005438:	6939      	ldr	r1, [r7, #16]
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	440b      	add	r3, r1
 800543e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005440:	441a      	add	r2, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e00a      	b.n	800545e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005448:	7e7b      	ldrb	r3, [r7, #25]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005452:	6939      	ldr	r1, [r7, #16]
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005458:	441a      	add	r2, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800545e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005462:	2b00      	cmp	r3, #0
 8005464:	d114      	bne.n	8005490 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d011      	beq.n	8005490 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	461a      	mov	r2, r3
 8005472:	2103      	movs	r1, #3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fc97 	bl	8004da8 <get_sequence_step_timeout>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800548a:	441a      	add	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005494:	2b00      	cmp	r3, #0
 8005496:	d114      	bne.n	80054c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005498:	7f3b      	ldrb	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d011      	beq.n	80054c2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	461a      	mov	r2, r3
 80054a4:	2104      	movs	r1, #4
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fc7e 	bl	8004da8 <get_sequence_step_timeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80054bc:	441a      	add	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3740      	adds	r7, #64	; 0x40
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80054f2:	e0c6      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	74fb      	strb	r3, [r7, #19]
		Index++;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	f040 808d 	bne.w	8005626 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	747b      	strb	r3, [r7, #17]
			Index++;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	3301      	adds	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800551c:	7c7b      	ldrb	r3, [r7, #17]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d87e      	bhi.n	8005620 <VL53L0X_load_tuning_settings+0x140>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <VL53L0X_load_tuning_settings+0x48>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005539 	.word	0x08005539
 800552c:	08005573 	.word	0x08005573
 8005530:	080055ad 	.word	0x080055ad
 8005534:	080055e7 	.word	0x080055e7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	743b      	strb	r3, [r7, #16]
				Index++;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	3301      	adds	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4413      	add	r3, r2
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005558:	7c3b      	ldrb	r3, [r7, #16]
 800555a:	b29b      	uxth	r3, r3
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	b29a      	uxth	r2, r3
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	b29b      	uxth	r3, r3
 8005564:	4413      	add	r3, r2
 8005566:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	89ba      	ldrh	r2, [r7, #12]
 800556c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8005570:	e087      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	4413      	add	r3, r2
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	743b      	strb	r3, [r7, #16]
				Index++;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3301      	adds	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	4413      	add	r3, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3301      	adds	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005592:	7c3b      	ldrb	r3, [r7, #16]
 8005594:	b29b      	uxth	r3, r3
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	b29a      	uxth	r2, r3
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	b29b      	uxth	r3, r3
 800559e:	4413      	add	r3, r2
 80055a0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	89ba      	ldrh	r2, [r7, #12]
 80055a6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80055aa:	e06a      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	743b      	strb	r3, [r7, #16]
				Index++;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	4413      	add	r3, r2
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	3301      	adds	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80055cc:	7c3b      	ldrb	r3, [r7, #16]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	4413      	add	r3, r2
 80055da:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	89ba      	ldrh	r2, [r7, #12]
 80055e0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80055e4:	e04d      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	743b      	strb	r3, [r7, #16]
				Index++;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	3301      	adds	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3301      	adds	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005606:	7c3b      	ldrb	r3, [r7, #16]
 8005608:	b29b      	uxth	r3, r3
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	b29a      	uxth	r2, r3
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	b29b      	uxth	r3, r3
 8005612:	4413      	add	r3, r2
 8005614:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	89ba      	ldrh	r2, [r7, #12]
 800561a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800561e:	e030      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005620:	23fc      	movs	r3, #252	; 0xfc
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e02d      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d828      	bhi.n	800567e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4413      	add	r3, r2
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3301      	adds	r3, #1
 800563a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e00f      	b.n	8005662 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	4413      	add	r3, r2
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	f107 0208 	add.w	r2, r7, #8
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4413      	add	r3, r2
 8005652:	460a      	mov	r2, r1
 8005654:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	3301      	adds	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	3301      	adds	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	dbeb      	blt.n	8005642 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	f107 0208 	add.w	r2, r7, #8
 8005670:	7cb9      	ldrb	r1, [r7, #18]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc f888 	bl	8001788 <VL53L0X_WriteMulti>
 8005678:	4603      	mov	r3, r0
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e001      	b.n	8005682 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800567e:	23fc      	movs	r3, #252	; 0xfc
 8005680:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	4413      	add	r3, r2
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <VL53L0X_load_tuning_settings+0x1b8>
 800568e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f43f af2e 	beq.w	80054f4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005698:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80056ba:	f107 0313 	add.w	r3, r7, #19
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7fc ffc3 	bl	800264c <VL53L0X_GetXTalkCompensationEnable>
 80056c6:	4603      	mov	r3, r0
 80056c8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80056ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d111      	bne.n	80056f6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	8a9b      	ldrh	r3, [r3, #20]
 80056e2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3380      	adds	r3, #128	; 0x80
 80056f0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80056f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800571a:	f107 0310 	add.w	r3, r7, #16
 800571e:	461a      	mov	r2, r3
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ffbe 	bl	80056a4 <VL53L0X_get_total_xtalk_rate>
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800572c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	601a      	str	r2, [r3, #0]

	return Status;
 8005740:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b09a      	sub	sp, #104	; 0x68
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800575a:	2312      	movs	r3, #18
 800575c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800575e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005762:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005764:	2342      	movs	r3, #66	; 0x42
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005768:	2306      	movs	r3, #6
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800576c:	2307      	movs	r3, #7
 800576e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	3380      	adds	r3, #128	; 0x80
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	4413      	add	r3, r2
 80057ba:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80057bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80057c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80057d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057d4:	fb02 f303 	mul.w	r3, r2, r3
 80057d8:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80057da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8005802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005804:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800580c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580e:	085a      	lsrs	r2, r3, #1
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	441a      	add	r2, r3
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d302      	bcc.n	8005834 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800582e:	4b55      	ldr	r3, [pc, #340]	; (8005984 <VL53L0X_calc_dmax+0x238>)
 8005830:	663b      	str	r3, [r7, #96]	; 0x60
 8005832:	e016      	b.n	8005862 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8005834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005836:	085a      	lsrs	r2, r3, #1
 8005838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583a:	441a      	add	r2, r3
 800583c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8005844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8005858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800585a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005864:	039b      	lsls	r3, r3, #14
 8005866:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800586a:	4a47      	ldr	r2, [pc, #284]	; (8005988 <VL53L0X_calc_dmax+0x23c>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	fb02 f303 	mul.w	r3, r2, r3
 800587c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	3308      	adds	r3, #8
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	4613      	mov	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4413      	add	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058aa:	0b9b      	lsrs	r3, r3, #14
 80058ac:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b2:	4413      	add	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80058b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4413      	add	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	039b      	lsls	r3, r3, #14
 80058ce:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4413      	add	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80058f4:	4a24      	ldr	r2, [pc, #144]	; (8005988 <VL53L0X_calc_dmax+0x23c>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800590a:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <VL53L0X_calc_dmax+0x23c>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005916:	3380      	adds	r3, #128	; 0x80
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	085a      	lsrs	r2, r3, #1
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	441a      	add	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	65bb      	str	r3, [r7, #88]	; 0x58
 8005932:	e001      	b.n	8005938 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8005938:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800593a:	f7fe fc40 	bl	80041be <VL53L0X_isqrt>
 800593e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	085a      	lsrs	r2, r3, #1
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	441a      	add	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005956:	e001      	b.n	800595c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800595c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800595e:	f7fe fc2e 	bl	80041be <VL53L0X_isqrt>
 8005962:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8005964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800596e:	429a      	cmp	r2, r3
 8005970:	d902      	bls.n	8005978 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8005972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005976:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8005978:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800597c:	4618      	mov	r0, r3
 800597e:	3768      	adds	r7, #104	; 0x68
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	fff00000 	.word	0xfff00000
 8005988:	10624dd3 	.word	0x10624dd3

0800598c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b0b4      	sub	sp, #208	; 0xd0
 8005990:	af04      	add	r7, sp, #16
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800599a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800599e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80059a2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80059a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80059aa:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80059ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80059b2:	f241 235c 	movw	r3, #4700	; 0x125c
 80059b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80059ba:	4b9e      	ldr	r3, [pc, #632]	; (8005c34 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80059c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80059c4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80059c6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80059ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80059d4:	4b98      	ldr	r3, [pc, #608]	; (8005c38 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80059d6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80059d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80059de:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80059e4:	f240 6377 	movw	r3, #1655	; 0x677
 80059e8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8005a0c:	f107 0310 	add.w	r3, r7, #16
 8005a10:	461a      	mov	r2, r3
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7ff fe74 	bl	8005702 <VL53L0X_get_total_signal_rate>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	461a      	mov	r2, r3
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fe3b 	bl	80056a4 <VL53L0X_get_total_xtalk_rate>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005a46:	0c1b      	lsrs	r3, r3, #16
 8005a48:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005a58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d902      	bls.n	8005a68 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005a68:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d168      	bne.n	8005b42 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005a80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005a84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff f936 	bl	8004d00 <VL53L0X_calc_timeout_mclks>
 8005a94:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005aa6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005aaa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff f923 	bl	8004d00 <VL53L0X_calc_timeout_mclks>
 8005aba:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005abc:	2303      	movs	r3, #3
 8005abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8005ac2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d102      	bne.n	8005ad0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8005aca:	2302      	movs	r3, #2
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8005ad6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	02db      	lsls	r3, r3, #11
 8005ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ae8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005aec:	4a53      	ldr	r2, [pc, #332]	; (8005c3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8005af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005afc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b0e:	4a4b      	ldr	r2, [pc, #300]	; (8005c3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	099b      	lsrs	r3, r3, #6
 8005b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3380      	adds	r3, #128	; 0x80
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005b30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b34:	3380      	adds	r3, #128	; 0x80
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005b42:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8005b4a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005b4e:	e165      	b.n	8005e1c <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8005b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10c      	bne.n	8005b70 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b5c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e153      	b.n	8005e18 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8005b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	041a      	lsls	r2, r3, #16
 8005b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d902      	bls.n	8005ba2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005ba2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ba6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8005bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fafd 	bl	80041be <VL53L0X_isqrt>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	891b      	ldrh	r3, [r3, #8]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bda:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005bdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005be0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005be2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005be4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	099b      	lsrs	r3, r3, #6
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8005bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8005c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bfb8      	it	lt
 8005c16:	425b      	neglt	r3, r3
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	7e1b      	ldrb	r3, [r3, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8005c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c30:	e035      	b.n	8005c9e <VL53L0X_calc_sigma_estimate+0x312>
 8005c32:	bf00      	nop
 8005c34:	028f87ae 	.word	0x028f87ae
 8005c38:	0006999a 	.word	0x0006999a
 8005c3c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
 8005c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005c60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c66:	4413      	add	r3, r2
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8005c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8005c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c98:	0b9b      	lsrs	r3, r3, #14
 8005c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8005c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8005cbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	4413      	add	r3, r2
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8005ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce2:	f7fe fa6c 	bl	80041be <VL53L0X_isqrt>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3332      	adds	r3, #50	; 0x32
 8005cf2:	4a4c      	ldr	r2, [pc, #304]	; (8005e24 <VL53L0X_calc_sigma_estimate+0x498>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	095a      	lsrs	r2, r3, #5
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d08:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8005d0c:	fb02 f303 	mul.w	r3, r2, r3
 8005d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8005d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d18:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8005d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d26:	4a40      	ldr	r2, [pc, #256]	; (8005e28 <VL53L0X_calc_sigma_estimate+0x49c>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	0b5b      	lsrs	r3, r3, #13
 8005d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8005d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d902      	bls.n	8005d42 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8005d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8005d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8005d50:	4a36      	ldr	r2, [pc, #216]	; (8005e2c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8005d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d62:	441a      	add	r2, r3
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fa27 	bl	80041be <VL53L0X_isqrt>
 8005d70:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d7e:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d8c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	4413      	add	r3, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fa09 	bl	80041be <VL53L0X_isqrt>
 8005dac:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <VL53L0X_calc_sigma_estimate+0x44a>
 8005dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <VL53L0X_calc_sigma_estimate+0x44a>
 8005dca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d903      	bls.n	8005dde <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005de4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	9303      	str	r3, [sp, #12]
 8005df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fc9d 	bl	800574c <VL53L0X_calc_dmax>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e18:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	37c0      	adds	r7, #192	; 0xc0
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	51eb851f 	.word	0x51eb851f
 8005e28:	d1b71759 	.word	0xd1b71759
 8005e2c:	10624dd3 	.word	0x10624dd3

08005e30 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b090      	sub	sp, #64	; 0x40
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	72fb      	strb	r3, [r7, #11]
 8005e40:	4613      	mov	r3, r2
 8005e42:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	10db      	asrs	r3, r3, #3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005e90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d017      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
 8005e98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d013      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005ea0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d00f      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005ea8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d00b      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005eb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005eb4:	2b0d      	cmp	r3, #13
 8005eb6:	d007      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005eb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ebc:	2b0e      	cmp	r3, #14
 8005ebe:	d003      	beq.n	8005ec8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005ec0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d103      	bne.n	8005ed0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005ece:	e002      	b.n	8005ed6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005ed6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005ede:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7fc fc84 	bl	80027f4 <VL53L0X_GetLimitCheckEnable>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8005ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02e      	beq.n	8005f58 <VL53L0X_get_pal_range_status+0x128>
 8005efa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d12a      	bne.n	8005f58 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8005f02:	f107 0310 	add.w	r3, r7, #16
 8005f06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005f0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fd3d 	bl	800598c <VL53L0X_calc_sigma_estimate>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8005f18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f26:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8005f28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8005f30:	f107 0320 	add.w	r3, r7, #32
 8005f34:	461a      	mov	r2, r3
 8005f36:	2100      	movs	r1, #0
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fc fcdf 	bl	80028fc <VL53L0X_GetLimitCheckValue>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d902      	bls.n	8005f58 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005f58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005f60:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8005f64:	461a      	mov	r2, r3
 8005f66:	2102      	movs	r1, #2
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7fc fc43 	bl	80027f4 <VL53L0X_GetLimitCheckEnable>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005f74:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d044      	beq.n	8006006 <VL53L0X_get_pal_range_status+0x1d6>
 8005f7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d140      	bne.n	8006006 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005f84:	f107 031c 	add.w	r3, r7, #28
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7fc fcb5 	bl	80028fc <VL53L0X_GetLimitCheckValue>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8005f98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	21ff      	movs	r1, #255	; 0xff
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7fb fc4b 	bl	8001840 <VL53L0X_WrByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005fb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8005fb8:	f107 0316 	add.w	r3, r7, #22
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	21b6      	movs	r1, #182	; 0xb6
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7fb fce9 	bl	8001998 <VL53L0X_RdWord>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005fcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	21ff      	movs	r1, #255	; 0xff
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7fb fc31 	bl	8001840 <VL53L0X_WrByte>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005fe4:	8afb      	ldrh	r3, [r7, #22]
 8005fe6:	025b      	lsls	r3, r3, #9
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8005ff8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8005ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d902      	bls.n	8006006 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800600e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006012:	461a      	mov	r2, r3
 8006014:	2103      	movs	r1, #3
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7fc fbec 	bl	80027f4 <VL53L0X_GetLimitCheckEnable>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d023      	beq.n	8006072 <VL53L0X_get_pal_range_status+0x242>
 800602a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11f      	bne.n	8006072 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006032:	893b      	ldrh	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
 800603c:	e005      	b.n	800604a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	021a      	lsls	r2, r3, #8
 8006042:	893b      	ldrh	r3, [r7, #8]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800604a:	f107 0318 	add.w	r3, r7, #24
 800604e:	461a      	mov	r2, r3
 8006050:	2103      	movs	r1, #3
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7fc fc52 	bl	80028fc <VL53L0X_GetLimitCheckValue>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006064:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006068:	429a      	cmp	r2, r3
 800606a:	d202      	bcs.n	8006072 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006072:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d14a      	bne.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800607a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800607e:	2b01      	cmp	r3, #1
 8006080:	d103      	bne.n	800608a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e042      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800608a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800608e:	2b01      	cmp	r3, #1
 8006090:	d007      	beq.n	80060a2 <VL53L0X_get_pal_range_status+0x272>
 8006092:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006096:	2b02      	cmp	r3, #2
 8006098:	d003      	beq.n	80060a2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800609a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d103      	bne.n	80060aa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80060a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a4:	2205      	movs	r2, #5
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e032      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80060aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d003      	beq.n	80060ba <VL53L0X_get_pal_range_status+0x28a>
 80060b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80060b6:	2b09      	cmp	r3, #9
 80060b8:	d103      	bne.n	80060c2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	2204      	movs	r2, #4
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e026      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80060c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d007      	beq.n	80060da <VL53L0X_get_pal_range_status+0x2aa>
 80060ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80060ce:	2b0a      	cmp	r3, #10
 80060d0:	d003      	beq.n	80060da <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80060d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d103      	bne.n	80060e2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	2203      	movs	r2, #3
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e016      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80060e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d003      	beq.n	80060f2 <VL53L0X_get_pal_range_status+0x2c2>
 80060ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d103      	bne.n	80060fa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80060f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f4:	2202      	movs	r2, #2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e00a      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80060fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d103      	bne.n	800610a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e002      	b.n	8006110 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611a:	2200      	movs	r2, #0
 800611c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800611e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006122:	461a      	mov	r2, r3
 8006124:	2101      	movs	r1, #1
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7fc fb64 	bl	80027f4 <VL53L0X_GetLimitCheckEnable>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006132:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006136:	2b00      	cmp	r3, #0
 8006138:	d14f      	bne.n	80061da <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800613a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <VL53L0X_get_pal_range_status+0x31a>
 8006142:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006146:	2b01      	cmp	r3, #1
 8006148:	d103      	bne.n	8006152 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006150:	e002      	b.n	8006158 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800615e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006162:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006166:	2b04      	cmp	r3, #4
 8006168:	d003      	beq.n	8006172 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800616a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006178:	e002      	b.n	8006180 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006186:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800618a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <VL53L0X_get_pal_range_status+0x36a>
 8006192:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d103      	bne.n	80061a2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a0:	e002      	b.n	80061a8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80061ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80061b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <VL53L0X_get_pal_range_status+0x392>
 80061ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d103      	bne.n	80061ca <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c8:	e002      	b.n	80061d0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80061d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80061de:	4618      	mov	r0, r3
 80061e0:	3740      	adds	r7, #64	; 0x40
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80061ec:	4b12      	ldr	r3, [pc, #72]	; (8006238 <SystemInit+0x50>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a11      	ldr	r2, [pc, #68]	; (8006238 <SystemInit+0x50>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80061f8:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <SystemInit+0x50>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80061fe:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <SystemInit+0x50>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <SystemInit+0x50>)
 8006204:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006208:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800620c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800620e:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <SystemInit+0x50>)
 8006210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006214:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <SystemInit+0x50>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a07      	ldr	r2, [pc, #28]	; (8006238 <SystemInit+0x50>)
 800621c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006220:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <SystemInit+0x50>)
 8006224:	2200      	movs	r2, #0
 8006226:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <SystemInit+0x54>)
 800622a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800622e:	609a      	str	r2, [r3, #8]
#endif
}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	40021000 	.word	0x40021000
 800623c:	e000ed00 	.word	0xe000ed00

08006240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006244:	4b08      	ldr	r3, [pc, #32]	; (8006268 <HAL_Init+0x28>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a07      	ldr	r2, [pc, #28]	; (8006268 <HAL_Init+0x28>)
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006250:	2003      	movs	r0, #3
 8006252:	f000 f91d 	bl	8006490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006256:	200f      	movs	r0, #15
 8006258:	f000 f808 	bl	800626c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800625c:	f005 fef2 	bl	800c044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40022000 	.word	0x40022000

0800626c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8006274:	4b09      	ldr	r3, [pc, #36]	; (800629c <HAL_InitTick+0x30>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <HAL_InitTick+0x34>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	4618      	mov	r0, r3
 8006282:	f000 f93a 	bl	80064fa <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8006286:	2200      	movs	r2, #0
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	f000 f90a 	bl	80064a6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200002cc 	.word	0x200002cc
 80062a0:	10624dd3 	.word	0x10624dd3

080062a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  uwTick++;
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <HAL_IncTick+0x18>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	4a03      	ldr	r2, [pc, #12]	; (80062bc <HAL_IncTick+0x18>)
 80062b0:	6013      	str	r3, [r2, #0]
}
 80062b2:	bf00      	nop
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000a98 	.word	0x20000a98

080062c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return uwTick;
 80062c4:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <HAL_GetTick+0x10>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	20000a98 	.word	0x20000a98

080062d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80062e0:	f7ff ffee 	bl	80062c0 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80062e6:	bf00      	nop
 80062e8:	f7ff ffea 	bl	80062c0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d8f7      	bhi.n	80062e8 <HAL_Delay+0x14>
  {
  }
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <NVIC_SetPriorityGrouping+0x44>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800631c:	4013      	ands	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800632c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006332:	4a04      	ldr	r2, [pc, #16]	; (8006344 <NVIC_SetPriorityGrouping+0x44>)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	60d3      	str	r3, [r2, #12]
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	e000ed00 	.word	0xe000ed00

08006348 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <NVIC_GetPriorityGrouping+0x18>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	0a1b      	lsrs	r3, r3, #8
 8006352:	f003 0307 	and.w	r3, r3, #7
}
 8006356:	4618      	mov	r0, r3
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000ed00 	.word	0xe000ed00

08006364 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	f003 021f 	and.w	r2, r3, #31
 8006374:	4906      	ldr	r1, [pc, #24]	; (8006390 <NVIC_EnableIRQ+0x2c>)
 8006376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2001      	movs	r0, #1
 800637e:	fa00 f202 	lsl.w	r2, r0, r2
 8006382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	e000e100 	.word	0xe000e100

08006394 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80063a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da0b      	bge.n	80063c0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	490c      	ldr	r1, [pc, #48]	; (80063e0 <NVIC_SetPriority+0x4c>)
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	3b04      	subs	r3, #4
 80063b6:	0112      	lsls	r2, r2, #4
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	440b      	add	r3, r1
 80063bc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063be:	e009      	b.n	80063d4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	4907      	ldr	r1, [pc, #28]	; (80063e4 <NVIC_SetPriority+0x50>)
 80063c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ca:	0112      	lsls	r2, r2, #4
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	440b      	add	r3, r1
 80063d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	e000ed00 	.word	0xe000ed00
 80063e4:	e000e100 	.word	0xe000e100

080063e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b089      	sub	sp, #36	; 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f1c3 0307 	rsb	r3, r3, #7
 8006402:	2b04      	cmp	r3, #4
 8006404:	bf28      	it	cs
 8006406:	2304      	movcs	r3, #4
 8006408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3304      	adds	r3, #4
 800640e:	2b06      	cmp	r3, #6
 8006410:	d902      	bls.n	8006418 <NVIC_EncodePriority+0x30>
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3b03      	subs	r3, #3
 8006416:	e000      	b.n	800641a <NVIC_EncodePriority+0x32>
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43da      	mvns	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	401a      	ands	r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006430:	f04f 31ff 	mov.w	r1, #4294967295
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	fa01 f303 	lsl.w	r3, r1, r3
 800643a:	43d9      	mvns	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006440:	4313      	orrs	r3, r2
         );
}
 8006442:	4618      	mov	r0, r3
 8006444:	3724      	adds	r7, #36	; 0x24
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3b01      	subs	r3, #1
 8006458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800645c:	d301      	bcc.n	8006462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645e:	2301      	movs	r3, #1
 8006460:	e00f      	b.n	8006482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <SysTick_Config+0x40>)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3b01      	subs	r3, #1
 8006468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800646a:	210f      	movs	r1, #15
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	f7ff ff90 	bl	8006394 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <SysTick_Config+0x40>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <SysTick_Config+0x40>)
 800647c:	2207      	movs	r2, #7
 800647e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	e000e010 	.word	0xe000e010

08006490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ff31 	bl	8006300 <NVIC_SetPriorityGrouping>
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	4603      	mov	r3, r0
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064b8:	f7ff ff46 	bl	8006348 <NVIC_GetPriorityGrouping>
 80064bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	6978      	ldr	r0, [r7, #20]
 80064c4:	f7ff ff90 	bl	80063e8 <NVIC_EncodePriority>
 80064c8:	4602      	mov	r2, r0
 80064ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff ff5f 	bl	8006394 <NVIC_SetPriority>
}
 80064d6:	bf00      	nop
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4603      	mov	r3, r0
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff ff39 	bl	8006364 <NVIC_EnableIRQ>
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff ffa2 	bl	800644c <SysTick_Config>
 8006508:	4603      	mov	r3, r0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b04      	cmp	r3, #4
 8006520:	d106      	bne.n	8006530 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006528:	f043 0304 	orr.w	r3, r3, #4
 800652c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800652e:	e005      	b.n	800653c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a04      	ldr	r2, [pc, #16]	; (8006548 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006536:	f023 0304 	bic.w	r3, r3, #4
 800653a:	6013      	str	r3, [r2, #0]
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	e000e010 	.word	0xe000e010

0800654c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006550:	f000 f802 	bl	8006558 <HAL_SYSTICK_Callback>
}
 8006554:	bf00      	nop
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e09c      	b.n	80066b4 <HAL_DMA_Init+0x150>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	4b4f      	ldr	r3, [pc, #316]	; (80066c0 <HAL_DMA_Init+0x15c>)
 8006582:	429a      	cmp	r2, r3
 8006584:	d80f      	bhi.n	80065a6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	4b4d      	ldr	r3, [pc, #308]	; (80066c4 <HAL_DMA_Init+0x160>)
 800658e:	4413      	add	r3, r2
 8006590:	4a4d      	ldr	r2, [pc, #308]	; (80066c8 <HAL_DMA_Init+0x164>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	009a      	lsls	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a4a      	ldr	r2, [pc, #296]	; (80066cc <HAL_DMA_Init+0x168>)
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
 80065a4:	e00e      	b.n	80065c4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b48      	ldr	r3, [pc, #288]	; (80066d0 <HAL_DMA_Init+0x16c>)
 80065ae:	4413      	add	r3, r2
 80065b0:	4a45      	ldr	r2, [pc, #276]	; (80066c8 <HAL_DMA_Init+0x164>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	009a      	lsls	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a44      	ldr	r2, [pc, #272]	; (80066d4 <HAL_DMA_Init+0x170>)
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40
  }
    
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80065da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80065de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661e:	d031      	beq.n	8006684 <HAL_DMA_Init+0x120>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	4a29      	ldr	r2, [pc, #164]	; (80066cc <HAL_DMA_Init+0x168>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d116      	bne.n	8006658 <HAL_DMA_Init+0xf4>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800662a:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <HAL_DMA_Init+0x174>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	210f      	movs	r1, #15
 8006634:	fa01 f303 	lsl.w	r3, r1, r3
 8006638:	43db      	mvns	r3, r3
 800663a:	4927      	ldr	r1, [pc, #156]	; (80066d8 <HAL_DMA_Init+0x174>)
 800663c:	4013      	ands	r3, r2
 800663e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <HAL_DMA_Init+0x174>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6859      	ldr	r1, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	fa01 f303 	lsl.w	r3, r1, r3
 8006650:	4921      	ldr	r1, [pc, #132]	; (80066d8 <HAL_DMA_Init+0x174>)
 8006652:	4313      	orrs	r3, r2
 8006654:	600b      	str	r3, [r1, #0]
 8006656:	e015      	b.n	8006684 <HAL_DMA_Init+0x120>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8006658:	4b20      	ldr	r3, [pc, #128]	; (80066dc <HAL_DMA_Init+0x178>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	210f      	movs	r1, #15
 8006662:	fa01 f303 	lsl.w	r3, r1, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	491c      	ldr	r1, [pc, #112]	; (80066dc <HAL_DMA_Init+0x178>)
 800666a:	4013      	ands	r3, r2
 800666c:	600b      	str	r3, [r1, #0]
     
      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800666e:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <HAL_DMA_Init+0x178>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6859      	ldr	r1, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	4917      	ldr	r1, [pc, #92]	; (80066dc <HAL_DMA_Init+0x178>)
 8006680:	4313      	orrs	r3, r2
 8006682:	600b      	str	r3, [r1, #0]
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40020407 	.word	0x40020407
 80066c4:	bffdfff8 	.word	0xbffdfff8
 80066c8:	cccccccd 	.word	0xcccccccd
 80066cc:	40020000 	.word	0x40020000
 80066d0:	bffdfbf8 	.word	0xbffdfbf8
 80066d4:	40020400 	.word	0x40020400
 80066d8:	400200a8 	.word	0x400200a8
 80066dc:	400204a8 	.word	0x400204a8

080066e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_DMA_Start_IT+0x20>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e04b      	b.n	8006798 <HAL_DMA_Start_IT+0xb8>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d13a      	bne.n	800678a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f91f 	bl	800697c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 020e 	orr.w	r2, r2, #14
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e00f      	b.n	8006778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 020a 	orr.w	r2, r2, #10
 8006776:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e005      	b.n	8006796 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006792:	2302      	movs	r3, #2
 8006794:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d005      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	63da      	str	r2, [r3, #60]	; 0x3c
        
    status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e02a      	b.n	800681a <HAL_DMA_Abort_IT+0x7a>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 020e 	bic.w	r2, r2, #14
 80067d2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR |= ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	2201      	movs	r2, #1
 80067f0:	409a      	lsls	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_DMA_Abort_IT+0x7a>
    {
      hdma->XferAbortCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
    } 
  }
  return status;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006840:	2204      	movs	r2, #4
 8006842:	409a      	lsls	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d027      	beq.n	800689c <HAL_DMA_IRQHandler+0x78>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d022      	beq.n	800689c <HAL_DMA_IRQHandler+0x78>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0204 	bic.w	r2, r2, #4
 8006872:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	2204      	movs	r2, #4
 8006880:	409a      	lsls	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	2b00      	cmp	r3, #0
 8006890:	d06f      	beq.n	8006972 <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800689a:	e06a      	b.n	8006972 <HAL_DMA_IRQHandler+0x14e>
      }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	2202      	movs	r2, #2
 80068a2:	409a      	lsls	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02f      	beq.n	800690c <HAL_DMA_IRQHandler+0xe8>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d02a      	beq.n	800690c <HAL_DMA_IRQHandler+0xe8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <HAL_DMA_IRQHandler+0xb8>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 020a 	bic.w	r2, r2, #10
 80068d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR |= (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	6859      	ldr	r1, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	2202      	movs	r2, #2
 80068e8:	409a      	lsls	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d037      	beq.n	8006972 <HAL_DMA_IRQHandler+0x14e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800690a:	e032      	b.n	8006972 <HAL_DMA_IRQHandler+0x14e>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006910:	2208      	movs	r2, #8
 8006912:	409a      	lsls	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4013      	ands	r3, r2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d02b      	beq.n	8006974 <HAL_DMA_IRQHandler+0x150>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d026      	beq.n	8006974 <HAL_DMA_IRQHandler+0x150>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 020e 	bic.w	r2, r2, #14
 8006934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	2201      	movs	r2, #1
 8006942:	409a      	lsls	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <HAL_DMA_IRQHandler+0x150>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
    }
  }
  return;
 8006972:	bf00      	nop
 8006974:	bf00      	nop
}
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	2201      	movs	r2, #1
 8006996:	409a      	lsls	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d108      	bne.n	80069c2 <DMA_SetConfig+0x46>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069c0:	e007      	b.n	80069d2 <DMA_SetConfig+0x56>
    hdma->Instance->CPAR = SrcAddress;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80069f2:	e17f      	b.n	8006cf4 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8171 	beq.w	8006cee <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d003      	beq.n	8006a1c <HAL_GPIO_Init+0x40>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b12      	cmp	r3, #18
 8006a1a:	d123      	bne.n	8006a64 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	08da      	lsrs	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3208      	adds	r2, #8
 8006a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	220f      	movs	r2, #15
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	08da      	lsrs	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3208      	adds	r2, #8
 8006a5e:	6939      	ldr	r1, [r7, #16]
 8006a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	2203      	movs	r2, #3
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43db      	mvns	r3, r3
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 0203 	and.w	r2, r3, #3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_GPIO_Init+0xdc>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d007      	beq.n	8006ab8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006aac:	2b11      	cmp	r3, #17
 8006aae:	d003      	beq.n	8006ab8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b12      	cmp	r3, #18
 8006ab6:	d130      	bne.n	8006b1a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4013      	ands	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006aee:	2201      	movs	r2, #1
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4013      	ands	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	091b      	lsrs	r3, r3, #4
 8006b04:	f003 0201 	and.w	r2, r3, #1
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d118      	bne.n	8006b58 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43db      	mvns	r3, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	f003 0201 	and.w	r2, r3, #1
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	2203      	movs	r2, #3
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80ac 	beq.w	8006cee <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b96:	4b5e      	ldr	r3, [pc, #376]	; (8006d10 <HAL_GPIO_Init+0x334>)
 8006b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9a:	4a5d      	ldr	r2, [pc, #372]	; (8006d10 <HAL_GPIO_Init+0x334>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <HAL_GPIO_Init+0x334>)
 8006ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006bae:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <HAL_GPIO_Init+0x338>)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	089b      	lsrs	r3, r3, #2
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bba:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	220f      	movs	r2, #15
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006bd8:	d025      	beq.n	8006c26 <HAL_GPIO_Init+0x24a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a4e      	ldr	r2, [pc, #312]	; (8006d18 <HAL_GPIO_Init+0x33c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01f      	beq.n	8006c22 <HAL_GPIO_Init+0x246>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a4d      	ldr	r2, [pc, #308]	; (8006d1c <HAL_GPIO_Init+0x340>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d019      	beq.n	8006c1e <HAL_GPIO_Init+0x242>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a4c      	ldr	r2, [pc, #304]	; (8006d20 <HAL_GPIO_Init+0x344>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_GPIO_Init+0x23e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a4b      	ldr	r2, [pc, #300]	; (8006d24 <HAL_GPIO_Init+0x348>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00d      	beq.n	8006c16 <HAL_GPIO_Init+0x23a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a4a      	ldr	r2, [pc, #296]	; (8006d28 <HAL_GPIO_Init+0x34c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d007      	beq.n	8006c12 <HAL_GPIO_Init+0x236>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a49      	ldr	r2, [pc, #292]	; (8006d2c <HAL_GPIO_Init+0x350>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_GPIO_Init+0x232>
 8006c0a:	2306      	movs	r3, #6
 8006c0c:	e00c      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c0e:	2307      	movs	r3, #7
 8006c10:	e00a      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c12:	2305      	movs	r3, #5
 8006c14:	e008      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c16:	2304      	movs	r3, #4
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e004      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e002      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_GPIO_Init+0x24c>
 8006c26:	2300      	movs	r3, #0
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	f002 0203 	and.w	r2, r2, #3
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	4093      	lsls	r3, r2
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c38:	4936      	ldr	r1, [pc, #216]	; (8006d14 <HAL_GPIO_Init+0x338>)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	3302      	adds	r3, #2
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c46:	4b3a      	ldr	r3, [pc, #232]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4013      	ands	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c6a:	4a31      	ldr	r2, [pc, #196]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006c70:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c94:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c9a:	4b25      	ldr	r3, [pc, #148]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ce8:	4a11      	ldr	r2, [pc, #68]	; (8006d30 <HAL_GPIO_Init+0x354>)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f47f ae78 	bne.w	80069f4 <HAL_GPIO_Init+0x18>
  }
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40010000 	.word	0x40010000
 8006d18:	48000400 	.word	0x48000400
 8006d1c:	48000800 	.word	0x48000800
 8006d20:	48000c00 	.word	0x48000c00
 8006d24:	48001000 	.word	0x48001000
 8006d28:	48001400 	.word	0x48001400
 8006d2c:	48001800 	.word	0x48001800
 8006d30:	40010400 	.word	0x40010400

08006d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	887b      	ldrh	r3, [r7, #2]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e001      	b.n	8006d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	807b      	strh	r3, [r7, #2]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d72:	787b      	ldrb	r3, [r7, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d78:	887a      	ldrh	r2, [r7, #2]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d7e:	e002      	b.n	8006d86 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d9a:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fa fc6e 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40010400 	.word	0x40010400

08006dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e07d      	b.n	8006ece <HAL_I2C_Init+0x10e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f875 	bl	8006ed6 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2224      	movs	r2, #36	; 0x24
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0201 	bic.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e20:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d012      	beq.n	8006e50 <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d107      	bne.n	8006e42 <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	e006      	b.n	8006e50 <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006e4e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d104      	bne.n	8006e62 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	ea42 0103 	orr.w	r1, r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69d9      	ldr	r1, [r3, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	817b      	strh	r3, [r7, #10]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	f040 80e6 	bne.w	80070da <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_I2C_Master_Transmit+0x34>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e0df      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f24:	f7ff f9cc 	bl	80062c0 <HAL_GetTick>
 8006f28:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2319      	movs	r3, #25
 8006f30:	2201      	movs	r2, #1
 8006f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f9fb 	bl	8007332 <I2C_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e0ca      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2221      	movs	r2, #33	; 0x21
 8006f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2210      	movs	r2, #16
 8006f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	893a      	ldrh	r2, [r7, #8]
 8006f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2bff      	cmp	r3, #255	; 0xff
 8006f76:	d90f      	bls.n	8006f98 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	22ff      	movs	r2, #255	; 0xff
 8006f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	8979      	ldrh	r1, [r7, #10]
 8006f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fb41 	bl	8007618 <I2C_TransferConfig>
 8006f96:	e071      	b.n	800707c <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	8979      	ldrh	r1, [r7, #10]
 8006faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fb2f 	bl	8007618 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8006fba:	e05f      	b.n	800707c <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	6a39      	ldr	r1, [r7, #32]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f9f0 	bl	80073a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d101      	bne.n	8006fd8 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e081      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e07f      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	1c59      	adds	r1, r3, #1
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	6251      	str	r1, [r2, #36]	; 0x24
 8006fe6:	781a      	ldrb	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d135      	bne.n	800707c <HAL_I2C_Master_Transmit+0x194>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d030      	beq.n	800707c <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	2200      	movs	r2, #0
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f984 	bl	8007332 <I2C_WaitOnFlagUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e053      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2bff      	cmp	r3, #255	; 0xff
 800703c:	d90e      	bls.n	800705c <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007048:	b2da      	uxtb	r2, r3
 800704a:	8979      	ldrh	r1, [r7, #10]
 800704c:	2300      	movs	r3, #0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fadf 	bl	8007618 <I2C_TransferConfig>
 800705a:	e00f      	b.n	800707c <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	b2da      	uxtb	r2, r3
 800706c:	8979      	ldrh	r1, [r7, #10]
 800706e:	2300      	movs	r3, #0
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 face 	bl	8007618 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d19a      	bne.n	8006fbc <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	6a39      	ldr	r1, [r7, #32]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f9cb 	bl	8007426 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	2b04      	cmp	r3, #4
 800709c:	d101      	bne.n	80070a2 <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e01c      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e01a      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2220      	movs	r2, #32
 80070ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <HAL_I2C_Master_Transmit+0x1fc>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	fe00e800 	.word	0xfe00e800

080070e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	461a      	mov	r2, r3
 80070f4:	460b      	mov	r3, r1
 80070f6:	817b      	strh	r3, [r7, #10]
 80070f8:	4613      	mov	r3, r2
 80070fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b20      	cmp	r3, #32
 800710a:	f040 80e7 	bne.w	80072dc <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_I2C_Master_Receive+0x34>
 8007118:	2302      	movs	r3, #2
 800711a:	e0e0      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007124:	f7ff f8cc 	bl	80062c0 <HAL_GetTick>
 8007128:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2319      	movs	r3, #25
 8007130:	2201      	movs	r2, #1
 8007132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f8fb 	bl	8007332 <I2C_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0cb      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2222      	movs	r2, #34	; 0x22
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2210      	movs	r2, #16
 8007152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	893a      	ldrh	r2, [r7, #8]
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	2bff      	cmp	r3, #255	; 0xff
 8007176:	d90f      	bls.n	8007198 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	22ff      	movs	r2, #255	; 0xff
 800717c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007182:	b2da      	uxtb	r2, r3
 8007184:	8979      	ldrh	r1, [r7, #10]
 8007186:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa41 	bl	8007618 <I2C_TransferConfig>
 8007196:	e072      	b.n	800727e <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	8979      	ldrh	r1, [r7, #10]
 80071aa:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fa2f 	bl	8007618 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 80071ba:	e060      	b.n	800727e <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	6a39      	ldr	r1, [r7, #32]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f96d 	bl	80074a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d101      	bne.n	80071d8 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e082      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e080      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	6251      	str	r1, [r2, #36]	; 0x24
 80071ec:	b2c2      	uxtb	r2, r0
 80071ee:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720e:	2b00      	cmp	r3, #0
 8007210:	d135      	bne.n	800727e <HAL_I2C_Master_Receive+0x196>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d030      	beq.n	800727e <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	2200      	movs	r2, #0
 8007224:	2180      	movs	r1, #128	; 0x80
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f883 	bl	8007332 <I2C_WaitOnFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e053      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2bff      	cmp	r3, #255	; 0xff
 800723e:	d90e      	bls.n	800725e <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	22ff      	movs	r2, #255	; 0xff
 8007244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724a:	b2da      	uxtb	r2, r3
 800724c:	8979      	ldrh	r1, [r7, #10]
 800724e:	2300      	movs	r3, #0
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f9de 	bl	8007618 <I2C_TransferConfig>
 800725c:	e00f      	b.n	800727e <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	b2da      	uxtb	r2, r3
 800726e:	8979      	ldrh	r1, [r7, #10]
 8007270:	2300      	movs	r3, #0
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f9cd 	bl	8007618 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d199      	bne.n	80071bc <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	6a39      	ldr	r1, [r7, #32]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f8ca 	bl	8007426 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	2b04      	cmp	r3, #4
 800729e:	d101      	bne.n	80072a4 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e01c      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e01a      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2220      	movs	r2, #32
 80072ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_I2C_Master_Receive+0x200>)
 80072bc:	400b      	ands	r3, r1
 80072be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	fe00e800 	.word	0xfe00e800

080072ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d103      	bne.n	800730a <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d007      	beq.n	8007328 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	619a      	str	r2, [r3, #24]
  }
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr

08007332 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	603b      	str	r3, [r7, #0]
 800733e:	4613      	mov	r3, r2
 8007340:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007342:	e01c      	b.n	800737e <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d018      	beq.n	800737e <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007352:	f7fe ffb5 	bl	80062c0 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d20d      	bcs.n	800737e <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e00f      	b.n	800739e <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	429a      	cmp	r2, r3
 800739a:	d0d3      	beq.n	8007344 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073b2:	e02c      	b.n	800740e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f8cf 	bl	800755c <I2C_IsAcknowledgeFailed>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e02a      	b.n	800741e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d01e      	beq.n	800740e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80073d6:	f7fe ff73 	bl	80062c0 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d213      	bcs.n	800740e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	f043 0220 	orr.w	r2, r3, #32
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e007      	b.n	800741e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d1cb      	bne.n	80073b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007432:	e028      	b.n	8007486 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f88f 	bl	800755c <I2C_IsAcknowledgeFailed>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e026      	b.n	8007496 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800744e:	f7fe ff37 	bl	80062c0 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	429a      	cmp	r2, r3
 800745c:	d213      	bcs.n	8007486 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e007      	b.n	8007496 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b20      	cmp	r3, #32
 8007492:	d1cf      	bne.n	8007434 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074ac:	e048      	b.n	8007540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f852 	bl	800755c <I2C_IsAcknowledgeFailed>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e046      	b.n	8007550 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d11c      	bne.n	800750a <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2220      	movs	r2, #32
 80074d6:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6859      	ldr	r1, [r3, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 80074e4:	400b      	ands	r3, r1
 80074e6:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e022      	b.n	8007550 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8007510:	f7fe fed6 	bl	80062c0 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d20f      	bcs.n	8007540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e007      	b.n	8007550 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d1af      	bne.n	80074ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	fe00e800 	.word	0xfe00e800

0800755c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f003 0310 	and.w	r3, r3, #16
 8007572:	2b10      	cmp	r3, #16
 8007574:	d148      	bne.n	8007608 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007576:	e01c      	b.n	80075b2 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d018      	beq.n	80075b2 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <I2C_IsAcknowledgeFailed+0x3a>
 8007586:	f7fe fe9b 	bl	80062c0 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	429a      	cmp	r2, r3
 8007594:	d20d      	bcs.n	80075b2 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e02b      	b.n	800760a <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d1db      	bne.n	8007578 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2210      	movs	r2, #16
 80075c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2220      	movs	r2, #32
 80075ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fe8b 	bl	80072ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6859      	ldr	r1, [r3, #4]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <I2C_IsAcknowledgeFailed+0xb8>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2204      	movs	r2, #4
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	fe00e800 	.word	0xfe00e800

08007618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	817b      	strh	r3, [r7, #10]
 8007626:	4613      	mov	r3, r2
 8007628:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <I2C_TransferConfig+0x58>)
 800763a:	4013      	ands	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007644:	7a7b      	ldrb	r3, [r7, #9]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	431a      	orrs	r2, r3
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4313      	orrs	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	605a      	str	r2, [r3, #4]
}
 8007664:	bf00      	nop
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	fc009800 	.word	0xfc009800

08007674 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <HAL_PWREx_GetVoltageRange+0x14>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007680:	4618      	mov	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr
 8007688:	40007000 	.word	0x40007000

0800768c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800769e:	d12f      	bne.n	8007700 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80076a0:	4b22      	ldr	r3, [pc, #136]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ac:	d037      	beq.n	800771e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076ae:	4b1f      	ldr	r3, [pc, #124]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80076b6:	4a1d      	ldr	r2, [pc, #116]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076bc:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80076be:	4b1c      	ldr	r3, [pc, #112]	; (8007730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1c      	ldr	r2, [pc, #112]	; (8007734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	0c9b      	lsrs	r3, r3, #18
 80076ca:	2232      	movs	r2, #50	; 0x32
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80076d2:	e002      	b.n	80076da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d006      	beq.n	80076ee <HAL_PWREx_ControlVoltageScaling+0x62>
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ec:	d0f2      	beq.n	80076d4 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fa:	d110      	bne.n	800771e <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e00f      	b.n	8007720 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770c:	d007      	beq.n	800771e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007716:	4a05      	ldr	r2, [pc, #20]	; (800772c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800771c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}  
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40007000 	.word	0x40007000
 8007730:	200002cc 	.word	0x200002cc
 8007734:	431bde83 	.word	0x431bde83

08007738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	; 0x30
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 80db 	beq.w	8007908 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8007752:	4ba3      	ldr	r3, [pc, #652]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8084 	bne.w	8007868 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007760:	4b9f      	ldr	r3, [pc, #636]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_RCC_OscConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e363      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1a      	ldr	r2, [r3, #32]
 800777c:	4b98      	ldr	r3, [pc, #608]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_RCC_OscConfig+0x5a>
 8007788:	4b95      	ldr	r3, [pc, #596]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007790:	e005      	b.n	800779e <HAL_RCC_OscConfig+0x66>
 8007792:	4b93      	ldr	r3, [pc, #588]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800779e:	4293      	cmp	r3, r2
 80077a0:	d223      	bcs.n	80077ea <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fdba 	bl	8008320 <RCC_SetFlashLatencyFromMSIRange>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e344      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077b6:	4b8a      	ldr	r3, [pc, #552]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a89      	ldr	r2, [pc, #548]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077bc:	f043 0308 	orr.w	r3, r3, #8
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	4b87      	ldr	r3, [pc, #540]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	4984      	ldr	r1, [pc, #528]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077d4:	4b82      	ldr	r3, [pc, #520]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	497f      	ldr	r1, [pc, #508]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	604b      	str	r3, [r1, #4]
 80077e8:	e022      	b.n	8007830 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077ea:	4b7d      	ldr	r3, [pc, #500]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a7c      	ldr	r2, [pc, #496]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077f0:	f043 0308 	orr.w	r3, r3, #8
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	4b7a      	ldr	r3, [pc, #488]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	4977      	ldr	r1, [pc, #476]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007804:	4313      	orrs	r3, r2
 8007806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007808:	4b75      	ldr	r3, [pc, #468]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	4972      	ldr	r1, [pc, #456]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007818:	4313      	orrs	r3, r2
 800781a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fd7d 	bl	8008320 <RCC_SetFlashLatencyFromMSIRange>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e307      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007830:	f000 fc2e 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 8007834:	4601      	mov	r1, r0
 8007836:	4b6a      	ldr	r3, [pc, #424]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800783e:	23f0      	movs	r3, #240	; 0xf0
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	fa93 f3a3 	rbit	r3, r3
 8007848:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	fab3 f383 	clz	r3, r3
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	4a63      	ldr	r2, [pc, #396]	; (80079e4 <HAL_RCC_OscConfig+0x2ac>)
 8007856:	5cd3      	ldrb	r3, [r2, r3]
 8007858:	fa21 f303 	lsr.w	r3, r1, r3
 800785c:	4a62      	ldr	r2, [pc, #392]	; (80079e8 <HAL_RCC_OscConfig+0x2b0>)
 800785e:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8007860:	200f      	movs	r0, #15
 8007862:	f7fe fd03 	bl	800626c <HAL_InitTick>
 8007866:	e04f      	b.n	8007908 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d032      	beq.n	80078d6 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007870:	4b5b      	ldr	r3, [pc, #364]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a5a      	ldr	r2, [pc, #360]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800787c:	f7fe fd20 	bl	80062c0 <HAL_GetTick>
 8007880:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007884:	f7fe fd1c 	bl	80062c0 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e2d4      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8007896:	4b52      	ldr	r3, [pc, #328]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078a2:	4b4f      	ldr	r3, [pc, #316]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a4e      	ldr	r2, [pc, #312]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b4c      	ldr	r3, [pc, #304]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	4949      	ldr	r1, [pc, #292]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078c0:	4b47      	ldr	r3, [pc, #284]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4944      	ldr	r1, [pc, #272]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	e018      	b.n	8007908 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80078d6:	4b42      	ldr	r3, [pc, #264]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a41      	ldr	r2, [pc, #260]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078e2:	f7fe fced 	bl	80062c0 <HAL_GetTick>
 80078e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078ea:	f7fe fce9 	bl	80062c0 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e2a1      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80078fc:	4b38      	ldr	r3, [pc, #224]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d07e      	beq.n	8007a12 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8007914:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 030c 	and.w	r3, r3, #12
 800791c:	2b08      	cmp	r3, #8
 800791e:	d00b      	beq.n	8007938 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007920:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8007928:	2b0c      	cmp	r3, #12
 800792a:	d111      	bne.n	8007950 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800792c:	4b2c      	ldr	r3, [pc, #176]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d10b      	bne.n	8007950 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007938:	4b29      	ldr	r3, [pc, #164]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d065      	beq.n	8007a10 <HAL_RCC_OscConfig+0x2d8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d161      	bne.n	8007a10 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e277      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007958:	d106      	bne.n	8007968 <HAL_RCC_OscConfig+0x230>
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a20      	ldr	r2, [pc, #128]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	e01d      	b.n	80079a4 <HAL_RCC_OscConfig+0x26c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007970:	d10c      	bne.n	800798c <HAL_RCC_OscConfig+0x254>
 8007972:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1a      	ldr	r2, [pc, #104]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e00b      	b.n	80079a4 <HAL_RCC_OscConfig+0x26c>
 800798c:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a13      	ldr	r2, [pc, #76]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 8007992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 800799e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d015      	beq.n	80079d8 <HAL_RCC_OscConfig+0x2a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ac:	f7fe fc88 	bl	80062c0 <HAL_GetTick>
 80079b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80079b2:	e00a      	b.n	80079ca <HAL_RCC_OscConfig+0x292>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b4:	f7fe fc84 	bl	80062c0 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e23a      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_RCC_OscConfig+0x2a8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0ee      	beq.n	80079b4 <HAL_RCC_OscConfig+0x27c>
 80079d6:	e01c      	b.n	8007a12 <HAL_RCC_OscConfig+0x2da>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fe fc72 	bl	80062c0 <HAL_GetTick>
 80079dc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80079de:	e010      	b.n	8007a02 <HAL_RCC_OscConfig+0x2ca>
 80079e0:	40021000 	.word	0x40021000
 80079e4:	0800cd28 	.word	0x0800cd28
 80079e8:	200002cc 	.word	0x200002cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ec:	f7fe fc68 	bl	80062c0 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e21e      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8007a02:	4bb0      	ldr	r3, [pc, #704]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1ee      	bne.n	80079ec <HAL_RCC_OscConfig+0x2b4>
 8007a0e:	e000      	b.n	8007a12 <HAL_RCC_OscConfig+0x2da>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d07f      	beq.n	8007b1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8007a1e:	4ba9      	ldr	r3, [pc, #676]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 030c 	and.w	r3, r3, #12
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d00b      	beq.n	8007a42 <HAL_RCC_OscConfig+0x30a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a2a:	4ba6      	ldr	r3, [pc, #664]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8007a32:	2b0c      	cmp	r3, #12
 8007a34:	d127      	bne.n	8007a86 <HAL_RCC_OscConfig+0x34e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a36:	4ba3      	ldr	r3, [pc, #652]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d121      	bne.n	8007a86 <HAL_RCC_OscConfig+0x34e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a42:	4ba0      	ldr	r3, [pc, #640]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_RCC_OscConfig+0x322>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e1f2      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a5a:	4b9a      	ldr	r3, [pc, #616]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6919      	ldr	r1, [r3, #16]
 8007a66:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8007a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	fa93 f3a3 	rbit	r3, r3
 8007a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	fab3 f383 	clz	r3, r3
 8007a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7e:	4991      	ldr	r1, [pc, #580]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a84:	e04b      	b.n	8007b1e <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02e      	beq.n	8007aec <HAL_RCC_OscConfig+0x3b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a8e:	4b8d      	ldr	r3, [pc, #564]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a8c      	ldr	r2, [pc, #560]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9a:	f7fe fc11 	bl	80062c0 <HAL_GetTick>
 8007a9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x37c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa2:	f7fe fc0d 	bl	80062c0 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e1c5      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007ab4:	4b83      	ldr	r3, [pc, #524]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x36a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac0:	4b80      	ldr	r3, [pc, #512]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6919      	ldr	r1, [r3, #16]
 8007acc:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8007ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	fa93 f3a3 	rbit	r3, r3
 8007ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	fab3 f383 	clz	r3, r3
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	4977      	ldr	r1, [pc, #476]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	604b      	str	r3, [r1, #4]
 8007aea:	e018      	b.n	8007b1e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aec:	4b75      	ldr	r3, [pc, #468]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a74      	ldr	r2, [pc, #464]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fe fbe2 	bl	80062c0 <HAL_GetTick>
 8007afc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x3da>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b00:	f7fe fbde 	bl	80062c0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x3da>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e196      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8007b12:	4b6c      	ldr	r3, [pc, #432]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d03c      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d01c      	beq.n	8007b6c <HAL_RCC_OscConfig+0x434>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b32:	4b64      	ldr	r3, [pc, #400]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b38:	4a62      	ldr	r2, [pc, #392]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b42:	f7fe fbbd 	bl	80062c0 <HAL_GetTick>
 8007b46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b4a:	f7fe fbb9 	bl	80062c0 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e171      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8007b5c:	4b59      	ldr	r3, [pc, #356]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ef      	beq.n	8007b4a <HAL_RCC_OscConfig+0x412>
 8007b6a:	e01b      	b.n	8007ba4 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b6c:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b72:	4a54      	ldr	r2, [pc, #336]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7c:	f7fe fba0 	bl	80062c0 <HAL_GetTick>
 8007b80:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b84:	f7fe fb9c 	bl	80062c0 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x45e>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e154      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8007b96:	4b4b      	ldr	r3, [pc, #300]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1ef      	bne.n	8007b84 <HAL_RCC_OscConfig+0x44c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80a9 	beq.w	8007d04 <HAL_RCC_OscConfig+0x5cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10e      	bne.n	8007be2 <HAL_RCC_OscConfig+0x4aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	4a3e      	ldr	r2, [pc, #248]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd0:	4b3c      	ldr	r3, [pc, #240]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be2:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_RCC_OscConfig+0x590>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d118      	bne.n	8007c20 <HAL_RCC_OscConfig+0x4e8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bee:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_RCC_OscConfig+0x590>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a35      	ldr	r2, [pc, #212]	; (8007cc8 <HAL_RCC_OscConfig+0x590>)
 8007bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bfa:	f7fe fb61 	bl	80062c0 <HAL_GetTick>
 8007bfe:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c00:	e008      	b.n	8007c14 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c02:	f7fe fb5d 	bl	80062c0 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e115      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c14:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <HAL_RCC_OscConfig+0x590>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0f0      	beq.n	8007c02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d108      	bne.n	8007c3a <HAL_RCC_OscConfig+0x502>
 8007c28:	4b26      	ldr	r3, [pc, #152]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2e:	4a25      	ldr	r2, [pc, #148]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c38:	e024      	b.n	8007c84 <HAL_RCC_OscConfig+0x54c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d110      	bne.n	8007c64 <HAL_RCC_OscConfig+0x52c>
 8007c42:	4b20      	ldr	r3, [pc, #128]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	4a1e      	ldr	r2, [pc, #120]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c4a:	f043 0304 	orr.w	r3, r3, #4
 8007c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c52:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c62:	e00f      	b.n	8007c84 <HAL_RCC_OscConfig+0x54c>
 8007c64:	4b17      	ldr	r3, [pc, #92]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c74:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007c7c:	f023 0304 	bic.w	r3, r3, #4
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d016      	beq.n	8007cba <HAL_RCC_OscConfig+0x582>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8c:	f7fe fb18 	bl	80062c0 <HAL_GetTick>
 8007c90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8007c92:	e00a      	b.n	8007caa <HAL_RCC_OscConfig+0x572>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c94:	f7fe fb14 	bl	80062c0 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x572>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e0ca      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <HAL_RCC_OscConfig+0x58c>)
 8007cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0ed      	beq.n	8007c94 <HAL_RCC_OscConfig+0x55c>
 8007cb8:	e01a      	b.n	8007cf0 <HAL_RCC_OscConfig+0x5b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cba:	f7fe fb01 	bl	80062c0 <HAL_GetTick>
 8007cbe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCC_OscConfig+0x5aa>
 8007cc2:	bf00      	nop
 8007cc4:	40021000 	.word	0x40021000
 8007cc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ccc:	f7fe faf8 	bl	80062c0 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e0ae      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8007ce2:	4b59      	ldr	r3, [pc, #356]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ed      	bne.n	8007ccc <HAL_RCC_OscConfig+0x594>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d105      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cf8:	4b53      	ldr	r3, [pc, #332]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	4a52      	ldr	r2, [pc, #328]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 8098 	beq.w	8007e3e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d0e:	4b4e      	ldr	r3, [pc, #312]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	f000 808f 	beq.w	8007e3a <HAL_RCC_OscConfig+0x702>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d156      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x69a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d24:	4b48      	ldr	r3, [pc, #288]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a47      	ldr	r2, [pc, #284]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fe fac6 	bl	80062c0 <HAL_GetTick>
 8007d34:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d38:	f7fe fac2 	bl	80062c0 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e07a      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007d4a:	4b3f      	ldr	r3, [pc, #252]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f0      	bne.n	8007d38 <HAL_RCC_OscConfig+0x600>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	011a      	lsls	r2, r3, #4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	091b      	lsrs	r3, r3, #4
 8007d6c:	045b      	lsls	r3, r3, #17
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	085b      	lsrs	r3, r3, #1
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	055b      	lsls	r3, r3, #21
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	065b      	lsls	r3, r3, #25
 8007d8c:	492e      	ldr	r1, [pc, #184]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d92:	4b2d      	ldr	r3, [pc, #180]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2c      	ldr	r2, [pc, #176]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d9c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d9e:	4b2a      	ldr	r3, [pc, #168]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	4a29      	ldr	r2, [pc, #164]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fe fa89 	bl	80062c0 <HAL_GetTick>
 8007dae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x68c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db2:	f7fe fa85 	bl	80062c0 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x68c>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e03d      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007dc4:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <HAL_RCC_OscConfig+0x67a>
 8007dd0:	e035      	b.n	8007e3e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ddc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8007dea:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <HAL_RCC_OscConfig+0x6ca>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007dfc:	f023 0303 	bic.w	r3, r3, #3
 8007e00:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007e02:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4a10      	ldr	r2, [pc, #64]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007e08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e12:	f7fe fa55 	bl	80062c0 <HAL_GetTick>
 8007e16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e1a:	f7fe fa51 	bl	80062c0 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e009      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <HAL_RCC_OscConfig+0x710>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f0      	bne.n	8007e1a <HAL_RCC_OscConfig+0x6e2>
 8007e38:	e001      	b.n	8007e3e <HAL_RCC_OscConfig+0x706>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <HAL_RCC_OscConfig+0x708>
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3730      	adds	r7, #48	; 0x30
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40021000 	.word	0x40021000

08007e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007e5a:	4b89      	ldr	r3, [pc, #548]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d910      	bls.n	8007e8a <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e68:	4b85      	ldr	r3, [pc, #532]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f023 0207 	bic.w	r2, r3, #7
 8007e70:	4983      	ldr	r1, [pc, #524]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007e78:	4b81      	ldr	r3, [pc, #516]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d001      	beq.n	8007e8a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0f6      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e96:	4b7b      	ldr	r3, [pc, #492]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	4978      	ldr	r1, [pc, #480]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 808e 	beq.w	8007fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d107      	bne.n	8007ece <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8007ebe:	4b71      	ldr	r3, [pc, #452]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d121      	bne.n	8007f0e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e0d4      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d107      	bne.n	8007ee6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007ed6:	4b6b      	ldr	r3, [pc, #428]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d115      	bne.n	8007f0e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0c8      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e0bc      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007efe:	4b61      	ldr	r3, [pc, #388]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0b4      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f0e:	4b5d      	ldr	r3, [pc, #372]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f023 0203 	bic.w	r2, r3, #3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	495a      	ldr	r1, [pc, #360]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f20:	f7fe f9ce 	bl	80062c0 <HAL_GetTick>
 8007f24:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d112      	bne.n	8007f54 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f30:	f7fe f9c6 	bl	80062c0 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e098      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8007f46:	4b4f      	ldr	r3, [pc, #316]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 030c 	and.w	r3, r3, #12
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d1ee      	bne.n	8007f30 <HAL_RCC_ClockConfig+0xe4>
 8007f52:	e03e      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d112      	bne.n	8007f82 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f5c:	e00a      	b.n	8007f74 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f5e:	f7fe f9af 	bl	80062c0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d901      	bls.n	8007f74 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e081      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f74:	4b43      	ldr	r3, [pc, #268]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 030c 	and.w	r3, r3, #12
 8007f7c:	2b0c      	cmp	r3, #12
 8007f7e:	d1ee      	bne.n	8007f5e <HAL_RCC_ClockConfig+0x112>
 8007f80:	e027      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d11d      	bne.n	8007fc6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8007f8a:	e00a      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8c:	f7fe f998 	bl	80062c0 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e06a      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8007fa2:	4b38      	ldr	r3, [pc, #224]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 030c 	and.w	r3, r3, #12
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ee      	bne.n	8007f8c <HAL_RCC_ClockConfig+0x140>
 8007fae:	e010      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb0:	f7fe f986 	bl	80062c0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e058      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 030c 	and.w	r3, r3, #12
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d1ee      	bne.n	8007fb0 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8007fd2:	4b2b      	ldr	r3, [pc, #172]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d210      	bcs.n	8008002 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 0207 	bic.w	r2, r3, #7
 8007fe8:	4925      	ldr	r1, [pc, #148]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ff0:	4b23      	ldr	r3, [pc, #140]	; (8008080 <HAL_RCC_ClockConfig+0x234>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d001      	beq.n	8008002 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e03a      	b.n	8008078 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d008      	beq.n	8008020 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	491a      	ldr	r1, [pc, #104]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 800801c:	4313      	orrs	r3, r2
 800801e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800802c:	4b15      	ldr	r3, [pc, #84]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	4912      	ldr	r1, [pc, #72]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 800803c:	4313      	orrs	r3, r2
 800803e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008040:	f000 f826 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 8008044:	4601      	mov	r1, r0
 8008046:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <HAL_RCC_ClockConfig+0x238>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800804e:	23f0      	movs	r3, #240	; 0xf0
 8008050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	fa93 f3a3 	rbit	r3, r3
 8008058:	60fb      	str	r3, [r7, #12]
  return(result);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	fab3 f383 	clz	r3, r3
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
 8008064:	4a08      	ldr	r2, [pc, #32]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8008066:	5cd3      	ldrb	r3, [r2, r3]
 8008068:	fa21 f303 	lsr.w	r3, r1, r3
 800806c:	4a07      	ldr	r2, [pc, #28]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 800806e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008070:	200f      	movs	r0, #15
 8008072:	f7fe f8fb 	bl	800626c <HAL_InitTick>

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	40022000 	.word	0x40022000
 8008084:	40021000 	.word	0x40021000
 8008088:	0800cd28 	.word	0x0800cd28
 800808c:	200002cc 	.word	0x200002cc

08008090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008090:	b480      	push	{r7}
 8008092:	b095      	sub	sp, #84	; 0x54
 8008094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8008096:	2300      	movs	r3, #0
 8008098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800809a:	2300      	movs	r3, #0
 800809c:	64bb      	str	r3, [r7, #72]	; 0x48
 800809e:	2300      	movs	r3, #0
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
 80080a2:	2302      	movs	r3, #2
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a6:	2302      	movs	r3, #2
 80080a8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80080ae:	4b71      	ldr	r3, [pc, #452]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80080ba:	4b6e      	ldr	r3, [pc, #440]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80080c2:	2b0c      	cmp	r3, #12
 80080c4:	d13c      	bne.n	8008140 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80080c6:	4b6b      	ldr	r3, [pc, #428]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d136      	bne.n	8008140 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80080d2:	4b68      	ldr	r3, [pc, #416]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d112      	bne.n	8008104 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80080de:	4b65      	ldr	r3, [pc, #404]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80080e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80080e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	fa93 f3a3 	rbit	r3, r3
 80080f4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	fab3 f383 	clz	r3, r3
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008102:	e00f      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8008104:	4b5b      	ldr	r3, [pc, #364]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800810c:	23f0      	movs	r3, #240	; 0xf0
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	fa93 f3a3 	rbit	r3, r3
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	fab3 f383 	clz	r3, r3
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008124:	4a54      	ldr	r2, [pc, #336]	; (8008278 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8008126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800812e:	4b51      	ldr	r3, [pc, #324]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
 8008136:	2b00      	cmp	r3, #0
 8008138:	d113      	bne.n	8008162 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800813a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813c:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800813e:	e010      	b.n	8008162 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008140:	4b4c      	ldr	r3, [pc, #304]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
 8008148:	2b04      	cmp	r3, #4
 800814a:	d102      	bne.n	8008152 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800814c:	4b4b      	ldr	r3, [pc, #300]	; (800827c <HAL_RCC_GetSysClockFreq+0x1ec>)
 800814e:	647b      	str	r3, [r7, #68]	; 0x44
 8008150:	e007      	b.n	8008162 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008152:	4b48      	ldr	r3, [pc, #288]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 030c 	and.w	r3, r3, #12
 800815a:	2b08      	cmp	r3, #8
 800815c:	d101      	bne.n	8008162 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800815e:	4b48      	ldr	r3, [pc, #288]	; (8008280 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008160:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008162:	4b44      	ldr	r3, [pc, #272]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 030c 	and.w	r3, r3, #12
 800816a:	2b0c      	cmp	r3, #12
 800816c:	d17b      	bne.n	8008266 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800816e:	4b41      	ldr	r3, [pc, #260]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8008178:	4b3e      	ldr	r3, [pc, #248]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008180:	2370      	movs	r3, #112	; 0x70
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	fa93 f3a3 	rbit	r3, r3
 800818a:	623b      	str	r3, [r7, #32]
  return(result);
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	fab3 f383 	clz	r3, r3
 8008192:	fa22 f303 	lsr.w	r3, r2, r3
 8008196:	3301      	adds	r3, #1
 8008198:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	2b02      	cmp	r3, #2
 800819e:	d002      	beq.n	80081a6 <HAL_RCC_GetSysClockFreq+0x116>
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d018      	beq.n	80081d6 <HAL_RCC_GetSysClockFreq+0x146>
 80081a4:	e02f      	b.n	8008206 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80081a6:	4a35      	ldr	r2, [pc, #212]	; (800827c <HAL_RCC_GetSysClockFreq+0x1ec>)
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	4a31      	ldr	r2, [pc, #196]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80081b0:	68d2      	ldr	r2, [r2, #12]
 80081b2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80081b6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80081ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	fa92 f2a2 	rbit	r2, r2
 80081c2:	61ba      	str	r2, [r7, #24]
  return(result);
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	fab2 f282 	clz	r2, r2
 80081ca:	fa21 f202 	lsr.w	r2, r1, r2
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081d4:	e02f      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80081d6:	4a2a      	ldr	r2, [pc, #168]	; (8008280 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	4a25      	ldr	r2, [pc, #148]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80081e0:	68d2      	ldr	r2, [r2, #12]
 80081e2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80081e6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80081ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	fa92 f2a2 	rbit	r2, r2
 80081f2:	613a      	str	r2, [r7, #16]
  return(result);
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	fab2 f282 	clz	r2, r2
 80081fa:	fa21 f202 	lsr.w	r2, r1, r2
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008204:	e017      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8008206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	4a19      	ldr	r2, [pc, #100]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008210:	68d2      	ldr	r2, [r2, #12]
 8008212:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8008216:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800821a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	fa92 f2a2 	rbit	r2, r2
 8008222:	60ba      	str	r2, [r7, #8]
  return(result);
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	fab2 f282 	clz	r2, r2
 800822a:	fa21 f202 	lsr.w	r2, r1, r2
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008234:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800823e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8008242:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	fa93 f3a3 	rbit	r3, r3
 800824a:	603b      	str	r3, [r7, #0]
  return(result);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	fab3 f383 	clz	r3, r3
 8008252:	fa22 f303 	lsr.w	r3, r2, r3
 8008256:	3301      	adds	r3, #1
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 800825c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8008266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008268:	4618      	mov	r0, r3
 800826a:	3754      	adds	r7, #84	; 0x54
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40021000 	.word	0x40021000
 8008278:	0800cd40 	.word	0x0800cd40
 800827c:	00f42400 	.word	0x00f42400
 8008280:	007a1200 	.word	0x007a1200

08008284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <HAL_RCC_GetHCLKFreq+0x10>)
 800828a:	681b      	ldr	r3, [r3, #0]
}
 800828c:	4618      	mov	r0, r3
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr
 8008294:	200002cc 	.word	0x200002cc

08008298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800829e:	f7ff fff1 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 80082a2:	4601      	mov	r1, r0
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80082b0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	fa93 f3a3 	rbit	r3, r3
 80082b8:	603b      	str	r3, [r7, #0]
  return(result);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	fab3 f383 	clz	r3, r3
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	4a04      	ldr	r2, [pc, #16]	; (80082d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80082c6:	5cd3      	ldrb	r3, [r2, r3]
 80082c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40021000 	.word	0x40021000
 80082d8:	0800cd38 	.word	0x0800cd38

080082dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80082e2:	f7ff ffcf 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 80082e6:	4601      	mov	r1, r0
 80082e8:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80082f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082f4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	fa93 f3a3 	rbit	r3, r3
 80082fc:	603b      	str	r3, [r7, #0]
  return(result);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	fab3 f383 	clz	r3, r3
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	4a04      	ldr	r2, [pc, #16]	; (800831c <HAL_RCC_GetPCLK2Freq+0x40>)
 800830a:	5cd3      	ldrb	r3, [r2, r3]
 800830c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40021000 	.word	0x40021000
 800831c:	0800cd38 	.word	0x0800cd38

08008320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800832c:	2300      	movs	r3, #0
 800832e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008330:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800833c:	f7ff f99a 	bl	8007674 <HAL_PWREx_GetVoltageRange>
 8008340:	6178      	str	r0, [r7, #20]
 8008342:	e014      	b.n	800836e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008348:	4a24      	ldr	r2, [pc, #144]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834e:	6593      	str	r3, [r2, #88]	; 0x58
 8008350:	4b22      	ldr	r3, [pc, #136]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800835c:	f7ff f98a 	bl	8007674 <HAL_PWREx_GetVoltageRange>
 8008360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008362:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008366:	4a1d      	ldr	r2, [pc, #116]	; (80083dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800836c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d10b      	bne.n	800838e <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b80      	cmp	r3, #128	; 0x80
 800837a:	d919      	bls.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2ba0      	cmp	r3, #160	; 0xa0
 8008380:	d902      	bls.n	8008388 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008382:	2302      	movs	r3, #2
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	e013      	b.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008388:	2301      	movs	r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	e010      	b.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b80      	cmp	r3, #128	; 0x80
 8008392:	d902      	bls.n	800839a <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008394:	2303      	movs	r3, #3
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	e00a      	b.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d102      	bne.n	80083a6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80083a0:	2302      	movs	r3, #2
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	e004      	b.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b70      	cmp	r3, #112	; 0x70
 80083aa:	d101      	bne.n	80083b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80083ac:	2301      	movs	r3, #1
 80083ae:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f023 0207 	bic.w	r2, r3, #7
 80083b8:	4909      	ldr	r1, [pc, #36]	; (80083e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d001      	beq.n	80083d2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40021000 	.word	0x40021000
 80083e0:	40022000 	.word	0x40022000

080083e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083f4:	2300      	movs	r3, #0
 80083f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083f8:	2300      	movs	r3, #0
 80083fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008404:	2b00      	cmp	r3, #0
 8008406:	d03f      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800840c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008410:	d01c      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008416:	d802      	bhi.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00e      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800841c:	e01f      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800841e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008422:	d003      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8008424:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008428:	d01c      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800842a:	e018      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800842c:	4b82      	ldr	r3, [pc, #520]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4a81      	ldr	r2, [pc, #516]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008436:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008438:	e015      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fab3 	bl	80089ac <RCCEx_PLLSAI1_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800844a:	e00c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3320      	adds	r3, #32
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fbfe 	bl	8008c54 <RCCEx_PLLSAI2_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	74fb      	strb	r3, [r7, #19]
      break;
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8008464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008466:	7cfb      	ldrb	r3, [r7, #19]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10b      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800846c:	4b72      	ldr	r3, [pc, #456]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847a:	496f      	ldr	r1, [pc, #444]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008482:	e001      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d03f      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800849c:	d01c      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800849e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084a2:	d802      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80084a8:	e01f      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80084aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ae:	d003      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80084b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084b4:	d01c      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80084b6:	e018      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80084b8:	4b5f      	ldr	r3, [pc, #380]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4a5e      	ldr	r2, [pc, #376]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084c4:	e015      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3304      	adds	r3, #4
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fa6d 	bl	80089ac <RCCEx_PLLSAI1_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084d6:	e00c      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3320      	adds	r3, #32
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fbb8 	bl	8008c54 <RCCEx_PLLSAI2_Config>
 80084e4:	4603      	mov	r3, r0
 80084e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084e8:	e003      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	74fb      	strb	r3, [r7, #19]
      break;
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80084f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f2:	7cfb      	ldrb	r3, [r7, #19]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10b      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084f8:	4b4f      	ldr	r3, [pc, #316]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008506:	494c      	ldr	r1, [pc, #304]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800850e:	e001      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	7cfb      	ldrb	r3, [r7, #19]
 8008512:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 809a 	beq.w	8008656 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008522:	2300      	movs	r3, #0
 8008524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008526:	4b44      	ldr	r3, [pc, #272]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008532:	4b41      	ldr	r3, [pc, #260]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	4a40      	ldr	r2, [pc, #256]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	4b3e      	ldr	r3, [pc, #248]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008546:	60bb      	str	r3, [r7, #8]
 8008548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800854a:	2301      	movs	r3, #1
 800854c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800854e:	4b3b      	ldr	r3, [pc, #236]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3a      	ldr	r2, [pc, #232]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800855a:	f7fd feb1 	bl	80062c0 <HAL_GetTick>
 800855e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008560:	e009      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008562:	f7fd fead 	bl	80062c0 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d902      	bls.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	74fb      	strb	r3, [r7, #19]
        break;
 8008574:	e005      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008576:	4b31      	ldr	r3, [pc, #196]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0ef      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 8008582:	7cfb      	ldrb	r3, [r7, #19]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d15b      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800858a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01f      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d019      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085b2:	4b21      	ldr	r3, [pc, #132]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b8:	4a1f      	ldr	r2, [pc, #124]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80085d2:	4a19      	ldr	r2, [pc, #100]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d016      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fd fe6c 	bl	80062c0 <HAL_GetTick>
 80085e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80085ea:	e00b      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ec:	f7fd fe68 	bl	80062c0 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d902      	bls.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	74fb      	strb	r3, [r7, #19]
            break;
 8008602:	e006      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8008604:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0ec      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008612:	7cfb      	ldrb	r3, [r7, #19]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10c      	bne.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008628:	4903      	ldr	r1, [pc, #12]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008630:	e008      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008632:	7cfb      	ldrb	r3, [r7, #19]
 8008634:	74bb      	strb	r3, [r7, #18]
 8008636:	e005      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008638:	40021000 	.word	0x40021000
 800863c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008644:	7c7b      	ldrb	r3, [r7, #17]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d105      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800864a:	4b9e      	ldr	r3, [pc, #632]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	4a9d      	ldr	r2, [pc, #628]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008662:	4b98      	ldr	r3, [pc, #608]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008668:	f023 0203 	bic.w	r2, r3, #3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	4994      	ldr	r1, [pc, #592]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008684:	4b8f      	ldr	r3, [pc, #572]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868a:	f023 020c 	bic.w	r2, r3, #12
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	498c      	ldr	r1, [pc, #560]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086a6:	4b87      	ldr	r3, [pc, #540]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	4983      	ldr	r1, [pc, #524]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086c8:	4b7e      	ldr	r3, [pc, #504]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	497b      	ldr	r1, [pc, #492]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086ea:	4b76      	ldr	r3, [pc, #472]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f8:	4972      	ldr	r1, [pc, #456]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800870c:	4b6d      	ldr	r3, [pc, #436]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800870e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871a:	496a      	ldr	r1, [pc, #424]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800872e:	4b65      	ldr	r3, [pc, #404]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873c:	4961      	ldr	r1, [pc, #388]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008750:	4b5c      	ldr	r3, [pc, #368]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875e:	4959      	ldr	r1, [pc, #356]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008760:	4313      	orrs	r3, r2
 8008762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008772:	4b54      	ldr	r3, [pc, #336]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	4950      	ldr	r1, [pc, #320]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008782:	4313      	orrs	r3, r2
 8008784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008794:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	4948      	ldr	r1, [pc, #288]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087b6:	4b43      	ldr	r3, [pc, #268]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c4:	493f      	ldr	r1, [pc, #252]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d028      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087d8:	4b3a      	ldr	r3, [pc, #232]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e6:	4937      	ldr	r1, [pc, #220]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f6:	d106      	bne.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087f8:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4a31      	ldr	r2, [pc, #196]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80087fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008802:	60d3      	str	r3, [r2, #12]
 8008804:	e011      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800880e:	d10c      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3304      	adds	r3, #4
 8008814:	2101      	movs	r1, #1
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f8c8 	bl	80089ac <RCCEx_PLLSAI1_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8008820:	7cfb      	ldrb	r3, [r7, #19]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* set overall return value */
        status = ret;
 8008826:	7cfb      	ldrb	r3, [r7, #19]
 8008828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d028      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008836:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008844:	491f      	ldr	r1, [pc, #124]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008854:	d106      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008856:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800885c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008860:	60d3      	str	r3, [r2, #12]
 8008862:	e011      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800886c:	d10c      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3304      	adds	r3, #4
 8008872:	2101      	movs	r1, #1
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f899 	bl	80089ac <RCCEx_PLLSAI1_Config>
 800887a:	4603      	mov	r3, r0
 800887c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800887e:	7cfb      	ldrb	r3, [r7, #19]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8008884:	7cfb      	ldrb	r3, [r7, #19]
 8008886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02b      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008894:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a2:	4908      	ldr	r1, [pc, #32]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b2:	d109      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088b4:	4b03      	ldr	r3, [pc, #12]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4a02      	ldr	r2, [pc, #8]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80088ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088be:	60d3      	str	r3, [r2, #12]
 80088c0:	e014      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80088c2:	bf00      	nop
 80088c4:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088d0:	d10c      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3304      	adds	r3, #4
 80088d6:	2101      	movs	r1, #1
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f867 	bl	80089ac <RCCEx_PLLSAI1_Config>
 80088de:	4603      	mov	r3, r0
 80088e0:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80088e2:	7cfb      	ldrb	r3, [r7, #19]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 80088e8:	7cfb      	ldrb	r3, [r7, #19]
 80088ea:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d02f      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088f8:	4b2b      	ldr	r3, [pc, #172]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008906:	4928      	ldr	r1, [pc, #160]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008908:	4313      	orrs	r3, r2
 800890a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008916:	d10d      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	2102      	movs	r1, #2
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f844 	bl	80089ac <RCCEx_PLLSAI1_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008928:	7cfb      	ldrb	r3, [r7, #19]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d014      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800892e:	7cfb      	ldrb	r3, [r7, #19]
 8008930:	74bb      	strb	r3, [r7, #18]
 8008932:	e011      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893c:	d10c      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3320      	adds	r3, #32
 8008942:	2102      	movs	r1, #2
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f985 	bl	8008c54 <RCCEx_PLLSAI2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800894e:	7cfb      	ldrb	r3, [r7, #19]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8008954:	7cfb      	ldrb	r3, [r7, #19]
 8008956:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008964:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008972:	490d      	ldr	r1, [pc, #52]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008996:	4904      	ldr	r1, [pc, #16]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008998:	4313      	orrs	r3, r2
 800899a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 800899e:	7cbb      	ldrb	r3, [r7, #18]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40021000 	.word	0x40021000

080089ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b094      	sub	sp, #80	; 0x50
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089c0:	4ba3      	ldr	r3, [pc, #652]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d023      	beq.n	8008a14 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80089cc:	4ba0      	ldr	r3, [pc, #640]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f003 0203 	and.w	r2, r3, #3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d117      	bne.n	8008a0c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
       || 
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d013      	beq.n	8008a0c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80089e4:	4b9a      	ldr	r3, [pc, #616]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089ec:	2370      	movs	r3, #112	; 0x70
 80089ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f2:	fa93 f3a3 	rbit	r3, r3
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	fab3 f383 	clz	r3, r3
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
       || 
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d054      	beq.n	8008ab6 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008a12:	e050      	b.n	8008ab6 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d00d      	beq.n	8008a38 <RCCEx_PLLSAI1_Config+0x8c>
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d015      	beq.n	8008a4c <RCCEx_PLLSAI1_Config+0xa0>
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d123      	bne.n	8008a6c <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a24:	4b8a      	ldr	r3, [pc, #552]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d121      	bne.n	8008a74 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8008a36:	e01d      	b.n	8008a74 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a38:	4b85      	ldr	r3, [pc, #532]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d119      	bne.n	8008a78 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8008a4a:	e015      	b.n	8008a78 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a4c:	4b80      	ldr	r3, [pc, #512]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d111      	bne.n	8008a7c <RCCEx_PLLSAI1_Config+0xd0>
 8008a58:	4b7d      	ldr	r3, [pc, #500]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8008a6a:	e007      	b.n	8008a7c <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 8008a72:	e004      	b.n	8008a7e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8008a74:	bf00      	nop
 8008a76:	e002      	b.n	8008a7e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e000      	b.n	8008a7e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8008a7c:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8008a7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d117      	bne.n	8008ab6 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8008a86:	4b72      	ldr	r3, [pc, #456]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6819      	ldr	r1, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	1e58      	subs	r0, r3, #1
 8008a98:	2370      	movs	r3, #112	; 0x70
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9e:	fa93 f3a3 	rbit	r3, r3
 8008aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	fab3 f383 	clz	r3, r3
 8008aaa:	fa00 f303 	lsl.w	r3, r0, r3
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	4967      	ldr	r1, [pc, #412]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 8008ab6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80c2 	bne.w	8008c44 <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008ac0:	4b63      	ldr	r3, [pc, #396]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a62      	ldr	r2, [pc, #392]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008acc:	f7fd fbf8 	bl	80062c0 <HAL_GetTick>
 8008ad0:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8008ad2:	e00a      	b.n	8008aea <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ad4:	f7fd fbf4 	bl	80062c0 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d903      	bls.n	8008aea <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8008ae8:	e005      	b.n	8008af6 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8008aea:	4b59      	ldr	r3, [pc, #356]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1ee      	bne.n	8008ad4 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8008af6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 80a2 	bne.w	8008c44 <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d126      	bne.n	8008b54 <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8008b06:	4b52      	ldr	r3, [pc, #328]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6891      	ldr	r1, [r2, #8]
 8008b16:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1e:	fa92 f2a2 	rbit	r2, r2
 8008b22:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8008b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b26:	fab2 f282 	clz	r2, r2
 8008b2a:	4091      	lsls	r1, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68d2      	ldr	r2, [r2, #12]
 8008b30:	0910      	lsrs	r0, r2, #4
 8008b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b36:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b3a:	fa92 f2a2 	rbit	r2, r2
 8008b3e:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8008b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b42:	fab2 f282 	clz	r2, r2
 8008b46:	fa00 f202 	lsl.w	r2, r0, r2
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	4940      	ldr	r1, [pc, #256]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	610b      	str	r3, [r1, #16]
 8008b52:	e051      	b.n	8008bf8 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d127      	bne.n	8008baa <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8008b5a:	4b3d      	ldr	r3, [pc, #244]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008b62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6891      	ldr	r1, [r2, #8]
 8008b6a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008b6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	fa92 f2a2 	rbit	r2, r2
 8008b76:	61ba      	str	r2, [r7, #24]
  return(result);
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	fab2 f282 	clz	r2, r2
 8008b7e:	4091      	lsls	r1, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6912      	ldr	r2, [r2, #16]
 8008b84:	0852      	lsrs	r2, r2, #1
 8008b86:	1e50      	subs	r0, r2, #1
 8008b88:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8008b8c:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	fa92 f2a2 	rbit	r2, r2
 8008b94:	623a      	str	r2, [r7, #32]
  return(result);
 8008b96:	6a3a      	ldr	r2, [r7, #32]
 8008b98:	fab2 f282 	clz	r2, r2
 8008b9c:	fa00 f202 	lsl.w	r2, r0, r2
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	492b      	ldr	r1, [pc, #172]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	610b      	str	r3, [r1, #16]
 8008ba8:	e026      	b.n	8008bf8 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8008baa:	4b29      	ldr	r3, [pc, #164]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008bb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6891      	ldr	r1, [r2, #8]
 8008bba:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008bbe:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	fa92 f2a2 	rbit	r2, r2
 8008bc6:	60ba      	str	r2, [r7, #8]
  return(result);
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	fab2 f282 	clz	r2, r2
 8008bce:	4091      	lsls	r1, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6952      	ldr	r2, [r2, #20]
 8008bd4:	0852      	lsrs	r2, r2, #1
 8008bd6:	1e50      	subs	r0, r2, #1
 8008bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	fa92 f2a2 	rbit	r2, r2
 8008be4:	613a      	str	r2, [r7, #16]
  return(result);
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	fab2 f282 	clz	r2, r2
 8008bec:	fa00 f202 	lsl.w	r2, r0, r2
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	4917      	ldr	r1, [pc, #92]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c04:	f7fd fb5c 	bl	80062c0 <HAL_GetTick>
 8008c08:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8008c0a:	e00a      	b.n	8008c22 <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c0c:	f7fd fb58 	bl	80062c0 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d903      	bls.n	8008c22 <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8008c20:	e005      	b.n	8008c2e <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0ee      	beq.n	8008c0c <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 8008c2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008c38:	691a      	ldr	r2, [r3, #16]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	4904      	ldr	r1, [pc, #16]	; (8008c50 <RCCEx_PLLSAI1_Config+0x2a4>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8008c44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3750      	adds	r7, #80	; 0x50
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40021000 	.word	0x40021000

08008c54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b090      	sub	sp, #64	; 0x40
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c68:	4b8d      	ldr	r3, [pc, #564]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d023      	beq.n	8008cbc <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008c74:	4b8a      	ldr	r3, [pc, #552]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0203 	and.w	r2, r3, #3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d117      	bne.n	8008cb4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
       || 
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d013      	beq.n	8008cb4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 8008c8c:	4b84      	ldr	r3, [pc, #528]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c94:	2370      	movs	r3, #112	; 0x70
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	fa93 f3a3 	rbit	r3, r3
 8008c9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	fab3 f383 	clz	r3, r3
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
       || 
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d054      	beq.n	8008d5e <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008cba:	e050      	b.n	8008d5e <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d00d      	beq.n	8008ce0 <RCCEx_PLLSAI2_Config+0x8c>
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d015      	beq.n	8008cf4 <RCCEx_PLLSAI2_Config+0xa0>
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d123      	bne.n	8008d14 <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ccc:	4b74      	ldr	r3, [pc, #464]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d121      	bne.n	8008d1c <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8008cde:	e01d      	b.n	8008d1c <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ce0:	4b6f      	ldr	r3, [pc, #444]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d119      	bne.n	8008d20 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8008cf2:	e015      	b.n	8008d20 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cf4:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d111      	bne.n	8008d24 <RCCEx_PLLSAI2_Config+0xd0>
 8008d00:	4b67      	ldr	r3, [pc, #412]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8008d12:	e007      	b.n	8008d24 <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8008d1a:	e004      	b.n	8008d26 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e002      	b.n	8008d26 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8008d24:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8008d26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d117      	bne.n	8008d5e <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8008d2e:	4b5c      	ldr	r3, [pc, #368]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	1e58      	subs	r0, r3, #1
 8008d40:	2370      	movs	r3, #112	; 0x70
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	fa93 f3a3 	rbit	r3, r3
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	fab3 f383 	clz	r3, r3
 8008d52:	fa00 f303 	lsl.w	r3, r0, r3
 8008d56:	430b      	orrs	r3, r1
 8008d58:	4951      	ldr	r1, [pc, #324]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 8008d5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 8096 	bne.w	8008e94 <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008d68:	4b4d      	ldr	r3, [pc, #308]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a4c      	ldr	r2, [pc, #304]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d74:	f7fd faa4 	bl	80062c0 <HAL_GetTick>
 8008d78:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8008d7a:	e00a      	b.n	8008d92 <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d7c:	f7fd faa0 	bl	80062c0 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d903      	bls.n	8008d92 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8008d90:	e005      	b.n	8008d9e <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8008d92:	4b43      	ldr	r3, [pc, #268]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1ee      	bne.n	8008d7c <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8008d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d176      	bne.n	8008e94 <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d126      	bne.n	8008dfa <RCCEx_PLLSAI2_Config+0x1a6>
        MODIFY_REG(RCC->PLLSAI2CFGR, 
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV, 
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (PllSai2->PLLSAI2P << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8008dac:	4b3c      	ldr	r3, [pc, #240]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6891      	ldr	r1, [r2, #8]
 8008dbc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008dc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	fa92 f2a2 	rbit	r2, r2
 8008dc8:	61ba      	str	r2, [r7, #24]
  return(result);
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	fab2 f282 	clz	r2, r2
 8008dd0:	4091      	lsls	r1, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68d2      	ldr	r2, [r2, #12]
 8008dd6:	0910      	lsrs	r0, r2, #4
 8008dd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ddc:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de0:	fa92 f2a2 	rbit	r2, r2
 8008de4:	623a      	str	r2, [r7, #32]
  return(result);
 8008de6:	6a3a      	ldr	r2, [r7, #32]
 8008de8:	fab2 f282 	clz	r2, r2
 8008dec:	fa00 f202 	lsl.w	r2, r0, r2
 8008df0:	430a      	orrs	r2, r1
 8008df2:	492b      	ldr	r1, [pc, #172]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	614b      	str	r3, [r1, #20]
 8008df8:	e026      	b.n	8008e48 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8008dfa:	4b29      	ldr	r3, [pc, #164]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008e02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6891      	ldr	r1, [r2, #8]
 8008e0a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008e0e:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	fa92 f2a2 	rbit	r2, r2
 8008e16:	60ba      	str	r2, [r7, #8]
  return(result);
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	fab2 f282 	clz	r2, r2
 8008e1e:	4091      	lsls	r1, r2
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6912      	ldr	r2, [r2, #16]
 8008e24:	0852      	lsrs	r2, r2, #1
 8008e26:	1e50      	subs	r0, r2, #1
 8008e28:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	fa92 f2a2 	rbit	r2, r2
 8008e34:	613a      	str	r2, [r7, #16]
  return(result);
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	fab2 f282 	clz	r2, r2
 8008e3c:	fa00 f202 	lsl.w	r2, r0, r2
 8008e40:	430a      	orrs	r2, r1
 8008e42:	4917      	ldr	r1, [pc, #92]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	614b      	str	r3, [r1, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e54:	f7fd fa34 	bl	80062c0 <HAL_GetTick>
 8008e58:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8008e5a:	e00a      	b.n	8008e72 <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e5c:	f7fd fa30 	bl	80062c0 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d903      	bls.n	8008e72 <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8008e70:	e005      	b.n	8008e7e <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0ee      	beq.n	8008e5c <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 8008e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008e86:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e88:	695a      	ldr	r2, [r3, #20]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	4904      	ldr	r1, [pc, #16]	; (8008ea0 <RCCEx_PLLSAI2_Config+0x24c>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 8008e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3740      	adds	r7, #64	; 0x40
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40021000 	.word	0x40021000

08008ea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e01d      	b.n	8008f26 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f003 f8ae 	bl	800c060 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 f888 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_TIM_OC_ConfigChannel+0x1a>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e06c      	b.n	8009024 <HAL_TIM_OC_ConfigChannel+0xf4>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2202      	movs	r2, #2
 8008f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b14      	cmp	r3, #20
 8008f5e:	d857      	bhi.n	8009010 <HAL_TIM_OC_ConfigChannel+0xe0>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <HAL_TIM_OC_ConfigChannel+0x38>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08009011 	.word	0x08009011
 8008f70:	08009011 	.word	0x08009011
 8008f74:	08009011 	.word	0x08009011
 8008f78:	08008fcb 	.word	0x08008fcb
 8008f7c:	08009011 	.word	0x08009011
 8008f80:	08009011 	.word	0x08009011
 8008f84:	08009011 	.word	0x08009011
 8008f88:	08008fd9 	.word	0x08008fd9
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009011 	.word	0x08009011
 8008f94:	08009011 	.word	0x08009011
 8008f98:	08008fe7 	.word	0x08008fe7
 8008f9c:	08009011 	.word	0x08009011
 8008fa0:	08009011 	.word	0x08009011
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	08008ff5 	.word	0x08008ff5
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009003 	.word	0x08009003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 f8c6 	bl	8009154 <TIM_OC1_SetConfig>
    }
    break;
 8008fc8:	e023      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f955 	bl	8009280 <TIM_OC2_SetConfig>
    }
    break;
 8008fd6:	e01c      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f9dc 	bl	800939c <TIM_OC3_SetConfig>
    }
    break;
 8008fe4:	e015      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fa63 	bl	80094b8 <TIM_OC4_SetConfig>
    }
    break;
 8008ff2:	e00e      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 faca 	bl	8009594 <TIM_OC5_SetConfig>
    }
    break;
 8009000:	e007      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fb2d 	bl	8009668 <TIM_OC6_SetConfig>
    }
    break;
 800900e:	e000      	b.n	8009012 <HAL_TIM_OC_ConfigChannel+0xe2>

    default:
    break;
 8009010:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <TIM_Base_SetConfig+0x108>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <TIM_Base_SetConfig+0x44>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d00f      	beq.n	8009070 <TIM_Base_SetConfig+0x44>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a39      	ldr	r2, [pc, #228]	; (8009138 <TIM_Base_SetConfig+0x10c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00b      	beq.n	8009070 <TIM_Base_SetConfig+0x44>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a38      	ldr	r2, [pc, #224]	; (800913c <TIM_Base_SetConfig+0x110>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d007      	beq.n	8009070 <TIM_Base_SetConfig+0x44>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a37      	ldr	r2, [pc, #220]	; (8009140 <TIM_Base_SetConfig+0x114>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x44>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a36      	ldr	r2, [pc, #216]	; (8009144 <TIM_Base_SetConfig+0x118>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a2b      	ldr	r2, [pc, #172]	; (8009134 <TIM_Base_SetConfig+0x108>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01f      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	d01b      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a28      	ldr	r2, [pc, #160]	; (8009138 <TIM_Base_SetConfig+0x10c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d017      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a27      	ldr	r2, [pc, #156]	; (800913c <TIM_Base_SetConfig+0x110>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a26      	ldr	r2, [pc, #152]	; (8009140 <TIM_Base_SetConfig+0x114>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00f      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a25      	ldr	r2, [pc, #148]	; (8009144 <TIM_Base_SetConfig+0x118>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00b      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a24      	ldr	r2, [pc, #144]	; (8009148 <TIM_Base_SetConfig+0x11c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d007      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a23      	ldr	r2, [pc, #140]	; (800914c <TIM_Base_SetConfig+0x120>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d003      	beq.n	80090ca <TIM_Base_SetConfig+0x9e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a22      	ldr	r2, [pc, #136]	; (8009150 <TIM_Base_SetConfig+0x124>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d108      	bne.n	80090dc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a0f      	ldr	r2, [pc, #60]	; (8009134 <TIM_Base_SetConfig+0x108>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00f      	beq.n	800911a <TIM_Base_SetConfig+0xee>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a11      	ldr	r2, [pc, #68]	; (8009144 <TIM_Base_SetConfig+0x118>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00b      	beq.n	800911a <TIM_Base_SetConfig+0xee>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a10      	ldr	r2, [pc, #64]	; (8009148 <TIM_Base_SetConfig+0x11c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d007      	beq.n	800911a <TIM_Base_SetConfig+0xee>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a0f      	ldr	r2, [pc, #60]	; (800914c <TIM_Base_SetConfig+0x120>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d003      	beq.n	800911a <TIM_Base_SetConfig+0xee>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a0e      	ldr	r2, [pc, #56]	; (8009150 <TIM_Base_SetConfig+0x124>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d103      	bne.n	8009122 <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	615a      	str	r2, [r3, #20]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40012c00 	.word	0x40012c00
 8009138:	40000400 	.word	0x40000400
 800913c:	40000800 	.word	0x40000800
 8009140:	40000c00 	.word	0x40000c00
 8009144:	40013400 	.word	0x40013400
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	f023 0201 	bic.w	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800918e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f023 0302 	bic.w	r3, r3, #2
 80091ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a2c      	ldr	r2, [pc, #176]	; (800926c <TIM_OC1_SetConfig+0x118>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d00f      	beq.n	80091e0 <TIM_OC1_SetConfig+0x8c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a2b      	ldr	r2, [pc, #172]	; (8009270 <TIM_OC1_SetConfig+0x11c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <TIM_OC1_SetConfig+0x8c>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a2a      	ldr	r2, [pc, #168]	; (8009274 <TIM_OC1_SetConfig+0x120>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d007      	beq.n	80091e0 <TIM_OC1_SetConfig+0x8c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a29      	ldr	r2, [pc, #164]	; (8009278 <TIM_OC1_SetConfig+0x124>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_OC1_SetConfig+0x8c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a28      	ldr	r2, [pc, #160]	; (800927c <TIM_OC1_SetConfig+0x128>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10c      	bne.n	80091fa <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f023 0308 	bic.w	r3, r3, #8
 80091e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f023 0304 	bic.w	r3, r3, #4
 80091f8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a1b      	ldr	r2, [pc, #108]	; (800926c <TIM_OC1_SetConfig+0x118>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_OC1_SetConfig+0xce>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <TIM_OC1_SetConfig+0x11c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_OC1_SetConfig+0xce>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a19      	ldr	r2, [pc, #100]	; (8009274 <TIM_OC1_SetConfig+0x120>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_OC1_SetConfig+0xce>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <TIM_OC1_SetConfig+0x124>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_OC1_SetConfig+0xce>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a17      	ldr	r2, [pc, #92]	; (800927c <TIM_OC1_SetConfig+0x128>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d111      	bne.n	8009246 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	621a      	str	r2, [r3, #32]
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	40012c00 	.word	0x40012c00
 8009270:	40013400 	.word	0x40013400
 8009274:	40014000 	.word	0x40014000
 8009278:	40014400 	.word	0x40014400
 800927c:	40014800 	.word	0x40014800

08009280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f023 0210 	bic.w	r2, r3, #16
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f023 0320 	bic.w	r3, r3, #32
 80092da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a27      	ldr	r2, [pc, #156]	; (8009388 <TIM_OC2_SetConfig+0x108>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d003      	beq.n	80092f8 <TIM_OC2_SetConfig+0x78>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a26      	ldr	r2, [pc, #152]	; (800938c <TIM_OC2_SetConfig+0x10c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d10d      	bne.n	8009314 <TIM_OC2_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009312:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a1c      	ldr	r2, [pc, #112]	; (8009388 <TIM_OC2_SetConfig+0x108>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00f      	beq.n	800933c <TIM_OC2_SetConfig+0xbc>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a1b      	ldr	r2, [pc, #108]	; (800938c <TIM_OC2_SetConfig+0x10c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_OC2_SetConfig+0xbc>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <TIM_OC2_SetConfig+0x110>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_OC2_SetConfig+0xbc>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a19      	ldr	r2, [pc, #100]	; (8009394 <TIM_OC2_SetConfig+0x114>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_OC2_SetConfig+0xbc>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a18      	ldr	r2, [pc, #96]	; (8009398 <TIM_OC2_SetConfig+0x118>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d113      	bne.n	8009364 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800934a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	4313      	orrs	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	621a      	str	r2, [r3, #32]
}
 800937e:	bf00      	nop
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr
 8009388:	40012c00 	.word	0x40012c00
 800938c:	40013400 	.word	0x40013400
 8009390:	40014000 	.word	0x40014000
 8009394:	40014400 	.word	0x40014400
 8009398:	40014800 	.word	0x40014800

0800939c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <TIM_OC3_SetConfig+0x108>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d003      	beq.n	8009412 <TIM_OC3_SetConfig+0x76>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a26      	ldr	r2, [pc, #152]	; (80094a8 <TIM_OC3_SetConfig+0x10c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d10d      	bne.n	800942e <TIM_OC3_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800942c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1c      	ldr	r2, [pc, #112]	; (80094a4 <TIM_OC3_SetConfig+0x108>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_OC3_SetConfig+0xba>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <TIM_OC3_SetConfig+0x10c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_OC3_SetConfig+0xba>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <TIM_OC3_SetConfig+0x110>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_OC3_SetConfig+0xba>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_OC3_SetConfig+0x114>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC3_SetConfig+0xba>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_OC3_SetConfig+0x118>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d113      	bne.n	800947e <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800945c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	621a      	str	r2, [r3, #32]
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	bc80      	pop	{r7}
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40012c00 	.word	0x40012c00
 80094a8:	40013400 	.word	0x40013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800

080094b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fe:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009512:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	031b      	lsls	r3, r3, #12
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a17      	ldr	r2, [pc, #92]	; (8009580 <TIM_OC4_SetConfig+0xc8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00f      	beq.n	8009548 <TIM_OC4_SetConfig+0x90>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a16      	ldr	r2, [pc, #88]	; (8009584 <TIM_OC4_SetConfig+0xcc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00b      	beq.n	8009548 <TIM_OC4_SetConfig+0x90>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a15      	ldr	r2, [pc, #84]	; (8009588 <TIM_OC4_SetConfig+0xd0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_OC4_SetConfig+0x90>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a14      	ldr	r2, [pc, #80]	; (800958c <TIM_OC4_SetConfig+0xd4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC4_SetConfig+0x90>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a13      	ldr	r2, [pc, #76]	; (8009590 <TIM_OC4_SetConfig+0xd8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d109      	bne.n	800955c <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	019b      	lsls	r3, r3, #6
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	4313      	orrs	r3, r2
 80095dc:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <TIM_OC5_SetConfig+0xc0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00f      	beq.n	800961a <TIM_OC5_SetConfig+0x86>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a16      	ldr	r2, [pc, #88]	; (8009658 <TIM_OC5_SetConfig+0xc4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00b      	beq.n	800961a <TIM_OC5_SetConfig+0x86>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a15      	ldr	r2, [pc, #84]	; (800965c <TIM_OC5_SetConfig+0xc8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d007      	beq.n	800961a <TIM_OC5_SetConfig+0x86>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a14      	ldr	r2, [pc, #80]	; (8009660 <TIM_OC5_SetConfig+0xcc>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d003      	beq.n	800961a <TIM_OC5_SetConfig+0x86>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a13      	ldr	r2, [pc, #76]	; (8009664 <TIM_OC5_SetConfig+0xd0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d109      	bne.n	800962e <TIM_OC5_SetConfig+0x9a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	621a      	str	r2, [r3, #32]
}
 8009648:	bf00      	nop
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40012c00 	.word	0x40012c00
 8009658:	40013400 	.word	0x40013400
 800965c:	40014000 	.word	0x40014000
 8009660:	40014400 	.word	0x40014400
 8009664:	40014800 	.word	0x40014800

08009668 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096ba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	051b      	lsls	r3, r3, #20
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a17      	ldr	r2, [pc, #92]	; (8009728 <TIM_OC6_SetConfig+0xc0>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00f      	beq.n	80096f0 <TIM_OC6_SetConfig+0x88>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a16      	ldr	r2, [pc, #88]	; (800972c <TIM_OC6_SetConfig+0xc4>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_OC6_SetConfig+0x88>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a15      	ldr	r2, [pc, #84]	; (8009730 <TIM_OC6_SetConfig+0xc8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_OC6_SetConfig+0x88>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a14      	ldr	r2, [pc, #80]	; (8009734 <TIM_OC6_SetConfig+0xcc>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_OC6_SetConfig+0x88>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a13      	ldr	r2, [pc, #76]	; (8009738 <TIM_OC6_SetConfig+0xd0>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d109      	bne.n	8009704 <TIM_OC6_SetConfig+0x9c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	029b      	lsls	r3, r3, #10
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	621a      	str	r2, [r3, #32]
}
 800971e:	bf00      	nop
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr
 8009728:	40012c00 	.word	0x40012c00
 800972c:	40013400 	.word	0x40013400
 8009730:	40014000 	.word	0x40014000
 8009734:	40014400 	.word	0x40014400
 8009738:	40014800 	.word	0x40014800

0800973c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d101      	bne.n	8009754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009750:	2302      	movs	r3, #2
 8009752:	e03d      	b.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a1a      	ldr	r2, [pc, #104]	; (80097dc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d004      	beq.n	8009780 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a19      	ldr	r2, [pc, #100]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d108      	bne.n	8009792 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097aa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bc80      	pop	{r7}
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400

080097e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e043      	b.n	800987e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d106      	bne.n	8009810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7f7 fed8 	bl	80015c0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2224      	movs	r2, #36	; 0x24
 8009814:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 0201 	bic.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f9d9 	bl	8009be0 <UART_SetConfig>
 800982e:	4603      	mov	r3, r0
 8009830:	2b01      	cmp	r3, #1
 8009832:	d101      	bne.n	8009838 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e022      	b.n	800987e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcff 	bl	800a244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009854:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009864:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fd85 	bl	800a386 <UART_CheckIdleState>
 800987c:	4603      	mov	r3, r0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d154      	bne.n	800994c <HAL_UART_Transmit_DMA+0xc4>
  {
    if((pData == NULL ) || (Size == 0))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <HAL_UART_Transmit_DMA+0x26>
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e04d      	b.n	800994e <HAL_UART_Transmit_DMA+0xc6>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <HAL_UART_Transmit_DMA+0x38>
 80098bc:	2302      	movs	r3, #2
 80098be:	e046      	b.n	800994e <HAL_UART_Transmit_DMA+0xc6>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	88fa      	ldrh	r2, [r7, #6]
 80098d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2221      	movs	r2, #33	; 0x21
 80098e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f0:	4a19      	ldr	r2, [pc, #100]	; (8009958 <HAL_UART_Transmit_DMA+0xd0>)
 80098f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f8:	4a18      	ldr	r2, [pc, #96]	; (800995c <HAL_UART_Transmit_DMA+0xd4>)
 80098fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009900:	4a17      	ldr	r2, [pc, #92]	; (8009960 <HAL_UART_Transmit_DMA+0xd8>)
 8009902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009908:	2200      	movs	r2, #0
 800990a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	6819      	ldr	r1, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3328      	adds	r3, #40	; 0x28
 8009920:	461a      	mov	r2, r3
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	f7fc fedc 	bl	80066e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2240      	movs	r2, #64	; 0x40
 800992e:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009946:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	e000      	b.n	800994e <HAL_UART_Transmit_DMA+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800994c:	2302      	movs	r3, #2
  }
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	0800a511 	.word	0x0800a511
 800995c:	0800a565 	.word	0x0800a565
 8009960:	0800a581 	.word	0x0800a581

08009964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_UART_IRQHandler+0x42>
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fead 	bl	800a6fe <UART_Receive_IT>
      return;
 80099a4:	e0fa      	b.n	8009b9c <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	60bb      	str	r3, [r7, #8]
  if((errorflags != RESET) && ((cr3its & (USART_CR3_EIE | USART_CR1_PEIE)) != RESET))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 80b6 	beq.w	8009b22 <HAL_UART_IRQHandler+0x1be>
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	f240 1301 	movw	r3, #257	; 0x101
 80099bc:	4013      	ands	r3, r2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 80af 	beq.w	8009b22 <HAL_UART_IRQHandler+0x1be>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00e      	beq.n	80099ec <HAL_UART_IRQHandler+0x88>
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d009      	beq.n	80099ec <HAL_UART_IRQHandler+0x88>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2201      	movs	r2, #1
 80099de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e4:	f043 0201 	orr.w	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f003 0302 	and.w	r3, r3, #2
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00e      	beq.n	8009a14 <HAL_UART_IRQHandler+0xb0>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <HAL_UART_IRQHandler+0xb0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2202      	movs	r2, #2
 8009a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a0c:	f043 0204 	orr.w	r2, r3, #4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00e      	beq.n	8009a3c <HAL_UART_IRQHandler+0xd8>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2204      	movs	r2, #4
 8009a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a34:	f043 0202 	orr.w	r2, r3, #2
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d013      	beq.n	8009a6e <HAL_UART_IRQHandler+0x10a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <HAL_UART_IRQHandler+0xf6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2208      	movs	r2, #8
 8009a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a66:	f043 0208 	orr.w	r2, r3, #8
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8091 	beq.w	8009b9a <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_UART_IRQHandler+0x12e>
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_UART_IRQHandler+0x12e>
      {
        UART_Receive_IT(huart);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fe36 	bl	800a6fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <HAL_UART_IRQHandler+0x148>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d131      	bne.n	8009b10 <HAL_UART_IRQHandler+0x1ac>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fd12 	bl	800a4d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d123      	bne.n	8009b08 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ace:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d013      	beq.n	8009b00 <HAL_UART_IRQHandler+0x19c>
          {
            /* Set the UART DMA Abort callback : 
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009adc:	4a31      	ldr	r2, [pc, #196]	; (8009ba4 <HAL_UART_IRQHandler+0x240>)
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fc fe5b 	bl	80067a0 <HAL_DMA_Abort_IT>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <HAL_UART_IRQHandler+0x1ba>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009afa:	4610      	mov	r0, r2
 8009afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afe:	e00e      	b.n	8009b1e <HAL_UART_IRQHandler+0x1ba>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f863 	bl	8009bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b06:	e00a      	b.n	8009b1e <HAL_UART_IRQHandler+0x1ba>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f85f 	bl	8009bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0e:	e006      	b.n	8009b1e <HAL_UART_IRQHandler+0x1ba>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f85b 	bl	8009bcc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8009b1c:	e03d      	b.n	8009b9a <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1e:	bf00      	nop
    return;
 8009b20:	e03b      	b.n	8009b9a <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  cr3its = READ_REG(huart->Instance->CR3);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	60bb      	str	r3, [r7, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d015      	beq.n	8009b60 <HAL_UART_IRQHandler+0x1fc>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d010      	beq.n	8009b60 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b46:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fe3d 	bl	800a7d8 <HAL_UARTEx_WakeupCallback>
    return;
 8009b5e:	e01d      	b.n	8009b9c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d008      	beq.n	8009b7c <HAL_UART_IRQHandler+0x218>
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fd55 	bl	800a624 <UART_Transmit_IT>
    return;
 8009b7a:	e00f      	b.n	8009b9c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00a      	beq.n	8009b9c <HAL_UART_IRQHandler+0x238>
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fd9c 	bl	800a6ce <UART_EndTransmit_IT>
    return;
 8009b96:	bf00      	nop
 8009b98:	e000      	b.n	8009b9c <HAL_UART_IRQHandler+0x238>
    return;
 8009b9a:	bf00      	nop
  }

}
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0800a5f9 	.word	0x0800a5f9

08009ba8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr
	...

08009be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8009bea:	2300      	movs	r3, #0
 8009bec:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009bee:	2310      	movs	r3, #16
 8009bf0:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	4bac      	ldr	r3, [pc, #688]	; (8009ed0 <UART_SetConfig+0x2f0>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	6979      	ldr	r1, [r7, #20]
 8009c26:	430b      	orrs	r3, r1
 8009c28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68da      	ldr	r2, [r3, #12]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4aa2      	ldr	r2, [pc, #648]	; (8009ed4 <UART_SetConfig+0x2f4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d004      	beq.n	8009c5a <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a99      	ldr	r2, [pc, #612]	; (8009ed8 <UART_SetConfig+0x2f8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d121      	bne.n	8009cbc <UART_SetConfig+0xdc>
 8009c78:	4b98      	ldr	r3, [pc, #608]	; (8009edc <UART_SetConfig+0x2fc>)
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d816      	bhi.n	8009cb4 <UART_SetConfig+0xd4>
 8009c86:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <UART_SetConfig+0xac>)
 8009c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8c:	08009c9d 	.word	0x08009c9d
 8009c90:	08009ca9 	.word	0x08009ca9
 8009c94:	08009ca3 	.word	0x08009ca3
 8009c98:	08009caf 	.word	0x08009caf
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	74fb      	strb	r3, [r7, #19]
 8009ca0:	e0e6      	b.n	8009e70 <UART_SetConfig+0x290>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	74fb      	strb	r3, [r7, #19]
 8009ca6:	e0e3      	b.n	8009e70 <UART_SetConfig+0x290>
 8009ca8:	2304      	movs	r3, #4
 8009caa:	74fb      	strb	r3, [r7, #19]
 8009cac:	e0e0      	b.n	8009e70 <UART_SetConfig+0x290>
 8009cae:	2308      	movs	r3, #8
 8009cb0:	74fb      	strb	r3, [r7, #19]
 8009cb2:	e0dd      	b.n	8009e70 <UART_SetConfig+0x290>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	74fb      	strb	r3, [r7, #19]
 8009cb8:	bf00      	nop
 8009cba:	e0d9      	b.n	8009e70 <UART_SetConfig+0x290>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a87      	ldr	r2, [pc, #540]	; (8009ee0 <UART_SetConfig+0x300>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d134      	bne.n	8009d30 <UART_SetConfig+0x150>
 8009cc6:	4b85      	ldr	r3, [pc, #532]	; (8009edc <UART_SetConfig+0x2fc>)
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ccc:	f003 030c 	and.w	r3, r3, #12
 8009cd0:	2b0c      	cmp	r3, #12
 8009cd2:	d829      	bhi.n	8009d28 <UART_SetConfig+0x148>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <UART_SetConfig+0xfc>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009d11 	.word	0x08009d11
 8009ce0:	08009d29 	.word	0x08009d29
 8009ce4:	08009d29 	.word	0x08009d29
 8009ce8:	08009d29 	.word	0x08009d29
 8009cec:	08009d1d 	.word	0x08009d1d
 8009cf0:	08009d29 	.word	0x08009d29
 8009cf4:	08009d29 	.word	0x08009d29
 8009cf8:	08009d29 	.word	0x08009d29
 8009cfc:	08009d17 	.word	0x08009d17
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d29 	.word	0x08009d29
 8009d08:	08009d29 	.word	0x08009d29
 8009d0c:	08009d23 	.word	0x08009d23
 8009d10:	2300      	movs	r3, #0
 8009d12:	74fb      	strb	r3, [r7, #19]
 8009d14:	e0ac      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d16:	2302      	movs	r3, #2
 8009d18:	74fb      	strb	r3, [r7, #19]
 8009d1a:	e0a9      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	74fb      	strb	r3, [r7, #19]
 8009d20:	e0a6      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d22:	2308      	movs	r3, #8
 8009d24:	74fb      	strb	r3, [r7, #19]
 8009d26:	e0a3      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	74fb      	strb	r3, [r7, #19]
 8009d2c:	bf00      	nop
 8009d2e:	e09f      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a6b      	ldr	r2, [pc, #428]	; (8009ee4 <UART_SetConfig+0x304>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d120      	bne.n	8009d7c <UART_SetConfig+0x19c>
 8009d3a:	4b68      	ldr	r3, [pc, #416]	; (8009edc <UART_SetConfig+0x2fc>)
 8009d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d44:	2b10      	cmp	r3, #16
 8009d46:	d00f      	beq.n	8009d68 <UART_SetConfig+0x188>
 8009d48:	2b10      	cmp	r3, #16
 8009d4a:	d802      	bhi.n	8009d52 <UART_SetConfig+0x172>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <UART_SetConfig+0x17c>
 8009d50:	e010      	b.n	8009d74 <UART_SetConfig+0x194>
 8009d52:	2b20      	cmp	r3, #32
 8009d54:	d005      	beq.n	8009d62 <UART_SetConfig+0x182>
 8009d56:	2b30      	cmp	r3, #48	; 0x30
 8009d58:	d009      	beq.n	8009d6e <UART_SetConfig+0x18e>
 8009d5a:	e00b      	b.n	8009d74 <UART_SetConfig+0x194>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	74fb      	strb	r3, [r7, #19]
 8009d60:	e086      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d62:	2302      	movs	r3, #2
 8009d64:	74fb      	strb	r3, [r7, #19]
 8009d66:	e083      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d68:	2304      	movs	r3, #4
 8009d6a:	74fb      	strb	r3, [r7, #19]
 8009d6c:	e080      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d6e:	2308      	movs	r3, #8
 8009d70:	74fb      	strb	r3, [r7, #19]
 8009d72:	e07d      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d74:	2310      	movs	r3, #16
 8009d76:	74fb      	strb	r3, [r7, #19]
 8009d78:	bf00      	nop
 8009d7a:	e079      	b.n	8009e70 <UART_SetConfig+0x290>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a59      	ldr	r2, [pc, #356]	; (8009ee8 <UART_SetConfig+0x308>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d120      	bne.n	8009dc8 <UART_SetConfig+0x1e8>
 8009d86:	4b55      	ldr	r3, [pc, #340]	; (8009edc <UART_SetConfig+0x2fc>)
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d00f      	beq.n	8009db4 <UART_SetConfig+0x1d4>
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	d802      	bhi.n	8009d9e <UART_SetConfig+0x1be>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <UART_SetConfig+0x1c8>
 8009d9c:	e010      	b.n	8009dc0 <UART_SetConfig+0x1e0>
 8009d9e:	2b80      	cmp	r3, #128	; 0x80
 8009da0:	d005      	beq.n	8009dae <UART_SetConfig+0x1ce>
 8009da2:	2bc0      	cmp	r3, #192	; 0xc0
 8009da4:	d009      	beq.n	8009dba <UART_SetConfig+0x1da>
 8009da6:	e00b      	b.n	8009dc0 <UART_SetConfig+0x1e0>
 8009da8:	2300      	movs	r3, #0
 8009daa:	74fb      	strb	r3, [r7, #19]
 8009dac:	e060      	b.n	8009e70 <UART_SetConfig+0x290>
 8009dae:	2302      	movs	r3, #2
 8009db0:	74fb      	strb	r3, [r7, #19]
 8009db2:	e05d      	b.n	8009e70 <UART_SetConfig+0x290>
 8009db4:	2304      	movs	r3, #4
 8009db6:	74fb      	strb	r3, [r7, #19]
 8009db8:	e05a      	b.n	8009e70 <UART_SetConfig+0x290>
 8009dba:	2308      	movs	r3, #8
 8009dbc:	74fb      	strb	r3, [r7, #19]
 8009dbe:	e057      	b.n	8009e70 <UART_SetConfig+0x290>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	74fb      	strb	r3, [r7, #19]
 8009dc4:	bf00      	nop
 8009dc6:	e053      	b.n	8009e70 <UART_SetConfig+0x290>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a47      	ldr	r2, [pc, #284]	; (8009eec <UART_SetConfig+0x30c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d124      	bne.n	8009e1c <UART_SetConfig+0x23c>
 8009dd2:	4b42      	ldr	r3, [pc, #264]	; (8009edc <UART_SetConfig+0x2fc>)
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de0:	d012      	beq.n	8009e08 <UART_SetConfig+0x228>
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de6:	d802      	bhi.n	8009dee <UART_SetConfig+0x20e>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <UART_SetConfig+0x21c>
 8009dec:	e012      	b.n	8009e14 <UART_SetConfig+0x234>
 8009dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df2:	d006      	beq.n	8009e02 <UART_SetConfig+0x222>
 8009df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009df8:	d009      	beq.n	8009e0e <UART_SetConfig+0x22e>
 8009dfa:	e00b      	b.n	8009e14 <UART_SetConfig+0x234>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	74fb      	strb	r3, [r7, #19]
 8009e00:	e036      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e02:	2302      	movs	r3, #2
 8009e04:	74fb      	strb	r3, [r7, #19]
 8009e06:	e033      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	74fb      	strb	r3, [r7, #19]
 8009e0c:	e030      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e0e:	2308      	movs	r3, #8
 8009e10:	74fb      	strb	r3, [r7, #19]
 8009e12:	e02d      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e14:	2310      	movs	r3, #16
 8009e16:	74fb      	strb	r3, [r7, #19]
 8009e18:	bf00      	nop
 8009e1a:	e029      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a2c      	ldr	r2, [pc, #176]	; (8009ed4 <UART_SetConfig+0x2f4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d123      	bne.n	8009e6e <UART_SetConfig+0x28e>
 8009e26:	4b2d      	ldr	r3, [pc, #180]	; (8009edc <UART_SetConfig+0x2fc>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e34:	d012      	beq.n	8009e5c <UART_SetConfig+0x27c>
 8009e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e3a:	d802      	bhi.n	8009e42 <UART_SetConfig+0x262>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d007      	beq.n	8009e50 <UART_SetConfig+0x270>
 8009e40:	e012      	b.n	8009e68 <UART_SetConfig+0x288>
 8009e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e46:	d006      	beq.n	8009e56 <UART_SetConfig+0x276>
 8009e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e4c:	d009      	beq.n	8009e62 <UART_SetConfig+0x282>
 8009e4e:	e00b      	b.n	8009e68 <UART_SetConfig+0x288>
 8009e50:	2300      	movs	r3, #0
 8009e52:	74fb      	strb	r3, [r7, #19]
 8009e54:	e00c      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e56:	2302      	movs	r3, #2
 8009e58:	74fb      	strb	r3, [r7, #19]
 8009e5a:	e009      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	74fb      	strb	r3, [r7, #19]
 8009e60:	e006      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e62:	2308      	movs	r3, #8
 8009e64:	74fb      	strb	r3, [r7, #19]
 8009e66:	e003      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	74fb      	strb	r3, [r7, #19]
 8009e6c:	e000      	b.n	8009e70 <UART_SetConfig+0x290>
 8009e6e:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <UART_SetConfig+0x2f4>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	f040 80fc 	bne.w	800a074 <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 8009e80:	7cfb      	ldrb	r3, [r7, #19]
 8009e82:	2b08      	cmp	r3, #8
 8009e84:	d836      	bhi.n	8009ef4 <UART_SetConfig+0x314>
 8009e86:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <UART_SetConfig+0x2ac>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009ef5 	.word	0x08009ef5
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ef5 	.word	0x08009ef5
 8009e9c:	08009ebf 	.word	0x08009ebf
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	08009ef5 	.word	0x08009ef5
 8009eac:	08009ec7 	.word	0x08009ec7
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8009eb0:	f7fe f9f2 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 8009eb4:	6178      	str	r0, [r7, #20]
      break;
 8009eb6:	e020      	b.n	8009efa <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <UART_SetConfig+0x310>)
 8009eba:	617b      	str	r3, [r7, #20]
      break;
 8009ebc:	e01d      	b.n	8009efa <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8009ebe:	f7fe f8e7 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 8009ec2:	6178      	str	r0, [r7, #20]
      break;
 8009ec4:	e019      	b.n	8009efa <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8009ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eca:	617b      	str	r3, [r7, #20]
      break;
 8009ecc:	e015      	b.n	8009efa <UART_SetConfig+0x31a>
 8009ece:	bf00      	nop
 8009ed0:	efff69f3 	.word	0xefff69f3
 8009ed4:	40008000 	.word	0x40008000
 8009ed8:	40013800 	.word	0x40013800
 8009edc:	40021000 	.word	0x40021000
 8009ee0:	40004400 	.word	0x40004400
 8009ee4:	40004800 	.word	0x40004800
 8009ee8:	40004c00 	.word	0x40004c00
 8009eec:	40005000 	.word	0x40005000
 8009ef0:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8198 	beq.w	800a232 <UART_SetConfig+0x652>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d305      	bcc.n	8009f1e <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	031b      	lsls	r3, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d902      	bls.n	8009f24 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]
 8009f22:	e186      	b.n	800a232 <UART_SetConfig+0x652>
      }
      else
      {
        switch (clocksource)
 8009f24:	7cfb      	ldrb	r3, [r7, #19]
 8009f26:	2b08      	cmp	r3, #8
 8009f28:	f200 8091 	bhi.w	800a04e <UART_SetConfig+0x46e>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <UART_SetConfig+0x354>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f59 	.word	0x08009f59
 8009f38:	0800a04f 	.word	0x0800a04f
 8009f3c:	08009fa5 	.word	0x08009fa5
 8009f40:	0800a04f 	.word	0x0800a04f
 8009f44:	08009fd9 	.word	0x08009fd9
 8009f48:	0800a04f 	.word	0x0800a04f
 8009f4c:	0800a04f 	.word	0x0800a04f
 8009f50:	0800a04f 	.word	0x0800a04f
 8009f54:	0800a025 	.word	0x0800a025
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009f58:	f7fe f99e 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	f04f 0400 	mov.w	r4, #0
 8009f6c:	0214      	lsls	r4, r2, #8
 8009f6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f72:	020b      	lsls	r3, r1, #8
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6852      	ldr	r2, [r2, #4]
 8009f78:	0852      	lsrs	r2, r2, #1
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	eb13 0b01 	adds.w	fp, r3, r1
 8009f84:	eb44 0c02 	adc.w	ip, r4, r2
 8009f88:	4658      	mov	r0, fp
 8009f8a:	4661      	mov	r1, ip
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f04f 0400 	mov.w	r4, #0
 8009f94:	461a      	mov	r2, r3
 8009f96:	4623      	mov	r3, r4
 8009f98:	f7f6 fde8 	bl	8000b6c <__aeabi_uldivmod>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	617b      	str	r3, [r7, #20]
          break;
 8009fa2:	e057      	b.n	800a054 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	f04f 0400 	mov.w	r4, #0
 8009fae:	49a4      	ldr	r1, [pc, #656]	; (800a240 <UART_SetConfig+0x660>)
 8009fb0:	f04f 0200 	mov.w	r2, #0
 8009fb4:	eb13 0b01 	adds.w	fp, r3, r1
 8009fb8:	eb44 0c02 	adc.w	ip, r4, r2
 8009fbc:	4658      	mov	r0, fp
 8009fbe:	4661      	mov	r1, ip
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f04f 0400 	mov.w	r4, #0
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4623      	mov	r3, r4
 8009fcc:	f7f6 fdce 	bl	8000b6c <__aeabi_uldivmod>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	617b      	str	r3, [r7, #20]
          break;
 8009fd6:	e03d      	b.n	800a054 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009fd8:	f7fe f85a 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	f04f 0400 	mov.w	r4, #0
 8009fec:	0214      	lsls	r4, r2, #8
 8009fee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009ff2:	020b      	lsls	r3, r1, #8
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6852      	ldr	r2, [r2, #4]
 8009ff8:	0852      	lsrs	r2, r2, #1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	f04f 0200 	mov.w	r2, #0
 800a000:	eb13 0b01 	adds.w	fp, r3, r1
 800a004:	eb44 0c02 	adc.w	ip, r4, r2
 800a008:	4658      	mov	r0, fp
 800a00a:	4661      	mov	r1, ip
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f04f 0400 	mov.w	r4, #0
 800a014:	461a      	mov	r2, r3
 800a016:	4623      	mov	r3, r4
 800a018:	f7f6 fda8 	bl	8000b6c <__aeabi_uldivmod>
 800a01c:	4603      	mov	r3, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	617b      	str	r3, [r7, #20]
          break;
 800a022:	e017      	b.n	800a054 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	f04f 0400 	mov.w	r4, #0
 800a02e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a032:	f144 0100 	adc.w	r1, r4, #0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f04f 0400 	mov.w	r4, #0
 800a03e:	461a      	mov	r2, r3
 800a040:	4623      	mov	r3, r4
 800a042:	f7f6 fd93 	bl	8000b6c <__aeabi_uldivmod>
 800a046:	4603      	mov	r3, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	617b      	str	r3, [r7, #20]
          break;
 800a04c:	e002      	b.n	800a054 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	73fb      	strb	r3, [r7, #15]
          break;
 800a052:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05a:	d308      	bcc.n	800a06e <UART_SetConfig+0x48e>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a062:	d204      	bcs.n	800a06e <UART_SetConfig+0x48e>
        {
           huart->Instance->BRR = tmpreg;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	60da      	str	r2, [r3, #12]
 800a06c:	e0e1      	b.n	800a232 <UART_SetConfig+0x652>
        }
        else
        {
          ret = HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	73fb      	strb	r3, [r7, #15]
 800a072:	e0de      	b.n	800a232 <UART_SetConfig+0x652>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07c:	d16f      	bne.n	800a15e <UART_SetConfig+0x57e>
  {
    switch (clocksource)
 800a07e:	7cfb      	ldrb	r3, [r7, #19]
 800a080:	2b08      	cmp	r3, #8
 800a082:	d857      	bhi.n	800a134 <UART_SetConfig+0x554>
 800a084:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <UART_SetConfig+0x4ac>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a0b1 	.word	0x0800a0b1
 800a090:	0800a0cd 	.word	0x0800a0cd
 800a094:	0800a0e9 	.word	0x0800a0e9
 800a098:	0800a135 	.word	0x0800a135
 800a09c:	0800a103 	.word	0x0800a103
 800a0a0:	0800a135 	.word	0x0800a135
 800a0a4:	0800a135 	.word	0x0800a135
 800a0a8:	0800a135 	.word	0x0800a135
 800a0ac:	0800a11f 	.word	0x0800a11f
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a0b0:	f7fe f8f2 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	005a      	lsls	r2, r3, #1
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	441a      	add	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c8:	823b      	strh	r3, [r7, #16]
      break;
 800a0ca:	e036      	b.n	800a13a <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a0cc:	f7fe f906 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	005a      	lsls	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	085b      	lsrs	r3, r3, #1
 800a0da:	441a      	add	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e4:	823b      	strh	r3, [r7, #16]
      break;
 800a0e6:	e028      	b.n	800a13a <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	085b      	lsrs	r3, r3, #1
 800a0ee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a0f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	6852      	ldr	r2, [r2, #4]
 800a0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0fe:	823b      	strh	r3, [r7, #16]
      break;
 800a100:	e01b      	b.n	800a13a <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a102:	f7fd ffc5 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 800a106:	4603      	mov	r3, r0
 800a108:	005a      	lsls	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	085b      	lsrs	r3, r3, #1
 800a110:	441a      	add	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	823b      	strh	r3, [r7, #16]
      break;
 800a11c:	e00d      	b.n	800a13a <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	085b      	lsrs	r3, r3, #1
 800a124:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a130:	823b      	strh	r3, [r7, #16]
      break;
 800a132:	e002      	b.n	800a13a <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
      break;
 800a138:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 800a13a:	8a3b      	ldrh	r3, [r7, #16]
 800a13c:	f023 030f 	bic.w	r3, r3, #15
 800a140:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800a142:	8a3b      	ldrh	r3, [r7, #16]
 800a144:	105b      	asrs	r3, r3, #1
 800a146:	b29b      	uxth	r3, r3
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	89bb      	ldrh	r3, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	89ba      	ldrh	r2, [r7, #12]
 800a15a:	60da      	str	r2, [r3, #12]
 800a15c:	e069      	b.n	800a232 <UART_SetConfig+0x652>
  }
  else
  {
    switch (clocksource)
 800a15e:	7cfb      	ldrb	r3, [r7, #19]
 800a160:	2b08      	cmp	r3, #8
 800a162:	d863      	bhi.n	800a22c <UART_SetConfig+0x64c>
 800a164:	a201      	add	r2, pc, #4	; (adr r2, 800a16c <UART_SetConfig+0x58c>)
 800a166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16a:	bf00      	nop
 800a16c:	0800a191 	.word	0x0800a191
 800a170:	0800a1b1 	.word	0x0800a1b1
 800a174:	0800a1d1 	.word	0x0800a1d1
 800a178:	0800a22d 	.word	0x0800a22d
 800a17c:	0800a1f1 	.word	0x0800a1f1
 800a180:	0800a22d 	.word	0x0800a22d
 800a184:	0800a22d 	.word	0x0800a22d
 800a188:	0800a22d 	.word	0x0800a22d
 800a18c:	0800a211 	.word	0x0800a211
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a190:	f7fe f882 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 800a194:	4602      	mov	r2, r0
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	085b      	lsrs	r3, r3, #1
 800a19c:	441a      	add	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	60da      	str	r2, [r3, #12]
      break;
 800a1ae:	e040      	b.n	800a232 <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a1b0:	f7fe f894 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	441a      	add	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60da      	str	r2, [r3, #12]
      break;
 800a1ce:	e030      	b.n	800a232 <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a1da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6852      	ldr	r2, [r2, #4]
 800a1e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60da      	str	r2, [r3, #12]
      break;
 800a1ee:	e020      	b.n	800a232 <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a1f0:	f7fd ff4e 	bl	8008090 <HAL_RCC_GetSysClockFreq>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	441a      	add	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	fbb2 f3f3 	udiv	r3, r2, r3
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	60da      	str	r2, [r3, #12]
      break;
 800a20e:	e010      	b.n	800a232 <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60da      	str	r2, [r3, #12]
      break;
 800a22a:	e002      	b.n	800a232 <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
      break;
 800a230:	bf00      	nop
    }
  }

  return ret;
 800a232:	7bfb      	ldrb	r3, [r7, #15]

}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a23e:	bf00      	nop
 800a240:	f4240000 	.word	0xf4240000

0800a244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00a      	beq.n	800a2b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00a      	beq.n	800a2f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00a      	beq.n	800a318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d01a      	beq.n	800a35a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a342:	d10a      	bne.n	800a35a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	605a      	str	r2, [r3, #4]
  }
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr

0800a386 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b086      	sub	sp, #24
 800a38a:	af02      	add	r7, sp, #8
 800a38c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a398:	f7fb ff92 	bl	80062c0 <HAL_GetTick>
 800a39c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d10e      	bne.n	800a3ca <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f82c 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e022      	b.n	800a410 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d10e      	bne.n	800a3f6 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f816 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e00c      	b.n	800a410 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	4613      	mov	r3, r2
 800a426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a428:	e02c      	b.n	800a484 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d028      	beq.n	800a484 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <UART_WaitOnFlagUntilTimeout+0x30>
 800a438:	f7fb ff42 	bl	80062c0 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	429a      	cmp	r2, r3
 800a446:	d21d      	bcs.n	800a484 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a456:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0201 	bic.w	r2, r2, #1
 800a466:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e00f      	b.n	800a4a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69da      	ldr	r2, [r3, #28]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	429a      	cmp	r2, r3
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d0c3      	beq.n	800a42a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a4ca:	601a      	str	r2, [r3, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bc80      	pop	{r7}
 800a4d4:	4770      	bx	lr

0800a4d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	609a      	str	r2, [r3, #8]
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d114      	bne.n	800a556 <UART_DMATransmitCplt+0x46>
  {  
    huart->TxXferCount = 0;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689a      	ldr	r2, [r3, #8]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a542:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a552:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800a554:	e002      	b.n	800a55c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7f6 ff7a 	bl	8001450 <HAL_UART_TxCpltCallback>
}
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a570:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fb18 	bl	8009ba8 <HAL_UART_TxHalfCpltCallback>
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b21      	cmp	r3, #33	; 0x21
 800a5a8:	d109      	bne.n	800a5be <UART_DMAError+0x3e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b4:	2b80      	cmp	r3, #128	; 0x80
 800a5b6:	d102      	bne.n	800a5be <UART_DMAError+0x3e>
  {
    UART_EndTxTransfer(huart);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff ff77 	bl	800a4ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b22      	cmp	r3, #34	; 0x22
 800a5c8:	d109      	bne.n	800a5de <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d102      	bne.n	800a5de <UART_DMAError+0x5e>
  {
    UART_EndRxTransfer(huart);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7ff ff7c 	bl	800a4d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5e2:	f043 0210 	orr.w	r2, r3, #16
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff faee 	bl	8009bcc <HAL_UART_ErrorCallback>
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fad8 	bl	8009bcc <HAL_UART_ErrorCallback>
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b21      	cmp	r3, #33	; 0x21
 800a636:	d144      	bne.n	800a6c2 <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d111      	bne.n	800a666 <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a650:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a660:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	e02e      	b.n	800a6c4 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66e:	d114      	bne.n	800a69a <UART_Transmit_IT+0x76>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d110      	bne.n	800a69a <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67c:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	881a      	ldrh	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a68a:	b292      	uxth	r2, r2
 800a68c:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a692:	1c9a      	adds	r2, r3, #2
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	64da      	str	r2, [r3, #76]	; 0x4c
 800a698:	e009      	b.n	800a6ae <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	64d1      	str	r1, [r2, #76]	; 0x4c
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	b292      	uxth	r2, r2
 800a6ac:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a6c2:	2302      	movs	r3, #2
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr

0800a6ce <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7f6 feae 	bl	8001450 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6fe:	b590      	push	{r4, r7, lr}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a70c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b22      	cmp	r3, #34	; 0x22
 800a718:	d14f      	bne.n	800a7ba <UART_Receive_IT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a720:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a72a:	d112      	bne.n	800a752 <UART_Receive_IT+0x54>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10e      	bne.n	800a752 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a738:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a73a:	89ba      	ldrh	r2, [r7, #12]
 800a73c:	89fb      	ldrh	r3, [r7, #14]
 800a73e:	4013      	ands	r3, r2
 800a740:	b29a      	uxth	r2, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	1c9a      	adds	r2, r3, #2
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	655a      	str	r2, [r3, #84]	; 0x54
 800a750:	e00b      	b.n	800a76a <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a752:	89bb      	ldrh	r3, [r7, #12]
 800a754:	b2d9      	uxtb	r1, r3
 800a756:	89fb      	ldrh	r3, [r7, #14]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	1c5c      	adds	r4, r3, #1
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	6544      	str	r4, [r0, #84]	; 0x54
 800a764:	400a      	ands	r2, r1
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a770:	3b01      	subs	r3, #1
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a780:	2b00      	cmp	r3, #0
 800a782:	d118      	bne.n	800a7b6 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a792:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0201 	bic.w	r2, r2, #1
 800a7a2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff fa04 	bl	8009bba <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e00c      	b.n	800a7d0 <UART_Receive_IT+0xd2>
    }

    return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e00a      	b.n	800a7d0 <UART_Receive_IT+0xd2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	8b1b      	ldrh	r3, [r3, #24]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0208 	orr.w	r2, r2, #8
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 800a7ce:	2302      	movs	r3, #2
  }
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd90      	pop	{r4, r7, pc}

0800a7d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bc80      	pop	{r7}
 800a7e8:	4770      	bx	lr

0800a7ea <RB_init>:
#include "ring_buffer.h"

#define ABS(a) ((a>=0) ? (a) : -(a))

int RB_init(ring_buffer* rb, int size)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
    rb->buffer_end = rb->buffer + ((size<RB_MAX_SIZE) ? size : RB_MAX_SIZE);
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b0f      	cmp	r3, #15
 800a7fa:	dc02      	bgt.n	800a802 <RB_init+0x18>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	e000      	b.n	800a804 <RB_init+0x1a>
 800a802:	2340      	movs	r3, #64	; 0x40
 800a804:	441a      	add	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	641a      	str	r2, [r3, #64]	; 0x40
    rb->size = size;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	651a      	str	r2, [r3, #80]	; 0x50
    rb->data_start = rb->buffer;
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	645a      	str	r2, [r3, #68]	; 0x44
    rb->data_end = rb->buffer;
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	649a      	str	r2, [r3, #72]	; 0x48
    rb->count = 0;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	64da      	str	r2, [r3, #76]	; 0x4c
    return (size<=RB_MAX_SIZE) ? 0 : -1;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b10      	cmp	r3, #16
 800a826:	dc01      	bgt.n	800a82c <RB_init+0x42>
 800a828:	2300      	movs	r3, #0
 800a82a:	e001      	b.n	800a830 <RB_init+0x46>
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr

0800a83a <RB_push>:

int RB_push(ring_buffer* rb, int data)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
    if (rb == NULL || rb->buffer == NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <RB_push+0x16>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <RB_push+0x1c>
        return -1;
 800a850:	f04f 33ff 	mov.w	r3, #4294967295
 800a854:	e02e      	b.n	800a8b4 <RB_push+0x7a>

    *rb->data_end = data;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	601a      	str	r2, [r3, #0]
    rb->data_end++;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a862:	1d1a      	adds	r2, r3, #4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	649a      	str	r2, [r3, #72]	; 0x48
    if (rb->data_end == rb->buffer_end)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	429a      	cmp	r2, r3
 800a872:	d102      	bne.n	800a87a <RB_push+0x40>
        rb->data_end = rb->buffer;
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	649a      	str	r2, [r3, #72]	; 0x48

    if (RB_full(rb)) {
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f81e 	bl	800a8bc <RB_full>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d010      	beq.n	800a8a8 <RB_push+0x6e>
        if ((rb->data_start + 1) == rb->buffer_end)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	429a      	cmp	r2, r3
 800a892:	d103      	bne.n	800a89c <RB_push+0x62>
            rb->data_start = rb->buffer;
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	645a      	str	r2, [r3, #68]	; 0x44
 800a89a:	e00a      	b.n	800a8b2 <RB_push+0x78>
        else
            rb->data_start++;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a0:	1d1a      	adds	r2, r3, #4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	645a      	str	r2, [r3, #68]	; 0x44
 800a8a6:	e004      	b.n	800a8b2 <RB_push+0x78>
    } else {
        rb->count++;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    return 0;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <RB_full>:

    return data;
}

bool RB_full(ring_buffer* rb)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
    return rb->count == rb->size;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bf0c      	ite	eq
 800a8d0:	2301      	moveq	r3, #1
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	b2db      	uxtb	r3, r3
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bc80      	pop	{r7}
 800a8de:	4770      	bx	lr

0800a8e0 <RB_sum>:
    }
    //trace_printf("\n");
}

int RB_sum(ring_buffer*rb)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
    int i=0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
    int sum=0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	613b      	str	r3, [r7, #16]
    int *ptr;
    
    ptr = rb->data_start;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f4:	60fb      	str	r3, [r7, #12]
    for(i=0;i<rb->count;i++)
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	e010      	b.n	800a91e <RB_sum+0x3e>
    {
        sum += *ptr++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	1d1a      	adds	r2, r3, #4
 800a900:	60fa      	str	r2, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4413      	add	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
        if(ptr == rb->buffer_end)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	429a      	cmp	r2, r3
 800a912:	d101      	bne.n	800a918 <RB_sum+0x38>
            ptr = rb->buffer;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60fb      	str	r3, [r7, #12]
    for(i=0;i<rb->count;i++)
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	3301      	adds	r3, #1
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	429a      	cmp	r2, r3
 800a926:	dbe9      	blt.n	800a8fc <RB_sum+0x1c>
    }
    return sum;
 800a928:	693b      	ldr	r3, [r7, #16]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	bc80      	pop	{r7}
 800a932:	4770      	bx	lr

0800a934 <RB_mean>:

int RB_mean(ring_buffer*rb)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
    return RB_sum(rb)/rb->count;
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ffcf 	bl	800a8e0 <RB_sum>
 800a942:	4602      	mov	r2, r0
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a948:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <RB_mad>:

int RB_mad(ring_buffer*rb)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
    int i;
    int *ptr;
    int mad=0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
    int mean;
    int data;
    
    mean = RB_mean(rb);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff ffe7 	bl	800a934 <RB_mean>
 800a966:	6138      	str	r0, [r7, #16]
       
    ptr = rb->data_start;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96c:	61bb      	str	r3, [r7, #24]
    for(i=0;i<rb->count;i++)
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
 800a972:	e017      	b.n	800a9a4 <RB_mad+0x50>
    {
        data = *ptr++;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	1d1a      	adds	r2, r3, #4
 800a978:	61ba      	str	r2, [r7, #24]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
        mad += ABS((data - mean));
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfb8      	it	lt
 800a988:	425b      	neglt	r3, r3
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	4413      	add	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
        if(ptr == rb->buffer_end)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a994:	69ba      	ldr	r2, [r7, #24]
 800a996:	429a      	cmp	r2, r3
 800a998:	d101      	bne.n	800a99e <RB_mad+0x4a>
            ptr = rb->buffer;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	61bb      	str	r3, [r7, #24]
    for(i=0;i<rb->count;i++)
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	dbe2      	blt.n	800a974 <RB_mad+0x20>
    }
    return mad/rb->count;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <RB_dir>:

int RB_dir(ring_buffer*rb)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	; 0x24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
    int direction = 0;   
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
    int i=0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	61bb      	str	r3, [r7, #24]
    int *ptr;
    int value1, value2;
    
    ptr = rb->data_start;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d4:	617b      	str	r3, [r7, #20]
    if (rb->count == 0 || rb->count == 1){
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <RB_dir+0x26>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <RB_dir+0x2a>
        return 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	e06f      	b.n	800aaca <RB_dir+0x10a>
    } else {
        value1 = *ptr++; if(ptr == rb->buffer_end) ptr = rb->buffer;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	617a      	str	r2, [r7, #20]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	613b      	str	r3, [r7, #16]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d101      	bne.n	800aa02 <RB_dir+0x42>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	617b      	str	r3, [r7, #20]
        value2 = *ptr++; if(ptr == rb->buffer_end) ptr = rb->buffer;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	1d1a      	adds	r2, r3, #4
 800aa06:	617a      	str	r2, [r7, #20]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d101      	bne.n	800aa1a <RB_dir+0x5a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	617b      	str	r3, [r7, #20]
        direction = ((value2 - value1) > 0) ? 1 : (((value2 -value1) < 0) ? -1 : 0);
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	dc09      	bgt.n	800aa38 <RB_dir+0x78>
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	da02      	bge.n	800aa34 <RB_dir+0x74>
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa32:	e002      	b.n	800aa3a <RB_dir+0x7a>
 800aa34:	2300      	movs	r3, #0
 800aa36:	e000      	b.n	800aa3a <RB_dir+0x7a>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61fb      	str	r3, [r7, #28]
        value1 = value2;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	613b      	str	r3, [r7, #16]
    }
    
    for(i=2;i<rb->count;i++)
 800aa40:	2302      	movs	r3, #2
 800aa42:	61bb      	str	r3, [r7, #24]
 800aa44:	e03b      	b.n	800aabe <RB_dir+0xfe>
    {
        value2 = *ptr++; if(ptr == rb->buffer_end) ptr = rb->buffer;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	617a      	str	r2, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d101      	bne.n	800aa5e <RB_dir+0x9e>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	617b      	str	r3, [r7, #20]
        if ((direction==1) && ((value2-value1)<0)) {
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d107      	bne.n	800aa74 <RB_dir+0xb4>
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da02      	bge.n	800aa74 <RB_dir+0xb4>
            direction = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61fb      	str	r3, [r7, #28]
            break;
 800aa72:	e029      	b.n	800aac8 <RB_dir+0x108>
        }
        if ((direction==-1) && ((value2-value1)>0)) {
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d107      	bne.n	800aa8c <RB_dir+0xcc>
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	dd02      	ble.n	800aa8c <RB_dir+0xcc>
            direction = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	61fb      	str	r3, [r7, #28]
            break;
 800aa8a:	e01d      	b.n	800aac8 <RB_dir+0x108>
        }
        if (direction==0) {
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d110      	bne.n	800aab4 <RB_dir+0xf4>
            direction = ((value2 - value1) > 0) ? 1 : (((value2 -value1) < 0) ? -1 : 0);
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc09      	bgt.n	800aab0 <RB_dir+0xf0>
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da02      	bge.n	800aaac <RB_dir+0xec>
 800aaa6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaaa:	e002      	b.n	800aab2 <RB_dir+0xf2>
 800aaac:	2300      	movs	r3, #0
 800aaae:	e000      	b.n	800aab2 <RB_dir+0xf2>
 800aab0:	2301      	movs	r3, #1
 800aab2:	61fb      	str	r3, [r7, #28]
        }
        value1 = value2;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	613b      	str	r3, [r7, #16]
    for(i=2;i<rb->count;i++)
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	3301      	adds	r3, #1
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	dbbe      	blt.n	800aa46 <RB_dir+0x86>
    }
    return direction;
 800aac8:	69fb      	ldr	r3, [r7, #28]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3724      	adds	r7, #36	; 0x24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr

0800aad4 <tof_gestures_initDIRSWIPE_1>:
 */

#include "tof_gestures.h"
#include "tof_gestures_DIRSWIPE_1.h"

int tof_gestures_initDIRSWIPE_1(int32_t rangeThreshold_mm, int minSwipeDuration, int maxSwipeDuration, bool handMustCoverBoth, Gesture_DIRSWIPE_1_Data_t *data){
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	70fb      	strb	r3, [r7, #3]
    int status=0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	617b      	str	r3, [r7, #20]
    // Init left and right motion
    status |= tof_initMotion(rangeThreshold_mm, &(data->motionDetectorLeft));
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	330c      	adds	r3, #12
 800aaea:	4619      	mov	r1, r3
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 fb07 	bl	800b100 <tof_initMotion>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
    status |= tof_initMotion(rangeThreshold_mm, &(data->motionDetectorRight));
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	3320      	adds	r3, #32
 800aafe:	4619      	mov	r1, r3
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 fafd 	bl	800b100 <tof_initMotion>
 800ab06:	4602      	mov	r2, r0
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]
    data->minSwipeDuration = minSwipeDuration;
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	601a      	str	r2, [r3, #0]
    data->maxSwipeDuration = maxSwipeDuration;
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	605a      	str	r2, [r3, #4]
    data->handMustCoverBoth = handMustCoverBoth;
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	78fa      	ldrb	r2, [r7, #3]
 800ab1e:	721a      	strb	r2, [r3, #8]
    data->state = GESTURES_DIRSWIPE_1_START;
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	2200      	movs	r2, #0
 800ab24:	635a      	str	r2, [r3, #52]	; 0x34
    data->timestamp = 0;
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	63da      	str	r2, [r3, #60]	; 0x3c
    return status;
 800ab2c:	697b      	ldr	r3, [r7, #20]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <tof_gestures_detectDIRSWIPE_1>:

int tof_gestures_detectDIRSWIPE_1(int32_t left_range_mm, int32_t right_range_mm, Gesture_DIRSWIPE_1_Data_t *data){
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b08a      	sub	sp, #40	; 0x28
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
    int return_code = GESTURES_NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
    int r_motion_code, l_motion_code;
    int timestamp = GET_TIME_STAMP();
 800ab46:	f7fb fbbb 	bl	80062c0 <HAL_GetTick>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	623b      	str	r3, [r7, #32]
    int duration=0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
    
    // Get left and right motion
    l_motion_code = tof_getMotion(left_range_mm, &(data->motionDetectorLeft));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	330c      	adds	r3, #12
 800ab56:	4619      	mov	r1, r3
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 faeb 	bl	800b134 <tof_getMotion>
 800ab5e:	61b8      	str	r0, [r7, #24]
    r_motion_code = tof_getMotion(right_range_mm, &(data->motionDetectorRight));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3320      	adds	r3, #32
 800ab64:	4619      	mov	r1, r3
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f000 fae4 	bl	800b134 <tof_getMotion>
 800ab6c:	6178      	str	r0, [r7, #20]
    
    TOF_GESTURES_DEBUG(DIRSWIPE_1,"lmotion=%d, rmotion=%d", l_motion_code, r_motion_code);
    
    switch(data->state){
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <tof_gestures_detectDIRSWIPE_1+0x46>
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d053      	beq.n	800ac22 <tof_gestures_detectDIRSWIPE_1+0xec>
 800ab7a:	e089      	b.n	800ac90 <tof_gestures_detectDIRSWIPE_1+0x15a>
        case GESTURES_DIRSWIPE_1_START:
        	if((!data->handMustCoverBoth && r_motion_code == GESTURES_MOTION_RAISE_UP) || (data->handMustCoverBoth && r_motion_code == GESTURES_MOTION_RAISE_UP && l_motion_code == GESTURES_MOTION_DOWN_STATE)){
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7a1b      	ldrb	r3, [r3, #8]
 800ab80:	f083 0301 	eor.w	r3, r3, #1
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <tof_gestures_detectDIRSWIPE_1+0x5a>
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d009      	beq.n	800aba4 <tof_gestures_detectDIRSWIPE_1+0x6e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7a1b      	ldrb	r3, [r3, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01a      	beq.n	800abce <tof_gestures_detectDIRSWIPE_1+0x98>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d117      	bne.n	800abce <tof_gestures_detectDIRSWIPE_1+0x98>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d114      	bne.n	800abce <tof_gestures_detectDIRSWIPE_1+0x98>
                if(data->motionDetectorRight.duration > data->minSwipeDuration){
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	dd0a      	ble.n	800abc6 <tof_gestures_detectDIRSWIPE_1+0x90>
                    data->gesture_start_from_right = true;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    data->state = GESTURES_DIRSWIPE_1_END;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	635a      	str	r2, [r3, #52]	; 0x34
                    data->timestamp = timestamp;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a3a      	ldr	r2, [r7, #32]
 800abc2:	63da      	str	r2, [r3, #60]	; 0x3c
                if(data->motionDetectorRight.duration > data->minSwipeDuration){
 800abc4:	e02c      	b.n	800ac20 <tof_gestures_detectDIRSWIPE_1+0xea>
                    TOF_GESTURES_DEBUG(DIRSWIPE_1,"Start right to left (%d ms)",data->motionDetectorRight.duration);
                }else{
                    return_code = GESTURES_DISCARDED_TOO_FAST;
 800abc6:	f06f 0303 	mvn.w	r3, #3
 800abca:	627b      	str	r3, [r7, #36]	; 0x24
                if(data->motionDetectorRight.duration > data->minSwipeDuration){
 800abcc:	e028      	b.n	800ac20 <tof_gestures_detectDIRSWIPE_1+0xea>
                }
            }else if((!data->handMustCoverBoth && l_motion_code == GESTURES_MOTION_RAISE_UP) || (data->handMustCoverBoth && r_motion_code == GESTURES_MOTION_DOWN_STATE && l_motion_code == GESTURES_MOTION_RAISE_UP)){
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7a1b      	ldrb	r3, [r3, #8]
 800abd2:	f083 0301 	eor.w	r3, r3, #1
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <tof_gestures_detectDIRSWIPE_1+0xac>
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d009      	beq.n	800abf6 <tof_gestures_detectDIRSWIPE_1+0xc0>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7a1b      	ldrb	r3, [r3, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d051      	beq.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d14e      	bne.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d14b      	bne.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
                if(data->motionDetectorRight.duration > data->minSwipeDuration){
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	dd0a      	ble.n	800ac18 <tof_gestures_detectDIRSWIPE_1+0xe2>
                    data->gesture_start_from_right = false;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    data->state = GESTURES_DIRSWIPE_1_END;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	635a      	str	r2, [r3, #52]	; 0x34
                    data->timestamp = timestamp;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a3a      	ldr	r2, [r7, #32]
 800ac14:	63da      	str	r2, [r3, #60]	; 0x3c
                    TOF_GESTURES_DEBUG(DIRSWIPE_1,"Start left to right(%d ms)",data->motionDetectorRight.duration);
                }else{
                    return_code = GESTURES_DISCARDED_TOO_FAST;
                }
            }   
            break;
 800ac16:	e03a      	b.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
                    return_code = GESTURES_DISCARDED_TOO_FAST;
 800ac18:	f06f 0303 	mvn.w	r3, #3
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac1e:	e036      	b.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
 800ac20:	e035      	b.n	800ac8e <tof_gestures_detectDIRSWIPE_1+0x158>
        case GESTURES_DIRSWIPE_1_END:
            duration = timestamp - data->timestamp;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac26:	6a3a      	ldr	r2, [r7, #32]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	61fb      	str	r3, [r7, #28]
            if(duration > data->maxSwipeDuration){
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	dd06      	ble.n	800ac44 <tof_gestures_detectDIRSWIPE_1+0x10e>
                // Gesture is too long : discard it
                data->state = GESTURES_DIRSWIPE_1_START;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	635a      	str	r2, [r3, #52]	; 0x34
                TOF_GESTURES_DEBUG(DIRSWIPE_1,"Too slow");
                return_code = GESTURES_DISCARDED_TOO_SLOW;
 800ac3c:	f06f 0302 	mvn.w	r3, #2
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
            }else{
                // Waiting...
                TOF_GESTURES_DEBUG(DIRSWIPE_1,"Waiting...");
                return_code = GESTURES_STARTED;
            }             
            break;
 800ac42:	e025      	b.n	800ac90 <tof_gestures_detectDIRSWIPE_1+0x15a>
            }else if ((data->gesture_start_from_right && l_motion_code == GESTURES_MOTION_RAISE_UP) || (!data->gesture_start_from_right && r_motion_code == GESTURES_MOTION_RAISE_UP)){
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <tof_gestures_detectDIRSWIPE_1+0x11e>
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d00a      	beq.n	800ac6a <tof_gestures_detectDIRSWIPE_1+0x134>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac5a:	f083 0301 	eor.w	r3, r3, #1
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d010      	beq.n	800ac86 <tof_gestures_detectDIRSWIPE_1+0x150>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d10d      	bne.n	800ac86 <tof_gestures_detectDIRSWIPE_1+0x150>
                data->state = GESTURES_DIRSWIPE_1_START;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	635a      	str	r2, [r3, #52]	; 0x34
                return_code = (data->gesture_start_from_right) ? GESTURES_SWIPE_RIGHT_LEFT : GESTURES_SWIPE_LEFT_RIGHT;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <tof_gestures_detectDIRSWIPE_1+0x148>
 800ac7a:	2309      	movs	r3, #9
 800ac7c:	e000      	b.n	800ac80 <tof_gestures_detectDIRSWIPE_1+0x14a>
 800ac7e:	2308      	movs	r3, #8
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
                TOF_GESTURES_DEBUG(DIRSWIPE_1,"DETECTED");
 800ac82:	bf00      	nop
            break;
 800ac84:	e004      	b.n	800ac90 <tof_gestures_detectDIRSWIPE_1+0x15a>
                return_code = GESTURES_STARTED;
 800ac86:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ac8c:	e000      	b.n	800ac90 <tof_gestures_detectDIRSWIPE_1+0x15a>
            break;
 800ac8e:	bf00      	nop
    }
    return return_code;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3728      	adds	r7, #40	; 0x28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <tof_gestures_initSWIPE_1>:
 */

#include "tof_gestures.h"
#include "tof_gestures_SWIPE_1.h"

int tof_gestures_initSWIPE_1(Gesture_SWIPE_1_Data_t *data){
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
    int status=0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]
    status |= (int)(RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3304      	adds	r3, #4
 800acaa:	2110      	movs	r1, #16
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff fd9c 	bl	800a7ea <RB_init>
 800acb2:	4602      	mov	r2, r0
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
    data->meanBackground = 0;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	659a      	str	r2, [r3, #88]	; 0x58
    data->meanHand = 0;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	65da      	str	r2, [r3, #92]	; 0x5c
    data->gestureCode = GESTURES_NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
    data->cpt = SWIPE_1_SENSITIVITY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	665a      	str	r2, [r3, #100]	; 0x64
    return status;
 800acd2:	68fb      	ldr	r3, [r7, #12]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	0000      	movs	r0, r0
	...

0800ace0 <tof_gestures_detectSWIPE_1>:

int tof_gestures_detectSWIPE_1(int32_t range_mm, Gesture_SWIPE_1_Data_t *data){
 800ace0:	b5b0      	push	{r4, r5, r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    int time = GET_TIME_STAMP();
 800acea:	f7fb fae9 	bl	80062c0 <HAL_GetTick>
 800acee:	4603      	mov	r3, r0
 800acf0:	60fb      	str	r3, [r7, #12]

    /* Default state */
    if (data->gestureCode == GESTURES_NULL){
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d148      	bne.n	800ad8c <tof_gestures_detectSWIPE_1+0xac>
    	// Calculate background distance (averaging)
    	data->meanBackground = (data->rangeList.count==0) ? 0 : RB_mean(&(data->rangeList));
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d006      	beq.n	800ad10 <tof_gestures_detectSWIPE_1+0x30>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fe14 	bl	800a934 <RB_mean>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	e000      	b.n	800ad12 <tof_gestures_detectSWIPE_1+0x32>
 800ad10:	2200      	movs	r2, #0
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	659a      	str	r2, [r3, #88]	; 0x58
    	// Check current distance vs background distance
    	if (range_mm < (int)((1-SWIPE_1_BACKGROUND_VARIATION) * data->meanBackground)){
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7f5 fbfa 	bl	8000514 <__aeabi_i2d>
 800ad20:	a37f      	add	r3, pc, #508	; (adr r3, 800af20 <tof_gestures_detectSWIPE_1+0x240>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 fc5f 	bl	80005e8 <__aeabi_dmul>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	4618      	mov	r0, r3
 800ad30:	4621      	mov	r1, r4
 800ad32:	f7f5 fef3 	bl	8000b1c <__aeabi_d2iz>
 800ad36:	4602      	mov	r2, r0
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	da1f      	bge.n	800ad7e <tof_gestures_detectSWIPE_1+0x9e>
    		// big variation detected => hand entering in FoV
    		if (data->cpt == 0) {
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d115      	bne.n	800ad72 <tof_gestures_detectSWIPE_1+0x92>
    			// Potential spikes (duster ?) skipped
    			data->cpt = SWIPE_1_SENSITIVITY;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	665a      	str	r2, [r3, #100]	; 0x64
				data->gestureCode = GESTURES_HAND_ENTERING;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2205      	movs	r2, #5
 800ad50:	601a      	str	r2, [r3, #0]
				RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	3304      	adds	r3, #4
 800ad56:	2110      	movs	r1, #16
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fd46 	bl	800a7ea <RB_init>
				RB_push(&(data->rangeList), range_mm);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	3304      	adds	r3, #4
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff fd68 	bl	800a83a <RB_push>
				data->timestamp = time;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	661a      	str	r2, [r3, #96]	; 0x60
 800ad70:	e0d0      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
				TOF_GESTURES_DEBUG(SWIPE_1,"(background=%d, current=%d) => HAND_ENTERING", data->meanBackground, range_mm);
    		} else {
    			data->cpt--;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad76:	1e5a      	subs	r2, r3, #1
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	665a      	str	r2, [r3, #100]	; 0x64
 800ad7c:	e0ca      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    			TOF_GESTURES_DEBUG(SWIPE_1,"(background=%d, current=%d) => SKIP", data->meanBackground, range_mm);
    		}
    	}else{
    		// no variation => keep averaging background
    		RB_push(&(data->rangeList), range_mm);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	3304      	adds	r3, #4
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fd58 	bl	800a83a <RB_push>
 800ad8a:	e0c3      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    	}

    /* Hand entering */
    } else if (data->gestureCode == GESTURES_HAND_ENTERING){
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b05      	cmp	r3, #5
 800ad92:	d16b      	bne.n	800ae6c <tof_gestures_detectSWIPE_1+0x18c>
    	// Calculate hand distance (averaging)
    	data->meanHand = (data->rangeList.count==0) ? 0 : RB_mean(&(data->rangeList));
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <tof_gestures_detectSWIPE_1+0xca>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff fdc7 	bl	800a934 <RB_mean>
 800ada6:	4602      	mov	r2, r0
 800ada8:	e000      	b.n	800adac <tof_gestures_detectSWIPE_1+0xcc>
 800adaa:	2200      	movs	r2, #0
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	65da      	str	r2, [r3, #92]	; 0x5c
    	// Check current distance vs hand mean distance
    	if ((range_mm < (data->meanHand * (1-SWIPE_1_HAND_VARIATION))) || (((data->meanHand * (1+SWIPE_1_HAND_VARIATION)) < range_mm))){
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7f5 fbaf 	bl	8000514 <__aeabi_i2d>
 800adb6:	4604      	mov	r4, r0
 800adb8:	460d      	mov	r5, r1
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f5 fba8 	bl	8000514 <__aeabi_i2d>
 800adc4:	a358      	add	r3, pc, #352	; (adr r3, 800af28 <tof_gestures_detectSWIPE_1+0x248>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fc0d 	bl	80005e8 <__aeabi_dmul>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4620      	mov	r0, r4
 800add4:	4629      	mov	r1, r5
 800add6:	f7f5 fe79 	bl	8000acc <__aeabi_dcmplt>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d119      	bne.n	800ae14 <tof_gestures_detectSWIPE_1+0x134>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f5 fb95 	bl	8000514 <__aeabi_i2d>
 800adea:	a351      	add	r3, pc, #324	; (adr r3, 800af30 <tof_gestures_detectSWIPE_1+0x250>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	f7f5 fbfa 	bl	80005e8 <__aeabi_dmul>
 800adf4:	4603      	mov	r3, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	4625      	mov	r5, r4
 800adfa:	461c      	mov	r4, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7f5 fb89 	bl	8000514 <__aeabi_i2d>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4620      	mov	r0, r4
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 fe5f 	bl	8000acc <__aeabi_dcmplt>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d012      	beq.n	800ae3a <tof_gestures_detectSWIPE_1+0x15a>
    		// Big variation => Hand leaving
			data->gestureCode = GESTURES_HAND_LEAVING;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2206      	movs	r2, #6
 800ae18:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	2110      	movs	r1, #16
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fce2 	bl	800a7ea <RB_init>
			RB_push(&(data->rangeList), range_mm);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff fd04 	bl	800a83a <RB_push>
			data->timestamp = time;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	661a      	str	r2, [r3, #96]	; 0x60
			TOF_GESTURES_DEBUG(SWIPE_1,"(meanHand=%d, current=%d) => HAND_LEAVING", data->meanHand, range_mm);
 800ae38:	e06c      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    	} else if ((time - data->timestamp) > SWIPE_1_MAX_SWIPE_DURATION) {
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae46:	dd0a      	ble.n	800ae5e <tof_gestures_detectSWIPE_1+0x17e>
    		// Too slow => discard (swipe is too slow, this may be a background change for a long time)
			data->gestureCode = GESTURES_DISCARDED_TOO_SLOW;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	f06f 0202 	mvn.w	r2, #2
 800ae4e:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	3304      	adds	r3, #4
 800ae54:	2110      	movs	r1, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fcc7 	bl	800a7ea <RB_init>
 800ae5c:	e05a      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
			TOF_GESTURES_DEBUG(SWIPE_1,"DISCARDED_TOO_SLOW");
    	} else {
    		// No big variation => remains in this state
			RB_push(&(data->rangeList), range_mm);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	3304      	adds	r3, #4
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7ff fce8 	bl	800a83a <RB_push>
 800ae6a:	e053      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
			TOF_GESTURES_DEBUG(SWIPE_1, "Wait (meanHand=%d, current=%d)", data->meanHand, range_mm);
    	}

    /* Hand leaving */
    } else if (data->gestureCode == GESTURES_HAND_LEAVING){
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b06      	cmp	r3, #6
 800ae72:	d14c      	bne.n	800af0e <tof_gestures_detectSWIPE_1+0x22e>
    	// Check current distance vs background distance (previously calculated)
    	if (((data->meanBackground * (1-SWIPE_1_BACKGROUND_VARIATION)) < range_mm) && (range_mm < ((data->meanBackground * (1+SWIPE_1_BACKGROUND_VARIATION))))){
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7f5 fb4b 	bl	8000514 <__aeabi_i2d>
 800ae7e:	a328      	add	r3, pc, #160	; (adr r3, 800af20 <tof_gestures_detectSWIPE_1+0x240>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fbb0 	bl	80005e8 <__aeabi_dmul>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	4625      	mov	r5, r4
 800ae8e:	461c      	mov	r4, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7f5 fb3f 	bl	8000514 <__aeabi_i2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 fe15 	bl	8000acc <__aeabi_dcmplt>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d021      	beq.n	800aeec <tof_gestures_detectSWIPE_1+0x20c>
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7f5 fb33 	bl	8000514 <__aeabi_i2d>
 800aeae:	4604      	mov	r4, r0
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f5 fb2c 	bl	8000514 <__aeabi_i2d>
 800aebc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800aec0:	4b1d      	ldr	r3, [pc, #116]	; (800af38 <tof_gestures_detectSWIPE_1+0x258>)
 800aec2:	f7f5 fb91 	bl	80005e8 <__aeabi_dmul>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4620      	mov	r0, r4
 800aecc:	4629      	mov	r1, r5
 800aece:	f7f5 fdfd 	bl	8000acc <__aeabi_dcmplt>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d009      	beq.n	800aeec <tof_gestures_detectSWIPE_1+0x20c>
    		// Almost same => Swipe detected/finished
    		data->gestureCode = GESTURES_SINGLE_SWIPE;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2202      	movs	r2, #2
 800aedc:	601a      	str	r2, [r3, #0]
    		//data->cpt = 0;
    		RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	3304      	adds	r3, #4
 800aee2:	2110      	movs	r1, #16
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff fc80 	bl	800a7ea <RB_init>
    		//return_code = GESTURES_SINGLE_SWIPE;
    		TOF_GESTURES_DEBUG(SWIPE_1, "(background=%d, current==%d) => SINGLE_SWIPE\n", data->meanBackground, range_mm);
 800aeea:	e013      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    		//uart_printf("2 : Next state : %d, (background=%d), range=%d (SWIPE)\n", data->gestureCode, data->meanBackground, range_mm);
    	} else if ((time - data->timestamp) > SWIPE_1_BACKGROUND_TIMEOUT){
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b64      	cmp	r3, #100	; 0x64
 800aef6:	dd0d      	ble.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    		// To slow to converge back to background distance => discard (background may have change during the gesture)
    		data->gestureCode = GESTURES_DISCARDED;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f06f 0201 	mvn.w	r2, #1
 800aefe:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	3304      	adds	r3, #4
 800af04:	2110      	movs	r1, #16
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fc6f 	bl	800a7ea <RB_init>
 800af0c:	e002      	b.n	800af14 <tof_gestures_detectSWIPE_1+0x234>
    		TOF_GESTURES_DEBUG(SWIPE_1,"Wait (background=%d, current=%d)", data->meanBackground, range_mm);
    	}

    /* Swipe detected or discarded */
    } else {
    	data->gestureCode = GESTURES_NULL;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
    }

    return data->gestureCode;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bdb0      	pop	{r4, r5, r7, pc}
 800af20:	9999999a 	.word	0x9999999a
 800af24:	3fe99999 	.word	0x3fe99999
 800af28:	33333333 	.word	0x33333333
 800af2c:	3fe33333 	.word	0x3fe33333
 800af30:	66666666 	.word	0x66666666
 800af34:	3ff66666 	.word	0x3ff66666
 800af38:	3ff33333 	.word	0x3ff33333

0800af3c <tof_gestures_initTAP_1>:
 */

#include "tof_gestures.h"
#include "tof_gestures_TAP_1.h"

int tof_gestures_initTAP_1(int MinBackGroundDistance, Gesture_TAP_1_Data_t *data){
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
    int status=0;
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
    status |= (int)(RB_init(&(data->rangeList),TAP_1_BUFFER_SIZE));
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	3308      	adds	r3, #8
 800af4e:	2110      	movs	r1, #16
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff fc4a 	bl	800a7ea <RB_init>
 800af56:	4602      	mov	r2, r0
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60fb      	str	r3, [r7, #12]
    data->MinBackGroundDistance = MinBackGroundDistance;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]
    data->timestampLastDetectedTap = 0;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2200      	movs	r2, #0
 800af68:	65da      	str	r2, [r3, #92]	; 0x5c
    data->nbOfDataToDecide = TAP_1_NB_OF_DATA_TO_DECIDE;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2204      	movs	r2, #4
 800af6e:	661a      	str	r2, [r3, #96]	; 0x60
    data->meanBackground = 0;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2200      	movs	r2, #0
 800af74:	665a      	str	r2, [r3, #100]	; 0x64
    data->gestureCode = GESTURES_NULL;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2200      	movs	r2, #0
 800af7a:	605a      	str	r2, [r3, #4]
    data->timestamp = 0;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	669a      	str	r2, [r3, #104]	; 0x68
    return status;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	0000      	movs	r0, r0
	...

0800af90 <tof_gestures_detectTAP_1>:

int tof_gestures_detectTAP_1(int32_t range_mm, Gesture_TAP_1_Data_t *data){
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b089      	sub	sp, #36	; 0x24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
    int time = GET_TIME_STAMP();
 800af9a:	f7fb f991 	bl	80062c0 <HAL_GetTick>
 800af9e:	4603      	mov	r3, r0
 800afa0:	61fb      	str	r3, [r7, #28]
    int madRange = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
    int dir;
    int delta_time = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
    int background_threshold = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	613b      	str	r3, [r7, #16]

    // Default state
	if (data->gestureCode == GESTURES_NULL){
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d13d      	bne.n	800b032 <tof_gestures_detectTAP_1+0xa2>
		// Calculate background distance (averaging)
		data->meanBackground = (data->rangeList.count==0) ? 0 : RB_mean(&(data->rangeList));
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d006      	beq.n	800afcc <tof_gestures_detectTAP_1+0x3c>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	3308      	adds	r3, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff fcb6 	bl	800a934 <RB_mean>
 800afc8:	4602      	mov	r2, r0
 800afca:	e000      	b.n	800afce <tof_gestures_detectTAP_1+0x3e>
 800afcc:	2200      	movs	r2, #0
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	665a      	str	r2, [r3, #100]	; 0x64
		background_threshold = (int)((1-TAP_1_BACKGROUND_VARIATION) * data->meanBackground);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f5 fa9c 	bl	8000514 <__aeabi_i2d>
 800afdc:	a346      	add	r3, pc, #280	; (adr r3, 800b0f8 <tof_gestures_detectTAP_1+0x168>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 fb01 	bl	80005e8 <__aeabi_dmul>
 800afe6:	4603      	mov	r3, r0
 800afe8:	460c      	mov	r4, r1
 800afea:	4618      	mov	r0, r3
 800afec:	4621      	mov	r1, r4
 800afee:	f7f5 fd95 	bl	8000b1c <__aeabi_d2iz>
 800aff2:	4603      	mov	r3, r0
 800aff4:	613b      	str	r3, [r7, #16]
		// Check current distance vs background distance
		if (range_mm < background_threshold){
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	429a      	cmp	r2, r3
 800affc:	da12      	bge.n	800b024 <tof_gestures_detectTAP_1+0x94>
			// big variation detected => hand entering in FoV
			data->gestureCode = GESTURES_HAND_ENTERING;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2205      	movs	r2, #5
 800b002:	605a      	str	r2, [r3, #4]
			RB_init(&(data->rangeList),TAP_1_BUFFER_SIZE);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	2110      	movs	r1, #16
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fbed 	bl	800a7ea <RB_init>
			RB_push(&(data->rangeList), range_mm);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	3308      	adds	r3, #8
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fc0f 	bl	800a83a <RB_push>
			data->timestamp = time;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	69fa      	ldr	r2, [r7, #28]
 800b020:	669a      	str	r2, [r3, #104]	; 0x68
 800b022:	e063      	b.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
			TOF_GESTURES_DEBUG(TAP_1,"(background_thd=%d, current=%d, hand_entering=1)", background_threshold, range_mm);
		}else{
    		// no variation => keep averaging background
			RB_push(&(data->rangeList), range_mm);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fc05 	bl	800a83a <RB_push>
 800b030:	e05c      	b.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
    		TOF_GESTURES_DEBUG(TAP_1,"(background_thd=%d, current=%d, hand_entering=0)", background_threshold, range_mm);
    	}


	// Hand entering
	} else if (data->gestureCode == GESTURES_HAND_ENTERING){
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	2b05      	cmp	r3, #5
 800b038:	d155      	bne.n	800b0e6 <tof_gestures_detectTAP_1+0x156>
		// Push the range value in the buffer
		RB_push(&(data->rangeList), range_mm);
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	3308      	adds	r3, #8
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fbfa 	bl	800a83a <RB_push>

		// Try to detect a Tap gesture as soon as possible (4 data are enough for normal/fast gestures speed)
		if(data->rangeList.count == data->nbOfDataToDecide){
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b04e:	429a      	cmp	r2, r3
 800b050:	d14c      	bne.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
			// Calculate MAD
			madRange = RB_mad(&(data->rangeList));
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	3308      	adds	r3, #8
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff fc7c 	bl	800a954 <RB_mad>
 800b05c:	61b8      	str	r0, [r7, #24]
			dir = RB_dir(&(data->rangeList));
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	3308      	adds	r3, #8
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fcac 	bl	800a9c0 <RB_dir>
 800b068:	60f8      	str	r0, [r7, #12]
			delta_time = time - data->timestampLastDetectedTap;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	617b      	str	r3, [r7, #20]
			// Try to detect a TAP
			//  MAD is higher than a threshold, ranging elements stored in the buffer are decreasing and last TAP has been
			//  detected more than 250 ms ago (too avoid 2 TAPS being reported in case of a slow tap)
			if((madRange > 12) && (dir<0) && (delta_time>250)){
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	2b0c      	cmp	r3, #12
 800b078:	dd28      	ble.n	800b0cc <tof_gestures_detectTAP_1+0x13c>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	da25      	bge.n	800b0cc <tof_gestures_detectTAP_1+0x13c>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2bfa      	cmp	r3, #250	; 0xfa
 800b084:	dd22      	ble.n	800b0cc <tof_gestures_detectTAP_1+0x13c>
				// Big negative range variation
				if ((data->meanBackground > data->MinBackGroundDistance)){
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	dd0c      	ble.n	800b0ac <tof_gestures_detectTAP_1+0x11c>
					// Background estimated just before hand entering is above the min distance of possible background => Skip TAP as this is a false one
					// Relax constraints to detect the next TAP which can come very soon
					RB_init(&(data->rangeList),16);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	2110      	movs	r1, #16
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff fba6 	bl	800a7ea <RB_init>
					data->meanBackground = range_mm;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	665a      	str	r2, [r3, #100]	; 0x64
					data->nbOfDataToDecide = 3;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	661a      	str	r2, [r3, #96]	; 0x60
				if ((data->meanBackground > data->MinBackGroundDistance)){
 800b0aa:	e01f      	b.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
				}else{
					// Estimated background is now in the gesture area so this was the hand => TAP
					data->timestampLastDetectedTap = time;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	65da      	str	r2, [r3, #92]	; 0x5c
					//RB_trace(&(data->rangeList));
					RB_init(&(data->rangeList),16);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	2110      	movs	r1, #16
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fb96 	bl	800a7ea <RB_init>
					data->nbOfDataToDecide = 4;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2204      	movs	r2, #4
 800b0c2:	661a      	str	r2, [r3, #96]	; 0x60
					data->gestureCode = GESTURES_SINGLE_TAP;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	605a      	str	r2, [r3, #4]
				if ((data->meanBackground > data->MinBackGroundDistance)){
 800b0ca:	e00f      	b.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
				//TOF_GESTURES_DEBUG(TAP_1,"(madRange=%d, delta_time=%d, dir=%d) => TAP", madRange, delta_time, dir);
				}
			}else{
				// No TAP detected
				RB_init(&(data->rangeList),16);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	2110      	movs	r1, #16
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff fb89 	bl	800a7ea <RB_init>
				data->nbOfDataToDecide = 4;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2204      	movs	r2, #4
 800b0dc:	661a      	str	r2, [r3, #96]	; 0x60
				data->gestureCode = GESTURES_NULL;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	605a      	str	r2, [r3, #4]
 800b0e4:	e002      	b.n	800b0ec <tof_gestures_detectTAP_1+0x15c>
			TOF_GESTURES_DEBUG(TAP_1,"(hand_entering=1, current=%d) wait", range_mm);
		}
	// Tap detected
	} else {
		// Reset gesture code state machine
		data->gestureCode = GESTURES_NULL;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	605a      	str	r2, [r3, #4]
	}

	 return data->gestureCode;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3724      	adds	r7, #36	; 0x24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd90      	pop	{r4, r7, pc}
 800b0f8:	66666666 	.word	0x66666666
 800b0fc:	3fee6666 	.word	0x3fee6666

0800b100 <tof_initMotion>:
 * $Revision: 2612 $
 */

#include "tof_motion.h"

int tof_initMotion(int threshold, MotionData_t *data){
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
    data->threshold = threshold;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	601a      	str	r2, [r3, #0]
    data->firstTime = true;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2201      	movs	r2, #1
 800b114:	741a      	strb	r2, [r3, #16]
    data->duration = 0;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	605a      	str	r2, [r3, #4]
    data->previousRange = 0;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2200      	movs	r2, #0
 800b120:	609a      	str	r2, [r3, #8]
    data->timestamp = 0;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2200      	movs	r2, #0
 800b126:	60da      	str	r2, [r3, #12]
    return 0;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	bc80      	pop	{r7}
 800b132:	4770      	bx	lr

0800b134 <tof_getMotion>:
    
    
int tof_getMotion(int32_t range_mm, MotionData_t *data){
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
    int return_code;
    int timestamp = GET_TIME_STAMP();
 800b13e:	f7fb f8bf 	bl	80062c0 <HAL_GetTick>
 800b142:	4603      	mov	r3, r0
 800b144:	613b      	str	r3, [r7, #16]
    bool belowThreshold, isContinuousMotion;
    
    if(data->firstTime)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	7c1b      	ldrb	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01e      	beq.n	800b18c <tof_getMotion+0x58>
    {
        data->firstTime = false;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2200      	movs	r2, #0
 800b152:	741a      	strb	r2, [r3, #16]
        data->timestamp = timestamp;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	60da      	str	r2, [r3, #12]
        data->previousRange = range_mm;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	609a      	str	r2, [r3, #8]
        belowThreshold = (range_mm < data->threshold);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	bfb4      	ite	lt
 800b16a:	2301      	movlt	r3, #1
 800b16c:	2300      	movge	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]
        isContinuousMotion = true;
 800b170:	2301      	movs	r3, #1
 800b172:	73bb      	strb	r3, [r7, #14]
        return_code = ( belowThreshold ) ? GESTURES_MOTION_DOWN_STATE : GESTURES_MOTION_UP_STATE;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <tof_getMotion+0x4a>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <tof_getMotion+0x4c>
 800b17e:	2302      	movs	r3, #2
 800b180:	617b      	str	r3, [r7, #20]
        data->duration = 1;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2201      	movs	r2, #1
 800b186:	605a      	str	r2, [r3, #4]
        return return_code;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	e03a      	b.n	800b202 <tof_getMotion+0xce>
    }
    
    data->duration = 0;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2200      	movs	r2, #0
 800b190:	605a      	str	r2, [r3, #4]
	return_code = GESTURES_MOTION_NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
	belowThreshold  = (range_mm < data->threshold);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	bfb4      	ite	lt
 800b1a0:	2301      	movlt	r3, #1
 800b1a2:	2300      	movge	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
	isContinuousMotion  = ( belowThreshold ==  (data->previousRange < data->threshold));
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	6891      	ldr	r1, [r2, #8]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	6812      	ldr	r2, [r2, #0]
 800b1b0:	4291      	cmp	r1, r2
 800b1b2:	bfb4      	ite	lt
 800b1b4:	2201      	movlt	r2, #1
 800b1b6:	2200      	movge	r2, #0
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bf0c      	ite	eq
 800b1be:	2301      	moveq	r3, #1
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	73bb      	strb	r3, [r7, #14]
	data->previousRange = range_mm;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	609a      	str	r2, [r3, #8]
    
    TOF_GESTURES_DEBUG(MOTION,"range=%d, belowThreshold=%d, isContinuousMotion=%d", range_mm, belowThreshold,isContinuousMotion);

	// update
	data->duration = timestamp - data->timestamp;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	605a      	str	r2, [r3, #4]
	if(isContinuousMotion)
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <tof_getMotion+0xb8>
	{
		return_code = ( belowThreshold ) ? GESTURES_MOTION_DOWN_STATE : GESTURES_MOTION_UP_STATE;
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <tof_getMotion+0xb2>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <tof_getMotion+0xb4>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	617b      	str	r3, [r7, #20]
 800b1ea:	e009      	b.n	800b200 <tof_getMotion+0xcc>
	}
	else
	{
		return_code = ( belowThreshold ) ? GESTURES_MOTION_DROP_DOWN : GESTURES_MOTION_RAISE_UP;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <tof_getMotion+0xc2>
 800b1f2:	2304      	movs	r3, #4
 800b1f4:	e000      	b.n	800b1f8 <tof_getMotion+0xc4>
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	617b      	str	r3, [r7, #20]
		data->timestamp = timestamp;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	60da      	str	r2, [r3, #12]
	}
	return return_code;
 800b200:	697b      	ldr	r3, [r7, #20]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <BSP_GetPushButton>:
volatile int IntrCounts[3];

#define BSP_BP_PORT GPIOC
#define BSP_BP_PIN  GPIO_PIN_13

int BSP_GetPushButton(void){
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 800b212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b216:	4805      	ldr	r0, [pc, #20]	; (800b22c <BSP_GetPushButton+0x20>)
 800b218:	f7fb fd8c 	bl	8006d34 <HAL_GPIO_ReadPin>
 800b21c:	4603      	mov	r3, r0
 800b21e:	71fb      	strb	r3, [r7, #7]
    return state;
 800b220:	79fb      	ldrb	r3, [r7, #7]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	48000800 	.word	0x48000800

0800b230 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed  to let user know order
 * the  request to switch mode is taken into account
 *
 * @return True if button remain pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
    uint32_t TimeStarted;
    TimeStarted = HAL_GetTick();
 800b236:	f7fb f843 	bl	80062c0 <HAL_GetTick>
 800b23a:	6078      	str	r0, [r7, #4]
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800b23c:	e00a      	b.n	800b254 <PusbButton_WaitUnPress+0x24>
        if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 800b23e:	f7fb f83f 	bl	80062c0 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b24c:	d902      	bls.n	800b254 <PusbButton_WaitUnPress+0x24>
            XNUCLEO53L0A1_SetDisplayString (" rb ");
 800b24e:	480b      	ldr	r0, [pc, #44]	; (800b27c <PusbButton_WaitUnPress+0x4c>)
 800b250:	f7f6 f896 	bl	8001380 <XNUCLEO53L0A1_SetDisplayString>
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800b254:	f7ff ffda 	bl	800b20c <BSP_GetPushButton>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0ef      	beq.n	800b23e <PusbButton_WaitUnPress+0xe>
        }
    }
    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 800b25e:	f7fb f82f 	bl	80062c0 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b26c:	bf8c      	ite	hi
 800b26e:	2301      	movhi	r3, #1
 800b270:	2300      	movls	r3, #0
 800b272:	b2db      	uxtb	r3, r3

}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	0800cd70 	.word	0x0800cd70

0800b280 <VL53L0A1_EXTI_Callback>:

void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
    IntrCount++;
 800b28a:	4b0e      	ldr	r3, [pc, #56]	; (800b2c4 <VL53L0A1_EXTI_Callback+0x44>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	4a0c      	ldr	r2, [pc, #48]	; (800b2c4 <VL53L0A1_EXTI_Callback+0x44>)
 800b292:	6013      	str	r3, [r2, #0]
    LastIntrPin=GPIO_Pin;
 800b294:	4a0c      	ldr	r2, [pc, #48]	; (800b2c8 <VL53L0A1_EXTI_Callback+0x48>)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6013      	str	r3, [r2, #0]
    LastIntrId=DevNo;
 800b29a:	4a0c      	ldr	r2, [pc, #48]	; (800b2cc <VL53L0A1_EXTI_Callback+0x4c>)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6013      	str	r3, [r2, #0]

    if( DevNo< ARRAY_SIZE(IntrCounts)  ){
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d808      	bhi.n	800b2b8 <VL53L0A1_EXTI_Callback+0x38>
        IntrCounts[DevNo]++;
 800b2a6:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <VL53L0A1_EXTI_Callback+0x50>)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	4907      	ldr	r1, [pc, #28]	; (800b2d0 <VL53L0A1_EXTI_Callback+0x50>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	20000af4 	.word	0x20000af4
 800b2c8:	20000aec 	.word	0x20000aec
 800b2cc:	20000af0 	.word	0x20000af0
 800b2d0:	20000adc 	.word	0x20000adc

0800b2d4 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 800b2dc:	f107 0308 	add.w	r3, r7, #8
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	4905      	ldr	r1, [pc, #20]	; (800b2f8 <HandleError+0x24>)
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 ff79 	bl	800c1dc <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 800b2ea:	f107 0308 	add.w	r3, r7, #8
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f6 f846 	bl	8001380 <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 800b2f4:	e7fe      	b.n	800b2f4 <HandleError+0x20>
 800b2f6:	bf00      	nop
 800b2f8:	0800cd78 	.word	0x0800cd78

0800b2fc <MX_TIM5_Init>:
 */
TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800b302:	4b17      	ldr	r3, [pc, #92]	; (800b360 <MX_TIM5_Init+0x64>)
 800b304:	4a17      	ldr	r2, [pc, #92]	; (800b364 <MX_TIM5_Init+0x68>)
 800b306:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800b308:	4b15      	ldr	r3, [pc, #84]	; (800b360 <MX_TIM5_Init+0x64>)
 800b30a:	2253      	movs	r2, #83	; 0x53
 800b30c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b30e:	4b14      	ldr	r3, [pc, #80]	; (800b360 <MX_TIM5_Init+0x64>)
 800b310:	2200      	movs	r2, #0
 800b312:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <MX_TIM5_Init+0x64>)
 800b316:	f04f 32ff 	mov.w	r2, #4294967295
 800b31a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <MX_TIM5_Init+0x64>)
 800b31e:	2200      	movs	r2, #0
 800b320:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 800b322:	480f      	ldr	r0, [pc, #60]	; (800b360 <MX_TIM5_Init+0x64>)
 800b324:	f7fd fdd8 	bl	8008ed8 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b328:	2300      	movs	r3, #0
 800b32a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 800b330:	f107 031c 	add.w	r3, r7, #28
 800b334:	4619      	mov	r1, r3
 800b336:	480a      	ldr	r0, [pc, #40]	; (800b360 <MX_TIM5_Init+0x64>)
 800b338:	f7fe fa00 	bl	800973c <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b33c:	2300      	movs	r3, #0
 800b33e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b344:	2300      	movs	r3, #0
 800b346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b348:	2300      	movs	r3, #0
 800b34a:	613b      	str	r3, [r7, #16]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 800b34c:	463b      	mov	r3, r7
 800b34e:	2200      	movs	r2, #0
 800b350:	4619      	mov	r1, r3
 800b352:	4803      	ldr	r0, [pc, #12]	; (800b360 <MX_TIM5_Init+0x64>)
 800b354:	f7fd fdec 	bl	8008f30 <HAL_TIM_OC_ConfigChannel>

}
 800b358:	bf00      	nop
 800b35a:	3728      	adds	r7, #40	; 0x28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20000aa0 	.word	0x20000aa0
 800b364:	40000c00 	.word	0x40000c00

0800b368 <TimeStamp_Init>:

void TimeStamp_Init(){
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 800b36c:	f7ff ffc6 	bl	800b2fc <MX_TIM5_Init>
}
 800b370:	bf00      	nop
 800b372:	bd80      	pop	{r7, pc}

0800b374 <TimeStamp_Reset>:

void TimeStamp_Reset(){
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 800b378:	4804      	ldr	r0, [pc, #16]	; (800b38c <TimeStamp_Reset+0x18>)
 800b37a:	f7fd fd93 	bl	8008ea4 <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 800b37e:	4b03      	ldr	r3, [pc, #12]	; (800b38c <TimeStamp_Reset+0x18>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2200      	movs	r2, #0
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b386:	bf00      	nop
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000aa0 	.word	0x20000aa0

0800b390 <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 800b394:	4b03      	ldr	r3, [pc, #12]	; (800b3a4 <TimeStamp_Get+0x14>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000aa0 	.word	0x20000aa0

0800b3a8 <DetectSensors>:
 * Reset all sensor then goes true presence detection
 *
 * All present devices are data initiated and assigned with their final address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
    int i;
    uint16_t Id;
    int status;
    int FinalAddress;

    char PresentMsg[5]="    ";
 800b3b0:	4a73      	ldr	r2, [pc, #460]	; (800b580 <DetectSensors+0x1d8>)
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3ba:	6018      	str	r0, [r3, #0]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	7019      	strb	r1, [r3, #0]
    /* Reset all */
    for (i = 0; i < 3; i++)
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	61fb      	str	r3, [r7, #28]
 800b3c4:	e007      	b.n	800b3d6 <DetectSensors+0x2e>
        status = XNUCLEO53L0A1_ResetId(i, 0);
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	69f8      	ldr	r0, [r7, #28]
 800b3ca:	f7f5 fed3 	bl	8001174 <XNUCLEO53L0A1_ResetId>
 800b3ce:	61b8      	str	r0, [r7, #24]
    for (i = 0; i < 3; i++)
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	61fb      	str	r3, [r7, #28]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	ddf4      	ble.n	800b3c6 <DetectSensors+0x1e>

    /* detect all sensors (even on-board)*/
    for (i = 0; i < 3; i++) {
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e08f      	b.n	800b502 <DetectSensors+0x15a>
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b3e8:	fb02 f303 	mul.w	r3, r2, r3
 800b3ec:	4a65      	ldr	r2, [pc, #404]	; (800b584 <DetectSensors+0x1dc>)
 800b3ee:	4413      	add	r3, r2
 800b3f0:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2252      	movs	r2, #82	; 0x52
 800b3f6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b408:	2101      	movs	r1, #1
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f5 feb2 	bl	8001174 <XNUCLEO53L0A1_ResetId>
 800b410:	61b8      	str	r0, [r7, #24]
        HAL_Delay(2);
 800b412:	2002      	movs	r0, #2
 800b414:	f7fa ff5e 	bl	80062d4 <HAL_Delay>
        FinalAddress=0x52+(i+1)*2;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	332a      	adds	r3, #42	; 0x2a
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	613b      	str	r3, [r7, #16]

        do {
        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800b420:	f107 030e 	add.w	r3, r7, #14
 800b424:	461a      	mov	r2, r3
 800b426:	21c0      	movs	r1, #192	; 0xc0
 800b428:	6978      	ldr	r0, [r7, #20]
 800b42a:	f7f6 fab5 	bl	8001998 <VL53L0X_RdWord>
 800b42e:	4603      	mov	r3, r0
 800b430:	61bb      	str	r3, [r7, #24]
            if (status) {
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <DetectSensors+0x9a>
                debug_printf("#%d Read id fail\n", i);
 800b438:	69f9      	ldr	r1, [r7, #28]
 800b43a:	4853      	ldr	r0, [pc, #332]	; (800b588 <DetectSensors+0x1e0>)
 800b43c:	f7f6 f850 	bl	80014e0 <uart_printf>
                break;
 800b440:	e055      	b.n	800b4ee <DetectSensors+0x146>
            }
            if (Id == 0xEEAA) {
 800b442:	89fb      	ldrh	r3, [r7, #14]
 800b444:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800b448:	4293      	cmp	r3, r2
 800b44a:	d148      	bne.n	800b4de <DetectSensors+0x136>
            	/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	6978      	ldr	r0, [r7, #20]
 800b454:	f7f6 fb36 	bl	8001ac4 <VL53L0X_SetDeviceAddress>
 800b458:	4603      	mov	r3, r0
 800b45a:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <DetectSensors+0xc4>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 800b462:	69f9      	ldr	r1, [r7, #28]
 800b464:	4849      	ldr	r0, [pc, #292]	; (800b58c <DetectSensors+0x1e4>)
 800b466:	f7f6 f83b 	bl	80014e0 <uart_printf>
                    break;
 800b46a:	e040      	b.n	800b4ee <DetectSensors+0x146>
                }
                pDev->I2cDevAddr = FinalAddress;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800b476:	f107 030e 	add.w	r3, r7, #14
 800b47a:	461a      	mov	r2, r3
 800b47c:	21c0      	movs	r1, #192	; 0xc0
 800b47e:	6978      	ldr	r0, [r7, #20]
 800b480:	f7f6 fa8a 	bl	8001998 <VL53L0X_RdWord>
 800b484:	4603      	mov	r3, r0
 800b486:	61bb      	str	r3, [r7, #24]
                status = VL53L0X_DataInit(pDev);
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	f7f6 fb33 	bl	8001af4 <VL53L0X_DataInit>
 800b48e:	4603      	mov	r3, r0
 800b490:	61bb      	str	r3, [r7, #24]
                if( status == 0 ){
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11d      	bne.n	800b4d4 <DetectSensors+0x12c>
                    pDev->Present = 1;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                debug_printf("VL53L0X %d Present and initiated to final 0x%x\n", i, pDev->I2cDevAddr);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	69f9      	ldr	r1, [r7, #28]
 800b4aa:	4839      	ldr	r0, [pc, #228]	; (800b590 <DetectSensors+0x1e8>)
 800b4ac:	f7f6 f818 	bl	80014e0 <uart_printf>
                nDevPresent++;
 800b4b0:	4b38      	ldr	r3, [pc, #224]	; (800b594 <DetectSensors+0x1ec>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	4a37      	ldr	r2, [pc, #220]	; (800b594 <DetectSensors+0x1ec>)
 800b4b8:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	409a      	lsls	r2, r3
 800b4c0:	4b35      	ldr	r3, [pc, #212]	; (800b598 <DetectSensors+0x1f0>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	4a34      	ldr	r2, [pc, #208]	; (800b598 <DetectSensors+0x1f0>)
 800b4c8:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800b4d2:	e00c      	b.n	800b4ee <DetectSensors+0x146>
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 800b4d4:	69f9      	ldr	r1, [r7, #28]
 800b4d6:	4831      	ldr	r0, [pc, #196]	; (800b59c <DetectSensors+0x1f4>)
 800b4d8:	f7f6 f802 	bl	80014e0 <uart_printf>
                    break;
 800b4dc:	e007      	b.n	800b4ee <DetectSensors+0x146>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
 800b4de:	89fb      	ldrh	r3, [r7, #14]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	69f9      	ldr	r1, [r7, #28]
 800b4e4:	482e      	ldr	r0, [pc, #184]	; (800b5a0 <DetectSensors+0x1f8>)
 800b4e6:	f7f5 fffb 	bl	80014e0 <uart_printf>
                status = 1;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61bb      	str	r3, [r7, #24]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <DetectSensors+0x154>
            XNUCLEO53L0A1_ResetId(i, 0);
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	69f8      	ldr	r0, [r7, #28]
 800b4f8:	f7f5 fe3c 	bl	8001174 <XNUCLEO53L0A1_ResetId>
    for (i = 0; i < 3; i++) {
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	3301      	adds	r3, #1
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	2b02      	cmp	r3, #2
 800b506:	f77f af6c 	ble.w	800b3e2 <DetectSensors+0x3a>
        }
    }
    /* Display detected sensor(s) */
    if( SetDisplay ){
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d030      	beq.n	800b572 <DetectSensors+0x1ca>
        for(i=0; i<3; i++){
 800b510:	2300      	movs	r3, #0
 800b512:	61fb      	str	r3, [r7, #28]
 800b514:	e01f      	b.n	800b556 <DetectSensors+0x1ae>
            if( VL53L0XDevs[i].Present ){
 800b516:	4a1b      	ldr	r2, [pc, #108]	; (800b584 <DetectSensors+0x1dc>)
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b51e:	fb01 f303 	mul.w	r3, r1, r3
 800b522:	4413      	add	r3, r2
 800b524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d010      	beq.n	800b550 <DetectSensors+0x1a8>
                PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	3301      	adds	r3, #1
 800b532:	4914      	ldr	r1, [pc, #80]	; (800b584 <DetectSensors+0x1dc>)
 800b534:	69fa      	ldr	r2, [r7, #28]
 800b536:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b53a:	fb00 f202 	mul.w	r2, r0, r2
 800b53e:	440a      	add	r2, r1
 800b540:	f202 1261 	addw	r2, r2, #353	; 0x161
 800b544:	7812      	ldrb	r2, [r2, #0]
 800b546:	f107 0120 	add.w	r1, r7, #32
 800b54a:	440b      	add	r3, r1
 800b54c:	f803 2c18 	strb.w	r2, [r3, #-24]
        for(i=0; i<3; i++){
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	3301      	adds	r3, #1
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	dddc      	ble.n	800b516 <DetectSensors+0x16e>
            }
        }
        PresentMsg[0]=' ';
 800b55c:	2320      	movs	r3, #32
 800b55e:	723b      	strb	r3, [r7, #8]
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 800b560:	f107 0308 	add.w	r3, r7, #8
 800b564:	4618      	mov	r0, r3
 800b566:	f7f5 ff0b 	bl	8001380 <XNUCLEO53L0A1_SetDisplayString>
        HAL_Delay(1000);
 800b56a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b56e:	f7fa feb1 	bl	80062d4 <HAL_Delay>
    }

    return nDevPresent;
 800b572:	4b08      	ldr	r3, [pc, #32]	; (800b594 <DetectSensors+0x1ec>)
 800b574:	681b      	ldr	r3, [r3, #0]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	0800ce18 	.word	0x0800ce18
 800b584:	200002d0 	.word	0x200002d0
 800b588:	0800cd80 	.word	0x0800cd80
 800b58c:	0800cd94 	.word	0x0800cd94
 800b590:	0800cdd4 	.word	0x0800cdd4
 800b594:	2000093c 	.word	0x2000093c
 800b598:	20000a9c 	.word	0x20000a9c
 800b59c:	0800cdb8 	.word	0x0800cdb8
 800b5a0:	0800ce04 	.word	0x0800ce04

0800b5a4 <SetupSingleShot>:

/**
 *  Setup all sensors for single shot mode
 */
void SetupSingleShot(){
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
    uint8_t isApertureSpads;

    for( i=0; i<3; i++){
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	e07e      	b.n	800b6ae <SetupSingleShot+0x10a>
        if( VL53L0XDevs[i].Present){
 800b5b0:	4a43      	ldr	r2, [pc, #268]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d06f      	beq.n	800b6a8 <SetupSingleShot+0x104>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
 800b5d2:	4a3b      	ldr	r2, [pc, #236]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b5d4:	4413      	add	r3, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7f6 fbf0 	bl	8001dbc <VL53L0X_StaticInit>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	613b      	str	r3, [r7, #16]
            if( status ){
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <SetupSingleShot+0x4a>
                debug_printf("VL53L0X_StaticInit %d fail",i);
 800b5e6:	6979      	ldr	r1, [r7, #20]
 800b5e8:	4836      	ldr	r0, [pc, #216]	; (800b6c4 <SetupSingleShot+0x120>)
 800b5ea:	f7f5 ff79 	bl	80014e0 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	4a31      	ldr	r2, [pc, #196]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f107 020e 	add.w	r2, r7, #14
 800b600:	f107 010f 	add.w	r1, r7, #15
 800b604:	4618      	mov	r0, r3
 800b606:	f7f7 fa6d 	bl	8002ae4 <VL53L0X_PerformRefCalibration>
 800b60a:	4603      	mov	r3, r0
 800b60c:	613b      	str	r3, [r7, #16]
			if( status ){
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <SetupSingleShot+0x76>
			   debug_printf("VL53L0X_PerformRefCalibration");
 800b614:	482c      	ldr	r0, [pc, #176]	; (800b6c8 <SetupSingleShot+0x124>)
 800b616:	f7f5 ff63 	bl	80014e0 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b620:	fb02 f303 	mul.w	r3, r2, r3
 800b624:	4a26      	ldr	r2, [pc, #152]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b626:	4413      	add	r3, r2
 800b628:	1dfa      	adds	r2, r7, #7
 800b62a:	f107 0108 	add.w	r1, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f7 fee6 	bl	8003400 <VL53L0X_PerformRefSpadManagement>
 800b634:	4603      	mov	r3, r0
 800b636:	613b      	str	r3, [r7, #16]
			if( status ){
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <SetupSingleShot+0xa0>
			   debug_printf("VL53L0X_PerformRefSpadManagement");
 800b63e:	4823      	ldr	r0, [pc, #140]	; (800b6cc <SetupSingleShot+0x128>)
 800b640:	f7f5 ff4e 	bl	80014e0 <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b64a:	fb02 f303 	mul.w	r3, r2, r3
 800b64e:	4a1c      	ldr	r2, [pc, #112]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b650:	4413      	add	r3, r2
 800b652:	2100      	movs	r1, #0
 800b654:	4618      	mov	r0, r3
 800b656:	f7f6 fdc3 	bl	80021e0 <VL53L0X_SetDeviceMode>
 800b65a:	4603      	mov	r3, r0
 800b65c:	613b      	str	r3, [r7, #16]
            if( status ){
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SetupSingleShot+0xc6>
               debug_printf("VL53L0X_SetDeviceMode");
 800b664:	481a      	ldr	r0, [pc, #104]	; (800b6d0 <SetupSingleShot+0x12c>)
 800b666:	f7f5 ff3b 	bl	80014e0 <uart_printf>
            }

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  20*1000);
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b670:	fb02 f303 	mul.w	r3, r2, r3
 800b674:	4a12      	ldr	r2, [pc, #72]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b676:	4413      	add	r3, r2
 800b678:	f644 6120 	movw	r1, #20000	; 0x4e20
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7f6 fe28 	bl	80022d2 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b682:	4603      	mov	r3, r0
 800b684:	613b      	str	r3, [r7, #16]
            if( status ){
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <SetupSingleShot+0xee>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds");
 800b68c:	4811      	ldr	r0, [pc, #68]	; (800b6d4 <SetupSingleShot+0x130>)
 800b68e:	f7f5 ff27 	bl	80014e0 <uart_printf>
            }
            VL53L0XDevs[i].LeakyFirst=1;
 800b692:	4a0b      	ldr	r2, [pc, #44]	; (800b6c0 <SetupSingleShot+0x11c>)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	f77f af7d 	ble.w	800b5b0 <SetupSingleShot+0xc>
        }
    }
}
 800b6b6:	bf00      	nop
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	200002d0 	.word	0x200002d0
 800b6c4:	0800ce20 	.word	0x0800ce20
 800b6c8:	0800ce3c 	.word	0x0800ce3c
 800b6cc:	0800ce5c 	.word	0x0800ce5c
 800b6d0:	0800ce80 	.word	0x0800ce80
 800b6d4:	0800ce98 	.word	0x0800ce98

0800b6d8 <FormatDirSwipe>:

/* Translate a right or left swipe into a pattern on the display showing a kind of page position and direction */
void FormatDirSwipe(bool right_notleft, int position, char * DisplayStr){
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	73fb      	strb	r3, [r7, #15]
    char * _digitPtr;
    int i;

    _digitPtr = DisplayStr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	617b      	str	r3, [r7, #20]
    for(i=0;i<4;i++){
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	613b      	str	r3, [r7, #16]
 800b6ee:	e012      	b.n	800b716 <FormatDirSwipe+0x3e>
        *_digitPtr++ = (i==position) ? (right_notleft ? ']' : '[') : '-';
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d106      	bne.n	800b706 <FormatDirSwipe+0x2e>
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <FormatDirSwipe+0x2a>
 800b6fe:	225d      	movs	r2, #93	; 0x5d
 800b700:	e002      	b.n	800b708 <FormatDirSwipe+0x30>
 800b702:	225b      	movs	r2, #91	; 0x5b
 800b704:	e000      	b.n	800b708 <FormatDirSwipe+0x30>
 800b706:	222d      	movs	r2, #45	; 0x2d
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1c59      	adds	r1, r3, #1
 800b70c:	6179      	str	r1, [r7, #20]
 800b70e:	701a      	strb	r2, [r3, #0]
    for(i=0;i<4;i++){
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3301      	adds	r3, #1
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b03      	cmp	r3, #3
 800b71a:	dde9      	ble.n	800b6f0 <FormatDirSwipe+0x18>
    }
}
 800b71c:	bf00      	nop
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	bc80      	pop	{r7}
 800b724:	4770      	bx	lr
	...

0800b728 <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	7e1b      	ldrb	r3, [r3, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d128      	bne.n	800b78c <Sensor_SetNewRange+0x64>
    	pDev->RangeStatus = 0;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        if( pDev->LeakyFirst ){
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <Sensor_SetNewRange+0x3a>
            pDev->LeakyFirst = 0;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	891b      	ldrh	r3, [r3, #8]
 800b758:	461a      	mov	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    }
    else{
    	pDev->RangeStatus = pRange->RangeStatus;
    	pDev->LeakyFirst = 1;
    }
}
 800b760:	e01d      	b.n	800b79e <Sensor_SetNewRange+0x76>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800b768:	4a0f      	ldr	r2, [pc, #60]	; (800b7a8 <Sensor_SetNewRange+0x80>)
 800b76a:	6812      	ldr	r2, [r2, #0]
 800b76c:	fb02 f203 	mul.w	r2, r2, r3
 800b770:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <Sensor_SetNewRange+0x80>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	8909      	ldrh	r1, [r1, #8]
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
 800b780:	4413      	add	r3, r2
 800b782:	121a      	asrs	r2, r3, #8
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 800b78a:	e008      	b.n	800b79e <Sensor_SetNewRange+0x76>
    	pDev->RangeStatus = pRange->RangeStatus;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	7e1a      	ldrb	r2, [r3, #24]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    	pDev->LeakyFirst = 1;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bc80      	pop	{r7}
 800b7a6:	4770      	bx	lr
 800b7a8:	20000938 	.word	0x20000938

0800b7ac <ResetAndDetectSensor>:


int ResetAndDetectSensor(int SetDisplay){
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff fdf7 	bl	800b3a8 <DetectSensors>
 800b7ba:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dd07      	ble.n	800b7d2 <ResetAndDetectSensor+0x26>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d108      	bne.n	800b7da <ResetAndDetectSensor+0x2e>
 800b7c8:	4b06      	ldr	r3, [pc, #24]	; (800b7e4 <ResetAndDetectSensor+0x38>)
 800b7ca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	f7ff fd7d 	bl	800b2d4 <HandleError>
    }
    return nSensor;
 800b7da:	68fb      	ldr	r3, [r7, #12]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	200002d0 	.word	0x200002d0

0800b7e8 <main>:


/* USER CODE END 0 */

int main(void)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b0d7      	sub	sp, #348	; 0x15c
 800b7ec:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  int i;
  char StrDisplay[5];
  int nSensorPresent=0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  int nSensorEnabled=0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  int nReady;
  int status;
  uint8_t NewDataReady=0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  int state=RANGE; // Start demo with ranging (with center device)
 800b800:	2300      	movs	r3, #0
 800b802:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  Gesture_TAP_1_Data_t gestureTapData1;
  Gesture_SWIPE_1_Data_t gestureSwipeData1;
  Gesture_DIRSWIPE_1_Data_t gestureDirSwipeData;
  int gesture_code;
  int tap=0,swipe=0;
 800b806:	2300      	movs	r3, #0
 800b808:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  int32_t leftRange, rightRange;
  int pagePosition=1;
 800b812:	2301      	movs	r3, #1
 800b814:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b818:	f7fa fd12 	bl	8006240 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800b81c:	f000 fb3e 	bl	800be9c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b820:	f000 fbb6 	bl	800bf90 <MX_GPIO_Init>

  /* Initialize and start timestamping for UART logging */
  TimeStamp_Init();
 800b824:	f7ff fda0 	bl	800b368 <TimeStamp_Init>
  TimeStamp_Reset();
 800b828:	f7ff fda4 	bl	800b374 <TimeStamp_Reset>

  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_Init();
 800b82c:	f7f5 fc1a 	bl	8001064 <XNUCLEO53L0A1_Init>
  uart_printf(WelcomeMsg);
 800b830:	48c5      	ldr	r0, [pc, #788]	; (800bb48 <main+0x360>)
 800b832:	f7f5 fe55 	bl	80014e0 <uart_printf>
  XNUCLEO53L0A1_SetDisplayString("53L0");
 800b836:	48c5      	ldr	r0, [pc, #788]	; (800bb4c <main+0x364>)
 800b838:	f7f5 fda2 	bl	8001380 <XNUCLEO53L0A1_SetDisplayString>
  HAL_Delay(WelcomeTime);
 800b83c:	f44f 7025 	mov.w	r0, #660	; 0x294
 800b840:	f7fa fd48 	bl	80062d4 <HAL_Delay>
  nSensorPresent = ResetAndDetectSensor(1);
 800b844:	2001      	movs	r0, #1
 800b846:	f7ff ffb1 	bl	800b7ac <ResetAndDetectSensor>
 800b84a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
  //VL53L0X_trace_config(NULL,TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL); // Full trace

  /* First enable only the center device */
  VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].Enabled = 0;
 800b84e:	4bc0      	ldr	r3, [pc, #768]	; (800bb50 <main+0x368>)
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].Enabled = 1;
 800b856:	4bbe      	ldr	r3, [pc, #760]	; (800bb50 <main+0x368>)
 800b858:	2201      	movs	r2, #1
 800b85a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].Enabled = 0;
 800b85e:	4bbc      	ldr	r3, [pc, #752]	; (800bb50 <main+0x368>)
 800b860:	2200      	movs	r2, #0
 800b862:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

  /* Initialize Tap gesture recognition */
  tof_gestures_initTAP_1(300, &gestureTapData1);
 800b866:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b86a:	4619      	mov	r1, r3
 800b86c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b870:	f7ff fb64 	bl	800af3c <tof_gestures_initTAP_1>
  /* Initialize Swipe gesture recognition */
  tof_gestures_initSWIPE_1(&gestureSwipeData1);
 800b874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fa0e 	bl	800ac9a <tof_gestures_initSWIPE_1>
  /* Initialize directional swipes recognition : swipe detected below 400 mm, no max speed, min duration is 1 sec for a swipe and hand must not cover both devices */
  tof_gestures_initDIRSWIPE_1(400, 0, 1000, false, &gestureDirSwipeData);
 800b87e:	463b      	mov	r3, r7
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	2300      	movs	r3, #0
 800b884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b888:	2100      	movs	r1, #0
 800b88a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b88e:	f7ff f921 	bl	800aad4 <tof_gestures_initDIRSWIPE_1>
  /* Select which module to debug (code must be compiled with TRACE defined in compiler command line) */
  TOF_GESTURES_DEBUG_SET_MODULES(NONE); // Could be NONE or TAP_1|TAP_SWIPE_2|DIRSWIPE_1 for instance (or any other combinations);

  /* Setup sensors in single mode */
  SetupSingleShot();
 800b892:	f7ff fe87 	bl	800b5a4 <SetupSingleShot>
  {

	  /********************************************************************************/
	  /* GESTURES : Enable/Disable devices as per selected state                      */
	  /********************************************************************************/
	  switch(state){
 800b896:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	db24      	blt.n	800b8e8 <main+0x100>
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	dd02      	ble.n	800b8a8 <main+0xc0>
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d010      	beq.n	800b8c8 <main+0xe0>
 800b8a6:	e01f      	b.n	800b8e8 <main+0x100>
		  case RANGE:
		  case TAP_CENTER:
		  case SWIPE_CENTER:
			  /* Enable TOP device only*/
			  nSensorEnabled = 1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].Enabled = 0;
 800b8ae:	4ba8      	ldr	r3, [pc, #672]	; (800bb50 <main+0x368>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].Enabled = 1;
 800b8b6:	4ba6      	ldr	r3, [pc, #664]	; (800bb50 <main+0x368>)
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].Enabled = 0;
 800b8be:	4ba4      	ldr	r3, [pc, #656]	; (800bb50 <main+0x368>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
			  break;
 800b8c6:	e012      	b.n	800b8ee <main+0x106>
		  case DIRECTIONAL_SWIPE:
			  nSensorEnabled = 2;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			  /* Enable LEFT and RIGHT devices only */
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].Enabled = 1;
 800b8ce:	4ba0      	ldr	r3, [pc, #640]	; (800bb50 <main+0x368>)
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].Enabled = 0;
 800b8d6:	4b9e      	ldr	r3, [pc, #632]	; (800bb50 <main+0x368>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
			  VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].Enabled = 1;
 800b8de:	4b9c      	ldr	r3, [pc, #624]	; (800bb50 <main+0x368>)
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
			  break;
 800b8e6:	e002      	b.n	800b8ee <main+0x106>
		  default:
			  HandleError(ERR_DEMO_GESTURE_MODE);
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	f7ff fcf3 	bl	800b2d4 <HandleError>
	  }

	  /* kick off measure on enabled devices */
	  for( i=0; i<3; i++){
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800b8f4:	e043      	b.n	800b97e <main+0x196>
		  if( ! VL53L0XDevs[i].Present  || ! VL53L0XDevs[i].Enabled )
 800b8f6:	4a96      	ldr	r2, [pc, #600]	; (800bb50 <main+0x368>)
 800b8f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b8fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b900:	fb01 f303 	mul.w	r3, r1, r3
 800b904:	4413      	add	r3, r2
 800b906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d030      	beq.n	800b972 <main+0x18a>
 800b910:	4a8f      	ldr	r2, [pc, #572]	; (800bb50 <main+0x368>)
 800b912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b916:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b91a:	fb01 f303 	mul.w	r3, r1, r3
 800b91e:	4413      	add	r3, r2
 800b920:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d023      	beq.n	800b972 <main+0x18a>
			  continue;
		  status = VL53L0X_StartMeasurement(&VL53L0XDevs[i]);
 800b92a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b92e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b932:	fb02 f303 	mul.w	r3, r2, r3
 800b936:	4a86      	ldr	r2, [pc, #536]	; (800bb50 <main+0x368>)
 800b938:	4413      	add	r3, r2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7f7 f94e 	bl	8002bdc <VL53L0X_StartMeasurement>
 800b940:	4603      	mov	r3, r0
 800b942:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  if( status ){
 800b946:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <main+0x170>
			  debug_printf("VL53L0X_StartMeasurement failed on device %d",i);
 800b94e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800b952:	4880      	ldr	r0, [pc, #512]	; (800bb54 <main+0x36c>)
 800b954:	f7f5 fdc4 	bl	80014e0 <uart_printf>
		  }
		  VL53L0XDevs[i].Ready=0;
 800b958:	4a7d      	ldr	r2, [pc, #500]	; (800bb50 <main+0x368>)
 800b95a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b95e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	4413      	add	r3, r2
 800b968:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	e000      	b.n	800b974 <main+0x18c>
			  continue;
 800b972:	bf00      	nop
	  for( i=0; i<3; i++){
 800b974:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b978:	3301      	adds	r3, #1
 800b97a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800b97e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b982:	2b02      	cmp	r3, #2
 800b984:	ddb7      	ble.n	800b8f6 <main+0x10e>
	  }

	  /* wait for all enabled devices to have a measure */
	  nReady=0;
 800b986:	2300      	movs	r3, #0
 800b988:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  do{
		  HAL_Delay(1);
 800b98c:	2001      	movs	r0, #1
 800b98e:	f7fa fca1 	bl	80062d4 <HAL_Delay>
		  for( i=0; i<3; i++){
 800b992:	2300      	movs	r3, #0
 800b994:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800b998:	e0a4      	b.n	800bae4 <main+0x2fc>
			  /* Skip devices not present or not enabled */
			  if( ! VL53L0XDevs[i].Present  || ! VL53L0XDevs[i].Enabled )
 800b99a:	4a6d      	ldr	r2, [pc, #436]	; (800bb50 <main+0x368>)
 800b99c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b9a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b9a4:	fb01 f303 	mul.w	r3, r1, r3
 800b9a8:	4413      	add	r3, r2
 800b9aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 808f 	beq.w	800bad4 <main+0x2ec>
 800b9b6:	4a66      	ldr	r2, [pc, #408]	; (800bb50 <main+0x368>)
 800b9b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b9bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b9c0:	fb01 f303 	mul.w	r3, r1, r3
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8081 	beq.w	800bad4 <main+0x2ec>
				  continue;
			  /* Is new sample ready ? */
			  status = VL53L0X_GetMeasurementDataReady(&VL53L0XDevs[i], &NewDataReady);
 800b9d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b9d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b9da:	fb02 f303 	mul.w	r3, r2, r3
 800b9de:	4a5c      	ldr	r2, [pc, #368]	; (800bb50 <main+0x368>)
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f207 1217 	addw	r2, r7, #279	; 0x117
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f7 f9b6 	bl	8002d5a <VL53L0X_GetMeasurementDataReady>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			  if( status ){
 800b9f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d004      	beq.n	800ba06 <main+0x21e>
				  debug_printf("VL53L0X_GetMeasurementDataReady failed on device %d",i);
 800b9fc:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800ba00:	4855      	ldr	r0, [pc, #340]	; (800bb58 <main+0x370>)
 800ba02:	f7f5 fd6d 	bl	80014e0 <uart_printf>
			  }
			  /* Skip if new sample not ready */
			  if (NewDataReady == 0)
 800ba06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d064      	beq.n	800bad8 <main+0x2f0>
				  continue;

			  /* Clear Interrupt */
			  status = VL53L0X_ClearInterruptMask(&VL53L0XDevs[i], 0);
 800ba0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba16:	fb02 f303 	mul.w	r3, r2, r3
 800ba1a:	4a4d      	ldr	r2, [pc, #308]	; (800bb50 <main+0x368>)
 800ba1c:	4413      	add	r3, r2
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7f7 fc8b 	bl	800333c <VL53L0X_ClearInterruptMask>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			  /* Otherwise, get new sample data and store */
			  status = VL53L0X_GetRangingMeasurementData(&VL53L0XDevs[i], &RangingMeasurementData);
 800ba2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba30:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba34:	fb02 f303 	mul.w	r3, r2, r3
 800ba38:	4a45      	ldr	r2, [pc, #276]	; (800bb50 <main+0x368>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	4947      	ldr	r1, [pc, #284]	; (800bb5c <main+0x374>)
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7f7 f9cc 	bl	8002ddc <VL53L0X_GetRangingMeasurementData>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			  if( status ){
 800ba4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d004      	beq.n	800ba5c <main+0x274>
				  debug_printf("VL53L0X_GetRangingMeasurementData failed on device %d",i);
 800ba52:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800ba56:	4842      	ldr	r0, [pc, #264]	; (800bb60 <main+0x378>)
 800ba58:	f7f5 fd42 	bl	80014e0 <uart_printf>
			  }
			  /* Data logging */
			  trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 800ba5c:	4a3c      	ldr	r2, [pc, #240]	; (800bb50 <main+0x368>)
 800ba5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ba66:	fb01 f303 	mul.w	r3, r1, r3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba70:	681c      	ldr	r4, [r3, #0]
 800ba72:	f7ff fc8d 	bl	800b390 <TimeStamp_Get>
 800ba76:	4601      	mov	r1, r0
 800ba78:	4b38      	ldr	r3, [pc, #224]	; (800bb5c <main+0x374>)
 800ba7a:	7e1b      	ldrb	r3, [r3, #24]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	4b37      	ldr	r3, [pc, #220]	; (800bb5c <main+0x374>)
 800ba80:	891b      	ldrh	r3, [r3, #8]
 800ba82:	461a      	mov	r2, r3
 800ba84:	4b35      	ldr	r3, [pc, #212]	; (800bb5c <main+0x374>)
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	9200      	str	r2, [sp, #0]
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	460a      	mov	r2, r1
 800ba90:	4621      	mov	r1, r4
 800ba92:	4834      	ldr	r0, [pc, #208]	; (800bb64 <main+0x37c>)
 800ba94:	f7f5 fd24 	bl	80014e0 <uart_printf>
			  Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 800ba98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ba9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800baa0:	fb02 f303 	mul.w	r3, r2, r3
 800baa4:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <main+0x368>)
 800baa6:	4413      	add	r3, r2
 800baa8:	492c      	ldr	r1, [pc, #176]	; (800bb5c <main+0x374>)
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fe3c 	bl	800b728 <Sensor_SetNewRange>
			  VL53L0XDevs[i].Ready=1;
 800bab0:	4a27      	ldr	r2, [pc, #156]	; (800bb50 <main+0x368>)
 800bab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bab6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800baba:	fb01 f303 	mul.w	r3, r1, r3
 800babe:	4413      	add	r3, r2
 800bac0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800bac4:	2201      	movs	r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
			  nReady++;
 800bac8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bacc:	3301      	adds	r3, #1
 800bace:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800bad2:	e002      	b.n	800bada <main+0x2f2>
				  continue;
 800bad4:	bf00      	nop
 800bad6:	e000      	b.n	800bada <main+0x2f2>
				  continue;
 800bad8:	bf00      	nop
		  for( i=0; i<3; i++){
 800bada:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bade:	3301      	adds	r3, #1
 800bae0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800bae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bae8:	2b02      	cmp	r3, #2
 800baea:	f77f af56 	ble.w	800b99a <main+0x1b2>
		  }
	  }
	  while(nReady<nSensorEnabled);
 800baee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800baf2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800baf6:	429a      	cmp	r2, r3
 800baf8:	f6ff af48 	blt.w	800b98c <main+0x1a4>

	  /********************************************************************************/
	  /* GESTURES : Apply gestures detection functions on the measures                */
	  /********************************************************************************/
	  switch(state){
 800bafc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	f200 81b4 	bhi.w	800be6e <main+0x686>
 800bb06:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <main+0x324>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bb1d 	.word	0x0800bb1d
 800bb10:	0800bbe3 	.word	0x0800bbe3
 800bb14:	0800bca3 	.word	0x0800bca3
 800bb18:	0800bd6d 	.word	0x0800bd6d
		  case RANGE:
			  if( VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].RangeStatus == 0 ){
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <main+0x368>)
 800bb1e:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d124      	bne.n	800bb70 <main+0x388>
				  sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].LeakyRange/10);
 800bb26:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <main+0x368>)
 800bb28:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800bb2c:	4a0e      	ldr	r2, [pc, #56]	; (800bb68 <main+0x380>)
 800bb2e:	fb82 1203 	smull	r1, r2, r2, r3
 800bb32:	1092      	asrs	r2, r2, #2
 800bb34:	17db      	asrs	r3, r3, #31
 800bb36:	1ad2      	subs	r2, r2, r3
 800bb38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bb3c:	490b      	ldr	r1, [pc, #44]	; (800bb6c <main+0x384>)
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 fb4c 	bl	800c1dc <siprintf>
 800bb44:	e021      	b.n	800bb8a <main+0x3a2>
 800bb46:	bf00      	nop
 800bb48:	20000780 	.word	0x20000780
 800bb4c:	0800cec8 	.word	0x0800cec8
 800bb50:	200002d0 	.word	0x200002d0
 800bb54:	0800ced0 	.word	0x0800ced0
 800bb58:	0800cf00 	.word	0x0800cf00
 800bb5c:	20000af8 	.word	0x20000af8
 800bb60:	0800cf34 	.word	0x0800cf34
 800bb64:	0800cf6c 	.word	0x0800cf6c
 800bb68:	66666667 	.word	0x66666667
 800bb6c:	0800cf7c 	.word	0x0800cf7c
			  }else{
				  sprintf(StrDisplay, "r---");
 800bb70:	4ac2      	ldr	r2, [pc, #776]	; (800be7c <main+0x694>)
 800bb72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bb76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb7a:	6018      	str	r0, [r3, #0]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	7019      	strb	r1, [r3, #0]
				  StrDisplay[0]=VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].DevLetter;
 800bb80:	4bbf      	ldr	r3, [pc, #764]	; (800be80 <main+0x698>)
 800bb82:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
 800bb86:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
			  }
			  /* Check blue button */
			  if( !BSP_GetPushButton() ){
 800bb8a:	f7ff fb3f 	bl	800b20c <BSP_GetPushButton>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f040 8165 	bne.w	800be60 <main+0x678>
				  /* when button get pressed, wait it get released (keep doing display) */
				  status = PusbButton_WaitUnPress();
 800bb96:	f7ff fb4b 	bl	800b230 <PusbButton_WaitUnPress>
 800bb9a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
				  if(status && nSensorPresent==3){
 800bb9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00f      	beq.n	800bbc6 <main+0x3de>
 800bba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d10b      	bne.n	800bbc6 <main+0x3de>
					  /* BP stay pressed very long time and 3 devices are present */
					  state = DIRECTIONAL_SWIPE;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "----");
 800bbb4:	4ab3      	ldr	r2, [pc, #716]	; (800be84 <main+0x69c>)
 800bbb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbbe:	6018      	str	r0, [r3, #0]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	7019      	strb	r1, [r3, #0]
 800bbc4:	e00a      	b.n	800bbdc <main+0x3f4>
				  }else{
					  /* BP short pressed or only one device is there */
					  state = TAP_CENTER;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "[@@]");
 800bbcc:	4aae      	ldr	r2, [pc, #696]	; (800be88 <main+0x6a0>)
 800bbce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbd6:	6018      	str	r0, [r3, #0]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	7019      	strb	r1, [r3, #0]
				  }
				  /* Reset Timestamping */
				  TimeStamp_Reset();
 800bbdc:	f7ff fbca 	bl	800b374 <TimeStamp_Reset>
			  }
			  break;
 800bbe0:	e13e      	b.n	800be60 <main+0x678>

		  case TAP_CENTER:
			  /* Call ToF Gesture module all the time (even if no object is detected) */
			  if ( VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].RangeStatus == 0 ){
 800bbe2:	4ba7      	ldr	r3, [pc, #668]	; (800be80 <main+0x698>)
 800bbe4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10b      	bne.n	800bc04 <main+0x41c>
				  /* Object (hand) detected */
				  gesture_code = tof_gestures_detectTAP_1(VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].LeakyRange, &gestureTapData1);
 800bbec:	4ba4      	ldr	r3, [pc, #656]	; (800be80 <main+0x698>)
 800bbee:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800bbf2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff f9c9 	bl	800af90 <tof_gestures_detectTAP_1>
 800bbfe:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 800bc02:	e008      	b.n	800bc16 <main+0x42e>
			  }else{
				  /* No object (hand) detected : call the ToF Gesture module with 1200 mm as distance */
				  gesture_code = tof_gestures_detectTAP_1(1200, &gestureTapData1);
 800bc04:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800bc08:	4619      	mov	r1, r3
 800bc0a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800bc0e:	f7ff f9bf 	bl	800af90 <tof_gestures_detectTAP_1>
 800bc12:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
			  }
			  /* Format data to display */
			  if(gesture_code == GESTURES_SINGLE_TAP){
 800bc16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d115      	bne.n	800bc4a <main+0x462>
				  tap = !tap;
 800bc1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bf0c      	ite	eq
 800bc26:	2301      	moveq	r3, #1
 800bc28:	2300      	movne	r3, #0
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				  sprintf(StrDisplay, (tap ? " [] " : "[@@]"));
 800bc30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <main+0x454>
 800bc38:	4a94      	ldr	r2, [pc, #592]	; (800be8c <main+0x6a4>)
 800bc3a:	e000      	b.n	800bc3e <main+0x456>
 800bc3c:	4a92      	ldr	r2, [pc, #584]	; (800be88 <main+0x6a0>)
 800bc3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 fac9 	bl	800c1dc <siprintf>
			  }
			  /* Check blue button */
			  if (!BSP_GetPushButton()) {
 800bc4a:	f7ff fadf 	bl	800b20c <BSP_GetPushButton>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f040 8107 	bne.w	800be64 <main+0x67c>
				  /* when button get pressed, wait it get released (keep doing display) */
				  status = PusbButton_WaitUnPress();
 800bc56:	f7ff faeb 	bl	800b230 <PusbButton_WaitUnPress>
 800bc5a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
				  if(status && nSensorPresent==3){
 800bc5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00f      	beq.n	800bc86 <main+0x49e>
 800bc66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d10b      	bne.n	800bc86 <main+0x49e>
					  /* BP stay pressed very long time and 3 devices are present */
					  state = DIRECTIONAL_SWIPE;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "----");
 800bc74:	4a83      	ldr	r2, [pc, #524]	; (800be84 <main+0x69c>)
 800bc76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bc7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc7e:	6018      	str	r0, [r3, #0]
 800bc80:	3304      	adds	r3, #4
 800bc82:	7019      	strb	r1, [r3, #0]
 800bc84:	e00a      	b.n	800bc9c <main+0x4b4>
				  }else{
					  /* BP short pressed or only one device is there */
					  state = SWIPE_CENTER;
 800bc86:	2302      	movs	r3, #2
 800bc88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "----");
 800bc8c:	4a7d      	ldr	r2, [pc, #500]	; (800be84 <main+0x69c>)
 800bc8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bc92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc96:	6018      	str	r0, [r3, #0]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	7019      	strb	r1, [r3, #0]
				  }
				  /* Reset Timestamping */
				  TimeStamp_Reset();
 800bc9c:	f7ff fb6a 	bl	800b374 <TimeStamp_Reset>
			  }
			  break;
 800bca0:	e0e0      	b.n	800be64 <main+0x67c>

		  case SWIPE_CENTER:
			  /* Call ToF Gesture module all the time (even if no object is detected) */
			  if ( VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].RangeStatus == 0 && VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].LeakyRange !=0 ){
 800bca2:	4b77      	ldr	r3, [pc, #476]	; (800be80 <main+0x698>)
 800bca4:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d110      	bne.n	800bcce <main+0x4e6>
 800bcac:	4b74      	ldr	r3, [pc, #464]	; (800be80 <main+0x698>)
 800bcae:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <main+0x4e6>
				  /* Object (hand) detected */
				  gesture_code = tof_gestures_detectSWIPE_1(VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].LeakyRange, &gestureSwipeData1);
 800bcb6:	4b72      	ldr	r3, [pc, #456]	; (800be80 <main+0x698>)
 800bcb8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800bcbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f80c 	bl	800ace0 <tof_gestures_detectSWIPE_1>
 800bcc8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 800bccc:	e008      	b.n	800bce0 <main+0x4f8>
			  }else{
				  /* No object (hand) detected : call the ToF Gesture module with 1200 mm as distance */
				  gesture_code = tof_gestures_detectSWIPE_1(1200, &gestureSwipeData1);
 800bcce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800bcd8:	f7ff f802 	bl	800ace0 <tof_gestures_detectSWIPE_1>
 800bcdc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
			  }
			  /* Format data to display */
			  if(gesture_code == GESTURES_SINGLE_SWIPE){
 800bce0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d115      	bne.n	800bd14 <main+0x52c>
				  swipe = !swipe;
 800bce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	bf0c      	ite	eq
 800bcf0:	2301      	moveq	r3, #1
 800bcf2:	2300      	movne	r3, #0
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				  sprintf(StrDisplay, (swipe ? "^^^^" : "____"));
 800bcfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <main+0x51e>
 800bd02:	4a63      	ldr	r2, [pc, #396]	; (800be90 <main+0x6a8>)
 800bd04:	e000      	b.n	800bd08 <main+0x520>
 800bd06:	4a63      	ldr	r2, [pc, #396]	; (800be94 <main+0x6ac>)
 800bd08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 fa64 	bl	800c1dc <siprintf>
			  }
			  /* Check blue button */
			  if (!BSP_GetPushButton()) {
 800bd14:	f7ff fa7a 	bl	800b20c <BSP_GetPushButton>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f040 80a4 	bne.w	800be68 <main+0x680>
				  /* when button get pressed, wait it get released (keep doing display) */
				  status = PusbButton_WaitUnPress();
 800bd20:	f7ff fa86 	bl	800b230 <PusbButton_WaitUnPress>
 800bd24:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
				  if(status && nSensorPresent==3){
 800bd28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00f      	beq.n	800bd50 <main+0x568>
 800bd30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d10b      	bne.n	800bd50 <main+0x568>
					  /* BP stay pressed very long time and 3 devices are present */
					  state = DIRECTIONAL_SWIPE;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "----");
 800bd3e:	4a51      	ldr	r2, [pc, #324]	; (800be84 <main+0x69c>)
 800bd40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd48:	6018      	str	r0, [r3, #0]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	7019      	strb	r1, [r3, #0]
 800bd4e:	e00a      	b.n	800bd66 <main+0x57e>
				  }else{
					  /* BP short pressed or only one device is there */
					  state = RANGE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "    ");
 800bd56:	4a50      	ldr	r2, [pc, #320]	; (800be98 <main+0x6b0>)
 800bd58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd60:	6018      	str	r0, [r3, #0]
 800bd62:	3304      	adds	r3, #4
 800bd64:	7019      	strb	r1, [r3, #0]
				  }
				  /* Reset Timestamping */
				  TimeStamp_Reset();
 800bd66:	f7ff fb05 	bl	800b374 <TimeStamp_Reset>
			  }
			  break;
 800bd6a:	e07d      	b.n	800be68 <main+0x680>

		  case DIRECTIONAL_SWIPE:
			  /* Clip ranging values as tof_gestures_detectDIRSWIPE_1 function must be called all the times to detect the gesture */
			  leftRange = (VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].RangeStatus == 0) ? VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].LeakyRange : 1200;
 800bd6c:	4b44      	ldr	r3, [pc, #272]	; (800be80 <main+0x698>)
 800bd6e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <main+0x596>
 800bd76:	4b42      	ldr	r3, [pc, #264]	; (800be80 <main+0x698>)
 800bd78:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bd7c:	e001      	b.n	800bd82 <main+0x59a>
 800bd7e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bd82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			  rightRange = (VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].RangeStatus == 0) ? VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].LeakyRange : 1200;
 800bd86:	4b3e      	ldr	r3, [pc, #248]	; (800be80 <main+0x698>)
 800bd88:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d103      	bne.n	800bd98 <main+0x5b0>
 800bd90:	4b3b      	ldr	r3, [pc, #236]	; (800be80 <main+0x698>)
 800bd92:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800bd96:	e001      	b.n	800bd9c <main+0x5b4>
 800bd98:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bd9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			  gesture_code = tof_gestures_detectDIRSWIPE_1(leftRange, rightRange, &gestureDirSwipeData);
 800bda0:	463b      	mov	r3, r7
 800bda2:	461a      	mov	r2, r3
 800bda4:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800bda8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bdac:	f7fe fec3 	bl	800ab36 <tof_gestures_detectDIRSWIPE_1>
 800bdb0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

			  /* Format data to display */
			  if(gesture_code == GESTURES_SWIPE_LEFT_RIGHT){
 800bdb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d117      	bne.n	800bdec <main+0x604>
				  pagePosition++;
 800bdbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  pagePosition = (pagePosition>3) ? 0 : pagePosition;
 800bdc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	dc02      	bgt.n	800bdd4 <main+0x5ec>
 800bdce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdd2:	e000      	b.n	800bdd6 <main+0x5ee>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  FormatDirSwipe(true, pagePosition, StrDisplay);
 800bdda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bdde:	461a      	mov	r2, r3
 800bde0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800bde4:	2001      	movs	r0, #1
 800bde6:	f7ff fc77 	bl	800b6d8 <FormatDirSwipe>
 800bdea:	e01a      	b.n	800be22 <main+0x63a>
			  }else if(gesture_code == GESTURES_SWIPE_RIGHT_LEFT){
 800bdec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bdf0:	2b09      	cmp	r3, #9
 800bdf2:	d116      	bne.n	800be22 <main+0x63a>
				  pagePosition--;
 800bdf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  pagePosition = (pagePosition<0) ? 3 : pagePosition;
 800bdfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be02:	2b00      	cmp	r3, #0
 800be04:	db02      	blt.n	800be0c <main+0x624>
 800be06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be0a:	e000      	b.n	800be0e <main+0x626>
 800be0c:	2303      	movs	r3, #3
 800be0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  FormatDirSwipe(false, pagePosition, StrDisplay);
 800be12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800be16:	461a      	mov	r2, r3
 800be18:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7ff fc5b 	bl	800b6d8 <FormatDirSwipe>
			  }else{
				  //ShowGestureHelpMsg(gesture_code);
			  }
			  /* Check blue button */
			  if (!BSP_GetPushButton()) {
 800be22:	f7ff f9f3 	bl	800b20c <BSP_GetPushButton>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d11f      	bne.n	800be6c <main+0x684>
				  //when button get pressed, wait it get released (keep doing display)
				  status = PusbButton_WaitUnPress();
 800be2c:	f7ff fa00 	bl	800b230 <PusbButton_WaitUnPress>
 800be30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
				  if(status){
 800be34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <main+0x66c>
					  //BP stay pressed very long time and 3 devices are present
					  state = RANGE;
 800be3c:	2300      	movs	r3, #0
 800be3e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
					  sprintf(StrDisplay, "    ");
 800be42:	4a15      	ldr	r2, [pc, #84]	; (800be98 <main+0x6b0>)
 800be44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800be48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be4c:	6018      	str	r0, [r3, #0]
 800be4e:	3304      	adds	r3, #4
 800be50:	7019      	strb	r1, [r3, #0]
 800be52:	e002      	b.n	800be5a <main+0x672>
				  }else{
					  //BP short pressed or only one device is there
					  state = DIRECTIONAL_SWIPE;
 800be54:	2303      	movs	r3, #3
 800be56:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				  }
				  /* Reset Timestamping */
				  TimeStamp_Reset();
 800be5a:	f7ff fa8b 	bl	800b374 <TimeStamp_Reset>
			  }
			  break;
 800be5e:	e005      	b.n	800be6c <main+0x684>
			  break;
 800be60:	bf00      	nop
 800be62:	e004      	b.n	800be6e <main+0x686>
			  break;
 800be64:	bf00      	nop
 800be66:	e002      	b.n	800be6e <main+0x686>
			  break;
 800be68:	bf00      	nop
 800be6a:	e000      	b.n	800be6e <main+0x686>
			  break;
 800be6c:	bf00      	nop
      }
	  XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 800be6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800be72:	4618      	mov	r0, r3
 800be74:	f7f5 fa84 	bl	8001380 <XNUCLEO53L0A1_SetDisplayString>
	  switch(state){
 800be78:	e50d      	b.n	800b896 <main+0xae>
 800be7a:	bf00      	nop
 800be7c:	0800cf84 	.word	0x0800cf84
 800be80:	200002d0 	.word	0x200002d0
 800be84:	0800cf8c 	.word	0x0800cf8c
 800be88:	0800cf94 	.word	0x0800cf94
 800be8c:	0800cf9c 	.word	0x0800cf9c
 800be90:	0800cfa4 	.word	0x0800cfa4
 800be94:	0800cfac 	.word	0x0800cfac
 800be98:	0800ce18 	.word	0x0800ce18

0800be9c <SystemClock_Config>:
}
#endif

#ifdef STM32L476xx
void SystemClock_Config(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b0ba      	sub	sp, #232	; 0xe8
 800bea0:	af00      	add	r7, sp, #0
     RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bea2:	2302      	movs	r3, #2
 800bea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800beb0:	2310      	movs	r3, #16
 800beb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800beb6:	2302      	movs	r3, #2
 800beb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bebc:	2302      	movs	r3, #2
 800bebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800bec2:	2301      	movs	r3, #1
 800bec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 800bec8:	230a      	movs	r3, #10
 800beca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800bece:	2307      	movs	r3, #7
 800bed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800bed4:	2302      	movs	r3, #2
 800bed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800beda:	2302      	movs	r3, #2
 800bedc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bee0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fb fc27 	bl	8007738 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800beea:	230f      	movs	r3, #15
 800beec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bef0:	2303      	movs	r3, #3
 800bef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800befc:	2300      	movs	r3, #0
 800befe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bf02:	2300      	movs	r3, #0
 800bf04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bf08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fb ff9c 	bl	8007e4c <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bf1c:	f107 0308 	add.w	r3, r7, #8
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fc fa5f 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bf26:	2302      	movs	r3, #2
 800bf28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fc fa56 	bl	80083e4 <HAL_RCCEx_PeriphCLKConfig>


  __PWR_CLK_ENABLE();
 800bf38:	4b13      	ldr	r3, [pc, #76]	; (800bf88 <SystemClock_Config+0xec>)
 800bf3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3c:	4a12      	ldr	r2, [pc, #72]	; (800bf88 <SystemClock_Config+0xec>)
 800bf3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf42:	6593      	str	r3, [r2, #88]	; 0x58
 800bf44:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <SystemClock_Config+0xec>)
 800bf46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf50:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf54:	f7fb fb9a 	bl	800768c <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800bf58:	f7fc f994 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <SystemClock_Config+0xf0>)
 800bf60:	fba3 2302 	umull	r2, r3, r3, r2
 800bf64:	099b      	lsrs	r3, r3, #6
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fa fac7 	bl	80064fa <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bf6c:	2004      	movs	r0, #4
 800bf6e:	f7fa fad1 	bl	8006514 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800bf72:	2200      	movs	r2, #0
 800bf74:	2100      	movs	r1, #0
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7a:	f7fa fa94 	bl	80064a6 <HAL_NVIC_SetPriority>
}
 800bf7e:	bf00      	nop
 800bf80:	37e8      	adds	r7, #232	; 0xe8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	40021000 	.word	0x40021000
 800bf8c:	10624dd3 	.word	0x10624dd3

0800bf90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	; 0x28
 800bf94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800bf96:	4b28      	ldr	r3, [pc, #160]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bf98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9a:	4a27      	ldr	r2, [pc, #156]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bf9c:	f043 0304 	orr.w	r3, r3, #4
 800bfa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfa2:	4b25      	ldr	r3, [pc, #148]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa6:	f003 0304 	and.w	r3, r3, #4
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 800bfae:	4b22      	ldr	r3, [pc, #136]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb2:	4a21      	ldr	r2, [pc, #132]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfba:	4b1f      	ldr	r3, [pc, #124]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 800bfc6:	4b1c      	ldr	r3, [pc, #112]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfca:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfcc:	f043 0301 	orr.w	r3, r3, #1
 800bfd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfd2:	4b19      	ldr	r3, [pc, #100]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	60bb      	str	r3, [r7, #8]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800bfde:	4b16      	ldr	r3, [pc, #88]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe2:	4a15      	ldr	r2, [pc, #84]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfe4:	f043 0302 	orr.w	r3, r3, #2
 800bfe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfea:	4b13      	ldr	r3, [pc, #76]	; (800c038 <MX_GPIO_Init+0xa8>)
 800bfec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800bff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bffc:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <MX_GPIO_Init+0xac>)
 800bffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c000:	2300      	movs	r3, #0
 800c002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c004:	f107 0314 	add.w	r3, r7, #20
 800c008:	4619      	mov	r1, r3
 800c00a:	480d      	ldr	r0, [pc, #52]	; (800c040 <MX_GPIO_Init+0xb0>)
 800c00c:	f7fa fce6 	bl	80069dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800c010:	2320      	movs	r3, #32
 800c012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c014:	2301      	movs	r3, #1
 800c016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c018:	2300      	movs	r3, #0
 800c01a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c01c:	2300      	movs	r3, #0
 800c01e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800c020:	f107 0314 	add.w	r3, r7, #20
 800c024:	4619      	mov	r1, r3
 800c026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c02a:	f7fa fcd7 	bl	80069dc <HAL_GPIO_Init>

}
 800c02e:	bf00      	nop
 800c030:	3728      	adds	r7, #40	; 0x28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	40021000 	.word	0x40021000
 800c03c:	10120000 	.word	0x10120000
 800c040:	48000800 	.word	0x48000800

0800c044 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c048:	2003      	movs	r0, #3
 800c04a:	f7fa fa21 	bl	8006490 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800c04e:	2200      	movs	r2, #0
 800c050:	2100      	movs	r1, #0
 800c052:	f04f 30ff 	mov.w	r0, #4294967295
 800c056:	f7fa fa26 	bl	80064a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c05a:	bf00      	nop
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c070:	d10c      	bne.n	800c08c <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 800c072:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c076:	4a10      	ldr	r2, [pc, #64]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	6593      	str	r3, [r2, #88]	; 0x58
 800c07e:	4b0e      	ldr	r3, [pc, #56]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800c08a:	e010      	b.n	800c0ae <HAL_TIM_OC_MspInit+0x4e>
  else if(htim_oc->Instance==TIM5)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <HAL_TIM_OC_MspInit+0x5c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d10b      	bne.n	800c0ae <HAL_TIM_OC_MspInit+0x4e>
    __TIM5_CLK_ENABLE();
 800c096:	4b08      	ldr	r3, [pc, #32]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c09a:	4a07      	ldr	r2, [pc, #28]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c09c:	f043 0308 	orr.w	r3, r3, #8
 800c0a0:	6593      	str	r3, [r2, #88]	; 0x58
 800c0a2:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <HAL_TIM_OC_MspInit+0x58>)
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	60bb      	str	r3, [r7, #8]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bc80      	pop	{r7}
 800c0b6:	4770      	bx	lr
 800c0b8:	40021000 	.word	0x40021000
 800c0bc:	40000c00 	.word	0x40000c00

0800c0c0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
}
 800c0c4:	bf00      	nop
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bc80      	pop	{r7}
 800c0ca:	4770      	bx	lr

0800c0cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800c0d0:	e7fe      	b.n	800c0d0 <HardFault_Handler+0x4>

0800c0d2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800c0d6:	e7fe      	b.n	800c0d6 <MemManage_Handler+0x4>

0800c0d8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800c0dc:	e7fe      	b.n	800c0dc <BusFault_Handler+0x4>

0800c0de <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800c0e2:	e7fe      	b.n	800c0e2 <UsageFault_Handler+0x4>

0800c0e4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	af00      	add	r7, sp, #0
}
 800c0e8:	bf00      	nop
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr

0800c0f0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
}
 800c0f4:	bf00      	nop
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bc80      	pop	{r7}
 800c0fa:	4770      	bx	lr

0800c0fc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	af00      	add	r7, sp, #0
}
 800c100:	bf00      	nop
 800c102:	46bd      	mov	sp, r7
 800c104:	bc80      	pop	{r7}
 800c106:	4770      	bx	lr

0800c108 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800c10c:	f7fa f8ca 	bl	80062a4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800c110:	f7fa fa1c 	bl	800654c <HAL_SYSTICK_IRQHandler>
}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}

0800c118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c118:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c150 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c11c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c11e:	e003      	b.n	800c128 <LoopCopyDataInit>

0800c120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c120:	4b0c      	ldr	r3, [pc, #48]	; (800c154 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c126:	3104      	adds	r1, #4

0800c128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c128:	480b      	ldr	r0, [pc, #44]	; (800c158 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c12a:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <LoopForever+0xe>)
	adds	r2, r0, r1
 800c12c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c12e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c130:	d3f6      	bcc.n	800c120 <CopyDataInit>
	ldr	r2, =_sbss
 800c132:	4a0b      	ldr	r2, [pc, #44]	; (800c160 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c134:	e002      	b.n	800c13c <LoopFillZerobss>

0800c136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c138:	f842 3b04 	str.w	r3, [r2], #4

0800c13c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c13c:	4b09      	ldr	r3, [pc, #36]	; (800c164 <LoopForever+0x16>)
	cmp	r2, r3
 800c13e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c140:	d3f9      	bcc.n	800c136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c142:	f7fa f851 	bl	80061e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c146:	f000 f811 	bl	800c16c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c14a:	f7ff fb4d 	bl	800b7e8 <main>

0800c14e <LoopForever>:

LoopForever:
    b LoopForever
 800c14e:	e7fe      	b.n	800c14e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c150:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c154:	0800d088 	.word	0x0800d088
	ldr	r0, =_sdata
 800c158:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c15c:	20000810 	.word	0x20000810
	ldr	r2, =_sbss
 800c160:	20000810 	.word	0x20000810
	ldr	r3, = _ebss
 800c164:	20000b18 	.word	0x20000b18

0800c168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c168:	e7fe      	b.n	800c168 <ADC1_2_IRQHandler>
	...

0800c16c <__libc_init_array>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	4e0d      	ldr	r6, [pc, #52]	; (800c1a4 <__libc_init_array+0x38>)
 800c170:	4c0d      	ldr	r4, [pc, #52]	; (800c1a8 <__libc_init_array+0x3c>)
 800c172:	1ba4      	subs	r4, r4, r6
 800c174:	10a4      	asrs	r4, r4, #2
 800c176:	2500      	movs	r5, #0
 800c178:	42a5      	cmp	r5, r4
 800c17a:	d109      	bne.n	800c190 <__libc_init_array+0x24>
 800c17c:	4e0b      	ldr	r6, [pc, #44]	; (800c1ac <__libc_init_array+0x40>)
 800c17e:	4c0c      	ldr	r4, [pc, #48]	; (800c1b0 <__libc_init_array+0x44>)
 800c180:	f000 fc78 	bl	800ca74 <_init>
 800c184:	1ba4      	subs	r4, r4, r6
 800c186:	10a4      	asrs	r4, r4, #2
 800c188:	2500      	movs	r5, #0
 800c18a:	42a5      	cmp	r5, r4
 800c18c:	d105      	bne.n	800c19a <__libc_init_array+0x2e>
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c194:	4798      	blx	r3
 800c196:	3501      	adds	r5, #1
 800c198:	e7ee      	b.n	800c178 <__libc_init_array+0xc>
 800c19a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c19e:	4798      	blx	r3
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	e7f2      	b.n	800c18a <__libc_init_array+0x1e>
 800c1a4:	0800d078 	.word	0x0800d078
 800c1a8:	0800d078 	.word	0x0800d078
 800c1ac:	0800d078 	.word	0x0800d078
 800c1b0:	0800d07c 	.word	0x0800d07c

0800c1b4 <memcpy>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	1e43      	subs	r3, r0, #1
 800c1b8:	440a      	add	r2, r1
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	d100      	bne.n	800c1c0 <memcpy+0xc>
 800c1be:	bd10      	pop	{r4, pc}
 800c1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1c8:	e7f7      	b.n	800c1ba <memcpy+0x6>

0800c1ca <memset>:
 800c1ca:	4402      	add	r2, r0
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d100      	bne.n	800c1d4 <memset+0xa>
 800c1d2:	4770      	bx	lr
 800c1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1d8:	e7f9      	b.n	800c1ce <memset+0x4>
	...

0800c1dc <siprintf>:
 800c1dc:	b40e      	push	{r1, r2, r3}
 800c1de:	b500      	push	{lr}
 800c1e0:	b09c      	sub	sp, #112	; 0x70
 800c1e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	9006      	str	r0, [sp, #24]
 800c1e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1ec:	4809      	ldr	r0, [pc, #36]	; (800c214 <siprintf+0x38>)
 800c1ee:	9107      	str	r1, [sp, #28]
 800c1f0:	9104      	str	r1, [sp, #16]
 800c1f2:	4909      	ldr	r1, [pc, #36]	; (800c218 <siprintf+0x3c>)
 800c1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1f8:	9105      	str	r1, [sp, #20]
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	a902      	add	r1, sp, #8
 800c200:	f000 f8a8 	bl	800c354 <_svfiprintf_r>
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
 800c20a:	b01c      	add	sp, #112	; 0x70
 800c20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c210:	b003      	add	sp, #12
 800c212:	4770      	bx	lr
 800c214:	200007ac 	.word	0x200007ac
 800c218:	ffff0208 	.word	0xffff0208

0800c21c <strcpy>:
 800c21c:	4603      	mov	r3, r0
 800c21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c222:	f803 2b01 	strb.w	r2, [r3], #1
 800c226:	2a00      	cmp	r2, #0
 800c228:	d1f9      	bne.n	800c21e <strcpy+0x2>
 800c22a:	4770      	bx	lr

0800c22c <_vsniprintf_r>:
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	1e14      	subs	r4, r2, #0
 800c230:	4605      	mov	r5, r0
 800c232:	b09b      	sub	sp, #108	; 0x6c
 800c234:	4618      	mov	r0, r3
 800c236:	da05      	bge.n	800c244 <_vsniprintf_r+0x18>
 800c238:	238b      	movs	r3, #139	; 0x8b
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	b01b      	add	sp, #108	; 0x6c
 800c242:	bd30      	pop	{r4, r5, pc}
 800c244:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c248:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c24c:	bf14      	ite	ne
 800c24e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c252:	4623      	moveq	r3, r4
 800c254:	9302      	str	r3, [sp, #8]
 800c256:	9305      	str	r3, [sp, #20]
 800c258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c25c:	9100      	str	r1, [sp, #0]
 800c25e:	9104      	str	r1, [sp, #16]
 800c260:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c264:	4602      	mov	r2, r0
 800c266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c268:	4669      	mov	r1, sp
 800c26a:	4628      	mov	r0, r5
 800c26c:	f000 f872 	bl	800c354 <_svfiprintf_r>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	bfbc      	itt	lt
 800c274:	238b      	movlt	r3, #139	; 0x8b
 800c276:	602b      	strlt	r3, [r5, #0]
 800c278:	2c00      	cmp	r4, #0
 800c27a:	d0e1      	beq.n	800c240 <_vsniprintf_r+0x14>
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	e7dd      	b.n	800c240 <_vsniprintf_r+0x14>

0800c284 <vsniprintf>:
 800c284:	b507      	push	{r0, r1, r2, lr}
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	4613      	mov	r3, r2
 800c28a:	460a      	mov	r2, r1
 800c28c:	4601      	mov	r1, r0
 800c28e:	4803      	ldr	r0, [pc, #12]	; (800c29c <vsniprintf+0x18>)
 800c290:	6800      	ldr	r0, [r0, #0]
 800c292:	f7ff ffcb 	bl	800c22c <_vsniprintf_r>
 800c296:	b003      	add	sp, #12
 800c298:	f85d fb04 	ldr.w	pc, [sp], #4
 800c29c:	200007ac 	.word	0x200007ac

0800c2a0 <__ssputs_r>:
 800c2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a4:	688e      	ldr	r6, [r1, #8]
 800c2a6:	429e      	cmp	r6, r3
 800c2a8:	4682      	mov	sl, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	4690      	mov	r8, r2
 800c2ae:	4699      	mov	r9, r3
 800c2b0:	d837      	bhi.n	800c322 <__ssputs_r+0x82>
 800c2b2:	898a      	ldrh	r2, [r1, #12]
 800c2b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2b8:	d031      	beq.n	800c31e <__ssputs_r+0x7e>
 800c2ba:	6825      	ldr	r5, [r4, #0]
 800c2bc:	6909      	ldr	r1, [r1, #16]
 800c2be:	1a6f      	subs	r7, r5, r1
 800c2c0:	6965      	ldr	r5, [r4, #20]
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800c2cc:	f109 0301 	add.w	r3, r9, #1
 800c2d0:	443b      	add	r3, r7
 800c2d2:	429d      	cmp	r5, r3
 800c2d4:	bf38      	it	cc
 800c2d6:	461d      	movcc	r5, r3
 800c2d8:	0553      	lsls	r3, r2, #21
 800c2da:	d530      	bpl.n	800c33e <__ssputs_r+0x9e>
 800c2dc:	4629      	mov	r1, r5
 800c2de:	f000 fb21 	bl	800c924 <_malloc_r>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	b950      	cbnz	r0, 800c2fc <__ssputs_r+0x5c>
 800c2e6:	230c      	movs	r3, #12
 800c2e8:	f8ca 3000 	str.w	r3, [sl]
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2f2:	81a3      	strh	r3, [r4, #12]
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2fc:	463a      	mov	r2, r7
 800c2fe:	6921      	ldr	r1, [r4, #16]
 800c300:	f7ff ff58 	bl	800c1b4 <memcpy>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	6126      	str	r6, [r4, #16]
 800c312:	6165      	str	r5, [r4, #20]
 800c314:	443e      	add	r6, r7
 800c316:	1bed      	subs	r5, r5, r7
 800c318:	6026      	str	r6, [r4, #0]
 800c31a:	60a5      	str	r5, [r4, #8]
 800c31c:	464e      	mov	r6, r9
 800c31e:	454e      	cmp	r6, r9
 800c320:	d900      	bls.n	800c324 <__ssputs_r+0x84>
 800c322:	464e      	mov	r6, r9
 800c324:	4632      	mov	r2, r6
 800c326:	4641      	mov	r1, r8
 800c328:	6820      	ldr	r0, [r4, #0]
 800c32a:	f000 fa93 	bl	800c854 <memmove>
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	1b9b      	subs	r3, r3, r6
 800c332:	60a3      	str	r3, [r4, #8]
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	441e      	add	r6, r3
 800c338:	6026      	str	r6, [r4, #0]
 800c33a:	2000      	movs	r0, #0
 800c33c:	e7dc      	b.n	800c2f8 <__ssputs_r+0x58>
 800c33e:	462a      	mov	r2, r5
 800c340:	f000 fb4a 	bl	800c9d8 <_realloc_r>
 800c344:	4606      	mov	r6, r0
 800c346:	2800      	cmp	r0, #0
 800c348:	d1e2      	bne.n	800c310 <__ssputs_r+0x70>
 800c34a:	6921      	ldr	r1, [r4, #16]
 800c34c:	4650      	mov	r0, sl
 800c34e:	f000 fa9b 	bl	800c888 <_free_r>
 800c352:	e7c8      	b.n	800c2e6 <__ssputs_r+0x46>

0800c354 <_svfiprintf_r>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	461d      	mov	r5, r3
 800c35a:	898b      	ldrh	r3, [r1, #12]
 800c35c:	061f      	lsls	r7, r3, #24
 800c35e:	b09d      	sub	sp, #116	; 0x74
 800c360:	4680      	mov	r8, r0
 800c362:	460c      	mov	r4, r1
 800c364:	4616      	mov	r6, r2
 800c366:	d50f      	bpl.n	800c388 <_svfiprintf_r+0x34>
 800c368:	690b      	ldr	r3, [r1, #16]
 800c36a:	b96b      	cbnz	r3, 800c388 <_svfiprintf_r+0x34>
 800c36c:	2140      	movs	r1, #64	; 0x40
 800c36e:	f000 fad9 	bl	800c924 <_malloc_r>
 800c372:	6020      	str	r0, [r4, #0]
 800c374:	6120      	str	r0, [r4, #16]
 800c376:	b928      	cbnz	r0, 800c384 <_svfiprintf_r+0x30>
 800c378:	230c      	movs	r3, #12
 800c37a:	f8c8 3000 	str.w	r3, [r8]
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295
 800c382:	e0c8      	b.n	800c516 <_svfiprintf_r+0x1c2>
 800c384:	2340      	movs	r3, #64	; 0x40
 800c386:	6163      	str	r3, [r4, #20]
 800c388:	2300      	movs	r3, #0
 800c38a:	9309      	str	r3, [sp, #36]	; 0x24
 800c38c:	2320      	movs	r3, #32
 800c38e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c392:	2330      	movs	r3, #48	; 0x30
 800c394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c398:	9503      	str	r5, [sp, #12]
 800c39a:	f04f 0b01 	mov.w	fp, #1
 800c39e:	4637      	mov	r7, r6
 800c3a0:	463d      	mov	r5, r7
 800c3a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3a6:	b10b      	cbz	r3, 800c3ac <_svfiprintf_r+0x58>
 800c3a8:	2b25      	cmp	r3, #37	; 0x25
 800c3aa:	d13e      	bne.n	800c42a <_svfiprintf_r+0xd6>
 800c3ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800c3b0:	d00b      	beq.n	800c3ca <_svfiprintf_r+0x76>
 800c3b2:	4653      	mov	r3, sl
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	f7ff ff71 	bl	800c2a0 <__ssputs_r>
 800c3be:	3001      	adds	r0, #1
 800c3c0:	f000 80a4 	beq.w	800c50c <_svfiprintf_r+0x1b8>
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	4453      	add	r3, sl
 800c3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ca:	783b      	ldrb	r3, [r7, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 809d 	beq.w	800c50c <_svfiprintf_r+0x1b8>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	9307      	str	r3, [sp, #28]
 800c3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c3e6:	462f      	mov	r7, r5
 800c3e8:	2205      	movs	r2, #5
 800c3ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c3ee:	4850      	ldr	r0, [pc, #320]	; (800c530 <_svfiprintf_r+0x1dc>)
 800c3f0:	f7f3 feee 	bl	80001d0 <memchr>
 800c3f4:	9b04      	ldr	r3, [sp, #16]
 800c3f6:	b9d0      	cbnz	r0, 800c42e <_svfiprintf_r+0xda>
 800c3f8:	06d9      	lsls	r1, r3, #27
 800c3fa:	bf44      	itt	mi
 800c3fc:	2220      	movmi	r2, #32
 800c3fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c402:	071a      	lsls	r2, r3, #28
 800c404:	bf44      	itt	mi
 800c406:	222b      	movmi	r2, #43	; 0x2b
 800c408:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c40c:	782a      	ldrb	r2, [r5, #0]
 800c40e:	2a2a      	cmp	r2, #42	; 0x2a
 800c410:	d015      	beq.n	800c43e <_svfiprintf_r+0xea>
 800c412:	9a07      	ldr	r2, [sp, #28]
 800c414:	462f      	mov	r7, r5
 800c416:	2000      	movs	r0, #0
 800c418:	250a      	movs	r5, #10
 800c41a:	4639      	mov	r1, r7
 800c41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c420:	3b30      	subs	r3, #48	; 0x30
 800c422:	2b09      	cmp	r3, #9
 800c424:	d94d      	bls.n	800c4c2 <_svfiprintf_r+0x16e>
 800c426:	b1b8      	cbz	r0, 800c458 <_svfiprintf_r+0x104>
 800c428:	e00f      	b.n	800c44a <_svfiprintf_r+0xf6>
 800c42a:	462f      	mov	r7, r5
 800c42c:	e7b8      	b.n	800c3a0 <_svfiprintf_r+0x4c>
 800c42e:	4a40      	ldr	r2, [pc, #256]	; (800c530 <_svfiprintf_r+0x1dc>)
 800c430:	1a80      	subs	r0, r0, r2
 800c432:	fa0b f000 	lsl.w	r0, fp, r0
 800c436:	4318      	orrs	r0, r3
 800c438:	9004      	str	r0, [sp, #16]
 800c43a:	463d      	mov	r5, r7
 800c43c:	e7d3      	b.n	800c3e6 <_svfiprintf_r+0x92>
 800c43e:	9a03      	ldr	r2, [sp, #12]
 800c440:	1d11      	adds	r1, r2, #4
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	9103      	str	r1, [sp, #12]
 800c446:	2a00      	cmp	r2, #0
 800c448:	db01      	blt.n	800c44e <_svfiprintf_r+0xfa>
 800c44a:	9207      	str	r2, [sp, #28]
 800c44c:	e004      	b.n	800c458 <_svfiprintf_r+0x104>
 800c44e:	4252      	negs	r2, r2
 800c450:	f043 0302 	orr.w	r3, r3, #2
 800c454:	9207      	str	r2, [sp, #28]
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	783b      	ldrb	r3, [r7, #0]
 800c45a:	2b2e      	cmp	r3, #46	; 0x2e
 800c45c:	d10c      	bne.n	800c478 <_svfiprintf_r+0x124>
 800c45e:	787b      	ldrb	r3, [r7, #1]
 800c460:	2b2a      	cmp	r3, #42	; 0x2a
 800c462:	d133      	bne.n	800c4cc <_svfiprintf_r+0x178>
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	1d1a      	adds	r2, r3, #4
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	9203      	str	r2, [sp, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	bfb8      	it	lt
 800c470:	f04f 33ff 	movlt.w	r3, #4294967295
 800c474:	3702      	adds	r7, #2
 800c476:	9305      	str	r3, [sp, #20]
 800c478:	4d2e      	ldr	r5, [pc, #184]	; (800c534 <_svfiprintf_r+0x1e0>)
 800c47a:	7839      	ldrb	r1, [r7, #0]
 800c47c:	2203      	movs	r2, #3
 800c47e:	4628      	mov	r0, r5
 800c480:	f7f3 fea6 	bl	80001d0 <memchr>
 800c484:	b138      	cbz	r0, 800c496 <_svfiprintf_r+0x142>
 800c486:	2340      	movs	r3, #64	; 0x40
 800c488:	1b40      	subs	r0, r0, r5
 800c48a:	fa03 f000 	lsl.w	r0, r3, r0
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	4303      	orrs	r3, r0
 800c492:	3701      	adds	r7, #1
 800c494:	9304      	str	r3, [sp, #16]
 800c496:	7839      	ldrb	r1, [r7, #0]
 800c498:	4827      	ldr	r0, [pc, #156]	; (800c538 <_svfiprintf_r+0x1e4>)
 800c49a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c49e:	2206      	movs	r2, #6
 800c4a0:	1c7e      	adds	r6, r7, #1
 800c4a2:	f7f3 fe95 	bl	80001d0 <memchr>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d038      	beq.n	800c51c <_svfiprintf_r+0x1c8>
 800c4aa:	4b24      	ldr	r3, [pc, #144]	; (800c53c <_svfiprintf_r+0x1e8>)
 800c4ac:	bb13      	cbnz	r3, 800c4f4 <_svfiprintf_r+0x1a0>
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	3307      	adds	r3, #7
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	9303      	str	r3, [sp, #12]
 800c4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4bc:	444b      	add	r3, r9
 800c4be:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c0:	e76d      	b.n	800c39e <_svfiprintf_r+0x4a>
 800c4c2:	fb05 3202 	mla	r2, r5, r2, r3
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	460f      	mov	r7, r1
 800c4ca:	e7a6      	b.n	800c41a <_svfiprintf_r+0xc6>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	3701      	adds	r7, #1
 800c4d0:	9305      	str	r3, [sp, #20]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	250a      	movs	r5, #10
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4dc:	3a30      	subs	r2, #48	; 0x30
 800c4de:	2a09      	cmp	r2, #9
 800c4e0:	d903      	bls.n	800c4ea <_svfiprintf_r+0x196>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0c8      	beq.n	800c478 <_svfiprintf_r+0x124>
 800c4e6:	9105      	str	r1, [sp, #20]
 800c4e8:	e7c6      	b.n	800c478 <_svfiprintf_r+0x124>
 800c4ea:	fb05 2101 	mla	r1, r5, r1, r2
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	e7f0      	b.n	800c4d6 <_svfiprintf_r+0x182>
 800c4f4:	ab03      	add	r3, sp, #12
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	4b11      	ldr	r3, [pc, #68]	; (800c540 <_svfiprintf_r+0x1ec>)
 800c4fc:	a904      	add	r1, sp, #16
 800c4fe:	4640      	mov	r0, r8
 800c500:	f3af 8000 	nop.w
 800c504:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c508:	4681      	mov	r9, r0
 800c50a:	d1d6      	bne.n	800c4ba <_svfiprintf_r+0x166>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	065b      	lsls	r3, r3, #25
 800c510:	f53f af35 	bmi.w	800c37e <_svfiprintf_r+0x2a>
 800c514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c516:	b01d      	add	sp, #116	; 0x74
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	ab03      	add	r3, sp, #12
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	4622      	mov	r2, r4
 800c522:	4b07      	ldr	r3, [pc, #28]	; (800c540 <_svfiprintf_r+0x1ec>)
 800c524:	a904      	add	r1, sp, #16
 800c526:	4640      	mov	r0, r8
 800c528:	f000 f882 	bl	800c630 <_printf_i>
 800c52c:	e7ea      	b.n	800c504 <_svfiprintf_r+0x1b0>
 800c52e:	bf00      	nop
 800c530:	0800d03b 	.word	0x0800d03b
 800c534:	0800d041 	.word	0x0800d041
 800c538:	0800d045 	.word	0x0800d045
 800c53c:	00000000 	.word	0x00000000
 800c540:	0800c2a1 	.word	0x0800c2a1

0800c544 <_printf_common>:
 800c544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c548:	4691      	mov	r9, r2
 800c54a:	461f      	mov	r7, r3
 800c54c:	688a      	ldr	r2, [r1, #8]
 800c54e:	690b      	ldr	r3, [r1, #16]
 800c550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c554:	4293      	cmp	r3, r2
 800c556:	bfb8      	it	lt
 800c558:	4613      	movlt	r3, r2
 800c55a:	f8c9 3000 	str.w	r3, [r9]
 800c55e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c562:	4606      	mov	r6, r0
 800c564:	460c      	mov	r4, r1
 800c566:	b112      	cbz	r2, 800c56e <_printf_common+0x2a>
 800c568:	3301      	adds	r3, #1
 800c56a:	f8c9 3000 	str.w	r3, [r9]
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	0699      	lsls	r1, r3, #26
 800c572:	bf42      	ittt	mi
 800c574:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c578:	3302      	addmi	r3, #2
 800c57a:	f8c9 3000 	strmi.w	r3, [r9]
 800c57e:	6825      	ldr	r5, [r4, #0]
 800c580:	f015 0506 	ands.w	r5, r5, #6
 800c584:	d107      	bne.n	800c596 <_printf_common+0x52>
 800c586:	f104 0a19 	add.w	sl, r4, #25
 800c58a:	68e3      	ldr	r3, [r4, #12]
 800c58c:	f8d9 2000 	ldr.w	r2, [r9]
 800c590:	1a9b      	subs	r3, r3, r2
 800c592:	42ab      	cmp	r3, r5
 800c594:	dc28      	bgt.n	800c5e8 <_printf_common+0xa4>
 800c596:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c59a:	6822      	ldr	r2, [r4, #0]
 800c59c:	3300      	adds	r3, #0
 800c59e:	bf18      	it	ne
 800c5a0:	2301      	movne	r3, #1
 800c5a2:	0692      	lsls	r2, r2, #26
 800c5a4:	d42d      	bmi.n	800c602 <_printf_common+0xbe>
 800c5a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	47c0      	blx	r8
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d020      	beq.n	800c5f6 <_printf_common+0xb2>
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	68e5      	ldr	r5, [r4, #12]
 800c5b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5bc:	f003 0306 	and.w	r3, r3, #6
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	bf08      	it	eq
 800c5c4:	1aad      	subeq	r5, r5, r2
 800c5c6:	68a3      	ldr	r3, [r4, #8]
 800c5c8:	6922      	ldr	r2, [r4, #16]
 800c5ca:	bf0c      	ite	eq
 800c5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5d0:	2500      	movne	r5, #0
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	bfc4      	itt	gt
 800c5d6:	1a9b      	subgt	r3, r3, r2
 800c5d8:	18ed      	addgt	r5, r5, r3
 800c5da:	f04f 0900 	mov.w	r9, #0
 800c5de:	341a      	adds	r4, #26
 800c5e0:	454d      	cmp	r5, r9
 800c5e2:	d11a      	bne.n	800c61a <_printf_common+0xd6>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	e008      	b.n	800c5fa <_printf_common+0xb6>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	47c0      	blx	r8
 800c5f2:	3001      	adds	r0, #1
 800c5f4:	d103      	bne.n	800c5fe <_printf_common+0xba>
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fe:	3501      	adds	r5, #1
 800c600:	e7c3      	b.n	800c58a <_printf_common+0x46>
 800c602:	18e1      	adds	r1, r4, r3
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	2030      	movs	r0, #48	; 0x30
 800c608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c60c:	4422      	add	r2, r4
 800c60e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c616:	3302      	adds	r3, #2
 800c618:	e7c5      	b.n	800c5a6 <_printf_common+0x62>
 800c61a:	2301      	movs	r3, #1
 800c61c:	4622      	mov	r2, r4
 800c61e:	4639      	mov	r1, r7
 800c620:	4630      	mov	r0, r6
 800c622:	47c0      	blx	r8
 800c624:	3001      	adds	r0, #1
 800c626:	d0e6      	beq.n	800c5f6 <_printf_common+0xb2>
 800c628:	f109 0901 	add.w	r9, r9, #1
 800c62c:	e7d8      	b.n	800c5e0 <_printf_common+0x9c>
	...

0800c630 <_printf_i>:
 800c630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c634:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c638:	460c      	mov	r4, r1
 800c63a:	7e09      	ldrb	r1, [r1, #24]
 800c63c:	b085      	sub	sp, #20
 800c63e:	296e      	cmp	r1, #110	; 0x6e
 800c640:	4617      	mov	r7, r2
 800c642:	4606      	mov	r6, r0
 800c644:	4698      	mov	r8, r3
 800c646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c648:	f000 80b3 	beq.w	800c7b2 <_printf_i+0x182>
 800c64c:	d822      	bhi.n	800c694 <_printf_i+0x64>
 800c64e:	2963      	cmp	r1, #99	; 0x63
 800c650:	d036      	beq.n	800c6c0 <_printf_i+0x90>
 800c652:	d80a      	bhi.n	800c66a <_printf_i+0x3a>
 800c654:	2900      	cmp	r1, #0
 800c656:	f000 80b9 	beq.w	800c7cc <_printf_i+0x19c>
 800c65a:	2958      	cmp	r1, #88	; 0x58
 800c65c:	f000 8083 	beq.w	800c766 <_printf_i+0x136>
 800c660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c664:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c668:	e032      	b.n	800c6d0 <_printf_i+0xa0>
 800c66a:	2964      	cmp	r1, #100	; 0x64
 800c66c:	d001      	beq.n	800c672 <_printf_i+0x42>
 800c66e:	2969      	cmp	r1, #105	; 0x69
 800c670:	d1f6      	bne.n	800c660 <_printf_i+0x30>
 800c672:	6820      	ldr	r0, [r4, #0]
 800c674:	6813      	ldr	r3, [r2, #0]
 800c676:	0605      	lsls	r5, r0, #24
 800c678:	f103 0104 	add.w	r1, r3, #4
 800c67c:	d52a      	bpl.n	800c6d4 <_printf_i+0xa4>
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6011      	str	r1, [r2, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	da03      	bge.n	800c68e <_printf_i+0x5e>
 800c686:	222d      	movs	r2, #45	; 0x2d
 800c688:	425b      	negs	r3, r3
 800c68a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c68e:	486f      	ldr	r0, [pc, #444]	; (800c84c <_printf_i+0x21c>)
 800c690:	220a      	movs	r2, #10
 800c692:	e039      	b.n	800c708 <_printf_i+0xd8>
 800c694:	2973      	cmp	r1, #115	; 0x73
 800c696:	f000 809d 	beq.w	800c7d4 <_printf_i+0x1a4>
 800c69a:	d808      	bhi.n	800c6ae <_printf_i+0x7e>
 800c69c:	296f      	cmp	r1, #111	; 0x6f
 800c69e:	d020      	beq.n	800c6e2 <_printf_i+0xb2>
 800c6a0:	2970      	cmp	r1, #112	; 0x70
 800c6a2:	d1dd      	bne.n	800c660 <_printf_i+0x30>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	f043 0320 	orr.w	r3, r3, #32
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	e003      	b.n	800c6b6 <_printf_i+0x86>
 800c6ae:	2975      	cmp	r1, #117	; 0x75
 800c6b0:	d017      	beq.n	800c6e2 <_printf_i+0xb2>
 800c6b2:	2978      	cmp	r1, #120	; 0x78
 800c6b4:	d1d4      	bne.n	800c660 <_printf_i+0x30>
 800c6b6:	2378      	movs	r3, #120	; 0x78
 800c6b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6bc:	4864      	ldr	r0, [pc, #400]	; (800c850 <_printf_i+0x220>)
 800c6be:	e055      	b.n	800c76c <_printf_i+0x13c>
 800c6c0:	6813      	ldr	r3, [r2, #0]
 800c6c2:	1d19      	adds	r1, r3, #4
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6011      	str	r1, [r2, #0]
 800c6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e08c      	b.n	800c7ee <_printf_i+0x1be>
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6011      	str	r1, [r2, #0]
 800c6d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6dc:	bf18      	it	ne
 800c6de:	b21b      	sxthne	r3, r3
 800c6e0:	e7cf      	b.n	800c682 <_printf_i+0x52>
 800c6e2:	6813      	ldr	r3, [r2, #0]
 800c6e4:	6825      	ldr	r5, [r4, #0]
 800c6e6:	1d18      	adds	r0, r3, #4
 800c6e8:	6010      	str	r0, [r2, #0]
 800c6ea:	0628      	lsls	r0, r5, #24
 800c6ec:	d501      	bpl.n	800c6f2 <_printf_i+0xc2>
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	e002      	b.n	800c6f8 <_printf_i+0xc8>
 800c6f2:	0668      	lsls	r0, r5, #25
 800c6f4:	d5fb      	bpl.n	800c6ee <_printf_i+0xbe>
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	4854      	ldr	r0, [pc, #336]	; (800c84c <_printf_i+0x21c>)
 800c6fa:	296f      	cmp	r1, #111	; 0x6f
 800c6fc:	bf14      	ite	ne
 800c6fe:	220a      	movne	r2, #10
 800c700:	2208      	moveq	r2, #8
 800c702:	2100      	movs	r1, #0
 800c704:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c708:	6865      	ldr	r5, [r4, #4]
 800c70a:	60a5      	str	r5, [r4, #8]
 800c70c:	2d00      	cmp	r5, #0
 800c70e:	f2c0 8095 	blt.w	800c83c <_printf_i+0x20c>
 800c712:	6821      	ldr	r1, [r4, #0]
 800c714:	f021 0104 	bic.w	r1, r1, #4
 800c718:	6021      	str	r1, [r4, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d13d      	bne.n	800c79a <_printf_i+0x16a>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	f040 808e 	bne.w	800c840 <_printf_i+0x210>
 800c724:	4665      	mov	r5, ip
 800c726:	2a08      	cmp	r2, #8
 800c728:	d10b      	bne.n	800c742 <_printf_i+0x112>
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	07db      	lsls	r3, r3, #31
 800c72e:	d508      	bpl.n	800c742 <_printf_i+0x112>
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	6862      	ldr	r2, [r4, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	bfde      	ittt	le
 800c738:	2330      	movle	r3, #48	; 0x30
 800c73a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c73e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c742:	ebac 0305 	sub.w	r3, ip, r5
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	f8cd 8000 	str.w	r8, [sp]
 800c74c:	463b      	mov	r3, r7
 800c74e:	aa03      	add	r2, sp, #12
 800c750:	4621      	mov	r1, r4
 800c752:	4630      	mov	r0, r6
 800c754:	f7ff fef6 	bl	800c544 <_printf_common>
 800c758:	3001      	adds	r0, #1
 800c75a:	d14d      	bne.n	800c7f8 <_printf_i+0x1c8>
 800c75c:	f04f 30ff 	mov.w	r0, #4294967295
 800c760:	b005      	add	sp, #20
 800c762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c766:	4839      	ldr	r0, [pc, #228]	; (800c84c <_printf_i+0x21c>)
 800c768:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c76c:	6813      	ldr	r3, [r2, #0]
 800c76e:	6821      	ldr	r1, [r4, #0]
 800c770:	1d1d      	adds	r5, r3, #4
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6015      	str	r5, [r2, #0]
 800c776:	060a      	lsls	r2, r1, #24
 800c778:	d50b      	bpl.n	800c792 <_printf_i+0x162>
 800c77a:	07ca      	lsls	r2, r1, #31
 800c77c:	bf44      	itt	mi
 800c77e:	f041 0120 	orrmi.w	r1, r1, #32
 800c782:	6021      	strmi	r1, [r4, #0]
 800c784:	b91b      	cbnz	r3, 800c78e <_printf_i+0x15e>
 800c786:	6822      	ldr	r2, [r4, #0]
 800c788:	f022 0220 	bic.w	r2, r2, #32
 800c78c:	6022      	str	r2, [r4, #0]
 800c78e:	2210      	movs	r2, #16
 800c790:	e7b7      	b.n	800c702 <_printf_i+0xd2>
 800c792:	064d      	lsls	r5, r1, #25
 800c794:	bf48      	it	mi
 800c796:	b29b      	uxthmi	r3, r3
 800c798:	e7ef      	b.n	800c77a <_printf_i+0x14a>
 800c79a:	4665      	mov	r5, ip
 800c79c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7a0:	fb02 3311 	mls	r3, r2, r1, r3
 800c7a4:	5cc3      	ldrb	r3, [r0, r3]
 800c7a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	d1f5      	bne.n	800c79c <_printf_i+0x16c>
 800c7b0:	e7b9      	b.n	800c726 <_printf_i+0xf6>
 800c7b2:	6813      	ldr	r3, [r2, #0]
 800c7b4:	6825      	ldr	r5, [r4, #0]
 800c7b6:	6961      	ldr	r1, [r4, #20]
 800c7b8:	1d18      	adds	r0, r3, #4
 800c7ba:	6010      	str	r0, [r2, #0]
 800c7bc:	0628      	lsls	r0, r5, #24
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	d501      	bpl.n	800c7c6 <_printf_i+0x196>
 800c7c2:	6019      	str	r1, [r3, #0]
 800c7c4:	e002      	b.n	800c7cc <_printf_i+0x19c>
 800c7c6:	066a      	lsls	r2, r5, #25
 800c7c8:	d5fb      	bpl.n	800c7c2 <_printf_i+0x192>
 800c7ca:	8019      	strh	r1, [r3, #0]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6123      	str	r3, [r4, #16]
 800c7d0:	4665      	mov	r5, ip
 800c7d2:	e7b9      	b.n	800c748 <_printf_i+0x118>
 800c7d4:	6813      	ldr	r3, [r2, #0]
 800c7d6:	1d19      	adds	r1, r3, #4
 800c7d8:	6011      	str	r1, [r2, #0]
 800c7da:	681d      	ldr	r5, [r3, #0]
 800c7dc:	6862      	ldr	r2, [r4, #4]
 800c7de:	2100      	movs	r1, #0
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f7f3 fcf5 	bl	80001d0 <memchr>
 800c7e6:	b108      	cbz	r0, 800c7ec <_printf_i+0x1bc>
 800c7e8:	1b40      	subs	r0, r0, r5
 800c7ea:	6060      	str	r0, [r4, #4]
 800c7ec:	6863      	ldr	r3, [r4, #4]
 800c7ee:	6123      	str	r3, [r4, #16]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7f6:	e7a7      	b.n	800c748 <_printf_i+0x118>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	47c0      	blx	r8
 800c802:	3001      	adds	r0, #1
 800c804:	d0aa      	beq.n	800c75c <_printf_i+0x12c>
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	079b      	lsls	r3, r3, #30
 800c80a:	d413      	bmi.n	800c834 <_printf_i+0x204>
 800c80c:	68e0      	ldr	r0, [r4, #12]
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	4298      	cmp	r0, r3
 800c812:	bfb8      	it	lt
 800c814:	4618      	movlt	r0, r3
 800c816:	e7a3      	b.n	800c760 <_printf_i+0x130>
 800c818:	2301      	movs	r3, #1
 800c81a:	464a      	mov	r2, r9
 800c81c:	4639      	mov	r1, r7
 800c81e:	4630      	mov	r0, r6
 800c820:	47c0      	blx	r8
 800c822:	3001      	adds	r0, #1
 800c824:	d09a      	beq.n	800c75c <_printf_i+0x12c>
 800c826:	3501      	adds	r5, #1
 800c828:	68e3      	ldr	r3, [r4, #12]
 800c82a:	9a03      	ldr	r2, [sp, #12]
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	42ab      	cmp	r3, r5
 800c830:	dcf2      	bgt.n	800c818 <_printf_i+0x1e8>
 800c832:	e7eb      	b.n	800c80c <_printf_i+0x1dc>
 800c834:	2500      	movs	r5, #0
 800c836:	f104 0919 	add.w	r9, r4, #25
 800c83a:	e7f5      	b.n	800c828 <_printf_i+0x1f8>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1ac      	bne.n	800c79a <_printf_i+0x16a>
 800c840:	7803      	ldrb	r3, [r0, #0]
 800c842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c846:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c84a:	e76c      	b.n	800c726 <_printf_i+0xf6>
 800c84c:	0800d04c 	.word	0x0800d04c
 800c850:	0800d05d 	.word	0x0800d05d

0800c854 <memmove>:
 800c854:	4288      	cmp	r0, r1
 800c856:	b510      	push	{r4, lr}
 800c858:	eb01 0302 	add.w	r3, r1, r2
 800c85c:	d807      	bhi.n	800c86e <memmove+0x1a>
 800c85e:	1e42      	subs	r2, r0, #1
 800c860:	4299      	cmp	r1, r3
 800c862:	d00a      	beq.n	800c87a <memmove+0x26>
 800c864:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c868:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c86c:	e7f8      	b.n	800c860 <memmove+0xc>
 800c86e:	4283      	cmp	r3, r0
 800c870:	d9f5      	bls.n	800c85e <memmove+0xa>
 800c872:	1881      	adds	r1, r0, r2
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	42d3      	cmn	r3, r2
 800c878:	d100      	bne.n	800c87c <memmove+0x28>
 800c87a:	bd10      	pop	{r4, pc}
 800c87c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c880:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c884:	e7f7      	b.n	800c876 <memmove+0x22>
	...

0800c888 <_free_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4605      	mov	r5, r0
 800c88c:	2900      	cmp	r1, #0
 800c88e:	d045      	beq.n	800c91c <_free_r+0x94>
 800c890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c894:	1f0c      	subs	r4, r1, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfb8      	it	lt
 800c89a:	18e4      	addlt	r4, r4, r3
 800c89c:	f000 f8d2 	bl	800ca44 <__malloc_lock>
 800c8a0:	4a1f      	ldr	r2, [pc, #124]	; (800c920 <_free_r+0x98>)
 800c8a2:	6813      	ldr	r3, [r2, #0]
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	b933      	cbnz	r3, 800c8b6 <_free_r+0x2e>
 800c8a8:	6063      	str	r3, [r4, #4]
 800c8aa:	6014      	str	r4, [r2, #0]
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8b2:	f000 b8c8 	b.w	800ca46 <__malloc_unlock>
 800c8b6:	42a3      	cmp	r3, r4
 800c8b8:	d90c      	bls.n	800c8d4 <_free_r+0x4c>
 800c8ba:	6821      	ldr	r1, [r4, #0]
 800c8bc:	1862      	adds	r2, r4, r1
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	bf04      	itt	eq
 800c8c2:	681a      	ldreq	r2, [r3, #0]
 800c8c4:	685b      	ldreq	r3, [r3, #4]
 800c8c6:	6063      	str	r3, [r4, #4]
 800c8c8:	bf04      	itt	eq
 800c8ca:	1852      	addeq	r2, r2, r1
 800c8cc:	6022      	streq	r2, [r4, #0]
 800c8ce:	6004      	str	r4, [r0, #0]
 800c8d0:	e7ec      	b.n	800c8ac <_free_r+0x24>
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	b10a      	cbz	r2, 800c8dc <_free_r+0x54>
 800c8d8:	42a2      	cmp	r2, r4
 800c8da:	d9fa      	bls.n	800c8d2 <_free_r+0x4a>
 800c8dc:	6819      	ldr	r1, [r3, #0]
 800c8de:	1858      	adds	r0, r3, r1
 800c8e0:	42a0      	cmp	r0, r4
 800c8e2:	d10b      	bne.n	800c8fc <_free_r+0x74>
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	4401      	add	r1, r0
 800c8e8:	1858      	adds	r0, r3, r1
 800c8ea:	4282      	cmp	r2, r0
 800c8ec:	6019      	str	r1, [r3, #0]
 800c8ee:	d1dd      	bne.n	800c8ac <_free_r+0x24>
 800c8f0:	6810      	ldr	r0, [r2, #0]
 800c8f2:	6852      	ldr	r2, [r2, #4]
 800c8f4:	605a      	str	r2, [r3, #4]
 800c8f6:	4401      	add	r1, r0
 800c8f8:	6019      	str	r1, [r3, #0]
 800c8fa:	e7d7      	b.n	800c8ac <_free_r+0x24>
 800c8fc:	d902      	bls.n	800c904 <_free_r+0x7c>
 800c8fe:	230c      	movs	r3, #12
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	e7d3      	b.n	800c8ac <_free_r+0x24>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	1821      	adds	r1, r4, r0
 800c908:	428a      	cmp	r2, r1
 800c90a:	bf04      	itt	eq
 800c90c:	6811      	ldreq	r1, [r2, #0]
 800c90e:	6852      	ldreq	r2, [r2, #4]
 800c910:	6062      	str	r2, [r4, #4]
 800c912:	bf04      	itt	eq
 800c914:	1809      	addeq	r1, r1, r0
 800c916:	6021      	streq	r1, [r4, #0]
 800c918:	605c      	str	r4, [r3, #4]
 800c91a:	e7c7      	b.n	800c8ac <_free_r+0x24>
 800c91c:	bd38      	pop	{r3, r4, r5, pc}
 800c91e:	bf00      	nop
 800c920:	20000948 	.word	0x20000948

0800c924 <_malloc_r>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	1ccd      	adds	r5, r1, #3
 800c928:	f025 0503 	bic.w	r5, r5, #3
 800c92c:	3508      	adds	r5, #8
 800c92e:	2d0c      	cmp	r5, #12
 800c930:	bf38      	it	cc
 800c932:	250c      	movcc	r5, #12
 800c934:	2d00      	cmp	r5, #0
 800c936:	4606      	mov	r6, r0
 800c938:	db01      	blt.n	800c93e <_malloc_r+0x1a>
 800c93a:	42a9      	cmp	r1, r5
 800c93c:	d903      	bls.n	800c946 <_malloc_r+0x22>
 800c93e:	230c      	movs	r3, #12
 800c940:	6033      	str	r3, [r6, #0]
 800c942:	2000      	movs	r0, #0
 800c944:	bd70      	pop	{r4, r5, r6, pc}
 800c946:	f000 f87d 	bl	800ca44 <__malloc_lock>
 800c94a:	4a21      	ldr	r2, [pc, #132]	; (800c9d0 <_malloc_r+0xac>)
 800c94c:	6814      	ldr	r4, [r2, #0]
 800c94e:	4621      	mov	r1, r4
 800c950:	b991      	cbnz	r1, 800c978 <_malloc_r+0x54>
 800c952:	4c20      	ldr	r4, [pc, #128]	; (800c9d4 <_malloc_r+0xb0>)
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	b91b      	cbnz	r3, 800c960 <_malloc_r+0x3c>
 800c958:	4630      	mov	r0, r6
 800c95a:	f000 f863 	bl	800ca24 <_sbrk_r>
 800c95e:	6020      	str	r0, [r4, #0]
 800c960:	4629      	mov	r1, r5
 800c962:	4630      	mov	r0, r6
 800c964:	f000 f85e 	bl	800ca24 <_sbrk_r>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d124      	bne.n	800c9b6 <_malloc_r+0x92>
 800c96c:	230c      	movs	r3, #12
 800c96e:	6033      	str	r3, [r6, #0]
 800c970:	4630      	mov	r0, r6
 800c972:	f000 f868 	bl	800ca46 <__malloc_unlock>
 800c976:	e7e4      	b.n	800c942 <_malloc_r+0x1e>
 800c978:	680b      	ldr	r3, [r1, #0]
 800c97a:	1b5b      	subs	r3, r3, r5
 800c97c:	d418      	bmi.n	800c9b0 <_malloc_r+0x8c>
 800c97e:	2b0b      	cmp	r3, #11
 800c980:	d90f      	bls.n	800c9a2 <_malloc_r+0x7e>
 800c982:	600b      	str	r3, [r1, #0]
 800c984:	50cd      	str	r5, [r1, r3]
 800c986:	18cc      	adds	r4, r1, r3
 800c988:	4630      	mov	r0, r6
 800c98a:	f000 f85c 	bl	800ca46 <__malloc_unlock>
 800c98e:	f104 000b 	add.w	r0, r4, #11
 800c992:	1d23      	adds	r3, r4, #4
 800c994:	f020 0007 	bic.w	r0, r0, #7
 800c998:	1ac3      	subs	r3, r0, r3
 800c99a:	d0d3      	beq.n	800c944 <_malloc_r+0x20>
 800c99c:	425a      	negs	r2, r3
 800c99e:	50e2      	str	r2, [r4, r3]
 800c9a0:	e7d0      	b.n	800c944 <_malloc_r+0x20>
 800c9a2:	428c      	cmp	r4, r1
 800c9a4:	684b      	ldr	r3, [r1, #4]
 800c9a6:	bf16      	itet	ne
 800c9a8:	6063      	strne	r3, [r4, #4]
 800c9aa:	6013      	streq	r3, [r2, #0]
 800c9ac:	460c      	movne	r4, r1
 800c9ae:	e7eb      	b.n	800c988 <_malloc_r+0x64>
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	6849      	ldr	r1, [r1, #4]
 800c9b4:	e7cc      	b.n	800c950 <_malloc_r+0x2c>
 800c9b6:	1cc4      	adds	r4, r0, #3
 800c9b8:	f024 0403 	bic.w	r4, r4, #3
 800c9bc:	42a0      	cmp	r0, r4
 800c9be:	d005      	beq.n	800c9cc <_malloc_r+0xa8>
 800c9c0:	1a21      	subs	r1, r4, r0
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f000 f82e 	bl	800ca24 <_sbrk_r>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d0cf      	beq.n	800c96c <_malloc_r+0x48>
 800c9cc:	6025      	str	r5, [r4, #0]
 800c9ce:	e7db      	b.n	800c988 <_malloc_r+0x64>
 800c9d0:	20000948 	.word	0x20000948
 800c9d4:	2000094c 	.word	0x2000094c

0800c9d8 <_realloc_r>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	4607      	mov	r7, r0
 800c9dc:	4614      	mov	r4, r2
 800c9de:	460e      	mov	r6, r1
 800c9e0:	b921      	cbnz	r1, 800c9ec <_realloc_r+0x14>
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9e8:	f7ff bf9c 	b.w	800c924 <_malloc_r>
 800c9ec:	b922      	cbnz	r2, 800c9f8 <_realloc_r+0x20>
 800c9ee:	f7ff ff4b 	bl	800c888 <_free_r>
 800c9f2:	4625      	mov	r5, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9f8:	f000 f826 	bl	800ca48 <_malloc_usable_size_r>
 800c9fc:	42a0      	cmp	r0, r4
 800c9fe:	d20f      	bcs.n	800ca20 <_realloc_r+0x48>
 800ca00:	4621      	mov	r1, r4
 800ca02:	4638      	mov	r0, r7
 800ca04:	f7ff ff8e 	bl	800c924 <_malloc_r>
 800ca08:	4605      	mov	r5, r0
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0f2      	beq.n	800c9f4 <_realloc_r+0x1c>
 800ca0e:	4631      	mov	r1, r6
 800ca10:	4622      	mov	r2, r4
 800ca12:	f7ff fbcf 	bl	800c1b4 <memcpy>
 800ca16:	4631      	mov	r1, r6
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7ff ff35 	bl	800c888 <_free_r>
 800ca1e:	e7e9      	b.n	800c9f4 <_realloc_r+0x1c>
 800ca20:	4635      	mov	r5, r6
 800ca22:	e7e7      	b.n	800c9f4 <_realloc_r+0x1c>

0800ca24 <_sbrk_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4c06      	ldr	r4, [pc, #24]	; (800ca40 <_sbrk_r+0x1c>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	6023      	str	r3, [r4, #0]
 800ca30:	f000 f812 	bl	800ca58 <_sbrk>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_sbrk_r+0x1a>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_sbrk_r+0x1a>
 800ca3c:	602b      	str	r3, [r5, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20000b14 	.word	0x20000b14

0800ca44 <__malloc_lock>:
 800ca44:	4770      	bx	lr

0800ca46 <__malloc_unlock>:
 800ca46:	4770      	bx	lr

0800ca48 <_malloc_usable_size_r>:
 800ca48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca4c:	1f18      	subs	r0, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfbc      	itt	lt
 800ca52:	580b      	ldrlt	r3, [r1, r0]
 800ca54:	18c0      	addlt	r0, r0, r3
 800ca56:	4770      	bx	lr

0800ca58 <_sbrk>:
 800ca58:	4b04      	ldr	r3, [pc, #16]	; (800ca6c <_sbrk+0x14>)
 800ca5a:	6819      	ldr	r1, [r3, #0]
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	b909      	cbnz	r1, 800ca64 <_sbrk+0xc>
 800ca60:	4903      	ldr	r1, [pc, #12]	; (800ca70 <_sbrk+0x18>)
 800ca62:	6019      	str	r1, [r3, #0]
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	4402      	add	r2, r0
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	4770      	bx	lr
 800ca6c:	20000950 	.word	0x20000950
 800ca70:	20000b18 	.word	0x20000b18

0800ca74 <_init>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr

0800ca80 <_fini>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr
 800ca8c:	0000      	movs	r0, r0
	...
