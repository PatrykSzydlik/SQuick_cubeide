
VL53L0X_Ranging_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b998  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c090  0800c090  00020830  2**0
                  CONTENTS
  4 .ARM          00000008  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c098  0800c098  00020830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c0a0  0800c0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000830  20000000  0800c0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000830  0800c8d8  00020830  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800c8d8  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020830  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026024  00000000  00000000  0002085a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b81  00000000  00000000  0004687e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001650  00000000  00000000  0004a400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d8  00000000  00000000  0004ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a3a4  00000000  00000000  0004cf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001525d  00000000  00000000  000772cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5b6a  00000000  00000000  0008c529  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00182110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000830 	.word	0x20000830
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb10 	.word	0x0800bb10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000834 	.word	0x20000834
 80001cc:	0800bb10 	.word	0x0800bb10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 800057a:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <_I2cFailRecover+0x13c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a4b      	ldr	r2, [pc, #300]	; (80006ac <_I2cFailRecover+0x13c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b49      	ldr	r3, [pc, #292]	; (80006ac <_I2cFailRecover+0x13c>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	4845      	ldr	r0, [pc, #276]	; (80006b0 <_I2cFailRecover+0x140>)
 800059a:	f006 fa20 	bl	80069de <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4842      	ldr	r0, [pc, #264]	; (80006b0 <_I2cFailRecover+0x140>)
 80005a6:	f006 fa1a 	bl	80069de <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 80005aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005b0:	2311      	movs	r3, #17
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	483c      	ldr	r0, [pc, #240]	; (80006b0 <_I2cFailRecover+0x140>)
 80005c0:	f006 f84a 	bl	8006658 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
 80005c8:	e014      	b.n	80005f4 <_I2cFailRecover+0x84>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4837      	ldr	r0, [pc, #220]	; (80006b0 <_I2cFailRecover+0x140>)
 80005d2:	f006 fa04 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f005 fcba 	bl	8005f50 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4833      	ldr	r0, [pc, #204]	; (80006b0 <_I2cFailRecover+0x140>)
 80005e4:	f006 f9fb 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f005 fcb1 	bl	8005f50 <HAL_Delay>
        for( i=0; i<10; i++){
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	3301      	adds	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	2b09      	cmp	r3, #9
 80005f8:	dde7      	ble.n	80005ca <_I2cFailRecover+0x5a>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <_I2cFailRecover+0x140>)
 8000600:	f006 f9d6 	bl	80069b0 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d104      	bne.n	8000614 <_I2cFailRecover+0xa4>
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	623a      	str	r2, [r7, #32]
 8000610:	2b06      	cmp	r3, #6
 8000612:	ddd7      	ble.n	80005c4 <_I2cFailRecover+0x54>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	4825      	ldr	r0, [pc, #148]	; (80006b0 <_I2cFailRecover+0x140>)
 800061a:	f006 f9c9 	bl	80069b0 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d13e      	bne.n	80006a2 <_I2cFailRecover+0x132>
        __GPIOA_CLK_ENABLE();
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <_I2cFailRecover+0x13c>)
 8000626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <_I2cFailRecover+0x13c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <_I2cFailRecover+0x13c>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 800063c:	2320      	movs	r3, #32
 800063e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f006 f801 	bl	8006658 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f006 f9be 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000662:	2021      	movs	r0, #33	; 0x21
 8000664:	f005 fc74 	bl	8005f50 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2120      	movs	r1, #32
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f006 f9b5 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000674:	2021      	movs	r0, #33	; 0x21
 8000676:	f005 fc6b 	bl	8005f50 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f006 f9ac 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000686:	2021      	movs	r0, #33	; 0x21
 8000688:	f005 fc62 	bl	8005f50 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f006 f9a3 	bl	80069de <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8000698:	f44f 7025 	mov.w	r0, #660	; 0x294
 800069c:	f005 fc58 	bl	8005f50 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006a0:	e7d9      	b.n	8000656 <_I2cFailRecover+0xe6>
        }while(1);
    }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 80006ba:	f7ff ff59 	bl	8000570 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e0:	6593      	str	r3, [r2, #88]	; 0x58
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <XNUCLEO53L0A1_I2C1Configure+0xa4>)
 800070c:	f005 ffa4 	bl	8006658 <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <XNUCLEO53L0A1_I2C1Configure+0xac>)
 8000714:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 800071a:	605a      	str	r2, [r3, #4]
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000742:	f006 f97b 	bl	8006a3c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	61fb      	str	r3, [r7, #28]
    return status;
 800074a:	69fb      	ldr	r3, [r7, #28]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	20000968 	.word	0x20000968
 8000760:	40005400 	.word	0x40005400
 8000764:	00300f38 	.word	0x00300f38

08000768 <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 800076e:	f000 fa87 	bl	8000c80 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 8000772:	f7ff ff9f 	bl	80006b4 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8000776:	463a      	mov	r2, r7
 8000778:	2302      	movs	r3, #2
 800077a:	2100      	movs	r1, #0
 800077c:	2086      	movs	r0, #134	; 0x86
 800077e:	f000 f925 	bl	80009cc <_ExpanderRd>
 8000782:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d105      	bne.n	8000796 <XNUCLEO53L0A1_Init+0x2e>
 800078a:	783b      	ldrb	r3, [r7, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <XNUCLEO53L0A1_Init+0x2e>
 8000790:	787b      	ldrb	r3, [r7, #1]
 8000792:	2b16      	cmp	r3, #22
 8000794:	d007      	beq.n	80007a6 <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 8000796:	2386      	movs	r3, #134	; 0x86
 8000798:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800079c:	4931      	ldr	r1, [pc, #196]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800079e:	4832      	ldr	r0, [pc, #200]	; (8000868 <XNUCLEO53L0A1_Init+0x100>)
 80007a0:	f000 fa20 	bl	8000be4 <uart_printf>
        goto done_err;
 80007a4:	e058      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80007a6:	463a      	mov	r2, r7
 80007a8:	2302      	movs	r3, #2
 80007aa:	2100      	movs	r1, #0
 80007ac:	2084      	movs	r0, #132	; 0x84
 80007ae:	f000 f90d 	bl	80009cc <_ExpanderRd>
 80007b2:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <XNUCLEO53L0A1_Init+0x5e>
 80007ba:	783b      	ldrb	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <XNUCLEO53L0A1_Init+0x5e>
 80007c0:	787b      	ldrb	r3, [r7, #1]
 80007c2:	2b16      	cmp	r3, #22
 80007c4:	d007      	beq.n	80007d6 <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 80007c6:	2384      	movs	r3, #132	; 0x84
 80007c8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80007cc:	4925      	ldr	r1, [pc, #148]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 80007ce:	4826      	ldr	r0, [pc, #152]	; (8000868 <XNUCLEO53L0A1_Init+0x100>)
 80007d0:	f000 fa08 	bl	8000be4 <uart_printf>
        goto done_err;
 80007d4:	e040      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <XNUCLEO53L0A1_Init+0x104>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 80007e0:	23ff      	movs	r3, #255	; 0xff
 80007e2:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 80007e4:	463a      	mov	r2, r7
 80007e6:	2302      	movs	r3, #2
 80007e8:	2114      	movs	r1, #20
 80007ea:	2086      	movs	r0, #134	; 0x86
 80007ec:	f000 f920 	bl	8000a30 <_ExpanderWR>
 80007f0:	6078      	str	r0, [r7, #4]
    if (status) {
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 80007f8:	2386      	movs	r3, #134	; 0x86
 80007fa:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80007fe:	4919      	ldr	r1, [pc, #100]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 8000800:	481b      	ldr	r0, [pc, #108]	; (8000870 <XNUCLEO53L0A1_Init+0x108>)
 8000802:	f000 f9ef 	bl	8000be4 <uart_printf>
        goto done_err;
 8000806:	e027      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 800080c:	23bf      	movs	r3, #191	; 0xbf
 800080e:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8000810:	463a      	mov	r2, r7
 8000812:	2302      	movs	r3, #2
 8000814:	2114      	movs	r1, #20
 8000816:	2084      	movs	r0, #132	; 0x84
 8000818:	f000 f90a 	bl	8000a30 <_ExpanderWR>
 800081c:	6078      	str	r0, [r7, #4]
    if (status) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8000824:	2384      	movs	r3, #132	; 0x84
 8000826:	f240 129f 	movw	r2, #415	; 0x19f
 800082a:	490e      	ldr	r1, [pc, #56]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <XNUCLEO53L0A1_Init+0x108>)
 800082e:	f000 f9d9 	bl	8000be4 <uart_printf>
        goto done_err;
 8000832:	e011      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <XNUCLEO53L0A1_Init+0x104>)
 8000836:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800083a:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 800083c:	f000 f8a6 	bl	800098c <_ExpandersSetAllIO>
 8000840:	6078      	str	r0, [r7, #4]
    if( status ){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d006      	beq.n	8000856 <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 8000848:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800084c:	4905      	ldr	r1, [pc, #20]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <XNUCLEO53L0A1_Init+0x10c>)
 8000850:	f000 f9c8 	bl	8000be4 <uart_printf>
 8000854:	e000      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 8000856:	bf00      	nop
    return status;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800bd5c 	.word	0x0800bd5c
 8000868:	0800bb4c 	.word	0x0800bb4c
 800086c:	2000084c 	.word	0x2000084c
 8000870:	0800bb80 	.word	0x0800bb80
 8000874:	0800bba8 	.word	0x0800bba8

08000878 <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d03e      	beq.n	8000906 <XNUCLEO53L0A1_ResetId+0x8e>
 8000888:	2b02      	cmp	r3, #2
 800088a:	dc04      	bgt.n	8000896 <XNUCLEO53L0A1_ResetId+0x1e>
 800088c:	2b00      	cmp	r3, #0
 800088e:	d021      	beq.n	80008d4 <XNUCLEO53L0A1_ResetId+0x5c>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d006      	beq.n	80008a2 <XNUCLEO53L0A1_ResetId+0x2a>
 8000894:	e050      	b.n	8000938 <XNUCLEO53L0A1_ResetId+0xc0>
 8000896:	2b6c      	cmp	r3, #108	; 0x6c
 8000898:	d01c      	beq.n	80008d4 <XNUCLEO53L0A1_ResetId+0x5c>
 800089a:	2b72      	cmp	r3, #114	; 0x72
 800089c:	d033      	beq.n	8000906 <XNUCLEO53L0A1_ResetId+0x8e>
 800089e:	2b63      	cmp	r3, #99	; 0x63
 80008a0:	d14a      	bne.n	8000938 <XNUCLEO53L0A1_ResetId+0xc0>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008a4:	78db      	ldrb	r3, [r3, #3]
 80008a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008ae:	70da      	strb	r2, [r3, #3]
        if( state )
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <XNUCLEO53L0A1_ResetId+0x4c>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008b8:	78db      	ldrb	r3, [r3, #3]
 80008ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008c2:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80008c4:	2301      	movs	r3, #1
 80008c6:	4a2c      	ldr	r2, [pc, #176]	; (8000978 <XNUCLEO53L0A1_ResetId+0x100>)
 80008c8:	2113      	movs	r1, #19
 80008ca:	2084      	movs	r0, #132	; 0x84
 80008cc:	f000 f8b0 	bl	8000a30 <_ExpanderWR>
 80008d0:	60f8      	str	r0, [r7, #12]
        break;
 80008d2:	e03c      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008e0:	705a      	strb	r2, [r3, #1]
        if( state )
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <XNUCLEO53L0A1_ResetId+0x7e>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008f4:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80008f6:	2301      	movs	r3, #1
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <XNUCLEO53L0A1_ResetId+0x104>)
 80008fa:	2113      	movs	r1, #19
 80008fc:	2086      	movs	r0, #134	; 0x86
 80008fe:	f000 f897 	bl	8000a30 <_ExpanderWR>
 8000902:	60f8      	str	r0, [r7, #12]
        break;
 8000904:	e023      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000912:	705a      	strb	r2, [r3, #1]
        if( state )
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <XNUCLEO53L0A1_ResetId+0xb0>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000926:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8000928:	2301      	movs	r3, #1
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <XNUCLEO53L0A1_ResetId+0x104>)
 800092c:	2113      	movs	r1, #19
 800092e:	2086      	movs	r0, #134	; 0x86
 8000930:	f000 f87e 	bl	8000a30 <_ExpanderWR>
 8000934:	60f8      	str	r0, [r7, #12]
        break;
 8000936:	e00a      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800093e:	4910      	ldr	r1, [pc, #64]	; (8000980 <XNUCLEO53L0A1_ResetId+0x108>)
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <XNUCLEO53L0A1_ResetId+0x10c>)
 8000942:	f000 f94f 	bl	8000be4 <uart_printf>
        status = -1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	60fb      	str	r3, [r7, #12]
        goto done;
 800094c:	e00d      	b.n	800096a <XNUCLEO53L0A1_ResetId+0xf2>
    }
//error with valid id
    if( status ){
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d009      	beq.n	8000968 <XNUCLEO53L0A1_ResetId+0xf0>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <XNUCLEO53L0A1_ResetId+0x108>)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <XNUCLEO53L0A1_ResetId+0x110>)
 8000962:	f000 f93f 	bl	8000be4 <uart_printf>
 8000966:	e000      	b.n	800096a <XNUCLEO53L0A1_ResetId+0xf2>
    }
done:
 8000968:	bf00      	nop
    return status;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000084c 	.word	0x2000084c
 8000978:	2000084f 	.word	0x2000084f
 800097c:	2000084d 	.word	0x2000084d
 8000980:	0800bd88 	.word	0x0800bd88
 8000984:	0800bb28 	.word	0x0800bb28
 8000988:	0800bbe8 	.word	0x0800bbe8

0800098c <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8000992:	2302      	movs	r3, #2
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <_ExpandersSetAllIO+0x38>)
 8000996:	2112      	movs	r1, #18
 8000998:	2086      	movs	r0, #134	; 0x86
 800099a:	f000 f849 	bl	8000a30 <_ExpanderWR>
 800099e:	6078      	str	r0, [r7, #4]
    if( status ){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d107      	bne.n	80009b6 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80009a6:	2302      	movs	r3, #2
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <_ExpandersSetAllIO+0x3c>)
 80009aa:	2112      	movs	r1, #18
 80009ac:	2084      	movs	r0, #132	; 0x84
 80009ae:	f000 f83f 	bl	8000a30 <_ExpanderWR>
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	e000      	b.n	80009b8 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 80009b6:	bf00      	nop
done_err:
    return status;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000084c 	.word	0x2000084c
 80009c8:	2000084e 	.word	0x2000084e

080009cc <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b299      	uxth	r1, r3
 80009e4:	f107 0213 	add.w	r2, r7, #19
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <_ExpanderRd+0x60>)
 80009f0:	f006 f8b8 	bl	8006b64 <HAL_I2C_Master_Transmit>
 80009f4:	4603      	mov	r3, r0
 80009f6:	617b      	str	r3, [r7, #20]
        if (status)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	b299      	uxth	r1, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b298      	uxth	r0, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4603      	mov	r3, r0
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <_ExpanderRd+0x60>)
 8000a16:	f006 f9a5 	bl	8006d64 <HAL_I2C_Master_Receive>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e000      	b.n	8000a22 <_ExpanderRd+0x56>
            break;
 8000a20:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000a22:	697b      	ldr	r3, [r7, #20]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000968 	.word	0x20000968

08000a30 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	3301      	adds	r3, #1
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00a fbfe 	bl	800b250 <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	b299      	uxth	r1, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b298      	uxth	r0, r3
 8000a60:	f107 0214 	add.w	r2, r7, #20
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <_ExpanderWR+0x50>)
 8000a6c:	f006 f87a 	bl	8006b64 <HAL_I2C_Master_Transmit>
 8000a70:	4603      	mov	r3, r0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000968 	.word	0x20000968

08000a84 <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e027      	b.n	8000ae2 <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 8000a9e:	5c9b      	ldrb	r3, [r3, r2]
 8000aa0:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aaa:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	217f      	movs	r1, #127	; 0x7f
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	43d2      	mvns	r2, r2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	4a20      	ldr	r2, [pc, #128]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ac8:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ada:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	dc17      	bgt.n	8000b18 <XNUCLEO53L0A1_SetDisplayString+0x94>
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ce      	bne.n	8000a92 <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 8000af4:	e010      	b.n	8000b18 <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	217f      	movs	r1, #127	; 0x7f
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000b10:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	ddeb      	ble.n	8000af6 <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 8000b1e:	f7ff ff35 	bl	800098c <_ExpandersSetAllIO>
 8000b22:	60b8      	str	r0, [r7, #8]
    if( status ){
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 8000b2a:	f240 320f 	movw	r2, #783	; 0x30f
 8000b2e:	4907      	ldr	r1, [pc, #28]	; (8000b4c <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 8000b32:	f000 f857 	bl	8000be4 <uart_printf>
    }
    return status;
 8000b36:	68bb      	ldr	r3, [r7, #8]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800bc24 	.word	0x0800bc24
 8000b44:	20000000 	.word	0x20000000
 8000b48:	2000084c 	.word	0x2000084c
 8000b4c:	0800bda0 	.word	0x0800bda0
 8000b50:	0800bd24 	.word	0x0800bd24

08000b54 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_UART_TxCpltCallback+0x18>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000850 	.word	0x20000850

08000b70 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8000b7a:	e000      	b.n	8000b7e <uart_vprintf+0xe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000b7c:	bf30      	wfi
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <uart_vprintf+0x64>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1fa      	bne.n	8000b7c <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <uart_vprintf+0x64>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <uart_vprintf+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <uart_vprintf+0x68>)
 8000b9c:	f00a fbc0 	bl	800b320 <vsniprintf>
 8000ba0:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	490b      	ldr	r1, [pc, #44]	; (8000bd8 <uart_vprintf+0x68>)
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <uart_vprintf+0x6c>)
 8000bac:	f008 fcaa 	bl	8009504 <HAL_UART_Transmit_DMA>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60bb      	str	r3, [r7, #8]
    if( status ){
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <uart_vprintf+0x5a>
        UartErrCnt++;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <uart_vprintf+0x70>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <uart_vprintf+0x70>)
 8000bc2:	6013      	str	r3, [r2, #0]
        InUsed=0;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <uart_vprintf+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
    }
    return n;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000850 	.word	0x20000850
 8000bd8:	20000854 	.word	0x20000854
 8000bdc:	200009fc 	.word	0x200009fc
 8000be0:	20000954 	.word	0x20000954

08000be4 <uart_printf>:

int uart_printf(const char *msg, ...){
 8000be4:	b40f      	push	{r0, r1, r2, r3}
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8000bec:	e000      	b.n	8000bf0 <uart_printf+0xc>
 8000bee:	bf30      	wfi
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <uart_printf+0x34>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1fa      	bne.n	8000bee <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	6938      	ldr	r0, [r7, #16]
 8000c02:	f7ff ffb5 	bl	8000b70 <uart_vprintf>
 8000c06:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr
 8000c18:	20000850 	.word	0x20000850

08000c1c <VL53L0A1_EXTI_Callback>:
 * @param DevNo     DeviceNumber  (for shared interrupt is  center always)
 * @param GPIO_Pin  EXTI Gpio Pin associated to the interrupt
 *
 * @ingroup   MSP_implement_common
 */
__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    /**
     * built-in Does nothing redefined your's
     */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <DMA1_Channel7_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA1_Channel7_IRQHandler+0x10>)
 8000c36:	f005 fc33 	bl	80064a0 <HAL_DMA_IRQHandler>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200009b4 	.word	0x200009b4

08000c44 <MX_DMA_Init>:
#endif
/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6493      	str	r3, [r2, #72]	; 0x48
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
#if VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
#endif
#if VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2011      	movs	r0, #17
 8000c68:	f005 fa5b 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c6c:	2011      	movs	r0, #17
 8000c6e:	f005 fa74 	bl	800615a <HAL_NVIC_EnableIRQ>
#endif

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <XNUCLEO53L0A1_USART2_UART_Init>:

/* USART2 init function */
void XNUCLEO53L0A1_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  MX_DMA_Init();
 8000c84:	f7ff ffde 	bl	8000c44 <MX_DMA_Init>
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <XNUCLEO53L0A1_USART2_UART_Init+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART2_BAUD_RATE;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cc8:	f008 fbca 	bl	8009460 <HAL_UART_Init>

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200009fc 	.word	0x200009fc
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_UART_MspInit+0xac>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d148      	bne.n	8000d7c <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f005 fc9a 	bl	8006658 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_UART_MspInit+0xb8>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d32:	2210      	movs	r2, #16
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_tx);
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d5c:	f005 fa40 	bl	80061e0 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d64:	661a      	str	r2, [r3, #96]	; 0x60
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif

    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f005 f9d6 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f005 f9ef 	bl	800615a <HAL_NVIC_EnableIRQ>

  }
/* USER CODE BEGIN USART2_MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	200009b4 	.word	0x200009b4
 8000d90:	40020080 	.word	0x40020080

08000d94 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USART2_IRQHandler+0x10>)
 8000d9a:	f008 fc21 	bl	80095e0 <HAL_UART_IRQHandler>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200009fc 	.word	0x200009fc

08000da8 <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b80      	cmp	r3, #128	; 0x80
 8000db6:	d00b      	beq.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x28>
 8000db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbc:	d00e      	beq.n	8000ddc <HAL_GPIO_EXTI_Callback+0x34>
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d000      	beq.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x1c>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 8000dc2:	e011      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff27 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000dce:	e00b      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff21 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000dda:	e005      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff ff1b 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000de6:	bf00      	nop
    }
#endif
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 8000df4:	2010      	movs	r0, #16
 8000df6:	f005 fe09 	bl	8006a0c <HAL_GPIO_EXTI_IRQHandler>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 8000e02:	2080      	movs	r0, #128	; 0x80
 8000e04:	f005 fe02 	bl	8006a0c <HAL_GPIO_EXTI_IRQHandler>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 8000e10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e14:	f005 fdfa 	bl	8006a0c <HAL_GPIO_EXTI_IRQHandler>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	330a      	adds	r3, #10
 8000e2c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f005 fe8c 	bl	8006b64 <HAL_I2C_Master_Transmit>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000e50:	693b      	ldr	r3, [r7, #16]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	330a      	adds	r3, #10
 8000e6a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f005 ff6a 	bl	8006d64 <HAL_I2C_Master_Receive>
 8000e90:	4603      	mov	r3, r0
 8000e92:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000e94:	693b      	ldr	r3, [r7, #16]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	d902      	bls.n	8000ec0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8000eba:	f06f 0303 	mvn.w	r3, #3
 8000ebe:	e016      	b.n	8000eee <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <VL53L0X_WriteMulti+0x58>)
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <VL53L0X_WriteMulti+0x5c>)
 8000ecc:	f00a f9c0 	bl	800b250 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <VL53L0X_WriteMulti+0x58>)
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ff9f 	bl	8000e1c <_I2CWrite>
 8000ede:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000ee6:	23ec      	movs	r3, #236	; 0xec
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000a6c 	.word	0x20000a6c
 8000efc:	20000a6d 	.word	0x20000a6d

08000f00 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000f14:	f107 030b 	add.w	r3, r7, #11
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ff7d 	bl	8000e1c <_I2CWrite>
 8000f22:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f2a:	23ec      	movs	r3, #236	; 0xec
 8000f2c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000f2e:	e00c      	b.n	8000f4a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ff90 	bl	8000e5a <_I2CRead>
 8000f3a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f42:	23ec      	movs	r3, #236	; 0xec
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	e000      	b.n	8000f4a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8000f48:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff4d 	bl	8000e1c <_I2CWrite>
 8000f82:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f8a:	23ec      	movs	r3, #236	; 0xec
 8000f8c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000a6c 	.word	0x20000a6c

08000fa0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
 8000fac:	4613      	mov	r3, r2
 8000fae:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fc4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fcc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff22 	bl	8000e1c <_I2CWrite>
 8000fd8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000fe0:	23ec      	movs	r3, #236	; 0xec
 8000fe2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000a6c 	.word	0x20000a6c

08000ff4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4603      	mov	r3, r0
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	460b      	mov	r3, r1
 8001008:	70bb      	strb	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001012:	f107 020e 	add.w	r2, r7, #14
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f81e 	bl	800105c <VL53L0X_RdByte>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d110      	bne.n	800104e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800102c:	7bba      	ldrb	r2, [r7, #14]
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	4013      	ands	r3, r2
 8001032:	b2da      	uxtb	r2, r3
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	4313      	orrs	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800103c:	7bba      	ldrb	r2, [r7, #14]
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff88 	bl	8000f58 <VL53L0X_WrByte>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e000      	b.n	8001050 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800104e:	bf00      	nop
done:
    return Status;
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800106e:	f107 030b 	add.w	r3, r7, #11
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff fed0 	bl	8000e1c <_I2CWrite>
 800107c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001084:	23ec      	movs	r3, #236	; 0xec
 8001086:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001088:	e00c      	b.n	80010a4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fee3 	bl	8000e5a <_I2CRead>
 8001094:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800109c:	23ec      	movs	r3, #236	; 0xec
 800109e:	75fb      	strb	r3, [r7, #23]
 80010a0:	e000      	b.n	80010a4 <VL53L0X_RdByte+0x48>
    }
done:
 80010a2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	460b      	mov	r3, r1
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80010c2:	f107 030b 	add.w	r3, r7, #11
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fea6 	bl	8000e1c <_I2CWrite>
 80010d0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80010d8:	23ec      	movs	r3, #236	; 0xec
 80010da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80010dc:	e017      	b.n	800110e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80010de:	2202      	movs	r2, #2
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <VL53L0X_RdWord+0x6c>)
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff feb9 	bl	8000e5a <_I2CRead>
 80010e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80010f0:	23ec      	movs	r3, #236	; 0xec
 80010f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80010f4:	e00b      	b.n	800110e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <VL53L0X_RdWord+0x6c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <VL53L0X_RdWord+0x6c>)
 8001102:	785b      	ldrb	r3, [r3, #1]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800110e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000a6c 	.word	0x20000a6c

08001120 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	460b      	mov	r3, r1
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001132:	f107 030b 	add.w	r3, r7, #11
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff fe6e 	bl	8000e1c <_I2CWrite>
 8001140:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001148:	23ec      	movs	r3, #236	; 0xec
 800114a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800114c:	e01b      	b.n	8001186 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800114e:	2204      	movs	r2, #4
 8001150:	4910      	ldr	r1, [pc, #64]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fe81 	bl	8000e5a <_I2CRead>
 8001158:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001160:	23ec      	movs	r3, #236	; 0xec
 8001162:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001164:	e00f      	b.n	8001186 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	061a      	lsls	r2, r3, #24
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <VL53L0X_RdDWord+0x74>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	441a      	add	r2, r3
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001176:	789b      	ldrb	r3, [r3, #2]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	4413      	add	r3, r2
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <VL53L0X_RdDWord+0x74>)
 800117e:	78d2      	ldrb	r2, [r2, #3]
 8001180:	441a      	add	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000a6c 	.word	0x20000a6c

08001198 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80011a4:	2002      	movs	r0, #2
 80011a6:	f004 fed3 	bl	8005f50 <HAL_Delay>
    return status;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fcd3 	bl	8002b72 <VL53L0X_get_offset_calibration_data_micro_meter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	085b      	lsrs	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	218a      	movs	r1, #138	; 0x8a
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff feae 	bl	8000f58 <VL53L0X_WrByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800121a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001222:	2200      	movs	r2, #0
 8001224:	2188      	movs	r1, #136	; 0x88
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe96 	bl	8000f58 <VL53L0X_WrByte>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001240:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800124a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a9e      	ldr	r2, [pc, #632]	; (80014cc <VL53L0X_DataInit+0x2c0>)
 8001252:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a9d      	ldr	r2, [pc, #628]	; (80014d0 <VL53L0X_DataInit+0x2c4>)
 800125a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fab4 	bl	80017d8 <VL53L0X_GetDeviceParameters>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001276:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800127a:	2b00      	cmp	r3, #0
 800127c:	d112      	bne.n	80012a4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800127e:	2300      	movs	r3, #0
 8001280:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001282:	2300      	movs	r3, #0
 8001284:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f103 0410 	add.w	r4, r3, #16
 800128c:	f107 0510 	add.w	r5, r7, #16
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2264      	movs	r2, #100	; 0x64
 80012a8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f44f 7261 	mov.w	r2, #900	; 0x384
 80012b2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80012c6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fe3e 	bl	8000f58 <VL53L0X_WrByte>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80012ea:	2201      	movs	r2, #1
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fe32 	bl	8000f58 <VL53L0X_WrByte>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012fc:	4313      	orrs	r3, r2
 80012fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fe26 	bl	8000f58 <VL53L0X_WrByte>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001314:	4313      	orrs	r3, r2
 8001316:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800131a:	f107 030f 	add.w	r3, r7, #15
 800131e:	461a      	mov	r2, r3
 8001320:	2191      	movs	r1, #145	; 0x91
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fe9a 	bl	800105c <VL53L0X_RdByte>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001330:	4313      	orrs	r3, r2
 8001332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800133e:	2201      	movs	r2, #1
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe08 	bl	8000f58 <VL53L0X_WrByte>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001350:	4313      	orrs	r3, r2
 8001352:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001356:	2200      	movs	r2, #0
 8001358:	21ff      	movs	r1, #255	; 0xff
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fdfc 	bl	8000f58 <VL53L0X_WrByte>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001368:	4313      	orrs	r3, r2
 800136a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800136e:	2200      	movs	r2, #0
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fdf0 	bl	8000f58 <VL53L0X_WrByte>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001380:	4313      	orrs	r3, r2
 8001382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	653b      	str	r3, [r7, #80]	; 0x50
 800138a:	e014      	b.n	80013b6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800138c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001390:	2b00      	cmp	r3, #0
 8001392:	d114      	bne.n	80013be <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001396:	b29b      	uxth	r3, r3
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fd41 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013aa:	4313      	orrs	r3, r2
 80013ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80013b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013b2:	3301      	adds	r3, #1
 80013b4:	653b      	str	r3, [r7, #80]	; 0x50
 80013b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	dde7      	ble.n	800138c <VL53L0X_DataInit+0x180>
 80013bc:	e000      	b.n	80013c0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80013be:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80013c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80013c8:	2200      	movs	r2, #0
 80013ca:	2102      	movs	r1, #2
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fd29 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80013d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d107      	bne.n	80013f0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80013e0:	2200      	movs	r2, #0
 80013e2:	2103      	movs	r1, #3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fd1d 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80013f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d107      	bne.n	8001408 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80013f8:	2200      	movs	r2, #0
 80013fa:	2104      	movs	r1, #4
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fd11 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd05 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001420:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001424:	2b00      	cmp	r3, #0
 8001426:	d108      	bne.n	800143a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001428:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fda6 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800143a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	2101      	movs	r1, #1
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fd99 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 800144e:	4603      	mov	r3, r0
 8001450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001454:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800145c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001460:	2102      	movs	r1, #2
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fd8c 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800146e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001472:	2b00      	cmp	r3, #0
 8001474:	d107      	bne.n	8001486 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001476:	2200      	movs	r2, #0
 8001478:	2103      	movs	r1, #3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fd80 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001486:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	22ff      	movs	r2, #255	; 0xff
 8001492:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	2101      	movs	r1, #1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fd5c 	bl	8000f58 <VL53L0X_WrByte>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80014ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80014be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	00016b85 	.word	0x00016b85
 80014d0:	000970a4 	.word	0x000970a4

080014d4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b09e      	sub	sp, #120	; 0x78
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f009 febb 	bl	800b266 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001510:	2101      	movs	r1, #1
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f002 fa7f 	bl	8003a16 <VL53L0X_get_info_from_device>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800152c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001534:	2b01      	cmp	r3, #1
 8001536:	d80d      	bhi.n	8001554 <VL53L0X_StaticInit+0x80>
 8001538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8001540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001542:	2b20      	cmp	r3, #32
 8001544:	d806      	bhi.n	8001554 <VL53L0X_StaticInit+0x80>
 8001546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10e      	bne.n	800156c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800154e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001550:	2b0c      	cmp	r3, #12
 8001552:	d90b      	bls.n	800156c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001554:	f107 0218 	add.w	r2, r7, #24
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fd01 	bl	8002f66 <VL53L0X_perform_ref_spad_management>
 8001564:	4603      	mov	r3, r0
 8001566:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800156a:	e009      	b.n	8001580 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800156c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001570:	461a      	mov	r2, r3
 8001572:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f001 ff02 	bl	800337e <VL53L0X_set_reference_spads>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8001580:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <VL53L0X_StaticInit+0x300>)
 8001582:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8001584:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10f      	bne.n	80015ac <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001596:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80015a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80015a6:	e001      	b.n	80015ac <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80015a8:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <VL53L0X_StaticInit+0x300>)
 80015aa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80015ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80015b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f003 fdd0 	bl	800515c <VL53L0X_load_tuning_settings>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80015c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2304      	movs	r3, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 f8fb 	bl	80027d0 <VL53L0X_SetGpioConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80015e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d121      	bne.n	800162c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80015e8:	2201      	movs	r2, #1
 80015ea:	21ff      	movs	r1, #255	; 0xff
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fcb3 	bl	8000f58 <VL53L0X_WrByte>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80015f8:	f107 031a 	add.w	r3, r7, #26
 80015fc:	461a      	mov	r2, r3
 80015fe:	2184      	movs	r1, #132	; 0x84
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fd55 	bl	80010b0 <VL53L0X_RdWord>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160e:	4313      	orrs	r3, r2
 8001610:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001614:	2200      	movs	r2, #0
 8001616:	21ff      	movs	r1, #255	; 0xff
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fc9d 	bl	8000f58 <VL53L0X_WrByte>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001626:	4313      	orrs	r3, r2
 8001628:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800162c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001634:	8b7b      	ldrh	r3, [r7, #26]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001640:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8c2 	bl	80017d8 <VL53L0X_GetDeviceParameters>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800165a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800165e:	2b00      	cmp	r3, #0
 8001660:	d110      	bne.n	8001684 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001662:	f107 0319 	add.w	r3, r7, #25
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f99f 	bl	80019ac <VL53L0X_GetFractionEnable>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001674:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001678:	2b00      	cmp	r3, #0
 800167a:	d103      	bne.n	8001684 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800167c:	7e7a      	ldrb	r2, [r7, #25]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001684:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10e      	bne.n	80016aa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f103 0410 	add.w	r4, r3, #16
 8001692:	f107 051c 	add.w	r5, r7, #28
 8001696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80016aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d111      	bne.n	80016d6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80016b2:	f107 0319 	add.w	r3, r7, #25
 80016b6:	461a      	mov	r2, r3
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fcce 	bl	800105c <VL53L0X_RdByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80016c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80016ce:	7e7a      	ldrb	r2, [r7, #25]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80016d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d107      	bne.n	80016ee <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f9d6 	bl	8001a94 <VL53L0X_SetSequenceStepEnable>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80016ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80016f6:	2200      	movs	r2, #0
 80016f8:	2102      	movs	r1, #2
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f9ca 	bl	8001a94 <VL53L0X_SetSequenceStepEnable>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001706:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001716:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800171e:	f107 0313 	add.w	r3, r7, #19
 8001722:	461a      	mov	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f99d 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001732:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800173a:	7cfa      	ldrb	r2, [r7, #19]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001742:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800174a:	f107 0313 	add.w	r3, r7, #19
 800174e:	461a      	mov	r2, r3
 8001750:	2101      	movs	r1, #1
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f987 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800175e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001766:	7cfa      	ldrb	r2, [r7, #19]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800176e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	461a      	mov	r2, r3
 800177c:	2103      	movs	r1, #3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 fec8 	bl	8004514 <get_sequence_step_timeout>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800178a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800179a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	461a      	mov	r2, r3
 80017a8:	2104      	movs	r1, #4
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f002 feb2 	bl	8004514 <get_sequence_step_timeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80017b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80017c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3770      	adds	r7, #112	; 0x70
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000010 	.word	0x20000010

080017d8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8cc 	bl	8001988 <VL53L0X_GetDeviceMode>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3308      	adds	r3, #8
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fa92 	bl	8001d2c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d107      	bne.n	8001832 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3310      	adds	r3, #16
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fac7 	bl	8001dbc <VL53L0X_GetXTalkCompensationRateMegaCps>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3314      	adds	r3, #20
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fcb8 	bl	80011b6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d134      	bne.n	80018bc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e02a      	b.n	80018ae <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d12a      	bne.n	80018b6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	b299      	uxth	r1, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3308      	adds	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	461a      	mov	r2, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fbe6 	bl	8002044 <VL53L0X_GetLimitCheckValue>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	4313      	orrs	r3, r2
 8001880:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d117      	bne.n	80018ba <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	b299      	uxth	r1, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3318      	adds	r3, #24
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	461a      	mov	r2, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fb4f 	bl	8001f3c <VL53L0X_GetLimitCheckEnable>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	ddd1      	ble.n	8001858 <VL53L0X_GetDeviceParameters+0x80>
 80018b4:	e002      	b.n	80018bc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80018ba:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80018bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	333c      	adds	r3, #60	; 0x3c
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fc48 	bl	8002160 <VL53L0X_GetWrapAroundCheckEnable>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f894 	bl	8001a10 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	2b15      	cmp	r3, #21
 800190c:	d832      	bhi.n	8001974 <VL53L0X_SetDeviceMode+0x7c>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <VL53L0X_SetDeviceMode+0x1c>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800196d 	.word	0x0800196d
 8001918:	0800196d 	.word	0x0800196d
 800191c:	08001975 	.word	0x08001975
 8001920:	0800196d 	.word	0x0800196d
 8001924:	08001975 	.word	0x08001975
 8001928:	08001975 	.word	0x08001975
 800192c:	08001975 	.word	0x08001975
 8001930:	08001975 	.word	0x08001975
 8001934:	08001975 	.word	0x08001975
 8001938:	08001975 	.word	0x08001975
 800193c:	08001975 	.word	0x08001975
 8001940:	08001975 	.word	0x08001975
 8001944:	08001975 	.word	0x08001975
 8001948:	08001975 	.word	0x08001975
 800194c:	08001975 	.word	0x08001975
 8001950:	08001975 	.word	0x08001975
 8001954:	08001975 	.word	0x08001975
 8001958:	08001975 	.word	0x08001975
 800195c:	08001975 	.word	0x08001975
 8001960:	08001975 	.word	0x08001975
 8001964:	0800196d 	.word	0x0800196d
 8001968:	0800196d 	.word	0x0800196d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	741a      	strb	r2, [r3, #16]
		break;
 8001972:	e001      	b.n	8001978 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001974:	23f8      	movs	r3, #248	; 0xf8
 8001976:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7c1a      	ldrb	r2, [r3, #16]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	2109      	movs	r1, #9
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fb4c 	bl	800105c <VL53L0X_RdByte>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80019c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d106      	bne.n	80019de <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f003 fa1d 	bl	8004e3a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f003 faea 	bl	8004ffa <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
 8001a42:	4613      	mov	r3, r2
 8001a44:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001a4a:	78ba      	ldrb	r2, [r7, #2]
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f002 ff32 	bl	80048ba <VL53L0X_set_vcsel_pulse_period>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f003 f9a4 	bl	8004dcc <VL53L0X_get_vcsel_pulse_period>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001ab0:	f107 030f 	add.w	r3, r7, #15
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff facf 	bl	800105c <VL53L0X_RdByte>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d15a      	bne.n	8001b84 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8001ace:	78bb      	ldrb	r3, [r7, #2]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d12b      	bne.n	8001b2c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d825      	bhi.n	8001b26 <VL53L0X_SetSequenceStepEnable+0x92>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001af5 	.word	0x08001af5
 8001ae4:	08001aff 	.word	0x08001aff
 8001ae8:	08001b09 	.word	0x08001b09
 8001aec:	08001b13 	.word	0x08001b13
 8001af0:	08001b1d 	.word	0x08001b1d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001af4:	7dbb      	ldrb	r3, [r7, #22]
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	75bb      	strb	r3, [r7, #22]
				break;
 8001afc:	e043      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001b04:	75bb      	strb	r3, [r7, #22]
				break;
 8001b06:	e03e      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	75bb      	strb	r3, [r7, #22]
				break;
 8001b10:	e039      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8001b12:	7dbb      	ldrb	r3, [r7, #22]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	75bb      	strb	r3, [r7, #22]
				break;
 8001b1a:	e034      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001b1c:	7dbb      	ldrb	r3, [r7, #22]
 8001b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b22:	75bb      	strb	r3, [r7, #22]
				break;
 8001b24:	e02f      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b26:	23fc      	movs	r3, #252	; 0xfc
 8001b28:	75fb      	strb	r3, [r7, #23]
 8001b2a:	e02c      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d825      	bhi.n	8001b7e <VL53L0X_SetSequenceStepEnable+0xea>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b4d 	.word	0x08001b4d
 8001b3c:	08001b57 	.word	0x08001b57
 8001b40:	08001b61 	.word	0x08001b61
 8001b44:	08001b6b 	.word	0x08001b6b
 8001b48:	08001b75 	.word	0x08001b75
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8001b4c:	7dbb      	ldrb	r3, [r7, #22]
 8001b4e:	f023 0310 	bic.w	r3, r3, #16
 8001b52:	75bb      	strb	r3, [r7, #22]
				break;
 8001b54:	e017      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8001b56:	7dbb      	ldrb	r3, [r7, #22]
 8001b58:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001b5c:	75bb      	strb	r3, [r7, #22]
				break;
 8001b5e:	e012      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	75bb      	strb	r3, [r7, #22]
				break;
 8001b68:	e00d      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8001b6a:	7dbb      	ldrb	r3, [r7, #22]
 8001b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b70:	75bb      	strb	r3, [r7, #22]
				break;
 8001b72:	e008      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8001b74:	7dbb      	ldrb	r3, [r7, #22]
 8001b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7a:	75bb      	strb	r3, [r7, #22]
				break;
 8001b7c:	e003      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b7e:	23fc      	movs	r3, #252	; 0xfc
 8001b80:	75fb      	strb	r3, [r7, #23]
 8001b82:	e000      	b.n	8001b86 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8001b84:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	7dba      	ldrb	r2, [r7, #22]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d01e      	beq.n	8001bcc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8001b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8001b96:	7dbb      	ldrb	r3, [r7, #22]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff f9db 	bl	8000f58 <VL53L0X_WrByte>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7dba      	ldrb	r2, [r7, #22]
 8001bb2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff0f 	bl	80019ea <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	4613      	mov	r3, r2
 8001be8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001bf4:	7afb      	ldrb	r3, [r7, #11]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d836      	bhi.n	8001c68 <sequence_step_enabled+0x90>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <sequence_step_enabled+0x28>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c15 	.word	0x08001c15
 8001c04:	08001c27 	.word	0x08001c27
 8001c08:	08001c39 	.word	0x08001c39
 8001c0c:	08001c4b 	.word	0x08001c4b
 8001c10:	08001c5d 	.word	0x08001c5d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001c14:	7abb      	ldrb	r3, [r7, #10]
 8001c16:	111b      	asrs	r3, r3, #4
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	701a      	strb	r2, [r3, #0]
		break;
 8001c24:	e022      	b.n	8001c6c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001c26:	7abb      	ldrb	r3, [r7, #10]
 8001c28:	10db      	asrs	r3, r3, #3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	701a      	strb	r2, [r3, #0]
		break;
 8001c36:	e019      	b.n	8001c6c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001c38:	7abb      	ldrb	r3, [r7, #10]
 8001c3a:	109b      	asrs	r3, r3, #2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	701a      	strb	r2, [r3, #0]
		break;
 8001c48:	e010      	b.n	8001c6c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001c4a:	7abb      	ldrb	r3, [r7, #10]
 8001c4c:	119b      	asrs	r3, r3, #6
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	701a      	strb	r2, [r3, #0]
		break;
 8001c5a:	e007      	b.n	8001c6c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001c5c:	7abb      	ldrb	r3, [r7, #10]
 8001c5e:	09db      	lsrs	r3, r3, #7
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	701a      	strb	r2, [r3, #0]
		break;
 8001c66:	e001      	b.n	8001c6c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c68:	23fc      	movs	r3, #252	; 0xfc
 8001c6a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001c8e:	f107 030e 	add.w	r3, r7, #14
 8001c92:	461a      	mov	r2, r3
 8001c94:	2101      	movs	r1, #1
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff f9e0 	bl	800105c <VL53L0X_RdByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8001ca8:	7bba      	ldrb	r2, [r7, #14]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff92 	bl	8001bd8 <sequence_step_enabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d108      	bne.n	8001cd2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001cc0:	7bba      	ldrb	r2, [r7, #14]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff85 	bl	8001bd8 <sequence_step_enabled>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001cda:	7bba      	ldrb	r2, [r7, #14]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ff78 	bl	8001bd8 <sequence_step_enabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001cf4:	7bba      	ldrb	r2, [r7, #14]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff6b 	bl	8001bd8 <sequence_step_enabled>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001d0e:	7bba      	ldrb	r2, [r7, #14]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3304      	adds	r3, #4
 8001d14:	2104      	movs	r1, #4
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff5e 	bl	8001bd8 <sequence_step_enabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	461a      	mov	r2, r3
 8001d40:	21f8      	movs	r1, #248	; 0xf8
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff f9b4 	bl	80010b0 <VL53L0X_RdWord>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff f9df 	bl	8001120 <VL53L0X_RdDWord>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8001d6e:	89bb      	ldrh	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	89ba      	ldrh	r2, [r7, #12]
 8001d78:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7f1b      	ldrb	r3, [r3, #28]
 8001da6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	7bba      	ldrb	r2, [r7, #14]
 8001dac:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001dca:	f107 030e 	add.w	r3, r7, #14
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff f96c 	bl	80010b0 <VL53L0X_RdWord>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
 8001dfc:	e00b      	b.n	8001e16 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d902      	bls.n	8001e50 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001e4a:	23fc      	movs	r3, #252	; 0xfc
 8001e4c:	75fb      	strb	r3, [r7, #23]
 8001e4e:	e05b      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	e00a      	b.n	8001e7a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d841      	bhi.n	8001f04 <VL53L0X_SetLimitCheckEnable+0xe0>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <VL53L0X_SetLimitCheckEnable+0x64>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001eab 	.word	0x08001eab
 8001e90:	08001ec1 	.word	0x08001ec1
 8001e94:	08001ecb 	.word	0x08001ecb
 8001e98:	08001ed5 	.word	0x08001ed5
 8001e9c:	08001eed 	.word	0x08001eed

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8001ea8:	e02e      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2144      	movs	r1, #68	; 0x44
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff f873 	bl	8000fa0 <VL53L0X_WrWord>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]

			break;
 8001ebe:	e023      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001ec8:	e01e      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001ed2:	e019      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001eda:	7b7b      	ldrb	r3, [r7, #13]
 8001edc:	22fe      	movs	r2, #254	; 0xfe
 8001ede:	2160      	movs	r1, #96	; 0x60
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f887 	bl	8000ff4 <VL53L0X_UpdateByte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001eea:	e00d      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001ef2:	7b7b      	ldrb	r3, [r7, #13]
 8001ef4:	22ef      	movs	r2, #239	; 0xef
 8001ef6:	2160      	movs	r1, #96	; 0x60
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff f87b 	bl	8000ff4 <VL53L0X_UpdateByte>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001f02:	e001      	b.n	8001f08 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f04:	23fc      	movs	r3, #252	; 0xfc
 8001f06:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001f22:	e005      	b.n	8001f30 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	460b      	mov	r3, r1
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d905      	bls.n	8001f60 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f54:	23fc      	movs	r3, #252	; 0xfc
 8001f56:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e008      	b.n	8001f72 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f6a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7dba      	ldrb	r2, [r7, #22]
 8001f70:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f9c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001fa4:	897b      	ldrh	r3, [r7, #10]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	e040      	b.n	8002036 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001fb4:	897b      	ldrh	r3, [r7, #10]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d830      	bhi.n	800201c <VL53L0X_SetLimitCheckValue+0x9c>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <VL53L0X_SetLimitCheckValue+0x40>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd9 	.word	0x08001fd9
 8001fc4:	08001fe1 	.word	0x08001fe1
 8001fc8:	08001ff7 	.word	0x08001ff7
 8001fcc:	08001fff 	.word	0x08001fff
 8001fd0:	08002007 	.word	0x08002007
 8001fd4:	08002007 	.word	0x08002007

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001fde:	e01f      	b.n	8002020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2144      	movs	r1, #68	; 0x44
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe ffd8 	bl	8000fa0 <VL53L0X_WrWord>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001ff4:	e014      	b.n	8002020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001ffc:	e010      	b.n	8002020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002004:	e00c      	b.n	8002020 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	2164      	movs	r1, #100	; 0x64
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe ffc5 	bl	8000fa0 <VL53L0X_WrWord>
 8002016:	4603      	mov	r3, r0
 8002018:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800201a:	e001      	b.n	8002020 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800201c:	23fc      	movs	r3, #252	; 0xfc
 800201e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002028:	897b      	ldrh	r3, [r7, #10]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	330c      	adds	r3, #12
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop

08002044 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	460b      	mov	r3, r1
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002052:	2300      	movs	r3, #0
 8002054:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d847      	bhi.n	80020f0 <VL53L0X_GetLimitCheckValue+0xac>
 8002060:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <VL53L0X_GetLimitCheckValue+0x24>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	08002081 	.word	0x08002081
 800206c:	0800208d 	.word	0x0800208d
 8002070:	080020b3 	.word	0x080020b3
 8002074:	080020bf 	.word	0x080020bf
 8002078:	080020cb 	.word	0x080020cb
 800207c:	080020cb 	.word	0x080020cb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	77bb      	strb	r3, [r7, #30]
		break;
 800208a:	e033      	b.n	80020f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800208c:	f107 0316 	add.w	r3, r7, #22
 8002090:	461a      	mov	r2, r3
 8002092:	2144      	movs	r1, #68	; 0x44
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff f80b 	bl	80010b0 <VL53L0X_RdWord>
 800209a:	4603      	mov	r3, r0
 800209c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800209e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80020a6:	8afb      	ldrh	r3, [r7, #22]
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	77bb      	strb	r3, [r7, #30]
		break;
 80020b0:	e020      	b.n	80020f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77bb      	strb	r3, [r7, #30]
		break;
 80020bc:	e01a      	b.n	80020f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77bb      	strb	r3, [r7, #30]
		break;
 80020c8:	e014      	b.n	80020f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80020ca:	f107 0316 	add.w	r3, r7, #22
 80020ce:	461a      	mov	r2, r3
 80020d0:	2164      	movs	r1, #100	; 0x64
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7fe ffec 	bl	80010b0 <VL53L0X_RdWord>
 80020d8:	4603      	mov	r3, r0
 80020da:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80020dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80020e4:	8afb      	ldrh	r3, [r7, #22]
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	77bb      	strb	r3, [r7, #30]
		break;
 80020ee:	e001      	b.n	80020f4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80020f0:	23fc      	movs	r3, #252	; 0xfc
 80020f2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80020f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12a      	bne.n	8002152 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80020fc:	7fbb      	ldrb	r3, [r7, #30]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d124      	bne.n	800214c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d110      	bne.n	800212a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002108:	897b      	ldrh	r3, [r7, #10]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	330c      	adds	r3, #12
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002128:	e013      	b.n	8002152 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	330c      	adds	r3, #12
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800214a:	e002      	b.n	8002152 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002152:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop

08002160 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800216e:	f107 030e 	add.w	r3, r7, #14
 8002172:	461a      	mov	r2, r3
 8002174:	2101      	movs	r1, #1
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe ff70 	bl	800105c <VL53L0X_RdByte>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002188:	7bba      	ldrb	r2, [r7, #14]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	da03      	bge.n	80021a0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e002      	b.n	80021a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80021d0:	f107 030e 	add.w	r3, r7, #14
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fbd6 	bl	8001988 <VL53L0X_GetDeviceMode>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f898 	bl	8002324 <VL53L0X_StartMeasurement>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 fb3e 	bl	8003882 <VL53L0X_measurement_poll_for_completion>
 8002206:	4603      	mov	r3, r0
 8002208:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002212:	7bbb      	ldrb	r3, [r7, #14]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2203      	movs	r2, #3
 800221c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8002220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002238:	2300      	movs	r3, #0
 800223a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800223c:	2301      	movs	r3, #1
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 fae0 	bl	8003808 <VL53L0X_perform_ref_calibration>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800224c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800226e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002270:	7dbb      	ldrb	r3, [r7, #22]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002276:	7dbb      	ldrb	r3, [r7, #22]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d002      	beq.n	8002282 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800227c:	7dbb      	ldrb	r3, [r7, #22]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d147      	bne.n	8002312 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	f107 0210 	add.w	r2, r7, #16
 800228a:	2101      	movs	r1, #1
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fbc3 	bl	8002a18 <VL53L0X_GetInterruptThresholds>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800229c:	d803      	bhi.n	80022a6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800229e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80022a0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80022a4:	d935      	bls.n	8002312 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80022a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d131      	bne.n	8002312 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80022b4:	491a      	ldr	r1, [pc, #104]	; (8002320 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f002 ff50 	bl	800515c <VL53L0X_load_tuning_settings>
 80022bc:	4603      	mov	r3, r0
 80022be:	75fb      	strb	r3, [r7, #23]
 80022c0:	e027      	b.n	8002312 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80022c2:	2204      	movs	r2, #4
 80022c4:	21ff      	movs	r1, #255	; 0xff
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fe46 	bl	8000f58 <VL53L0X_WrByte>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2170      	movs	r1, #112	; 0x70
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fe3c 	bl	8000f58 <VL53L0X_WrByte>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80022ea:	2200      	movs	r2, #0
 80022ec:	21ff      	movs	r1, #255	; 0xff
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fe32 	bl	8000f58 <VL53L0X_WrByte>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80022fe:	2200      	movs	r2, #0
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fe28 	bl	8000f58 <VL53L0X_WrByte>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	4313      	orrs	r3, r2
 8002310:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002312:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000104 	.word	0x20000104

08002324 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002334:	f107 030e 	add.w	r3, r7, #14
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fb24 	bl	8001988 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002340:	2201      	movs	r2, #1
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe fe07 	bl	8000f58 <VL53L0X_WrByte>
 800234a:	4603      	mov	r3, r0
 800234c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800234e:	2201      	movs	r2, #1
 8002350:	21ff      	movs	r1, #255	; 0xff
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fe00 	bl	8000f58 <VL53L0X_WrByte>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe fdf9 	bl	8000f58 <VL53L0X_WrByte>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002370:	461a      	mov	r2, r3
 8002372:	2191      	movs	r1, #145	; 0x91
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fdef 	bl	8000f58 <VL53L0X_WrByte>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800237e:	2201      	movs	r2, #1
 8002380:	2100      	movs	r1, #0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fde8 	bl	8000f58 <VL53L0X_WrByte>
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800238c:	2200      	movs	r2, #0
 800238e:	21ff      	movs	r1, #255	; 0xff
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe fde1 	bl	8000f58 <VL53L0X_WrByte>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fdda 	bl	8000f58 <VL53L0X_WrByte>
 80023a4:	4603      	mov	r3, r0
 80023a6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d037      	beq.n	800241e <VL53L0X_StartMeasurement+0xfa>
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d04f      	beq.n	8002452 <VL53L0X_StartMeasurement+0x12e>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d167      	bne.n	8002486 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fdcc 	bl	8000f58 <VL53L0X_WrByte>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80023c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d15d      	bne.n	800248c <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 80023da:	f107 030d 	add.w	r3, r7, #13
 80023de:	461a      	mov	r2, r3
 80023e0:	2100      	movs	r1, #0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fe3a 	bl	800105c <VL53L0X_RdByte>
 80023e8:	4603      	mov	r3, r0
 80023ea:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3301      	adds	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80023f2:	7b7a      	ldrb	r2, [r7, #13]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4013      	ands	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d107      	bne.n	8002410 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8002400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800240e:	d3e1      	bcc.n	80023d4 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002416:	d339      	bcc.n	800248c <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002418:	23f9      	movs	r3, #249	; 0xf9
 800241a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800241c:	e036      	b.n	800248c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800241e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002426:	2101      	movs	r1, #1
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff15 	bl	8002258 <VL53L0X_CheckAndLoadInterruptSettings>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002432:	2202      	movs	r2, #2
 8002434:	2100      	movs	r1, #0
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fd8e 	bl	8000f58 <VL53L0X_WrByte>
 800243c:	4603      	mov	r3, r0
 800243e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d123      	bne.n	8002490 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2204      	movs	r2, #4
 800244c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002450:	e01e      	b.n	8002490 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800245a:	2101      	movs	r1, #1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fefb 	bl	8002258 <VL53L0X_CheckAndLoadInterruptSettings>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002466:	2204      	movs	r2, #4
 8002468:	2100      	movs	r1, #0
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fd74 	bl	8000f58 <VL53L0X_WrByte>
 8002470:	4603      	mov	r3, r0
 8002472:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002484:	e006      	b.n	8002494 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002486:	23f8      	movs	r3, #248	; 0xf8
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	e004      	b.n	8002496 <VL53L0X_StartMeasurement+0x172>
		break;
 800248c:	bf00      	nop
 800248e:	e002      	b.n	8002496 <VL53L0X_StartMeasurement+0x172>
		break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <VL53L0X_StartMeasurement+0x172>
		break;
 8002494:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80024b6:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d112      	bne.n	80024e4 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fb1d 	bl	8002b04 <VL53L0X_GetInterruptMaskStatus>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d103      	bne.n	80024dc <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e01c      	b.n	8002516 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e018      	b.n	8002516 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80024e4:	f107 030d 	add.w	r3, r7, #13
 80024e8:	461a      	mov	r2, r3
 80024ea:	2114      	movs	r1, #20
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fe fdb5 	bl	800105c <VL53L0X_RdByte>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e002      	b.n	8002516 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b096      	sub	sp, #88	; 0x58
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002534:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002538:	230c      	movs	r3, #12
 800253a:	2114      	movs	r1, #20
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7fe fcdf 	bl	8000f00 <VL53L0X_ReadMulti>
 8002542:	4603      	mov	r3, r0
 8002544:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002548:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 80d2 	bne.w	80026f6 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800255e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002562:	b29b      	uxth	r3, r3
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	b29a      	uxth	r2, r3
 8002568:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800256c:	b29b      	uxth	r3, r3
 800256e:	4413      	add	r3, r2
 8002570:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800257a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800257e:	b29b      	uxth	r3, r3
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	b29a      	uxth	r2, r3
 8002584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002588:	b29b      	uxth	r3, r3
 800258a:	4413      	add	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	025b      	lsls	r3, r3, #9
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002596:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002598:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800259c:	b29b      	uxth	r3, r3
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80025ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80025ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80025d6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80025d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80025e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80025ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80025f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f8:	d047      	beq.n	800268a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80025fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025fc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002608:	4a58      	ldr	r2, [pc, #352]	; (800276c <VL53L0X_GetRangingMeasurementData+0x248>)
 800260a:	fb82 1203 	smull	r1, r2, r2, r3
 800260e:	1192      	asrs	r2, r2, #6
 8002610:	17db      	asrs	r3, r3, #31
 8002612:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002614:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7f1b      	ldrb	r3, [r3, #28]
 8002622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02d      	beq.n	800268a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800262e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002630:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	121b      	asrs	r3, r3, #8
 800263a:	461a      	mov	r2, r3
				if ((SignalRate
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8002642:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800264a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800264e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002652:	e016      	b.n	8002682 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8002654:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002658:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800265c:	e011      	b.n	8002682 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800265e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002664:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002668:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800266a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800266e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002672:	121b      	asrs	r3, r3, #8
 8002674:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8002676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002678:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800267e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002682:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002686:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800268a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002692:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800269e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	75da      	strb	r2, [r3, #23]
 80026ac:	e006      	b.n	80026bc <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80026b4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80026bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80026c0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80026c4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f003 f9ea 	bl	8005aac <VL53L0X_get_pal_range_status>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80026e6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80026ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80026f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12f      	bne.n	800275e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f107 040c 	add.w	r4, r7, #12
 8002704:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8002708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002710:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002718:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002726:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800272c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002732:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002738:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800273e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002744:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800274e:	f107 050c 	add.w	r5, r7, #12
 8002752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800275a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800275e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002762:	4618      	mov	r0, r3
 8002764:	3750      	adds	r7, #80	; 0x50
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	bf00      	nop
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800277e:	2100      	movs	r1, #0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff f8b9 	bl	80018f8 <VL53L0X_SetDeviceMode>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fd16 	bl	80021c4 <VL53L0X_PerformSingleMeasurement>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800279c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff febc 	bl	8002524 <VL53L0X_GetRangingMeasurementData>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80027b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80027b8:	2100      	movs	r1, #0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f962 	bl	8002a84 <VL53L0X_ClearInterruptMask>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	70fb      	strb	r3, [r7, #3]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70bb      	strb	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80027f4:	23f6      	movs	r3, #246	; 0xf6
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e107      	b.n	8002a0a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80027fa:	78bb      	ldrb	r3, [r7, #2]
 80027fc:	2b14      	cmp	r3, #20
 80027fe:	d110      	bne.n	8002822 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002800:	7e3b      	ldrb	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002806:	2310      	movs	r3, #16
 8002808:	73bb      	strb	r3, [r7, #14]
 800280a:	e001      	b.n	8002810 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800280c:	2301      	movs	r3, #1
 800280e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	461a      	mov	r2, r3
 8002814:	2184      	movs	r1, #132	; 0x84
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fb9e 	bl	8000f58 <VL53L0X_WrByte>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e0f3      	b.n	8002a0a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002822:	78bb      	ldrb	r3, [r7, #2]
 8002824:	2b15      	cmp	r3, #21
 8002826:	f040 8097 	bne.w	8002958 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800282a:	2201      	movs	r2, #1
 800282c:	21ff      	movs	r1, #255	; 0xff
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fb92 	bl	8000f58 <VL53L0X_WrByte>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	4313      	orrs	r3, r2
 800283c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fb88 	bl	8000f58 <VL53L0X_WrByte>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	4313      	orrs	r3, r2
 8002850:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002852:	2200      	movs	r2, #0
 8002854:	21ff      	movs	r1, #255	; 0xff
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fb7e 	bl	8000f58 <VL53L0X_WrByte>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	4313      	orrs	r3, r2
 8002864:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002866:	2201      	movs	r2, #1
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fb74 	bl	8000f58 <VL53L0X_WrByte>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	4313      	orrs	r3, r2
 8002878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800287a:	2202      	movs	r2, #2
 800287c:	2185      	movs	r1, #133	; 0x85
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fb6a 	bl	8000f58 <VL53L0X_WrByte>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	4313      	orrs	r3, r2
 800288c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800288e:	2204      	movs	r2, #4
 8002890:	21ff      	movs	r1, #255	; 0xff
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fb60 	bl	8000f58 <VL53L0X_WrByte>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	4313      	orrs	r3, r2
 80028a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80028a2:	2200      	movs	r2, #0
 80028a4:	21cd      	movs	r1, #205	; 0xcd
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fb56 	bl	8000f58 <VL53L0X_WrByte>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80028b6:	2211      	movs	r2, #17
 80028b8:	21cc      	movs	r1, #204	; 0xcc
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fb4c 	bl	8000f58 <VL53L0X_WrByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80028ca:	2207      	movs	r2, #7
 80028cc:	21ff      	movs	r1, #255	; 0xff
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fb42 	bl	8000f58 <VL53L0X_WrByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	4313      	orrs	r3, r2
 80028dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80028de:	2200      	movs	r2, #0
 80028e0:	21be      	movs	r1, #190	; 0xbe
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb38 	bl	8000f58 <VL53L0X_WrByte>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80028f2:	2206      	movs	r2, #6
 80028f4:	21ff      	movs	r1, #255	; 0xff
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fb2e 	bl	8000f58 <VL53L0X_WrByte>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4313      	orrs	r3, r2
 8002904:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002906:	2209      	movs	r2, #9
 8002908:	21cc      	movs	r1, #204	; 0xcc
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fb24 	bl	8000f58 <VL53L0X_WrByte>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	4313      	orrs	r3, r2
 8002918:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800291a:	2200      	movs	r2, #0
 800291c:	21ff      	movs	r1, #255	; 0xff
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe fb1a 	bl	8000f58 <VL53L0X_WrByte>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	4313      	orrs	r3, r2
 800292c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800292e:	2201      	movs	r2, #1
 8002930:	21ff      	movs	r1, #255	; 0xff
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fb10 	bl	8000f58 <VL53L0X_WrByte>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	4313      	orrs	r3, r2
 8002940:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fb06 	bl	8000f58 <VL53L0X_WrByte>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	4313      	orrs	r3, r2
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e058      	b.n	8002a0a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8002958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d121      	bne.n	80029a4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d81b      	bhi.n	800299e <VL53L0X_SetGpioConfig+0x1ce>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <VL53L0X_SetGpioConfig+0x19c>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	08002981 	.word	0x08002981
 8002970:	08002987 	.word	0x08002987
 8002974:	0800298d 	.word	0x0800298d
 8002978:	08002993 	.word	0x08002993
 800297c:	08002999 	.word	0x08002999
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8002980:	2300      	movs	r3, #0
 8002982:	73bb      	strb	r3, [r7, #14]
				break;
 8002984:	e00f      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8002986:	2301      	movs	r3, #1
 8002988:	73bb      	strb	r3, [r7, #14]
				break;
 800298a:	e00c      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800298c:	2302      	movs	r3, #2
 800298e:	73bb      	strb	r3, [r7, #14]
				break;
 8002990:	e009      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8002992:	2303      	movs	r3, #3
 8002994:	73bb      	strb	r3, [r7, #14]
				break;
 8002996:	e006      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8002998:	2304      	movs	r3, #4
 800299a:	73bb      	strb	r3, [r7, #14]
				break;
 800299c:	e003      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800299e:	23f5      	movs	r3, #245	; 0xf5
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e000      	b.n	80029a6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80029a4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	461a      	mov	r2, r3
 80029b2:	210a      	movs	r1, #10
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fe facf 	bl	8000f58 <VL53L0X_WrByte>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80029c6:	7e3b      	ldrb	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73bb      	strb	r3, [r7, #14]
 80029d0:	e001      	b.n	80029d6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80029d2:	2310      	movs	r3, #16
 80029d4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	22ef      	movs	r2, #239	; 0xef
 80029da:	2184      	movs	r1, #132	; 0x84
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe fb09 	bl	8000ff4 <VL53L0X_UpdateByte>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	787a      	ldrb	r2, [r7, #1]
 80029f2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80029fe:	2100      	movs	r1, #0
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f83f 	bl	8002a84 <VL53L0X_ClearInterruptMask>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	460b      	mov	r3, r1
 8002a26:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	461a      	mov	r2, r3
 8002a32:	210e      	movs	r1, #14
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fe fb3b 	bl	80010b0 <VL53L0X_RdWord>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	045b      	lsls	r3, r3, #17
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <VL53L0X_GetInterruptThresholds+0x68>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10f      	bne.n	8002a74 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	461a      	mov	r2, r3
 8002a5a:	210c      	movs	r1, #12
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7fe fb27 	bl	80010b0 <VL53L0X_RdWord>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002a66:	8abb      	ldrh	r3, [r7, #20]
 8002a68:	045b      	lsls	r3, r3, #17
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <VL53L0X_GetInterruptThresholds+0x68>)
 8002a6e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	1ffe0000 	.word	0x1ffe0000

08002a84 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8002a96:	2201      	movs	r2, #1
 8002a98:	210b      	movs	r1, #11
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fa5c 	bl	8000f58 <VL53L0X_WrByte>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	210b      	movs	r1, #11
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe fa55 	bl	8000f58 <VL53L0X_WrByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002ab8:	f107 030d 	add.w	r3, r7, #13
 8002abc:	461a      	mov	r2, r3
 8002abe:	2113      	movs	r1, #19
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fe facb 	bl	800105c <VL53L0X_RdByte>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d803      	bhi.n	8002aee <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0d3      	beq.n	8002a96 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8002aee:	7bbb      	ldrb	r3, [r7, #14]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002af4:	23f4      	movs	r3, #244	; 0xf4
 8002af6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8002b12:	f107 030e 	add.w	r3, r7, #14
 8002b16:	461a      	mov	r2, r3
 8002b18:	2113      	movs	r1, #19
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe fa9e 	bl	800105c <VL53L0X_RdByte>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8002b24:	7bbb      	ldrb	r3, [r7, #14]
 8002b26:	f003 0207 	and.w	r2, r3, #7
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	f003 0318 	and.w	r3, r3, #24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8002b38:	23fa      	movs	r3, #250	; 0xfa
 8002b3a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fa02 	bl	8002f66 <VL53L0X_perform_ref_spad_management>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8002b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8002b80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b84:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	461a      	mov	r2, r3
 8002b92:	2128      	movs	r1, #40	; 0x28
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe fa8b 	bl	80010b0 <VL53L0X_RdWord>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11e      	bne.n	8002be4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dd0b      	ble.n	8002bd4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002bbc:	893a      	ldrh	r2, [r7, #8]
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
					* 250;
 8002bc8:	23fa      	movs	r3, #250	; 0xfa
 8002bca:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e007      	b.n	8002be4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	23fa      	movs	r3, #250	; 0xfa
 8002bdc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8002be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b08b      	sub	sp, #44	; 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	fb01 f202 	mul.w	r2, r1, r2
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e030      	b.n	8002c92 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11e      	bne.n	8002c84 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002c46:	7ffa      	ldrb	r2, [r7, #31]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	fa42 f303 	asr.w	r3, r2, r3
 8002c4e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8002c54:	e016      	b.n	8002c84 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <get_next_good_spad+0x88>
				success = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	fb02 f203 	mul.w	r2, r2, r3
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	601a      	str	r2, [r3, #0]
				break;
 8002c76:	e009      	b.n	8002c8c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	3301      	adds	r3, #1
 8002c82:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3e4      	bcc.n	8002c56 <get_next_good_spad+0x66>
				coarseIndex++) {
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3301      	adds	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d202      	bcs.n	8002ca0 <get_next_good_spad+0xb0>
 8002c9a:	7fbb      	ldrb	r3, [r7, #30]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0c7      	beq.n	8002c30 <get_next_good_spad+0x40>
		}
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	372c      	adds	r7, #44	; 0x2c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <is_aperture+0x30>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <is_aperture+0x22>
		isAperture = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	200002bc 	.word	0x200002bc

08002ce0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	fb01 f202 	mul.w	r2, r1, r2
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002d18:	23ce      	movs	r3, #206	; 0xce
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e010      	b.n	8002d40 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b25a      	sxtb	r2, r3
 8002d28:	2101      	movs	r1, #1
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b259      	sxtb	r1, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]

	return status;
 8002d40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3724      	adds	r7, #36	; 0x24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002d58:	2306      	movs	r3, #6
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	21b0      	movs	r1, #176	; 0xb0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe f89e 	bl	8000ea0 <VL53L0X_WriteMulti>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8002d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002d7e:	2306      	movs	r3, #6
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	21b0      	movs	r1, #176	; 0xb0
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe f8bb 	bl	8000f00 <VL53L0X_ReadMulti>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08c      	sub	sp, #48	; 0x30
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	460b      	mov	r3, r1
 8002da8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db2:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002db8:	2300      	movs	r3, #0
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbc:	e02b      	b.n	8002e16 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff12 	bl	8002bf0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d103      	bne.n	8002ddc <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002dd4:	23ce      	movs	r3, #206	; 0xce
 8002dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002dda:	e020      	b.n	8002e1e <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de2:	4413      	add	r3, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff61 	bl	8002cac <is_aperture>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002df4:	23ce      	movs	r3, #206	; 0xce
 8002df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002dfa:	e010      	b.n	8002e1e <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	f7ff ff6b 	bl	8002ce0 <enable_spad_bit>
		currentSpad++;
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	3301      	adds	r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3cf      	bcc.n	8002dbe <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff8d 	bl	8002d4e <set_ref_spad_map>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002e3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d121      	bne.n	8002e86 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff ff93 	bl	8002d74 <get_ref_spad_map>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002e58:	e011      	b.n	8002e7e <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	4413      	add	r3, r2
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	f107 0114 	add.w	r1, r7, #20
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	440b      	add	r3, r1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d003      	beq.n	8002e78 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002e70:	23ce      	movs	r3, #206	; 0xce
 8002e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002e76:	e006      	b.n	8002e86 <enable_ref_spads+0xec>
			}
			i++;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3e9      	bcc.n	8002e5a <enable_ref_spads+0xc0>
		}
	}
	return status;
 8002e86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3730      	adds	r7, #48	; 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b08a      	sub	sp, #40	; 0x28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8002eb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002eba:	22c0      	movs	r2, #192	; 0xc0
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f84a 	bl	8000f58 <VL53L0X_WrByte>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fc49 	bl	8002770 <VL53L0X_PerformSingleRangingMeasurement>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002eec:	2201      	movs	r2, #1
 8002eee:	21ff      	movs	r1, #255	; 0xff
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fe f831 	bl	8000f58 <VL53L0X_WrByte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	21b6      	movs	r1, #182	; 0xb6
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe f8d1 	bl	80010b0 <VL53L0X_RdWord>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	21ff      	movs	r1, #255	; 0xff
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fe f819 	bl	8000f58 <VL53L0X_WrByte>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d112      	bne.n	8002f5a <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fe f80b 	bl	8000f58 <VL53L0X_WrByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f56:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8002f5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3728      	adds	r7, #40	; 0x28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002f66:	b590      	push	{r4, r7, lr}
 8002f68:	b09d      	sub	sp, #116	; 0x74
 8002f6a:	af06      	add	r7, sp, #24
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002f78:	23b4      	movs	r3, #180	; 0xb4
 8002f7a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8002f82:	232c      	movs	r3, #44	; 0x2c
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002f92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002f96:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002fa0:	2306      	movs	r3, #6
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd0:	e009      	b.n	8002fe6 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3f1      	bcc.n	8002fd2 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	21ff      	movs	r1, #255	; 0xff
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7fd ffb0 	bl	8000f58 <VL53L0X_WrByte>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002ffe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003006:	2200      	movs	r2, #0
 8003008:	214f      	movs	r1, #79	; 0x4f
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7fd ffa4 	bl	8000f58 <VL53L0X_WrByte>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003016:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800301e:	222c      	movs	r2, #44	; 0x2c
 8003020:	214e      	movs	r1, #78	; 0x4e
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7fd ff98 	bl	8000f58 <VL53L0X_WrByte>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800302e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003036:	2200      	movs	r2, #0
 8003038:	21ff      	movs	r1, #255	; 0xff
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7fd ff8c 	bl	8000f58 <VL53L0X_WrByte>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003046:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800304e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003052:	461a      	mov	r2, r3
 8003054:	21b6      	movs	r1, #182	; 0xb6
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7fd ff7e 	bl	8000f58 <VL53L0X_WrByte>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003062:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800306a:	2200      	movs	r2, #0
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7fd ff72 	bl	8000f58 <VL53L0X_WrByte>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800307a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003082:	f107 0210 	add.w	r2, r7, #16
 8003086:	f107 0111 	add.w	r1, r7, #17
 800308a:	2300      	movs	r3, #0
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fbbb 	bl	8003808 <VL53L0X_perform_ref_calibration>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003098:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800309c:	2b00      	cmp	r3, #0
 800309e:	d121      	bne.n	80030e4 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80030a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a6:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80030bc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030c0:	f107 0218 	add.w	r2, r7, #24
 80030c4:	9204      	str	r2, [sp, #16]
 80030c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c8:	9203      	str	r2, [sp, #12]
 80030ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4623      	mov	r3, r4
 80030d6:	4602      	mov	r2, r0
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff fe5e 	bl	8002d9a <enable_ref_spads>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d174      	bne.n	80031d6 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80030f0:	f107 0312 	add.w	r3, r7, #18
 80030f4:	4619      	mov	r1, r3
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fecb 	bl	8002e92 <perform_ref_signal_measurement>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003102:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003106:	2b00      	cmp	r3, #0
 8003108:	d161      	bne.n	80031ce <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800310a:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800310c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800310e:	429a      	cmp	r2, r3
 8003110:	d25d      	bcs.n	80031ce <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003112:	2300      	movs	r3, #0
 8003114:	64bb      	str	r3, [r7, #72]	; 0x48
 8003116:	e009      	b.n	800312c <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	4413      	add	r3, r2
 800311e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	3301      	adds	r3, #1
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
 800312c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	429a      	cmp	r2, r3
 8003132:	d3f1      	bcc.n	8003118 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003134:	e002      	b.n	800313c <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	3301      	adds	r3, #1
 800313a:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800313c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003142:	4413      	add	r3, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fdb1 	bl	8002cac <is_aperture>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	429a      	cmp	r2, r3
 8003156:	d3ee      	bcc.n	8003136 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003158:	2301      	movs	r3, #1
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800315c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315e:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800316c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003170:	f107 0218 	add.w	r2, r7, #24
 8003174:	9204      	str	r2, [sp, #16]
 8003176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003178:	9203      	str	r2, [sp, #12]
 800317a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800317c:	9202      	str	r2, [sp, #8]
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	4623      	mov	r3, r4
 8003186:	4602      	mov	r2, r0
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe06 	bl	8002d9a <enable_ref_spads>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003194:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11b      	bne.n	80031d4 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80031a0:	f107 0312 	add.w	r3, r7, #18
 80031a4:	4619      	mov	r1, r3
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fe73 	bl	8002e92 <perform_ref_signal_measurement>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80031b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80031ba:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80031bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031be:	429a      	cmp	r2, r3
 80031c0:	d208      	bcs.n	80031d4 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80031cc:	e002      	b.n	80031d4 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d2:	e000      	b.n	80031d6 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80031d4:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80031d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 80af 	bne.w	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80031e0:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80031e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f240 80aa 	bls.w	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80031ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003200:	4618      	mov	r0, r3
 8003202:	f008 f825 	bl	800b250 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003206:	8a7b      	ldrh	r3, [r7, #18]
 8003208:	461a      	mov	r2, r3
 800320a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bfb8      	it	lt
 8003212:	425b      	neglt	r3, r3
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800321c:	e086      	b.n	800332c <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800322a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800322c:	f7ff fce0 	bl	8002bf0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d103      	bne.n	8003240 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003238:	23ce      	movs	r3, #206	; 0xce
 800323a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800323e:	e07e      	b.n	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003240:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4413      	add	r3, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fd2f 	bl	8002cac <is_aperture>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800325e:	e06e      	b.n	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003262:	3301      	adds	r3, #1
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fd33 	bl	8002ce0 <enable_spad_bit>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003280:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328a:	3301      	adds	r3, #1
 800328c:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003294:	4619      	mov	r1, r3
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fd59 	bl	8002d4e <set_ref_spad_map>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80032a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d146      	bne.n	8003338 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80032aa:	f107 0312 	add.w	r3, r7, #18
 80032ae:	4619      	mov	r1, r3
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff fdee 	bl	8002e92 <perform_ref_signal_measurement>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80032bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d13b      	bne.n	800333c <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80032c4:	8a7b      	ldrh	r3, [r7, #18]
 80032c6:	461a      	mov	r2, r3
 80032c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bfb8      	it	lt
 80032d0:	425b      	neglt	r3, r3
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80032d8:	429a      	cmp	r2, r3
 80032da:	d21c      	bcs.n	8003316 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d914      	bls.n	800330e <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff fd2f 	bl	8002d4e <set_ref_spad_map>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80032fc:	f107 011c 	add.w	r1, r7, #28
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	4618      	mov	r0, r3
 8003304:	f007 ffa4 	bl	800b250 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	3b01      	subs	r3, #1
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003314:	e00a      	b.n	800332c <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003326:	4618      	mov	r0, r3
 8003328:	f007 ff92 	bl	800b250 <memcpy>
		while (!complete) {
 800332c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003330:	2b00      	cmp	r3, #0
 8003332:	f43f af74 	beq.w	800321e <VL53L0X_perform_ref_spad_management+0x2b8>
 8003336:	e002      	b.n	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003338:	bf00      	nop
 800333a:	e000      	b.n	800333e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800333c:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800333e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003342:	2b00      	cmp	r3, #0
 8003344:	d115      	bne.n	8003372 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334a:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003352:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003372:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003376:	4618      	mov	r0, r3
 8003378:	375c      	adds	r7, #92	; 0x5c
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}

0800337e <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b093      	sub	sp, #76	; 0x4c
 8003382:	af06      	add	r7, sp, #24
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003396:	23b4      	movs	r3, #180	; 0xb4
 8003398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800339c:	2306      	movs	r3, #6
 800339e:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80033a0:	232c      	movs	r3, #44	; 0x2c
 80033a2:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80033a4:	2201      	movs	r2, #1
 80033a6:	21ff      	movs	r1, #255	; 0xff
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7fd fdd5 	bl	8000f58 <VL53L0X_WrByte>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80033b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80033bc:	2200      	movs	r2, #0
 80033be:	214f      	movs	r1, #79	; 0x4f
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7fd fdc9 	bl	8000f58 <VL53L0X_WrByte>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80033cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80033d4:	222c      	movs	r2, #44	; 0x2c
 80033d6:	214e      	movs	r1, #78	; 0x4e
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7fd fdbd 	bl	8000f58 <VL53L0X_WrByte>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80033e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80033ec:	2200      	movs	r2, #0
 80033ee:	21ff      	movs	r1, #255	; 0xff
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7fd fdb1 	bl	8000f58 <VL53L0X_WrByte>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80033fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003408:	461a      	mov	r2, r3
 800340a:	21b6      	movs	r1, #182	; 0xb6
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7fd fda3 	bl	8000f58 <VL53L0X_WrByte>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e009      	b.n	8003432 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	4413      	add	r3, r2
 8003424:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	3301      	adds	r3, #1
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	429a      	cmp	r2, r3
 8003438:	d3f1      	bcc.n	800341e <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d011      	beq.n	8003464 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003440:	e002      	b.n	8003448 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3301      	adds	r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003448:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	4413      	add	r3, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fc2b 	bl	8002cac <is_aperture>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <VL53L0X_set_reference_spads+0xe6>
 800345c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d3ee      	bcc.n	8003442 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8003470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003474:	79f9      	ldrb	r1, [r7, #7]
 8003476:	f107 0214 	add.w	r2, r7, #20
 800347a:	9204      	str	r2, [sp, #16]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	9202      	str	r2, [sp, #8]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4623      	mov	r3, r4
 800348c:	4602      	mov	r2, r0
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fc83 	bl	8002d9a <enable_ref_spads>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800349a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80034bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3734      	adds	r7, #52	; 0x34
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}

080034c8 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fd fd33 	bl	8000f58 <VL53L0X_WrByte>
 80034f2:	4603      	mov	r3, r0
 80034f4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9bf 	bl	8003882 <VL53L0X_measurement_poll_for_completion>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003510:	2100      	movs	r1, #0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fab6 	bl	8002a84 <VL53L0X_ClearInterruptMask>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800351c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fd15 	bl	8000f58 <VL53L0X_WrByte>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	4608      	mov	r0, r1
 8003548:	4611      	mov	r1, r2
 800354a:	461a      	mov	r2, r3
 800354c:	4603      	mov	r3, r0
 800354e:	70fb      	strb	r3, [r7, #3]
 8003550:	460b      	mov	r3, r1
 8003552:	70bb      	strb	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003560:	2201      	movs	r2, #1
 8003562:	21ff      	movs	r1, #255	; 0xff
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fd fcf7 	bl	8000f58 <VL53L0X_WrByte>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	4313      	orrs	r3, r2
 8003572:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003574:	2200      	movs	r2, #0
 8003576:	2100      	movs	r1, #0
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fd fced 	bl	8000f58 <VL53L0X_WrByte>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	4313      	orrs	r3, r2
 8003586:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003588:	2200      	movs	r2, #0
 800358a:	21ff      	movs	r1, #255	; 0xff
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fce3 	bl	8000f58 <VL53L0X_WrByte>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	4313      	orrs	r3, r2
 800359a:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01e      	beq.n	80035e0 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80035a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	21cb      	movs	r1, #203	; 0xcb
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fd54 	bl	800105c <VL53L0X_RdByte>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80035be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02a      	beq.n	800361c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80035c6:	f107 030e 	add.w	r3, r7, #14
 80035ca:	461a      	mov	r2, r3
 80035cc:	21ee      	movs	r1, #238	; 0xee
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fd44 	bl	800105c <VL53L0X_RdByte>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	4313      	orrs	r3, r2
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e01d      	b.n	800361c <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80035e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80035e8:	78bb      	ldrb	r3, [r7, #2]
 80035ea:	461a      	mov	r2, r3
 80035ec:	21cb      	movs	r1, #203	; 0xcb
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fcb2 	bl	8000f58 <VL53L0X_WrByte>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80035fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003606:	787b      	ldrb	r3, [r7, #1]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	21ee      	movs	r1, #238	; 0xee
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fd fcf1 	bl	8000ff4 <VL53L0X_UpdateByte>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	4313      	orrs	r3, r2
 800361a:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800361c:	2201      	movs	r2, #1
 800361e:	21ff      	movs	r1, #255	; 0xff
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fc99 	bl	8000f58 <VL53L0X_WrByte>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	4313      	orrs	r3, r2
 800362e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003630:	2201      	movs	r2, #1
 8003632:	2100      	movs	r1, #0
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fd fc8f 	bl	8000f58 <VL53L0X_WrByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	4313      	orrs	r3, r2
 8003642:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003644:	2200      	movs	r2, #0
 8003646:	21ff      	movs	r1, #255	; 0xff
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fc85 	bl	8000f58 <VL53L0X_WrByte>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	4313      	orrs	r3, r2
 8003656:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003658:	7bbb      	ldrb	r3, [r7, #14]
 800365a:	f023 0310 	bic.w	r3, r3, #16
 800365e:	b2da      	uxtb	r2, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	701a      	strb	r2, [r3, #0]

	return Status;
 8003664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af04      	add	r7, sp, #16
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	460b      	mov	r3, r1
 8003680:	71fb      	strb	r3, [r7, #7]
 8003682:	4613      	mov	r3, r2
 8003684:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80036a6:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80036a8:	2201      	movs	r2, #1
 80036aa:	2101      	movs	r1, #1
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7fd fc53 	bl	8000f58 <VL53L0X_WrByte>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80036b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80036be:	2140      	movs	r1, #64	; 0x40
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff ff01 	bl	80034c8 <VL53L0X_perform_single_ref_calibration>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80036ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d115      	bne.n	80036fe <VL53L0X_perform_vhv_calibration+0x8e>
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d112      	bne.n	80036fe <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80036d8:	7d39      	ldrb	r1, [r7, #20]
 80036da:	7d7a      	ldrb	r2, [r7, #21]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	2301      	movs	r3, #1
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	f107 0313 	add.w	r3, r7, #19
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	460b      	mov	r3, r1
 80036f0:	2101      	movs	r1, #1
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff23 	bl	800353e <VL53L0X_ref_calibration_io>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]
 80036fc:	e002      	b.n	8003704 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d112      	bne.n	8003732 <VL53L0X_perform_vhv_calibration+0xc2>
 800370c:	79bb      	ldrb	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00f      	beq.n	8003732 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003712:	7dbb      	ldrb	r3, [r7, #22]
 8003714:	461a      	mov	r2, r3
 8003716:	2101      	movs	r1, #1
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7fd fc1d 	bl	8000f58 <VL53L0X_WrByte>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	7dba      	ldrb	r2, [r7, #22]
 800372e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08a      	sub	sp, #40	; 0x28
 8003742:	af04      	add	r7, sp, #16
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4611      	mov	r1, r2
 800374a:	461a      	mov	r2, r3
 800374c:	460b      	mov	r3, r1
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	4613      	mov	r3, r2
 8003752:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003764:	79bb      	ldrb	r3, [r7, #6]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003770:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003772:	2202      	movs	r2, #2
 8003774:	2101      	movs	r1, #1
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7fd fbee 	bl	8000f58 <VL53L0X_WrByte>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003788:	2100      	movs	r1, #0
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fe9c 	bl	80034c8 <VL53L0X_perform_single_ref_calibration>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <VL53L0X_perform_phase_calibration+0x8a>
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d112      	bne.n	80037c8 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80037a2:	7d39      	ldrb	r1, [r7, #20]
 80037a4:	7d7a      	ldrb	r2, [r7, #21]
 80037a6:	2301      	movs	r3, #1
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9302      	str	r3, [sp, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	f107 0313 	add.w	r3, r7, #19
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	460b      	mov	r3, r1
 80037ba:	2101      	movs	r1, #1
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff febe 	bl	800353e <VL53L0X_ref_calibration_io>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]
 80037c6:	e002      	b.n	80037ce <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80037ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d112      	bne.n	80037fc <VL53L0X_perform_phase_calibration+0xbe>
 80037d6:	79bb      	ldrb	r3, [r7, #6]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00f      	beq.n	80037fc <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80037dc:	7dbb      	ldrb	r3, [r7, #22]
 80037de:	461a      	mov	r2, r3
 80037e0:	2101      	movs	r1, #1
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7fd fbb8 	bl	8000f58 <VL53L0X_WrByte>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80037ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	7dba      	ldrb	r2, [r7, #22]
 80037f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80037fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003816:	2300      	movs	r3, #0
 8003818:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003824:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	2300      	movs	r3, #0
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff1f 	bl	8003670 <VL53L0X_perform_vhv_calibration>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	2300      	movs	r3, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff ff7a 	bl	800373e <VL53L0X_perform_phase_calibration>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800384e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003856:	7dbb      	ldrb	r3, [r7, #22]
 8003858:	461a      	mov	r2, r3
 800385a:	2101      	movs	r1, #1
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7fd fb7b 	bl	8000f58 <VL53L0X_WrByte>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	7dba      	ldrb	r2, [r7, #22]
 8003872:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003896:	f107 030f 	add.w	r3, r7, #15
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fe fe00 	bl	80024a2 <VL53L0X_GetMeasurementDataReady>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80038a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d110      	bne.n	80038d0 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d00f      	beq.n	80038d4 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3301      	adds	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038c0:	d302      	bcc.n	80038c8 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80038c2:	23f9      	movs	r3, #249	; 0xf9
 80038c4:	75fb      	strb	r3, [r7, #23]
			break;
 80038c6:	e006      	b.n	80038d6 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd fc65 	bl	8001198 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80038ce:	e7e2      	b.n	8003896 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80038d4:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80038d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	3301      	adds	r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800393a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800393c:	e002      	b.n	8003944 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f8      	bhi.n	800393e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800394c:	e017      	b.n	800397e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d30b      	bcc.n	8003972 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4413      	add	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e002      	b.n	8003978 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e4      	bne.n	800394e <VL53L0X_isqrt+0x24>
	}

	return res;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800399c:	2200      	movs	r2, #0
 800399e:	2183      	movs	r1, #131	; 0x83
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd fad9 	bl	8000f58 <VL53L0X_WrByte>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80039b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d11e      	bne.n	80039f6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80039bc:	f107 030f 	add.w	r3, r7, #15
 80039c0:	461a      	mov	r2, r3
 80039c2:	2183      	movs	r1, #131	; 0x83
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd fb49 	bl	800105c <VL53L0X_RdByte>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <VL53L0X_device_read_strobe+0x5a>
 80039d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3301      	adds	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80039e8:	d3e8      	bcc.n	80039bc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80039f0:	d301      	bcc.n	80039f6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80039f2:	23f9      	movs	r3, #249	; 0xf9
 80039f4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80039f6:	2201      	movs	r2, #1
 80039f8:	2183      	movs	r1, #131	; 0x83
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd faac 	bl	8000f58 <VL53L0X_WrByte>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b098      	sub	sp, #96	; 0x60
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003a46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8003a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8003a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a66:	2b07      	cmp	r3, #7
 8003a68:	f000 8408 	beq.w	800427c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fd fa71 	bl	8000f58 <VL53L0X_WrByte>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a84:	2201      	movs	r2, #1
 8003a86:	21ff      	movs	r1, #255	; 0xff
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd fa65 	bl	8000f58 <VL53L0X_WrByte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fd fa59 	bl	8000f58 <VL53L0X_WrByte>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003ab4:	2206      	movs	r2, #6
 8003ab6:	21ff      	movs	r1, #255	; 0xff
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fa4d 	bl	8000f58 <VL53L0X_WrByte>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003acc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2183      	movs	r1, #131	; 0x83
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd fac1 	bl	800105c <VL53L0X_RdByte>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003ae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	2183      	movs	r1, #131	; 0x83
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fa2e 	bl	8000f58 <VL53L0X_WrByte>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	21ff      	movs	r1, #255	; 0xff
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fa22 	bl	8000f58 <VL53L0X_WrByte>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003b22:	2201      	movs	r2, #1
 8003b24:	2181      	movs	r1, #129	; 0x81
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fa16 	bl	8000f58 <VL53L0X_WrByte>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fb2c 	bl	8001198 <VL53L0X_PollingDelay>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fa00 	bl	8000f58 <VL53L0X_WrByte>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8098 	beq.w	8003ca2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003b72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b76:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 8091 	bne.w	8003ca2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8003b80:	226b      	movs	r2, #107	; 0x6b
 8003b82:	2194      	movs	r1, #148	; 0x94
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd f9e7 	bl	8000f58 <VL53L0X_WrByte>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fef9 	bl	8003990 <VL53L0X_device_read_strobe>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2190      	movs	r1, #144	; 0x90
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd fab3 	bl	8001120 <VL53L0X_RdDWord>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	0bdb      	lsrs	r3, r3, #15
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003be4:	2224      	movs	r2, #36	; 0x24
 8003be6:	2194      	movs	r1, #148	; 0x94
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd f9b5 	bl	8000f58 <VL53L0X_WrByte>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fec7 	bl	8003990 <VL53L0X_device_read_strobe>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c14:	461a      	mov	r2, r3
 8003c16:	2190      	movs	r1, #144	; 0x90
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd fa81 	bl	8001120 <VL53L0X_RdDWord>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	0e1b      	lsrs	r3, r3, #24
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003c4a:	2225      	movs	r2, #37	; 0x25
 8003c4c:	2194      	movs	r1, #148	; 0x94
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd f982 	bl	8000f58 <VL53L0X_WrByte>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fe94 	bl	8003990 <VL53L0X_device_read_strobe>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2190      	movs	r1, #144	; 0x90
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fa4e 	bl	8001120 <VL53L0X_RdDWord>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8189 	beq.w	8003fc0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003cae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cb2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8182 	bne.w	8003fc0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	2194      	movs	r1, #148	; 0x94
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd f949 	bl	8000f58 <VL53L0X_WrByte>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fe5b 	bl	8003990 <VL53L0X_device_read_strobe>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003ce8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8003cec:	461a      	mov	r2, r3
 8003cee:	2190      	movs	r1, #144	; 0x90
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fd f9b3 	bl	800105c <VL53L0X_RdByte>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003d04:	227b      	movs	r2, #123	; 0x7b
 8003d06:	2194      	movs	r1, #148	; 0x94
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fd f925 	bl	8000f58 <VL53L0X_WrByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fe37 	bl	8003990 <VL53L0X_device_read_strobe>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003d30:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003d34:	461a      	mov	r2, r3
 8003d36:	2190      	movs	r1, #144	; 0x90
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fd f98f 	bl	800105c <VL53L0X_RdByte>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461a      	mov	r2, r3
 8003d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003d4c:	2277      	movs	r2, #119	; 0x77
 8003d4e:	2194      	movs	r1, #148	; 0x94
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd f901 	bl	8000f58 <VL53L0X_WrByte>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fe13 	bl	8003990 <VL53L0X_device_read_strobe>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2190      	movs	r1, #144	; 0x90
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd f9cd 	bl	8001120 <VL53L0X_RdDWord>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	0e5b      	lsrs	r3, r3, #25
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	0c9b      	lsrs	r3, r3, #18
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003dde:	2278      	movs	r2, #120	; 0x78
 8003de0:	2194      	movs	r1, #148	; 0x94
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f8b8 	bl	8000f58 <VL53L0X_WrByte>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff fdca 	bl	8003990 <VL53L0X_device_read_strobe>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2190      	movs	r1, #144	; 0x90
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd f984 	bl	8001120 <VL53L0X_RdDWord>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	0f5b      	lsrs	r3, r3, #29
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e36:	4413      	add	r3, r2
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	0d9b      	lsrs	r3, r3, #22
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	0bdb      	lsrs	r3, r3, #15
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003e86:	2279      	movs	r2, #121	; 0x79
 8003e88:	2194      	movs	r1, #148	; 0x94
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd f864 	bl	8000f58 <VL53L0X_WrByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fd76 	bl	8003990 <VL53L0X_device_read_strobe>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2190      	movs	r1, #144	; 0x90
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd f930 	bl	8001120 <VL53L0X_RdDWord>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003eda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ede:	4413      	add	r3, r2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	0cdb      	lsrs	r3, r3, #19
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	0b1b      	lsrs	r3, r3, #12
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003f20:	227a      	movs	r2, #122	; 0x7a
 8003f22:	2194      	movs	r1, #148	; 0x94
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd f817 	bl	8000f58 <VL53L0X_WrByte>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fd29 	bl	8003990 <VL53L0X_device_read_strobe>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f50:	461a      	mov	r2, r3
 8003f52:	2190      	movs	r1, #144	; 0x90
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fd f8e3 	bl	8001120 <VL53L0X_RdDWord>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	0f9b      	lsrs	r3, r3, #30
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f72:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f78:	4413      	add	r3, r2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	0ddb      	lsrs	r3, r3, #23
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	0a5b      	lsrs	r3, r3, #9
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80f1 	beq.w	80041ae <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fd0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f040 80ea 	bne.w	80041ae <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003fda:	227b      	movs	r2, #123	; 0x7b
 8003fdc:	2194      	movs	r1, #148	; 0x94
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc ffba 	bl	8000f58 <VL53L0X_WrByte>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fccc 	bl	8003990 <VL53L0X_device_read_strobe>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004000:	4313      	orrs	r3, r2
 8004002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400a:	461a      	mov	r2, r3
 800400c:	2190      	movs	r1, #144	; 0x90
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd f886 	bl	8001120 <VL53L0X_RdDWord>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800401c:	4313      	orrs	r3, r2
 800401e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004022:	227c      	movs	r2, #124	; 0x7c
 8004024:	2194      	movs	r1, #148	; 0x94
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc ff96 	bl	8000f58 <VL53L0X_WrByte>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004034:	4313      	orrs	r3, r2
 8004036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fca8 	bl	8003990 <VL53L0X_device_read_strobe>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004048:	4313      	orrs	r3, r2
 800404a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800404e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004052:	461a      	mov	r2, r3
 8004054:	2190      	movs	r1, #144	; 0x90
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd f862 	bl	8001120 <VL53L0X_RdDWord>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004064:	4313      	orrs	r3, r2
 8004066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800406a:	2273      	movs	r2, #115	; 0x73
 800406c:	2194      	movs	r1, #148	; 0x94
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc ff72 	bl	8000f58 <VL53L0X_WrByte>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800407c:	4313      	orrs	r3, r2
 800407e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fc84 	bl	8003990 <VL53L0X_device_read_strobe>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004090:	4313      	orrs	r3, r2
 8004092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800409a:	461a      	mov	r2, r3
 800409c:	2190      	movs	r1, #144	; 0x90
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fd f83e 	bl	8001120 <VL53L0X_RdDWord>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80040ba:	2274      	movs	r2, #116	; 0x74
 80040bc:	2194      	movs	r1, #148	; 0x94
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc ff4a 	bl	8000f58 <VL53L0X_WrByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fc5c 	bl	8003990 <VL53L0X_device_read_strobe>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80040e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ea:	461a      	mov	r2, r3
 80040ec:	2190      	movs	r1, #144	; 0x90
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd f816 	bl	8001120 <VL53L0X_RdDWord>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004108:	4313      	orrs	r3, r2
 800410a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800410c:	2275      	movs	r2, #117	; 0x75
 800410e:	2194      	movs	r1, #148	; 0x94
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fc ff21 	bl	8000f58 <VL53L0X_WrByte>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800411e:	4313      	orrs	r3, r2
 8004120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fc33 	bl	8003990 <VL53L0X_device_read_strobe>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004132:	4313      	orrs	r3, r2
 8004134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800413c:	461a      	mov	r2, r3
 800413e:	2190      	movs	r1, #144	; 0x90
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc ffed 	bl	8001120 <VL53L0X_RdDWord>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800414e:	4313      	orrs	r3, r2
 8004150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004158:	b29b      	uxth	r3, r3
 800415a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800415c:	2276      	movs	r2, #118	; 0x76
 800415e:	2194      	movs	r1, #148	; 0x94
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc fef9 	bl	8000f58 <VL53L0X_WrByte>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800416e:	4313      	orrs	r3, r2
 8004170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fc0b 	bl	8003990 <VL53L0X_device_read_strobe>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004182:	4313      	orrs	r3, r2
 8004184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004188:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800418c:	461a      	mov	r2, r3
 800418e:	2190      	movs	r1, #144	; 0x90
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fc ffc5 	bl	8001120 <VL53L0X_RdDWord>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800419e:	4313      	orrs	r3, r2
 80041a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80041a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041aa:	4313      	orrs	r3, r2
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2181      	movs	r1, #129	; 0x81
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fed0 	bl	8000f58 <VL53L0X_WrByte>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80041c6:	2206      	movs	r2, #6
 80041c8:	21ff      	movs	r1, #255	; 0xff
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc fec4 	bl	8000f58 <VL53L0X_WrByte>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041d8:	4313      	orrs	r3, r2
 80041da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80041de:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80041e2:	461a      	mov	r2, r3
 80041e4:	2183      	movs	r1, #131	; 0x83
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc ff38 	bl	800105c <VL53L0X_RdByte>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80041fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	2183      	movs	r1, #131	; 0x83
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc fea5 	bl	8000f58 <VL53L0X_WrByte>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004216:	4313      	orrs	r3, r2
 8004218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800421c:	2201      	movs	r2, #1
 800421e:	21ff      	movs	r1, #255	; 0xff
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fc fe99 	bl	8000f58 <VL53L0X_WrByte>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800422e:	4313      	orrs	r3, r2
 8004230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004234:	2201      	movs	r2, #1
 8004236:	2100      	movs	r1, #0
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc fe8d 	bl	8000f58 <VL53L0X_WrByte>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004246:	4313      	orrs	r3, r2
 8004248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800424c:	2200      	movs	r2, #0
 800424e:	21ff      	movs	r1, #255	; 0xff
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc fe81 	bl	8000f58 <VL53L0X_WrByte>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800425e:	4313      	orrs	r3, r2
 8004260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fc fe75 	bl	8000f58 <VL53L0X_WrByte>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004276:	4313      	orrs	r3, r2
 8004278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800427c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 808f 	bne.w	80043a4 <VL53L0X_get_info_from_device+0x98e>
 8004286:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800428a:	2b07      	cmp	r3, #7
 800428c:	f000 808a 	beq.w	80043a4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d024      	beq.n	80042e4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800429a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800429e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11e      	bne.n	80042e4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80042ac:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80042b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80042ba:	2300      	movs	r3, #0
 80042bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042be:	e00e      	b.n	80042de <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80042c0:	f107 0208 	add.w	r2, r7, #8
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	4413      	add	r3, r2
 80042c8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80042d4:	460a      	mov	r2, r1
 80042d6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	3301      	adds	r3, #1
 80042dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	dded      	ble.n	80042c0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80042ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042f2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d112      	bne.n	8004320 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004304:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	33f3      	adds	r3, #243	; 0xf3
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	4619      	mov	r1, r3
 800431a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800431c:	f006 ffcc 	bl	800b2b8 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d030      	beq.n	800438c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800432a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800432e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004332:	2b00      	cmp	r3, #0
 8004334:	d12a      	bne.n	800438c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004350:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004374:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004378:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800437c:	425b      	negs	r3, r3
 800437e:	b29b      	uxth	r3, r3
 8004380:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004384:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800438c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	4313      	orrs	r3, r2
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800439a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043a4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3760      	adds	r7, #96	; 0x60
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80043b0:	b490      	push	{r4, r7}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80043bc:	f240 6377 	movw	r3, #1655	; 0x677
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 80043c8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80043cc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80043de:	68bb      	ldr	r3, [r7, #8]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc90      	pop	{r4, r7}
 80043e8:	4770      	bx	lr

080043ea <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800440a:	e005      	b.n	8004418 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	3301      	adds	r3, #1
 8004416:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f4      	bne.n	800440c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	b29b      	uxth	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004430:	4413      	add	r3, r2
 8004432:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004434:	8afb      	ldrh	r3, [r7, #22]

}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	0a12      	lsrs	r2, r2, #8
 8004456:	b292      	uxth	r2, r2
 8004458:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
	...

0800446c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4619      	mov	r1, r3
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ff94 	bl	80043b0 <VL53L0X_calc_macro_period_ps>
 8004488:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <VL53L0X_calc_timeout_mclks+0x50>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044a0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	441a      	add	r2, r3
	timeout_period_mclks =
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80044b2:	69fb      	ldr	r3, [r7, #28]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	10624dd3 	.word	0x10624dd3

080044c0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff69 	bl	80043b0 <VL53L0X_calc_macro_period_ps>
 80044de:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <VL53L0X_calc_timeout_us+0x50>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <VL53L0X_calc_timeout_us+0x50>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004506:	697b      	ldr	r3, [r7, #20]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	10624dd3 	.word	0x10624dd3

08004514 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	; 0x30
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	460b      	mov	r3, r1
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800453a:	7afb      	ldrb	r3, [r7, #11]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <get_sequence_step_timeout+0x38>
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d128      	bne.n	800459e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800454c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004550:	461a      	mov	r2, r3
 8004552:	2100      	movs	r1, #0
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7fd fa86 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004560:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004568:	f107 0320 	add.w	r3, r7, #32
 800456c:	461a      	mov	r2, r3
 800456e:	2146      	movs	r1, #70	; 0x46
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7fc fd73 	bl	800105c <VL53L0X_RdByte>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800457c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff5c 	bl	8004440 <VL53L0X_decode_timeout>
 8004588:	4603      	mov	r3, r0
 800458a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800458c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004592:	4619      	mov	r1, r3
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff ff93 	bl	80044c0 <VL53L0X_calc_timeout_us>
 800459a:	62b8      	str	r0, [r7, #40]	; 0x28
 800459c:	e092      	b.n	80046c4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d135      	bne.n	8004610 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80045a4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80045a8:	461a      	mov	r2, r3
 80045aa:	2100      	movs	r1, #0
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7fd fa5a 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80045b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 8081 	bne.w	80046c4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80045c2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80045c6:	461a      	mov	r2, r3
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7fd fa4b 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80045d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80045de:	f107 031e 	add.w	r3, r7, #30
 80045e2:	461a      	mov	r2, r3
 80045e4:	2151      	movs	r1, #81	; 0x51
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7fc fd62 	bl	80010b0 <VL53L0X_RdWord>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80045f2:	8bfb      	ldrh	r3, [r7, #30]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff23 	bl	8004440 <VL53L0X_decode_timeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80045fe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff5a 	bl	80044c0 <VL53L0X_calc_timeout_us>
 800460c:	62b8      	str	r0, [r7, #40]	; 0x28
 800460e:	e059      	b.n	80046c4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d156      	bne.n	80046c4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4619      	mov	r1, r3
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7fd fb2d 	bl	8001c7c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01d      	beq.n	8004668 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800462c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004630:	461a      	mov	r2, r3
 8004632:	2100      	movs	r1, #0
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fd fa16 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004640:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8004648:	f107 031e 	add.w	r3, r7, #30
 800464c:	461a      	mov	r2, r3
 800464e:	2151      	movs	r1, #81	; 0x51
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7fc fd2d 	bl	80010b0 <VL53L0X_RdWord>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff feee 	bl	8004440 <VL53L0X_decode_timeout>
 8004664:	4603      	mov	r3, r0
 8004666:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004668:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004670:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004674:	461a      	mov	r2, r3
 8004676:	2101      	movs	r1, #1
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7fd f9f4 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004684:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	461a      	mov	r2, r3
 8004692:	2171      	movs	r1, #113	; 0x71
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fc fd0b 	bl	80010b0 <VL53L0X_RdWord>
 800469a:	4603      	mov	r3, r0
 800469c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80046a0:	8bbb      	ldrh	r3, [r7, #28]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fecc 	bl	8004440 <VL53L0X_decode_timeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80046ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80046b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80046b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ba:	4619      	mov	r1, r3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff feff 	bl	80044c0 <VL53L0X_calc_timeout_us>
 80046c2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c8:	601a      	str	r2, [r3, #0]

	return Status;
 80046ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b08a      	sub	sp, #40	; 0x28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	460b      	mov	r3, r1
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <set_sequence_step_timeout+0x26>
 80046f0:	7afb      	ldrb	r3, [r7, #11]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d002      	beq.n	80046fc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d138      	bne.n	800476e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80046fc:	f107 031b 	add.w	r3, r7, #27
 8004700:	461a      	mov	r2, r3
 8004702:	2100      	movs	r1, #0
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7fd f9ae 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11a      	bne.n	800474e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004718:	7efb      	ldrb	r3, [r7, #27]
 800471a:	461a      	mov	r2, r3
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fea4 	bl	800446c <VL53L0X_calc_timeout_mclks>
 8004724:	4603      	mov	r3, r0
 8004726:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004728:	8bbb      	ldrh	r3, [r7, #28]
 800472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472e:	d903      	bls.n	8004738 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004730:	23ff      	movs	r3, #255	; 0xff
 8004732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004736:	e004      	b.n	8004742 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004738:	8bbb      	ldrh	r3, [r7, #28]
 800473a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800473c:	3b01      	subs	r3, #1
 800473e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800474e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 80ab 	bne.w	80048ae <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800475c:	461a      	mov	r2, r3
 800475e:	2146      	movs	r1, #70	; 0x46
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7fc fbf9 	bl	8000f58 <VL53L0X_WrByte>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800476c:	e09f      	b.n	80048ae <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d135      	bne.n	80047e0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8004774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11b      	bne.n	80047b4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800477c:	f107 031b 	add.w	r3, r7, #27
 8004780:	461a      	mov	r2, r3
 8004782:	2100      	movs	r1, #0
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7fd f96e 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004790:	7efb      	ldrb	r3, [r7, #27]
 8004792:	461a      	mov	r2, r3
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff fe68 	bl	800446c <VL53L0X_calc_timeout_mclks>
 800479c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800479e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80047a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fe21 	bl	80043ea <VL53L0X_encode_timeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80047ac:	8b3a      	ldrh	r2, [r7, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80047b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80047bc:	8b3b      	ldrh	r3, [r7, #24]
 80047be:	461a      	mov	r2, r3
 80047c0:	2151      	movs	r1, #81	; 0x51
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fc fbec 	bl	8000fa0 <VL53L0X_WrWord>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80047ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d16b      	bne.n	80048ae <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80047de:	e066      	b.n	80048ae <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80047e0:	7afb      	ldrb	r3, [r7, #11]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d160      	bne.n	80048a8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	4619      	mov	r1, r3
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7fd fa45 	bl	8001c7c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01d      	beq.n	8004838 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80047fc:	f107 031b 	add.w	r3, r7, #27
 8004800:	461a      	mov	r2, r3
 8004802:	2100      	movs	r1, #0
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7fd f92e 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8004810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10f      	bne.n	8004838 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004818:	f107 0318 	add.w	r3, r7, #24
 800481c:	461a      	mov	r2, r3
 800481e:	2151      	movs	r1, #81	; 0x51
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7fc fc45 	bl	80010b0 <VL53L0X_RdWord>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800482c:	8b3b      	ldrh	r3, [r7, #24]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fe06 	bl	8004440 <VL53L0X_decode_timeout>
 8004834:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8004836:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004840:	f107 031b 	add.w	r3, r7, #27
 8004844:	461a      	mov	r2, r3
 8004846:	2101      	movs	r1, #1
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fd f90c 	bl	8001a66 <VL53L0X_GetVcselPulsePeriod>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004858:	2b00      	cmp	r3, #0
 800485a:	d128      	bne.n	80048ae <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800485c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800485e:	461a      	mov	r2, r3
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff fe02 	bl	800446c <VL53L0X_calc_timeout_mclks>
 8004868:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800486a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	4413      	add	r3, r2
 8004870:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8004872:	6a38      	ldr	r0, [r7, #32]
 8004874:	f7ff fdb9 	bl	80043ea <VL53L0X_encode_timeout>
 8004878:	4603      	mov	r3, r0
 800487a:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800487c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004880:	2b00      	cmp	r3, #0
 8004882:	d108      	bne.n	8004896 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8004884:	8bfb      	ldrh	r3, [r7, #30]
 8004886:	461a      	mov	r2, r3
 8004888:	2171      	movs	r1, #113	; 0x71
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7fc fb88 	bl	8000fa0 <VL53L0X_WrWord>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8004896:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80048a6:	e002      	b.n	80048ae <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048a8:	23fc      	movs	r3, #252	; 0xfc
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80048ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08a      	sub	sp, #40	; 0x28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	70fb      	strb	r3, [r7, #3]
 80048c6:	4613      	mov	r3, r2
 80048c8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80048d0:	230c      	movs	r3, #12
 80048d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80048d6:	2312      	movs	r3, #18
 80048d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80048e2:	230e      	movs	r3, #14
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80048ec:	78bb      	ldrb	r3, [r7, #2]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048f8:	23fc      	movs	r3, #252	; 0xfc
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048fe:	e020      	b.n	8004942 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <VL53L0X_set_vcsel_pulse_period+0x68>
 8004906:	78ba      	ldrb	r2, [r7, #2]
 8004908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800490c:	429a      	cmp	r2, r3
 800490e:	d304      	bcc.n	800491a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8004910:	78ba      	ldrb	r2, [r7, #2]
 8004912:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004916:	429a      	cmp	r2, r3
 8004918:	d903      	bls.n	8004922 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800491a:	23fc      	movs	r3, #252	; 0xfc
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004920:	e00f      	b.n	8004942 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10c      	bne.n	8004942 <VL53L0X_set_vcsel_pulse_period+0x88>
 8004928:	78ba      	ldrb	r2, [r7, #2]
 800492a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800492e:	429a      	cmp	r2, r3
 8004930:	d304      	bcc.n	800493c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8004932:	78ba      	ldrb	r2, [r7, #2]
 8004934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004938:	429a      	cmp	r2, r3
 800493a:	d902      	bls.n	8004942 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800493c:	23fc      	movs	r3, #252	; 0xfc
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8004942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800494a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800494e:	e239      	b.n	8004dc4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d150      	bne.n	80049f8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d110      	bne.n	800497e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800495c:	2218      	movs	r2, #24
 800495e:	2157      	movs	r1, #87	; 0x57
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fc faf9 	bl	8000f58 <VL53L0X_WrByte>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800496c:	2208      	movs	r2, #8
 800496e:	2156      	movs	r1, #86	; 0x56
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fc faf1 	bl	8000f58 <VL53L0X_WrByte>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800497c:	e17f      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800497e:	78bb      	ldrb	r3, [r7, #2]
 8004980:	2b0e      	cmp	r3, #14
 8004982:	d110      	bne.n	80049a6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8004984:	2230      	movs	r2, #48	; 0x30
 8004986:	2157      	movs	r1, #87	; 0x57
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc fae5 	bl	8000f58 <VL53L0X_WrByte>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8004994:	2208      	movs	r2, #8
 8004996:	2156      	movs	r1, #86	; 0x56
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fc fadd 	bl	8000f58 <VL53L0X_WrByte>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049a4:	e16b      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80049a6:	78bb      	ldrb	r3, [r7, #2]
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d110      	bne.n	80049ce <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	2157      	movs	r1, #87	; 0x57
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fc fad1 	bl	8000f58 <VL53L0X_WrByte>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80049bc:	2208      	movs	r2, #8
 80049be:	2156      	movs	r1, #86	; 0x56
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fc fac9 	bl	8000f58 <VL53L0X_WrByte>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049cc:	e157      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80049ce:	78bb      	ldrb	r3, [r7, #2]
 80049d0:	2b12      	cmp	r3, #18
 80049d2:	f040 8154 	bne.w	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80049d6:	2250      	movs	r2, #80	; 0x50
 80049d8:	2157      	movs	r1, #87	; 0x57
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fabc 	bl	8000f58 <VL53L0X_WrByte>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80049e6:	2208      	movs	r2, #8
 80049e8:	2156      	movs	r1, #86	; 0x56
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fab4 	bl	8000f58 <VL53L0X_WrByte>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049f6:	e142      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f040 813f 	bne.w	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8004a00:	78bb      	ldrb	r3, [r7, #2]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d14c      	bne.n	8004aa0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8004a06:	2210      	movs	r2, #16
 8004a08:	2148      	movs	r1, #72	; 0x48
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc faa4 	bl	8000f58 <VL53L0X_WrByte>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8004a16:	2208      	movs	r2, #8
 8004a18:	2147      	movs	r1, #71	; 0x47
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fa9c 	bl	8000f58 <VL53L0X_WrByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004a26:	2202      	movs	r2, #2
 8004a28:	2132      	movs	r1, #50	; 0x32
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fa94 	bl	8000f58 <VL53L0X_WrByte>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8004a3e:	220c      	movs	r2, #12
 8004a40:	2130      	movs	r1, #48	; 0x30
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fa88 	bl	8000f58 <VL53L0X_WrByte>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004a56:	2201      	movs	r2, #1
 8004a58:	21ff      	movs	r1, #255	; 0xff
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fa7c 	bl	8000f58 <VL53L0X_WrByte>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004a6e:	2230      	movs	r2, #48	; 0x30
 8004a70:	2130      	movs	r1, #48	; 0x30
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc fa70 	bl	8000f58 <VL53L0X_WrByte>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004a86:	2200      	movs	r2, #0
 8004a88:	21ff      	movs	r1, #255	; 0xff
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fa64 	bl	8000f58 <VL53L0X_WrByte>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a9e:	e0ee      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8004aa0:	78bb      	ldrb	r3, [r7, #2]
 8004aa2:	2b0a      	cmp	r3, #10
 8004aa4:	d14c      	bne.n	8004b40 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8004aa6:	2228      	movs	r2, #40	; 0x28
 8004aa8:	2148      	movs	r1, #72	; 0x48
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fa54 	bl	8000f58 <VL53L0X_WrByte>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	2147      	movs	r1, #71	; 0x47
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fa4c 	bl	8000f58 <VL53L0X_WrByte>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	2132      	movs	r1, #50	; 0x32
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fc fa44 	bl	8000f58 <VL53L0X_WrByte>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8004ade:	2209      	movs	r2, #9
 8004ae0:	2130      	movs	r1, #48	; 0x30
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fa38 	bl	8000f58 <VL53L0X_WrByte>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004af6:	2201      	movs	r2, #1
 8004af8:	21ff      	movs	r1, #255	; 0xff
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fa2c 	bl	8000f58 <VL53L0X_WrByte>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004b0e:	2220      	movs	r2, #32
 8004b10:	2130      	movs	r1, #48	; 0x30
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fa20 	bl	8000f58 <VL53L0X_WrByte>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004b26:	2200      	movs	r2, #0
 8004b28:	21ff      	movs	r1, #255	; 0xff
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fa14 	bl	8000f58 <VL53L0X_WrByte>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b3e:	e09e      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8004b40:	78bb      	ldrb	r3, [r7, #2]
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d14c      	bne.n	8004be0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8004b46:	2238      	movs	r2, #56	; 0x38
 8004b48:	2148      	movs	r1, #72	; 0x48
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fa04 	bl	8000f58 <VL53L0X_WrByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8004b56:	2208      	movs	r2, #8
 8004b58:	2147      	movs	r1, #71	; 0x47
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc f9fc 	bl	8000f58 <VL53L0X_WrByte>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004b66:	2203      	movs	r2, #3
 8004b68:	2132      	movs	r1, #50	; 0x32
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f9f4 	bl	8000f58 <VL53L0X_WrByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8004b7e:	2208      	movs	r2, #8
 8004b80:	2130      	movs	r1, #48	; 0x30
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc f9e8 	bl	8000f58 <VL53L0X_WrByte>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004b96:	2201      	movs	r2, #1
 8004b98:	21ff      	movs	r1, #255	; 0xff
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc f9dc 	bl	8000f58 <VL53L0X_WrByte>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004bae:	2220      	movs	r2, #32
 8004bb0:	2130      	movs	r1, #48	; 0x30
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc f9d0 	bl	8000f58 <VL53L0X_WrByte>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	21ff      	movs	r1, #255	; 0xff
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f9c4 	bl	8000f58 <VL53L0X_WrByte>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bde:	e04e      	b.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8004be0:	78bb      	ldrb	r3, [r7, #2]
 8004be2:	2b0e      	cmp	r3, #14
 8004be4:	d14b      	bne.n	8004c7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004be6:	2248      	movs	r2, #72	; 0x48
 8004be8:	2148      	movs	r1, #72	; 0x48
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc f9b4 	bl	8000f58 <VL53L0X_WrByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	2147      	movs	r1, #71	; 0x47
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc f9ac 	bl	8000f58 <VL53L0X_WrByte>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004c06:	2203      	movs	r2, #3
 8004c08:	2132      	movs	r1, #50	; 0x32
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc f9a4 	bl	8000f58 <VL53L0X_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8004c1e:	2207      	movs	r2, #7
 8004c20:	2130      	movs	r1, #48	; 0x30
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc f998 	bl	8000f58 <VL53L0X_WrByte>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004c36:	2201      	movs	r2, #1
 8004c38:	21ff      	movs	r1, #255	; 0xff
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc f98c 	bl	8000f58 <VL53L0X_WrByte>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004c4e:	2220      	movs	r2, #32
 8004c50:	2130      	movs	r1, #48	; 0x30
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc f980 	bl	8000f58 <VL53L0X_WrByte>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004c66:	2200      	movs	r2, #0
 8004c68:	21ff      	movs	r1, #255	; 0xff
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc f974 	bl	8000f58 <VL53L0X_WrByte>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8004c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d17f      	bne.n	8004d86 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8004c86:	78bb      	ldrb	r3, [r7, #2]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe fe3c 	bl	8003906 <VL53L0X_encode_vcsel_period>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d045      	beq.n	8004d2a <VL53L0X_set_vcsel_pulse_period+0x470>
 8004c9e:	e06e      	b.n	8004d7e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fc33 	bl	8004514 <get_sequence_step_timeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8004cbc:	f107 0310 	add.w	r3, r7, #16
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff fc25 	bl	8004514 <get_sequence_step_timeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8004cd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2150      	movs	r1, #80	; 0x50
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f939 	bl	8000f58 <VL53L0X_WrByte>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fceb 	bl	80046d6 <set_sequence_step_timeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8004d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	461a      	mov	r2, r3
 8004d12:	2102      	movs	r1, #2
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fcde 	bl	80046d6 <set_sequence_step_timeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	78ba      	ldrb	r2, [r7, #2]
 8004d24:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004d28:	e02e      	b.n	8004d88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004d2a:	f107 0318 	add.w	r3, r7, #24
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2104      	movs	r1, #4
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fbee 	bl	8004514 <get_sequence_step_timeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004d3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8004d46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2170      	movs	r1, #112	; 0x70
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc f902 	bl	8000f58 <VL53L0X_WrByte>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	461a      	mov	r2, r3
 8004d66:	2104      	movs	r1, #4
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fcb4 	bl	80046d6 <set_sequence_step_timeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	78ba      	ldrb	r2, [r7, #2]
 8004d78:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004d7c:	e004      	b.n	8004d88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d7e:	23fc      	movs	r3, #252	; 0xfc
 8004d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d84:	e000      	b.n	8004d88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8004d86:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8004d88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004d96:	69f9      	ldr	r1, [r7, #28]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fe26 	bl	80019ea <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8004dac:	f107 010f 	add.w	r1, r7, #15
 8004db0:	2301      	movs	r3, #1
 8004db2:	2200      	movs	r2, #0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fe fcc2 	bl	800373e <VL53L0X_perform_phase_calibration>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8004dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d00a      	beq.n	8004dfe <VL53L0X_get_vcsel_pulse_period+0x32>
 8004de8:	e013      	b.n	8004e12 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004dea:	f107 0316 	add.w	r3, r7, #22
 8004dee:	461a      	mov	r2, r3
 8004df0:	2150      	movs	r1, #80	; 0x50
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7fc f932 	bl	800105c <VL53L0X_RdByte>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004dfc:	e00b      	b.n	8004e16 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004dfe:	f107 0316 	add.w	r3, r7, #22
 8004e02:	461a      	mov	r2, r3
 8004e04:	2170      	movs	r1, #112	; 0x70
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fc f928 	bl	800105c <VL53L0X_RdByte>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004e10:	e001      	b.n	8004e16 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e12:	23fc      	movs	r3, #252	; 0xfc
 8004e14:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004e1e:	7dbb      	ldrb	r3, [r7, #22]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fd5e 	bl	80038e2 <VL53L0X_decode_vcsel_period>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	701a      	strb	r2, [r3, #0]

	return Status;
 8004e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b092      	sub	sp, #72	; 0x48
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004e4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e4e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004e50:	f240 7376 	movw	r3, #1910	; 0x776
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8004e56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004e5c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8004e62:	f240 234e 	movw	r3, #590	; 0x24e
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8004e68:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004e6e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004e74:	f240 2326 	movw	r3, #550	; 0x226
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8004e7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004e82:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d205      	bcs.n	8004e9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e90:	23fc      	movs	r3, #252	; 0xfc
 8004e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8004e96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004e9a:	e0aa      	b.n	8004ff2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fee4 	bl	8001c7c <VL53L0X_GetSequenceStepEnables>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8004eba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d15b      	bne.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8004ec2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8004ec8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8004ece:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d052      	beq.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2102      	movs	r1, #2
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fb19 	bl	8004514 <get_sequence_step_timeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8004ee8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8004ef0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004ef4:	e07d      	b.n	8004ff2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8004ef6:	7d3b      	ldrb	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00f      	beq.n	8004f1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004efc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d204      	bcs.n	8004f16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	643b      	str	r3, [r7, #64]	; 0x40
 8004f14:	e002      	b.n	8004f1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004f16:	23fc      	movs	r3, #252	; 0xfc
 8004f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004f1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004f24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004f28:	e063      	b.n	8004ff2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8004f2a:	7dbb      	ldrb	r3, [r7, #22]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d011      	beq.n	8004f54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	4413      	add	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d204      	bcs.n	8004f4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4a:	e016      	b.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004f4c:	23fc      	movs	r3, #252	; 0xfc
 8004f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004f52:	e012      	b.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8004f54:	7d7b      	ldrb	r3, [r7, #21]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5e:	4413      	add	r3, r2
 8004f60:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d204      	bcs.n	8004f74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	643b      	str	r3, [r7, #64]	; 0x40
 8004f72:	e002      	b.n	8004f7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004f74:	23fc      	movs	r3, #252	; 0xfc
 8004f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004f7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004f82:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004f86:	e034      	b.n	8004ff2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d019      	beq.n	8004fc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	461a      	mov	r2, r3
 8004f94:	2103      	movs	r1, #3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fabc 	bl	8004514 <get_sequence_step_timeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d204      	bcs.n	8004fbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fba:	e002      	b.n	8004fc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fbc:	23fc      	movs	r3, #252	; 0xfc
 8004fbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004fc2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d111      	bne.n	8004fee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8004fca:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8004fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fda:	2104      	movs	r1, #4
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fb7a 	bl	80046d6 <set_sequence_step_timeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004fee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3748      	adds	r7, #72	; 0x48
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b090      	sub	sp, #64	; 0x40
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800500a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800500e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005010:	f240 7376 	movw	r3, #1910	; 0x776
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005016:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800501c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005022:	f240 234e 	movw	r3, #590	; 0x24e
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005028:	f240 23b2 	movw	r3, #690	; 0x2b2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800502e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005034:	f240 2326 	movw	r3, #550	; 0x226
 8005038:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800503e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	441a      	add	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005048:	f107 0318 	add.w	r3, r7, #24
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc fe14 	bl	8001c7c <VL53L0X_GetSequenceStepEnables>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800505a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005062:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005066:	e075      	b.n	8005154 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005068:	7e3b      	ldrb	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800506e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005074:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005076:	2b00      	cmp	r3, #0
 8005078:	d030      	beq.n	80050dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	461a      	mov	r2, r3
 8005080:	2102      	movs	r1, #2
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fa46 	bl	8004514 <get_sequence_step_timeout>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800508e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d122      	bne.n	80050dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005096:	7e3b      	ldrb	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80050a6:	441a      	add	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80050ac:	7ebb      	ldrb	r3, [r7, #26]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	440b      	add	r3, r1
 80050bc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80050be:	441a      	add	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e00a      	b.n	80050dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80050c6:	7e7b      	ldrb	r3, [r7, #25]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80050d0:	6939      	ldr	r1, [r7, #16]
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80050d6:	441a      	add	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80050dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d114      	bne.n	800510e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80050ea:	f107 030c 	add.w	r3, r7, #12
 80050ee:	461a      	mov	r2, r3
 80050f0:	2103      	movs	r1, #3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fa0e 	bl	8004514 <get_sequence_step_timeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005108:	441a      	add	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800510e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005112:	2b00      	cmp	r3, #0
 8005114:	d114      	bne.n	8005140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005116:	7f3b      	ldrb	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d011      	beq.n	8005140 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	461a      	mov	r2, r3
 8005122:	2104      	movs	r1, #4
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff f9f5 	bl	8004514 <get_sequence_step_timeout>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005134:	6979      	ldr	r1, [r7, #20]
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800513a:	441a      	add	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005140:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005150:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005154:	4618      	mov	r0, r3
 8005156:	3740      	adds	r7, #64	; 0x40
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005166:	2300      	movs	r3, #0
 8005168:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800516e:	e0c6      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4413      	add	r3, r2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	74fb      	strb	r3, [r7, #19]
		Index++;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	3301      	adds	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2bff      	cmp	r3, #255	; 0xff
 8005184:	f040 808d 	bne.w	80052a2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4413      	add	r3, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	747b      	strb	r3, [r7, #17]
			Index++;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3301      	adds	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005198:	7c7b      	ldrb	r3, [r7, #17]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d87e      	bhi.n	800529c <VL53L0X_load_tuning_settings+0x140>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <VL53L0X_load_tuning_settings+0x48>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051b5 	.word	0x080051b5
 80051a8:	080051ef 	.word	0x080051ef
 80051ac:	08005229 	.word	0x08005229
 80051b0:	08005263 	.word	0x08005263
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	743b      	strb	r3, [r7, #16]
				Index++;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	3301      	adds	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	73fb      	strb	r3, [r7, #15]
				Index++;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80051d4:	7c3b      	ldrb	r3, [r7, #16]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	b29a      	uxth	r2, r3
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	89ba      	ldrh	r2, [r7, #12]
 80051e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80051ec:	e087      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	743b      	strb	r3, [r7, #16]
				Index++;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3301      	adds	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3301      	adds	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800520e:	7c3b      	ldrb	r3, [r7, #16]
 8005210:	b29b      	uxth	r3, r3
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	b29a      	uxth	r2, r3
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	b29b      	uxth	r3, r3
 800521a:	4413      	add	r3, r2
 800521c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	89ba      	ldrh	r2, [r7, #12]
 8005222:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005226:	e06a      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	743b      	strb	r3, [r7, #16]
				Index++;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3301      	adds	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005248:	7c3b      	ldrb	r3, [r7, #16]
 800524a:	b29b      	uxth	r3, r3
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	b29a      	uxth	r2, r3
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	b29b      	uxth	r3, r3
 8005254:	4413      	add	r3, r2
 8005256:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	89ba      	ldrh	r2, [r7, #12]
 800525c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005260:	e04d      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	4413      	add	r3, r2
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	743b      	strb	r3, [r7, #16]
				Index++;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3301      	adds	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	4413      	add	r3, r2
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005282:	7c3b      	ldrb	r3, [r7, #16]
 8005284:	b29b      	uxth	r3, r3
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	b29a      	uxth	r2, r3
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	b29b      	uxth	r3, r3
 800528e:	4413      	add	r3, r2
 8005290:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	89ba      	ldrh	r2, [r7, #12]
 8005296:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800529a:	e030      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800529c:	23fc      	movs	r3, #252	; 0xfc
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e02d      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d828      	bhi.n	80052fa <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	74bb      	strb	r3, [r7, #18]
			Index++;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	3301      	adds	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e00f      	b.n	80052de <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	4413      	add	r3, r2
 80052c4:	7819      	ldrb	r1, [r3, #0]
 80052c6:	f107 0208 	add.w	r2, r7, #8
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	460a      	mov	r2, r1
 80052d0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3301      	adds	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	3301      	adds	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	7cfb      	ldrb	r3, [r7, #19]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	dbeb      	blt.n	80052be <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	f107 0208 	add.w	r2, r7, #8
 80052ec:	7cb9      	ldrb	r1, [r7, #18]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fdd6 	bl	8000ea0 <VL53L0X_WriteMulti>
 80052f4:	4603      	mov	r3, r0
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e001      	b.n	80052fe <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052fa:	23fc      	movs	r3, #252	; 0xfc
 80052fc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	4413      	add	r3, r2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <VL53L0X_load_tuning_settings+0x1b8>
 800530a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f43f af2e 	beq.w	8005170 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005314:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800532c:	2300      	movs	r3, #0
 800532e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005336:	f107 0313 	add.w	r3, r7, #19
 800533a:	4619      	mov	r1, r3
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7fc fd29 	bl	8001d94 <VL53L0X_GetXTalkCompensationEnable>
 8005342:	4603      	mov	r3, r0
 8005344:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005346:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d111      	bne.n	8005372 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	8a9b      	ldrh	r3, [r3, #20]
 800535e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3380      	adds	r3, #128	; 0x80
 800536c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005372:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005396:	f107 0310 	add.w	r3, r7, #16
 800539a:	461a      	mov	r2, r3
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ffbe 	bl	8005320 <VL53L0X_get_total_xtalk_rate>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80053a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]

	return Status;
 80053bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b09a      	sub	sp, #104	; 0x68
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80053d6:	2312      	movs	r3, #18
 80053d8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80053da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80053e0:	2342      	movs	r3, #66	; 0x42
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80053e4:	2306      	movs	r3, #6
 80053e6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80053e8:	2307      	movs	r3, #7
 80053ea:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	3380      	adds	r3, #128	; 0x80
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005434:	4413      	add	r3, r2
 8005436:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005442:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005444:	4613      	mov	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4413      	add	r3, r2
 800544a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800544c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005458:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005478:	fb02 f303 	mul.w	r3, r2, r3
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8005488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548a:	085a      	lsrs	r2, r3, #1
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	441a      	add	r2, r3
 8005490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d302      	bcc.n	80054b0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80054aa:	4b55      	ldr	r3, [pc, #340]	; (8005600 <VL53L0X_calc_dmax+0x238>)
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	e016      	b.n	80054de <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	085a      	lsrs	r2, r3, #1
 80054b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b6:	441a      	add	r2, r3
 80054b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80054c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80054ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80054d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80054de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e0:	039b      	lsls	r3, r3, #14
 80054e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80054e6:	4a47      	ldr	r2, [pc, #284]	; (8005604 <VL53L0X_calc_dmax+0x23c>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	3308      	adds	r3, #8
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005526:	0b9b      	lsrs	r3, r3, #14
 8005528:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552e:	4413      	add	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4413      	add	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	039b      	lsls	r3, r3, #14
 800554a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4413      	add	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005564:	fb02 f303 	mul.w	r3, r2, r3
 8005568:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005570:	4a24      	ldr	r2, [pc, #144]	; (8005604 <VL53L0X_calc_dmax+0x23c>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005586:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <VL53L0X_calc_dmax+0x23c>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	099b      	lsrs	r3, r3, #6
 800558e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005592:	3380      	adds	r3, #128	; 0x80
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	085a      	lsrs	r2, r3, #1
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	441a      	add	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ae:	e001      	b.n	80055b4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80055b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80055b6:	f7fe f9b8 	bl	800392a <VL53L0X_isqrt>
 80055ba:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	085a      	lsrs	r2, r3, #1
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	441a      	add	r2, r3
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d2:	e001      	b.n	80055d8 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80055d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80055da:	f7fe f9a6 	bl	800392a <VL53L0X_isqrt>
 80055de:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80055e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d902      	bls.n	80055f4 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055f2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80055f4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3768      	adds	r7, #104	; 0x68
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fff00000 	.word	0xfff00000
 8005604:	10624dd3 	.word	0x10624dd3

08005608 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b0b4      	sub	sp, #208	; 0xd0
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8005616:	f44f 7348 	mov.w	r3, #800	; 0x320
 800561a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800561e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8005626:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800562a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800562e:	f241 235c 	movw	r3, #4700	; 0x125c
 8005632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8005636:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8005638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800563c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005640:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8005642:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8005650:	4b98      	ldr	r3, [pc, #608]	; (80058b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8005652:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8005654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005658:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800565a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800565e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8005660:	f240 6377 	movw	r3, #1655	; 0x677
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800567a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	461a      	mov	r2, r3
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fe74 	bl	800537e <VL53L0X_get_total_signal_rate>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	461a      	mov	r2, r3
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff fe3b 	bl	8005320 <VL53L0X_get_total_xtalk_rate>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80056bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80056d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80056d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d902      	bls.n	80056e4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80056e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d168      	bne.n	80057be <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80056fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005700:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005704:	461a      	mov	r2, r3
 8005706:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7fe feae 	bl	800446c <VL53L0X_calc_timeout_mclks>
 8005710:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005722:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005726:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800572a:	461a      	mov	r2, r3
 800572c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7fe fe9b 	bl	800446c <VL53L0X_calc_timeout_mclks>
 8005736:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005738:	2303      	movs	r3, #3
 800573a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800573e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005742:	2b08      	cmp	r3, #8
 8005744:	d102      	bne.n	800574c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8005746:	2302      	movs	r3, #2
 8005748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800574c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800574e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005750:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8005752:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	02db      	lsls	r3, r3, #11
 800575c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005764:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005768:	4a53      	ldr	r2, [pc, #332]	; (80058b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	099b      	lsrs	r3, r3, #6
 8005770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8005774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005778:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005786:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800578a:	4a4b      	ldr	r2, [pc, #300]	; (80058b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800578c:	fba2 2303 	umull	r2, r3, r2, r3
 8005790:	099b      	lsrs	r3, r3, #6
 8005792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3380      	adds	r3, #128	; 0x80
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80057ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057b0:	3380      	adds	r3, #128	; 0x80
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80057be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80057c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80057ca:	e165      	b.n	8005a98 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 80057cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e153      	b.n	8005a94 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 80057ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80057fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057fe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005802:	041a      	lsls	r2, r3, #16
 8005804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800580e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005814:	429a      	cmp	r2, r3
 8005816:	d902      	bls.n	800581e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800581e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005822:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800582e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe f875 	bl	800392a <VL53L0X_isqrt>
 8005840:	4603      	mov	r3, r0
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	891b      	ldrh	r3, [r3, #8]
 800584a:	461a      	mov	r2, r3
 800584c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005856:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800585c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800585e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005860:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005864:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800586e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8005886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	bfb8      	it	lt
 8005892:	425b      	neglt	r3, r3
 8005894:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	7e1b      	ldrb	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80058a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ac:	e035      	b.n	800591a <VL53L0X_calc_sigma_estimate+0x312>
 80058ae:	bf00      	nop
 80058b0:	028f87ae 	.word	0x028f87ae
 80058b4:	0006999a 	.word	0x0006999a
 80058b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80058bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80058d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80058dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e2:	4413      	add	r3, r2
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80058ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80058f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80058f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005904:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005908:	fb02 f303 	mul.w	r3, r2, r3
 800590c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005914:	0b9b      	lsrs	r3, r3, #14
 8005916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800591e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005920:	fb02 f303 	mul.w	r3, r2, r3
 8005924:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800593a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8005954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	4413      	add	r3, r2
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800595c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595e:	f7fd ffe4 	bl	800392a <VL53L0X_isqrt>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	3332      	adds	r3, #50	; 0x32
 800596e:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <VL53L0X_calc_sigma_estimate+0x498>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	095a      	lsrs	r2, r3, #5
 8005976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005984:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8005990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005994:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005998:	3308      	adds	r3, #8
 800599a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800599e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059a2:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <VL53L0X_calc_sigma_estimate+0x49c>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	0b5b      	lsrs	r3, r3, #13
 80059aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80059ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d902      	bls.n	80059be <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80059b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80059be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80059cc:	4a36      	ldr	r2, [pc, #216]	; (8005aa8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80059da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059de:	441a      	add	r2, r3
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd ff9f 	bl	800392a <VL53L0X_isqrt>
 80059ec:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80059fa:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	4413      	add	r3, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd ff81 	bl	800392a <VL53L0X_isqrt>
 8005a28:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <VL53L0X_calc_sigma_estimate+0x44a>
 8005a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <VL53L0X_calc_sigma_estimate+0x44a>
 8005a46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d903      	bls.n	8005a5a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005a60:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8005a6c:	6939      	ldr	r1, [r7, #16]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a76:	9302      	str	r3, [sp, #8]
 8005a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fc9d 	bl	80053c8 <VL53L0X_calc_dmax>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a94:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	37c0      	adds	r7, #192	; 0xc0
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	51eb851f 	.word	0x51eb851f
 8005aa4:	d1b71759 	.word	0xd1b71759
 8005aa8:	10624dd3 	.word	0x10624dd3

08005aac <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b090      	sub	sp, #64	; 0x40
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	460b      	mov	r3, r1
 8005aba:	72fb      	strb	r3, [r7, #11]
 8005abc:	4613      	mov	r3, r2
 8005abe:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005afe:	7afb      	ldrb	r3, [r7, #11]
 8005b00:	10db      	asrs	r3, r3, #3
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005b0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d017      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
 8005b14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d013      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b20:	2b07      	cmp	r3, #7
 8005b22:	d00f      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005b24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b28:	2b0c      	cmp	r3, #12
 8005b2a:	d00b      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005b2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b30:	2b0d      	cmp	r3, #13
 8005b32:	d007      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005b34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b38:	2b0e      	cmp	r3, #14
 8005b3a:	d003      	beq.n	8005b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005b3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005b40:	2b0f      	cmp	r3, #15
 8005b42:	d103      	bne.n	8005b4c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005b4a:	e002      	b.n	8005b52 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005b52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005b5a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2100      	movs	r1, #0
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7fc f9ea 	bl	8001f3c <VL53L0X_GetLimitCheckEnable>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8005b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02e      	beq.n	8005bd4 <VL53L0X_get_pal_range_status+0x128>
 8005b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d12a      	bne.n	8005bd4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fd3d 	bl	8005608 <VL53L0X_calc_sigma_estimate>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8005b94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8005ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d113      	bne.n	8005bd4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8005bac:	f107 0320 	add.w	r3, r7, #32
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7fc fa45 	bl	8002044 <VL53L0X_GetLimitCheckValue>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d006      	beq.n	8005bd4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d902      	bls.n	8005bd4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005bd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005bdc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8005be0:	461a      	mov	r2, r3
 8005be2:	2102      	movs	r1, #2
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7fc f9a9 	bl	8001f3c <VL53L0X_GetLimitCheckEnable>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005bf0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d044      	beq.n	8005c82 <VL53L0X_get_pal_range_status+0x1d6>
 8005bf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d140      	bne.n	8005c82 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	461a      	mov	r2, r3
 8005c06:	2102      	movs	r1, #2
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fc fa1b 	bl	8002044 <VL53L0X_GetLimitCheckValue>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8005c14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	21ff      	movs	r1, #255	; 0xff
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7fb f999 	bl	8000f58 <VL53L0X_WrByte>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8005c34:	f107 0316 	add.w	r3, r7, #22
 8005c38:	461a      	mov	r2, r3
 8005c3a:	21b6      	movs	r1, #182	; 0xb6
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7fb fa37 	bl	80010b0 <VL53L0X_RdWord>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005c48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c50:	2200      	movs	r2, #0
 8005c52:	21ff      	movs	r1, #255	; 0xff
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7fb f97f 	bl	8000f58 <VL53L0X_WrByte>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005c60:	8afb      	ldrh	r3, [r7, #22]
 8005c62:	025b      	lsls	r3, r3, #9
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8005c74:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d902      	bls.n	8005c82 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005c82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2103      	movs	r1, #3
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7fc f952 	bl	8001f3c <VL53L0X_GetLimitCheckEnable>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8005c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d023      	beq.n	8005cee <VL53L0X_get_pal_range_status+0x242>
 8005ca6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11f      	bne.n	8005cee <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8005cae:	893b      	ldrh	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb8:	e005      	b.n	8005cc6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	021a      	lsls	r2, r3, #8
 8005cbe:	893b      	ldrh	r3, [r7, #8]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005cc6:	f107 0318 	add.w	r3, r7, #24
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2103      	movs	r1, #3
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7fc f9b8 	bl	8002044 <VL53L0X_GetLimitCheckValue>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005ce0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8005ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d202      	bcs.n	8005cee <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d14a      	bne.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8005cf6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d103      	bne.n	8005d06 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e042      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8005d06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d007      	beq.n	8005d1e <VL53L0X_get_pal_range_status+0x272>
 8005d0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d003      	beq.n	8005d1e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8005d16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d103      	bne.n	8005d26 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d20:	2205      	movs	r2, #5
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e032      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8005d26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d003      	beq.n	8005d36 <VL53L0X_get_pal_range_status+0x28a>
 8005d2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d32:	2b09      	cmp	r3, #9
 8005d34:	d103      	bne.n	8005d3e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	2204      	movs	r2, #4
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e026      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8005d3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d007      	beq.n	8005d56 <VL53L0X_get_pal_range_status+0x2aa>
 8005d46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d4a:	2b0a      	cmp	r3, #10
 8005d4c:	d003      	beq.n	8005d56 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8005d4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d103      	bne.n	8005d5e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	2203      	movs	r2, #3
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	e016      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8005d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d003      	beq.n	8005d6e <VL53L0X_get_pal_range_status+0x2c2>
 8005d66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d103      	bne.n	8005d76 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d70:	2202      	movs	r2, #2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e00a      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8005d76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d103      	bne.n	8005d86 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e002      	b.n	8005d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	2200      	movs	r2, #0
 8005d98:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005d9a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2101      	movs	r1, #1
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7fc f8ca 	bl	8001f3c <VL53L0X_GetLimitCheckEnable>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8005dae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d14f      	bne.n	8005e56 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8005db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <VL53L0X_get_pal_range_status+0x31a>
 8005dbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d103      	bne.n	8005dce <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dcc:	e002      	b.n	8005dd4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005dda:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8005dde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d003      	beq.n	8005dee <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8005de6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df4:	e002      	b.n	8005dfc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005e02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8005e06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <VL53L0X_get_pal_range_status+0x36a>
 8005e0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d103      	bne.n	8005e1e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1c:	e002      	b.n	8005e24 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <VL53L0X_get_pal_range_status+0x392>
 8005e36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d103      	bne.n	8005e46 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e44:	e002      	b.n	8005e4c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005e52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3740      	adds	r7, #64	; 0x40
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <SystemInit+0x50>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a11      	ldr	r2, [pc, #68]	; (8005eb4 <SystemInit+0x50>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <SystemInit+0x50>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <SystemInit+0x50>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	; (8005eb4 <SystemInit+0x50>)
 8005e80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005e84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005e88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <SystemInit+0x50>)
 8005e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <SystemInit+0x50>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a07      	ldr	r2, [pc, #28]	; (8005eb4 <SystemInit+0x50>)
 8005e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <SystemInit+0x50>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <SystemInit+0x54>)
 8005ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	e000ed00 	.word	0xe000ed00

08005ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ec0:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <HAL_Init+0x28>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a07      	ldr	r2, [pc, #28]	; (8005ee4 <HAL_Init+0x28>)
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ecc:	2003      	movs	r0, #3
 8005ece:	f000 f91d 	bl	800610c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed2:	200f      	movs	r0, #15
 8005ed4:	f000 f808 	bl	8005ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ed8:	f005 f902 	bl	800b0e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40022000 	.word	0x40022000

08005ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_InitTick+0x30>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <HAL_InitTick+0x34>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f93a 	bl	8006176 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8005f02:	2200      	movs	r2, #0
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	f000 f90a 	bl	8006122 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200002cc 	.word	0x200002cc
 8005f1c:	10624dd3 	.word	0x10624dd3

08005f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  uwTick++;
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_IncTick+0x18>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a03      	ldr	r2, [pc, #12]	; (8005f38 <HAL_IncTick+0x18>)
 8005f2c:	6013      	str	r3, [r2, #0]
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000aac 	.word	0x20000aac

08005f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f40:	4b02      	ldr	r3, [pc, #8]	; (8005f4c <HAL_GetTick+0x10>)
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	20000aac 	.word	0x20000aac

08005f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8005f5c:	f7ff ffee 	bl	8005f3c <HAL_GetTick>
 8005f60:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8005f62:	bf00      	nop
 8005f64:	f7ff ffea 	bl	8005f3c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d8f7      	bhi.n	8005f64 <HAL_Delay+0x14>
  {
  }
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <NVIC_SetPriorityGrouping+0x44>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fae:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <NVIC_SetPriorityGrouping+0x44>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	60d3      	str	r3, [r2, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000ed00 	.word	0xe000ed00

08005fc4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <NVIC_GetPriorityGrouping+0x18>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 0307 	and.w	r3, r3, #7
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	e000ed00 	.word	0xe000ed00

08005fe0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <NVIC_EnableIRQ+0x2c>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	e000e100 	.word	0xe000e100

08006010 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800601c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	da0b      	bge.n	800603c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	490c      	ldr	r1, [pc, #48]	; (800605c <NVIC_SetPriority+0x4c>)
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	3b04      	subs	r3, #4
 8006032:	0112      	lsls	r2, r2, #4
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	440b      	add	r3, r1
 8006038:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800603a:	e009      	b.n	8006050 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <NVIC_SetPriority+0x50>)
 8006042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006046:	0112      	lsls	r2, r2, #4
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	440b      	add	r3, r1
 800604c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	e000ed00 	.word	0xe000ed00
 8006060:	e000e100 	.word	0xe000e100

08006064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	; 0x24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	bf28      	it	cs
 8006082:	2304      	movcs	r3, #4
 8006084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3304      	adds	r3, #4
 800608a:	2b06      	cmp	r3, #6
 800608c:	d902      	bls.n	8006094 <NVIC_EncodePriority+0x30>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3b03      	subs	r3, #3
 8006092:	e000      	b.n	8006096 <NVIC_EncodePriority+0x32>
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006098:	f04f 32ff 	mov.w	r2, #4294967295
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43da      	mvns	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	401a      	ands	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060ac:	f04f 31ff 	mov.w	r1, #4294967295
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	43d9      	mvns	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060bc:	4313      	orrs	r3, r2
         );
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d8:	d301      	bcc.n	80060de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060da:	2301      	movs	r3, #1
 80060dc:	e00f      	b.n	80060fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <SysTick_Config+0x40>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060e6:	210f      	movs	r1, #15
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f7ff ff90 	bl	8006010 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <SysTick_Config+0x40>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <SysTick_Config+0x40>)
 80060f8:	2207      	movs	r2, #7
 80060fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000e010 	.word	0xe000e010

0800610c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff31 	bl	8005f7c <NVIC_SetPriorityGrouping>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006134:	f7ff ff46 	bl	8005fc4 <NVIC_GetPriorityGrouping>
 8006138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff90 	bl	8006064 <NVIC_EncodePriority>
 8006144:	4602      	mov	r2, r0
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff5f 	bl	8006010 <NVIC_SetPriority>
}
 8006152:	bf00      	nop
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	4603      	mov	r3, r0
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff39 	bl	8005fe0 <NVIC_EnableIRQ>
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ffa2 	bl	80060c8 <SysTick_Config>
 8006184:	4603      	mov	r3, r0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b04      	cmp	r3, #4
 800619c:	d106      	bne.n	80061ac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80061a4:	f043 0304 	orr.w	r3, r3, #4
 80061a8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80061aa:	e005      	b.n	80061b8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80061b2:	f023 0304 	bic.w	r3, r3, #4
 80061b6:	6013      	str	r3, [r2, #0]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000e010 	.word	0xe000e010

080061c8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80061cc:	f000 f802 	bl	80061d4 <HAL_SYSTICK_Callback>
}
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e09c      	b.n	8006330 <HAL_DMA_Init+0x150>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b4f      	ldr	r3, [pc, #316]	; (800633c <HAL_DMA_Init+0x15c>)
 80061fe:	429a      	cmp	r2, r3
 8006200:	d80f      	bhi.n	8006222 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	4b4d      	ldr	r3, [pc, #308]	; (8006340 <HAL_DMA_Init+0x160>)
 800620a:	4413      	add	r3, r2
 800620c:	4a4d      	ldr	r2, [pc, #308]	; (8006344 <HAL_DMA_Init+0x164>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	009a      	lsls	r2, r3, #2
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a4a      	ldr	r2, [pc, #296]	; (8006348 <HAL_DMA_Init+0x168>)
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
 8006220:	e00e      	b.n	8006240 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	4b48      	ldr	r3, [pc, #288]	; (800634c <HAL_DMA_Init+0x16c>)
 800622a:	4413      	add	r3, r2
 800622c:	4a45      	ldr	r2, [pc, #276]	; (8006344 <HAL_DMA_Init+0x164>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	009a      	lsls	r2, r3, #2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a44      	ldr	r2, [pc, #272]	; (8006350 <HAL_DMA_Init+0x170>)
 800623e:	641a      	str	r2, [r3, #64]	; 0x40
  }
    
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800625a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800627c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629a:	d031      	beq.n	8006300 <HAL_DMA_Init+0x120>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	4a29      	ldr	r2, [pc, #164]	; (8006348 <HAL_DMA_Init+0x168>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d116      	bne.n	80062d4 <HAL_DMA_Init+0xf4>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80062a6:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_DMA_Init+0x174>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	210f      	movs	r1, #15
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	4927      	ldr	r1, [pc, #156]	; (8006354 <HAL_DMA_Init+0x174>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_DMA_Init+0x174>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c8:	fa01 f303 	lsl.w	r3, r1, r3
 80062cc:	4921      	ldr	r1, [pc, #132]	; (8006354 <HAL_DMA_Init+0x174>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	e015      	b.n	8006300 <HAL_DMA_Init+0x120>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <HAL_DMA_Init+0x178>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	210f      	movs	r1, #15
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	491c      	ldr	r1, [pc, #112]	; (8006358 <HAL_DMA_Init+0x178>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
     
      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <HAL_DMA_Init+0x178>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	4917      	ldr	r1, [pc, #92]	; (8006358 <HAL_DMA_Init+0x178>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40020407 	.word	0x40020407
 8006340:	bffdfff8 	.word	0xbffdfff8
 8006344:	cccccccd 	.word	0xcccccccd
 8006348:	40020000 	.word	0x40020000
 800634c:	bffdfbf8 	.word	0xbffdfbf8
 8006350:	40020400 	.word	0x40020400
 8006354:	400200a8 	.word	0x400200a8
 8006358:	400204a8 	.word	0x400204a8

0800635c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_DMA_Start_IT+0x20>
 8006378:	2302      	movs	r3, #2
 800637a:	e04b      	b.n	8006414 <HAL_DMA_Start_IT+0xb8>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d13a      	bne.n	8006406 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f91f 	bl	80065f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 020e 	orr.w	r2, r2, #14
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e00f      	b.n	80063f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 020a 	orr.w	r2, r2, #10
 80063f2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e005      	b.n	8006412 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800640e:	2302      	movs	r3, #2
 8006410:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d005      	beq.n	8006440 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	63da      	str	r2, [r3, #60]	; 0x3c
        
    status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
 800643e:	e02a      	b.n	8006496 <HAL_DMA_Abort_IT+0x7a>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 020e 	bic.w	r2, r2, #14
 800644e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR |= ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	2201      	movs	r2, #1
 800646c:	409a      	lsls	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_DMA_Abort_IT+0x7a>
    {
      hdma->XferAbortCallback(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
    } 
  }
  return status;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064bc:	2204      	movs	r2, #4
 80064be:	409a      	lsls	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d027      	beq.n	8006518 <HAL_DMA_IRQHandler+0x78>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d022      	beq.n	8006518 <HAL_DMA_IRQHandler+0x78>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	2204      	movs	r2, #4
 80064fc:	409a      	lsls	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d06f      	beq.n	80065ee <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006516:	e06a      	b.n	80065ee <HAL_DMA_IRQHandler+0x14e>
      }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	2202      	movs	r2, #2
 800651e:	409a      	lsls	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d02f      	beq.n	8006588 <HAL_DMA_IRQHandler+0xe8>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d02a      	beq.n	8006588 <HAL_DMA_IRQHandler+0xe8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_DMA_IRQHandler+0xb8>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 020a 	bic.w	r2, r2, #10
 800654e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR |= (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	6859      	ldr	r1, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	2202      	movs	r2, #2
 8006564:	409a      	lsls	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d037      	beq.n	80065ee <HAL_DMA_IRQHandler+0x14e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006586:	e032      	b.n	80065ee <HAL_DMA_IRQHandler+0x14e>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658c:	2208      	movs	r2, #8
 800658e:	409a      	lsls	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02b      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x150>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d026      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x150>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 020e 	bic.w	r2, r2, #14
 80065b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	6859      	ldr	r1, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x150>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
    }
  }
  return;
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
}
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	2201      	movs	r2, #1
 8006612:	409a      	lsls	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b10      	cmp	r3, #16
 800662a:	d108      	bne.n	800663e <DMA_SetConfig+0x46>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800663c:	e007      	b.n	800664e <DMA_SetConfig+0x56>
    hdma->Instance->CPAR = SrcAddress;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	60da      	str	r2, [r3, #12]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800666e:	e17f      	b.n	8006970 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	2101      	movs	r1, #1
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8171 	beq.w	800696a <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d003      	beq.n	8006698 <HAL_GPIO_Init+0x40>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b12      	cmp	r3, #18
 8006696:	d123      	bne.n	80066e0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	08da      	lsrs	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3208      	adds	r2, #8
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4013      	ands	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	08da      	lsrs	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3208      	adds	r2, #8
 80066da:	6939      	ldr	r1, [r7, #16]
 80066dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0203 	and.w	r2, r3, #3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d00b      	beq.n	8006734 <HAL_GPIO_Init+0xdc>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d007      	beq.n	8006734 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006728:	2b11      	cmp	r3, #17
 800672a:	d003      	beq.n	8006734 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b12      	cmp	r3, #18
 8006732:	d130      	bne.n	8006796 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	2203      	movs	r2, #3
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4013      	ands	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800676a:	2201      	movs	r2, #1
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 0201 	and.w	r2, r3, #1
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d118      	bne.n	80067d4 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80067a8:	2201      	movs	r2, #1
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f003 0201 	and.w	r2, r3, #1
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	2203      	movs	r2, #3
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4013      	ands	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80ac 	beq.w	800696a <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006812:	4b5e      	ldr	r3, [pc, #376]	; (800698c <HAL_GPIO_Init+0x334>)
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	4a5d      	ldr	r2, [pc, #372]	; (800698c <HAL_GPIO_Init+0x334>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6613      	str	r3, [r2, #96]	; 0x60
 800681e:	4b5b      	ldr	r3, [pc, #364]	; (800698c <HAL_GPIO_Init+0x334>)
 8006820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800682a:	4a59      	ldr	r2, [pc, #356]	; (8006990 <HAL_GPIO_Init+0x338>)
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	3302      	adds	r3, #2
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	220f      	movs	r2, #15
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006854:	d025      	beq.n	80068a2 <HAL_GPIO_Init+0x24a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <HAL_GPIO_Init+0x33c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01f      	beq.n	800689e <HAL_GPIO_Init+0x246>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <HAL_GPIO_Init+0x340>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d019      	beq.n	800689a <HAL_GPIO_Init+0x242>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a4c      	ldr	r2, [pc, #304]	; (800699c <HAL_GPIO_Init+0x344>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_GPIO_Init+0x23e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <HAL_GPIO_Init+0x348>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00d      	beq.n	8006892 <HAL_GPIO_Init+0x23a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4a      	ldr	r2, [pc, #296]	; (80069a4 <HAL_GPIO_Init+0x34c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d007      	beq.n	800688e <HAL_GPIO_Init+0x236>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a49      	ldr	r2, [pc, #292]	; (80069a8 <HAL_GPIO_Init+0x350>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <HAL_GPIO_Init+0x232>
 8006886:	2306      	movs	r3, #6
 8006888:	e00c      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 800688a:	2307      	movs	r3, #7
 800688c:	e00a      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 800688e:	2305      	movs	r3, #5
 8006890:	e008      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 8006892:	2304      	movs	r3, #4
 8006894:	e006      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 8006896:	2303      	movs	r3, #3
 8006898:	e004      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 800689a:	2302      	movs	r3, #2
 800689c:	e002      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_GPIO_Init+0x24c>
 80068a2:	2300      	movs	r3, #0
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	f002 0203 	and.w	r2, r2, #3
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	4093      	lsls	r3, r2
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80068b4:	4936      	ldr	r1, [pc, #216]	; (8006990 <HAL_GPIO_Init+0x338>)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	3302      	adds	r3, #2
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068c2:	4b3a      	ldr	r3, [pc, #232]	; (80069ac <HAL_GPIO_Init+0x354>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	43db      	mvns	r3, r3
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4013      	ands	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068e6:	4a31      	ldr	r2, [pc, #196]	; (80069ac <HAL_GPIO_Init+0x354>)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80068ec:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <HAL_GPIO_Init+0x354>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4013      	ands	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006910:	4a26      	ldr	r2, [pc, #152]	; (80069ac <HAL_GPIO_Init+0x354>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006916:	4b25      	ldr	r3, [pc, #148]	; (80069ac <HAL_GPIO_Init+0x354>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	43db      	mvns	r3, r3
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4013      	ands	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_GPIO_Init+0x354>)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <HAL_GPIO_Init+0x354>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	43db      	mvns	r3, r3
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4013      	ands	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <HAL_GPIO_Init+0x354>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	f47f ae78 	bne.w	8006670 <HAL_GPIO_Init+0x18>
  }
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40021000 	.word	0x40021000
 8006990:	40010000 	.word	0x40010000
 8006994:	48000400 	.word	0x48000400
 8006998:	48000800 	.word	0x48000800
 800699c:	48000c00 	.word	0x48000c00
 80069a0:	48001000 	.word	0x48001000
 80069a4:	48001400 	.word	0x48001400
 80069a8:	48001800 	.word	0x48001800
 80069ac:	40010400 	.word	0x40010400

080069b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	e001      	b.n	80069d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	807b      	strh	r3, [r7, #2]
 80069ea:	4613      	mov	r3, r2
 80069ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069ee:	787b      	ldrb	r3, [r7, #1]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069f4:	887a      	ldrh	r2, [r7, #2]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069fa:	e002      	b.n	8006a02 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a22:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fa f9bc 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010400 	.word	0x40010400

08006a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e07d      	b.n	8006b4a <HAL_I2C_Init+0x10e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f875 	bl	8006b52 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a9c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d012      	beq.n	8006acc <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d107      	bne.n	8006abe <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	e006      	b.n	8006acc <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006aca:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d104      	bne.n	8006ade <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	ea42 0103 	orr.w	r1, r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69d9      	ldr	r1, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	460b      	mov	r3, r1
 8006b72:	817b      	strh	r3, [r7, #10]
 8006b74:	4613      	mov	r3, r2
 8006b76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	f040 80e6 	bne.w	8006d56 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_I2C_Master_Transmit+0x34>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0df      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ba0:	f7ff f9cc 	bl	8005f3c <HAL_GetTick>
 8006ba4:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	2319      	movs	r3, #25
 8006bac:	2201      	movs	r2, #1
 8006bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f9fb 	bl	8006fae <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e0ca      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2221      	movs	r2, #33	; 0x21
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	893a      	ldrh	r2, [r7, #8]
 8006be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2bff      	cmp	r3, #255	; 0xff
 8006bf2:	d90f      	bls.n	8006c14 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22ff      	movs	r2, #255	; 0xff
 8006bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	8979      	ldrh	r1, [r7, #10]
 8006c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fb41 	bl	8007294 <I2C_TransferConfig>
 8006c12:	e071      	b.n	8006cf8 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fb2f 	bl	8007294 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8006c36:	e05f      	b.n	8006cf8 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	6a39      	ldr	r1, [r7, #32]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f9f0 	bl	8007022 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d101      	bne.n	8006c54 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e081      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e07f      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c59      	adds	r1, r3, #1
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	6251      	str	r1, [r2, #36]	; 0x24
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d135      	bne.n	8006cf8 <HAL_I2C_Master_Transmit+0x194>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d030      	beq.n	8006cf8 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f984 	bl	8006fae <I2C_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e053      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2bff      	cmp	r3, #255	; 0xff
 8006cb8:	d90e      	bls.n	8006cd8 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	8979      	ldrh	r1, [r7, #10]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fadf 	bl	8007294 <I2C_TransferConfig>
 8006cd6:	e00f      	b.n	8006cf8 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	8979      	ldrh	r1, [r7, #10]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 face 	bl	8007294 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d19a      	bne.n	8006c38 <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	6a39      	ldr	r1, [r7, #32]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f9cb 	bl	80070a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d101      	bne.n	8006d1e <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e01c      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e01a      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2220      	movs	r2, #32
 8006d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <HAL_I2C_Master_Transmit+0x1fc>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e000      	b.n	8006d58 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8006d56:	2302      	movs	r3, #2
  }
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	fe00e800 	.word	0xfe00e800

08006d64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	460b      	mov	r3, r1
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	4613      	mov	r3, r2
 8006d76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	f040 80e7 	bne.w	8006f58 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_I2C_Master_Receive+0x34>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e0e0      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006da0:	f7ff f8cc 	bl	8005f3c <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2319      	movs	r3, #25
 8006dac:	2201      	movs	r2, #1
 8006dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f8fb 	bl	8006fae <I2C_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e0cb      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2222      	movs	r2, #34	; 0x22
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	893a      	ldrh	r2, [r7, #8]
 8006de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2bff      	cmp	r3, #255	; 0xff
 8006df2:	d90f      	bls.n	8006e14 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	22ff      	movs	r2, #255	; 0xff
 8006df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	8979      	ldrh	r1, [r7, #10]
 8006e02:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fa41 	bl	8007294 <I2C_TransferConfig>
 8006e12:	e072      	b.n	8006efa <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	8979      	ldrh	r1, [r7, #10]
 8006e26:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fa2f 	bl	8007294 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8006e36:	e060      	b.n	8006efa <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	6a39      	ldr	r1, [r7, #32]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f96d 	bl	800711c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d101      	bne.n	8006e54 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e082      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e080      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	6251      	str	r1, [r2, #36]	; 0x24
 8006e68:	b2c2      	uxtb	r2, r0
 8006e6a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d135      	bne.n	8006efa <HAL_I2C_Master_Receive+0x196>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d030      	beq.n	8006efa <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2180      	movs	r1, #128	; 0x80
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f883 	bl	8006fae <I2C_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e053      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2bff      	cmp	r3, #255	; 0xff
 8006eba:	d90e      	bls.n	8006eda <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	22ff      	movs	r2, #255	; 0xff
 8006ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	8979      	ldrh	r1, [r7, #10]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f9de 	bl	8007294 <I2C_TransferConfig>
 8006ed8:	e00f      	b.n	8006efa <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f9cd 	bl	8007294 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d199      	bne.n	8006e38 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	6a39      	ldr	r1, [r7, #32]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f8ca 	bl	80070a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d101      	bne.n	8006f20 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e01c      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e01a      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <HAL_I2C_Master_Receive+0x200>)
 8006f38:	400b      	ands	r3, r1
 8006f3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	fe00e800 	.word	0xfe00e800

08006f68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d103      	bne.n	8006f86 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d007      	beq.n	8006fa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	619a      	str	r2, [r3, #24]
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr

08006fae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fbe:	e01c      	b.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d018      	beq.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fce:	f7fe ffb5 	bl	8005f3c <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20d      	bcs.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e00f      	b.n	800701a <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d0d3      	beq.n	8006fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800702e:	e02c      	b.n	800708a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f8cf 	bl	80071d8 <I2C_IsAcknowledgeFailed>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e02a      	b.n	800709a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d01e      	beq.n	800708a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007052:	f7fe ff73 	bl	8005f3c <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d213      	bcs.n	800708a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	f043 0220 	orr.w	r2, r3, #32
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e007      	b.n	800709a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d1cb      	bne.n	8007030 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070ae:	e028      	b.n	8007102 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f88f 	bl	80071d8 <I2C_IsAcknowledgeFailed>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e026      	b.n	8007112 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070ca:	f7fe ff37 	bl	8005f3c <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d213      	bcs.n	8007102 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e007      	b.n	8007112 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d1cf      	bne.n	80070b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007128:	e048      	b.n	80071bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f852 	bl	80071d8 <I2C_IsAcknowledgeFailed>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e046      	b.n	80071cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d11c      	bne.n	8007186 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2220      	movs	r2, #32
 8007152:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8007160:	400b      	ands	r3, r1
 8007162:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e022      	b.n	80071cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 800718c:	f7fe fed6 	bl	8005f3c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	d20f      	bcs.n	80071bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	f043 0220 	orr.w	r2, r3, #32
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e007      	b.n	80071cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d1af      	bne.n	800712a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	fe00e800 	.word	0xfe00e800

080071d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d148      	bne.n	8007284 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071f2:	e01c      	b.n	800722e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d018      	beq.n	800722e <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <I2C_IsAcknowledgeFailed+0x3a>
 8007202:	f7fe fe9b 	bl	8005f3c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d20d      	bcs.n	800722e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e02b      	b.n	8007286 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b20      	cmp	r3, #32
 800723a:	d1db      	bne.n	80071f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2220      	movs	r2, #32
 800724a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fe8b 	bl	8006f68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <I2C_IsAcknowledgeFailed+0xb8>)
 800725e:	400b      	ands	r3, r1
 8007260:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2204      	movs	r2, #4
 8007266:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	fe00e800 	.word	0xfe00e800

08007294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	817b      	strh	r3, [r7, #10]
 80072a2:	4613      	mov	r3, r2
 80072a4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <I2C_TransferConfig+0x58>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80072ba:	897b      	ldrh	r3, [r7, #10]
 80072bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072c0:	7a7b      	ldrb	r3, [r7, #9]
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	431a      	orrs	r2, r3
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	605a      	str	r2, [r3, #4]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	fc009800 	.word	0xfc009800

080072f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80072f4:	4b03      	ldr	r3, [pc, #12]	; (8007304 <HAL_PWREx_GetVoltageRange+0x14>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	40007000 	.word	0x40007000

08007308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800731a:	d12f      	bne.n	800737c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800731c:	4b22      	ldr	r3, [pc, #136]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007328:	d037      	beq.n	800739a <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800732a:	4b1f      	ldr	r3, [pc, #124]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007332:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007338:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800733a:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1c      	ldr	r2, [pc, #112]	; (80073b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	0c9b      	lsrs	r3, r3, #18
 8007346:	2232      	movs	r2, #50	; 0x32
 8007348:	fb02 f303 	mul.w	r3, r2, r3
 800734c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800734e:	e002      	b.n	8007356 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3b01      	subs	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <HAL_PWREx_ControlVoltageScaling+0x62>
 800735c:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007368:	d0f2      	beq.n	8007350 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007376:	d110      	bne.n	800739a <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e00f      	b.n	800739c <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007388:	d007      	beq.n	800739a <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007392:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007398:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}  
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40007000 	.word	0x40007000
 80073ac:	200002cc 	.word	0x200002cc
 80073b0:	431bde83 	.word	0x431bde83

080073b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08c      	sub	sp, #48	; 0x30
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80db 	beq.w	8007584 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80073ce:	4ba3      	ldr	r3, [pc, #652]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 030c 	and.w	r3, r3, #12
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 8084 	bne.w	80074e4 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073dc:	4b9f      	ldr	r3, [pc, #636]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_OscConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e363      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	4b98      	ldr	r3, [pc, #608]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCC_OscConfig+0x5a>
 8007404:	4b95      	ldr	r3, [pc, #596]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740c:	e005      	b.n	800741a <HAL_RCC_OscConfig+0x66>
 800740e:	4b93      	ldr	r3, [pc, #588]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800741a:	4293      	cmp	r3, r2
 800741c:	d223      	bcs.n	8007466 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fdba 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e344      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007432:	4b8a      	ldr	r3, [pc, #552]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a89      	ldr	r2, [pc, #548]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	4b87      	ldr	r3, [pc, #540]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	4984      	ldr	r1, [pc, #528]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007450:	4b82      	ldr	r3, [pc, #520]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	497f      	ldr	r1, [pc, #508]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007460:	4313      	orrs	r3, r2
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	e022      	b.n	80074ac <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007466:	4b7d      	ldr	r3, [pc, #500]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a7c      	ldr	r2, [pc, #496]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800746c:	f043 0308 	orr.w	r3, r3, #8
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4b7a      	ldr	r3, [pc, #488]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	4977      	ldr	r1, [pc, #476]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007480:	4313      	orrs	r3, r2
 8007482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007484:	4b75      	ldr	r3, [pc, #468]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	4972      	ldr	r1, [pc, #456]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007494:	4313      	orrs	r3, r2
 8007496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fd7d 	bl	8007f9c <RCC_SetFlashLatencyFromMSIRange>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e307      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80074ac:	f000 fc2e 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 80074b0:	4601      	mov	r1, r0
 80074b2:	4b6a      	ldr	r3, [pc, #424]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074ba:	23f0      	movs	r3, #240	; 0xf0
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	fa93 f3a3 	rbit	r3, r3
 80074c4:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	fab3 f383 	clz	r3, r3
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
 80074d0:	4a63      	ldr	r2, [pc, #396]	; (8007660 <HAL_RCC_OscConfig+0x2ac>)
 80074d2:	5cd3      	ldrb	r3, [r2, r3]
 80074d4:	fa21 f303 	lsr.w	r3, r1, r3
 80074d8:	4a62      	ldr	r2, [pc, #392]	; (8007664 <HAL_RCC_OscConfig+0x2b0>)
 80074da:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80074dc:	200f      	movs	r0, #15
 80074de:	f7fe fd03 	bl	8005ee8 <HAL_InitTick>
 80074e2:	e04f      	b.n	8007584 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d032      	beq.n	8007552 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80074ec:	4b5b      	ldr	r3, [pc, #364]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a5a      	ldr	r2, [pc, #360]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074f8:	f7fe fd20 	bl	8005f3c <HAL_GetTick>
 80074fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007500:	f7fe fd1c 	bl	8005f3c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e2d4      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8007512:	4b52      	ldr	r3, [pc, #328]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800751e:	4b4f      	ldr	r3, [pc, #316]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4e      	ldr	r2, [pc, #312]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007524:	f043 0308 	orr.w	r3, r3, #8
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4b4c      	ldr	r3, [pc, #304]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	4949      	ldr	r1, [pc, #292]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007538:	4313      	orrs	r3, r2
 800753a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800753c:	4b47      	ldr	r3, [pc, #284]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	4944      	ldr	r1, [pc, #272]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800754c:	4313      	orrs	r3, r2
 800754e:	604b      	str	r3, [r1, #4]
 8007550:	e018      	b.n	8007584 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007552:	4b42      	ldr	r3, [pc, #264]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a41      	ldr	r2, [pc, #260]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800755e:	f7fe fced 	bl	8005f3c <HAL_GetTick>
 8007562:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007566:	f7fe fce9 	bl	8005f3c <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e2a1      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8007578:	4b38      	ldr	r3, [pc, #224]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f0      	bne.n	8007566 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d07e      	beq.n	800768e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8007590:	4b32      	ldr	r3, [pc, #200]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 030c 	and.w	r3, r3, #12
 8007598:	2b08      	cmp	r3, #8
 800759a:	d00b      	beq.n	80075b4 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800759c:	4b2f      	ldr	r3, [pc, #188]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80075a4:	2b0c      	cmp	r3, #12
 80075a6:	d111      	bne.n	80075cc <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80075a8:	4b2c      	ldr	r3, [pc, #176]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d10b      	bne.n	80075cc <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b4:	4b29      	ldr	r3, [pc, #164]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d065      	beq.n	800768c <HAL_RCC_OscConfig+0x2d8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d161      	bne.n	800768c <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e277      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d4:	d106      	bne.n	80075e4 <HAL_RCC_OscConfig+0x230>
 80075d6:	4b21      	ldr	r3, [pc, #132]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a20      	ldr	r2, [pc, #128]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e01d      	b.n	8007620 <HAL_RCC_OscConfig+0x26c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075ec:	d10c      	bne.n	8007608 <HAL_RCC_OscConfig+0x254>
 80075ee:	4b1b      	ldr	r3, [pc, #108]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1a      	ldr	r2, [pc, #104]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	4b18      	ldr	r3, [pc, #96]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a17      	ldr	r2, [pc, #92]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e00b      	b.n	8007620 <HAL_RCC_OscConfig+0x26c>
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a13      	ldr	r2, [pc, #76]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800760e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a10      	ldr	r2, [pc, #64]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 800761a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d015      	beq.n	8007654 <HAL_RCC_OscConfig+0x2a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fe fc88 	bl	8005f3c <HAL_GetTick>
 800762c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800762e:	e00a      	b.n	8007646 <HAL_RCC_OscConfig+0x292>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007630:	f7fe fc84 	bl	8005f3c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f241 3288 	movw	r2, #5000	; 0x1388
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e23a      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <HAL_RCC_OscConfig+0x2a8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0ee      	beq.n	8007630 <HAL_RCC_OscConfig+0x27c>
 8007652:	e01c      	b.n	800768e <HAL_RCC_OscConfig+0x2da>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fe fc72 	bl	8005f3c <HAL_GetTick>
 8007658:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800765a:	e010      	b.n	800767e <HAL_RCC_OscConfig+0x2ca>
 800765c:	40021000 	.word	0x40021000
 8007660:	0800bdc0 	.word	0x0800bdc0
 8007664:	200002cc 	.word	0x200002cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007668:	f7fe fc68 	bl	8005f3c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	f241 3288 	movw	r2, #5000	; 0x1388
 8007676:	4293      	cmp	r3, r2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e21e      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800767e:	4bb0      	ldr	r3, [pc, #704]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1ee      	bne.n	8007668 <HAL_RCC_OscConfig+0x2b4>
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x2da>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d07f      	beq.n	800779a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800769a:	4ba9      	ldr	r3, [pc, #676]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00b      	beq.n	80076be <HAL_RCC_OscConfig+0x30a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80076a6:	4ba6      	ldr	r3, [pc, #664]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d127      	bne.n	8007702 <HAL_RCC_OscConfig+0x34e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80076b2:	4ba3      	ldr	r3, [pc, #652]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d121      	bne.n	8007702 <HAL_RCC_OscConfig+0x34e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076be:	4ba0      	ldr	r3, [pc, #640]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_RCC_OscConfig+0x322>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e1f2      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d6:	4b9a      	ldr	r3, [pc, #616]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6919      	ldr	r1, [r3, #16]
 80076e2:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80076e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	fa93 f3a3 	rbit	r3, r3
 80076ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	fab3 f383 	clz	r3, r3
 80076f6:	fa01 f303 	lsl.w	r3, r1, r3
 80076fa:	4991      	ldr	r1, [pc, #580]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007700:	e04b      	b.n	800779a <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02e      	beq.n	8007768 <HAL_RCC_OscConfig+0x3b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800770a:	4b8d      	ldr	r3, [pc, #564]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a8c      	ldr	r2, [pc, #560]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007716:	f7fe fc11 	bl	8005f3c <HAL_GetTick>
 800771a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x37c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771e:	f7fe fc0d 	bl	8005f3c <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e1c5      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007730:	4b83      	ldr	r3, [pc, #524]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x36a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773c:	4b80      	ldr	r3, [pc, #512]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6919      	ldr	r1, [r3, #16]
 8007748:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800774c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	fa93 f3a3 	rbit	r3, r3
 8007754:	613b      	str	r3, [r7, #16]
  return(result);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	fab3 f383 	clz	r3, r3
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	4977      	ldr	r1, [pc, #476]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	604b      	str	r3, [r1, #4]
 8007766:	e018      	b.n	800779a <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007768:	4b75      	ldr	r3, [pc, #468]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a74      	ldr	r2, [pc, #464]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800776e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007774:	f7fe fbe2 	bl	8005f3c <HAL_GetTick>
 8007778:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x3da>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800777c:	f7fe fbde 	bl	8005f3c <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x3da>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e196      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800778e:	4b6c      	ldr	r3, [pc, #432]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d03c      	beq.n	8007820 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01c      	beq.n	80077e8 <HAL_RCC_OscConfig+0x434>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077ae:	4b64      	ldr	r3, [pc, #400]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80077b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b4:	4a62      	ldr	r2, [pc, #392]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fe fbbd 	bl	8005f3c <HAL_GetTick>
 80077c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077c6:	f7fe fbb9 	bl	8005f3c <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e171      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80077d8:	4b59      	ldr	r3, [pc, #356]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80077da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0ef      	beq.n	80077c6 <HAL_RCC_OscConfig+0x412>
 80077e6:	e01b      	b.n	8007820 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077e8:	4b55      	ldr	r3, [pc, #340]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80077ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ee:	4a54      	ldr	r2, [pc, #336]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f8:	f7fe fba0 	bl	8005f3c <HAL_GetTick>
 80077fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007800:	f7fe fb9c 	bl	8005f3c <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x45e>
        {
          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e154      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8007812:	4b4b      	ldr	r3, [pc, #300]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ef      	bne.n	8007800 <HAL_RCC_OscConfig+0x44c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80a9 	beq.w	8007980 <HAL_RCC_OscConfig+0x5cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007834:	4b42      	ldr	r3, [pc, #264]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10e      	bne.n	800785e <HAL_RCC_OscConfig+0x4aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007840:	4b3f      	ldr	r3, [pc, #252]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	4a3e      	ldr	r2, [pc, #248]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800784a:	6593      	str	r3, [r2, #88]	; 0x58
 800784c:	4b3c      	ldr	r3, [pc, #240]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007858:	2301      	movs	r3, #1
 800785a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800785e:	4b39      	ldr	r3, [pc, #228]	; (8007944 <HAL_RCC_OscConfig+0x590>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	2b00      	cmp	r3, #0
 8007868:	d118      	bne.n	800789c <HAL_RCC_OscConfig+0x4e8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800786a:	4b36      	ldr	r3, [pc, #216]	; (8007944 <HAL_RCC_OscConfig+0x590>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a35      	ldr	r2, [pc, #212]	; (8007944 <HAL_RCC_OscConfig+0x590>)
 8007870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007874:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007876:	f7fe fb61 	bl	8005f3c <HAL_GetTick>
 800787a:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800787e:	f7fe fb5d 	bl	8005f3c <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e115      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007890:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <HAL_RCC_OscConfig+0x590>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d108      	bne.n	80078b6 <HAL_RCC_OscConfig+0x502>
 80078a4:	4b26      	ldr	r3, [pc, #152]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078aa:	4a25      	ldr	r2, [pc, #148]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078b4:	e024      	b.n	8007900 <HAL_RCC_OscConfig+0x54c>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d110      	bne.n	80078e0 <HAL_RCC_OscConfig+0x52c>
 80078be:	4b20      	ldr	r3, [pc, #128]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078c6:	f043 0304 	orr.w	r3, r3, #4
 80078ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	4a1a      	ldr	r2, [pc, #104]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078de:	e00f      	b.n	8007900 <HAL_RCC_OscConfig+0x54c>
 80078e0:	4b17      	ldr	r3, [pc, #92]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	4a12      	ldr	r2, [pc, #72]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 80078f8:	f023 0304 	bic.w	r3, r3, #4
 80078fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d016      	beq.n	8007936 <HAL_RCC_OscConfig+0x582>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007908:	f7fe fb18 	bl	8005f3c <HAL_GetTick>
 800790c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800790e:	e00a      	b.n	8007926 <HAL_RCC_OscConfig+0x572>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007910:	f7fe fb14 	bl	8005f3c <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x572>
        {
          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e0ca      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <HAL_RCC_OscConfig+0x58c>)
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0ed      	beq.n	8007910 <HAL_RCC_OscConfig+0x55c>
 8007934:	e01a      	b.n	800796c <HAL_RCC_OscConfig+0x5b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007936:	f7fe fb01 	bl	8005f3c <HAL_GetTick>
 800793a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800793c:	e00f      	b.n	800795e <HAL_RCC_OscConfig+0x5aa>
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000
 8007944:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007948:	f7fe faf8 	bl	8005f3c <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	f241 3288 	movw	r2, #5000	; 0x1388
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e0ae      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800795e:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1ed      	bne.n	8007948 <HAL_RCC_OscConfig+0x594>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800796c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007970:	2b01      	cmp	r3, #1
 8007972:	d105      	bne.n	8007980 <HAL_RCC_OscConfig+0x5cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007974:	4b53      	ldr	r3, [pc, #332]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	4a52      	ldr	r2, [pc, #328]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 800797a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800797e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8098 	beq.w	8007aba <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 030c 	and.w	r3, r3, #12
 8007992:	2b0c      	cmp	r3, #12
 8007994:	f000 808f 	beq.w	8007ab6 <HAL_RCC_OscConfig+0x702>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	2b02      	cmp	r3, #2
 800799e:	d156      	bne.n	8007a4e <HAL_RCC_OscConfig+0x69a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a0:	4b48      	ldr	r3, [pc, #288]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a47      	ldr	r2, [pc, #284]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 80079a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ac:	f7fe fac6 	bl	8005f3c <HAL_GetTick>
 80079b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b4:	f7fe fac2 	bl	8005f3c <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e07a      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80079c6:	4b3f      	ldr	r3, [pc, #252]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0x600>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	3b01      	subs	r3, #1
 80079d8:	011a      	lsls	r2, r3, #4
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	045b      	lsls	r3, r3, #17
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	3b01      	subs	r3, #1
 80079fa:	055b      	lsls	r3, r3, #21
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	3b01      	subs	r3, #1
 8007a06:	065b      	lsls	r3, r3, #25
 8007a08:	492e      	ldr	r1, [pc, #184]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a0e:	4b2d      	ldr	r3, [pc, #180]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2c      	ldr	r2, [pc, #176]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a18:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a24:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a26:	f7fe fa89 	bl	8005f3c <HAL_GetTick>
 8007a2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCC_OscConfig+0x68c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a2e:	f7fe fa85 	bl	8005f3c <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x68c>
          {
            return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e03d      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007a40:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <HAL_RCC_OscConfig+0x67a>
 8007a4c:	e035      	b.n	8007aba <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8007a66:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_RCC_OscConfig+0x6ca>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	4a13      	ldr	r2, [pc, #76]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a78:	f023 0303 	bic.w	r3, r3, #3
 8007a7c:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	4a10      	ldr	r2, [pc, #64]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007a84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8e:	f7fe fa55 	bl	8005f3c <HAL_GetTick>
 8007a92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a96:	f7fe fa51 	bl	8005f3c <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e009      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <HAL_RCC_OscConfig+0x710>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f0      	bne.n	8007a96 <HAL_RCC_OscConfig+0x6e2>
 8007ab4:	e001      	b.n	8007aba <HAL_RCC_OscConfig+0x706>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <HAL_RCC_OscConfig+0x708>
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3730      	adds	r7, #48	; 0x30
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40021000 	.word	0x40021000

08007ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007ad6:	4b89      	ldr	r3, [pc, #548]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d910      	bls.n	8007b06 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae4:	4b85      	ldr	r3, [pc, #532]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f023 0207 	bic.w	r2, r3, #7
 8007aec:	4983      	ldr	r1, [pc, #524]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007af4:	4b81      	ldr	r3, [pc, #516]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d001      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0f6      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b12:	4b7b      	ldr	r3, [pc, #492]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4978      	ldr	r1, [pc, #480]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 808e 	beq.w	8007c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d107      	bne.n	8007b4a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8007b3a:	4b71      	ldr	r3, [pc, #452]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d121      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e0d4      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d107      	bne.n	8007b62 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8007b52:	4b6b      	ldr	r3, [pc, #428]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d115      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e0c8      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d107      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8007b6a:	4b65      	ldr	r3, [pc, #404]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0bc      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8007b7a:	4b61      	ldr	r3, [pc, #388]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e0b4      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b8a:	4b5d      	ldr	r3, [pc, #372]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f023 0203 	bic.w	r2, r3, #3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	495a      	ldr	r1, [pc, #360]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b9c:	f7fe f9ce 	bl	8005f3c <HAL_GetTick>
 8007ba0:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d112      	bne.n	8007bd0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8007baa:	e00a      	b.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bac:	f7fe f9c6 	bl	8005f3c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e098      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8007bc2:	4b4f      	ldr	r3, [pc, #316]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 030c 	and.w	r3, r3, #12
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d1ee      	bne.n	8007bac <HAL_RCC_ClockConfig+0xe4>
 8007bce:	e03e      	b.n	8007c4e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d112      	bne.n	8007bfe <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bd8:	e00a      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bda:	f7fe f9af 	bl	8005f3c <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e081      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bf0:	4b43      	ldr	r3, [pc, #268]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b0c      	cmp	r3, #12
 8007bfa:	d1ee      	bne.n	8007bda <HAL_RCC_ClockConfig+0x112>
 8007bfc:	e027      	b.n	8007c4e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d11d      	bne.n	8007c42 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8007c06:	e00a      	b.n	8007c1e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c08:	f7fe f998 	bl	8005f3c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e06a      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8007c1e:	4b38      	ldr	r3, [pc, #224]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 030c 	and.w	r3, r3, #12
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1ee      	bne.n	8007c08 <HAL_RCC_ClockConfig+0x140>
 8007c2a:	e010      	b.n	8007c4e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c2c:	f7fe f986 	bl	8005f3c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e058      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8007c42:	4b2f      	ldr	r3, [pc, #188]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d1ee      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8007c4e:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d210      	bcs.n	8007c7e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f023 0207 	bic.w	r2, r3, #7
 8007c64:	4925      	ldr	r1, [pc, #148]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c6c:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <HAL_RCC_ClockConfig+0x234>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d001      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e03a      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	491a      	ldr	r1, [pc, #104]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	4912      	ldr	r1, [pc, #72]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007cbc:	f000 f826 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <HAL_RCC_ClockConfig+0x238>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007cca:	23f0      	movs	r3, #240	; 0xf0
 8007ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	fa93 f3a3 	rbit	r3, r3
 8007cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	fab3 f383 	clz	r3, r3
 8007cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <HAL_RCC_ClockConfig+0x23c>)
 8007ce2:	5cd3      	ldrb	r3, [r2, r3]
 8007ce4:	fa21 f303 	lsr.w	r3, r1, r3
 8007ce8:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <HAL_RCC_ClockConfig+0x240>)
 8007cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007cec:	200f      	movs	r0, #15
 8007cee:	f7fe f8fb 	bl	8005ee8 <HAL_InitTick>

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40022000 	.word	0x40022000
 8007d00:	40021000 	.word	0x40021000
 8007d04:	0800bdc0 	.word	0x0800bdc0
 8007d08:	200002cc 	.word	0x200002cc

08007d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b095      	sub	sp, #84	; 0x54
 8007d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d16:	2300      	movs	r3, #0
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1e:	2302      	movs	r3, #2
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d22:	2302      	movs	r3, #2
 8007d24:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8007d2a:	4b71      	ldr	r3, [pc, #452]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8007d36:	4b6e      	ldr	r3, [pc, #440]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8007d3e:	2b0c      	cmp	r3, #12
 8007d40:	d13c      	bne.n	8007dbc <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8007d42:	4b6b      	ldr	r3, [pc, #428]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d136      	bne.n	8007dbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8007d4e:	4b68      	ldr	r3, [pc, #416]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d112      	bne.n	8007d80 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8007d5a:	4b65      	ldr	r3, [pc, #404]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d60:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007d64:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	fa93 f3a3 	rbit	r3, r3
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	fab3 f383 	clz	r3, r3
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d7e:	e00f      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8007d80:	4b5b      	ldr	r3, [pc, #364]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d88:	23f0      	movs	r3, #240	; 0xf0
 8007d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	fa93 f3a3 	rbit	r3, r3
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	fab3 f383 	clz	r3, r3
 8007d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007da0:	4a54      	ldr	r2, [pc, #336]	; (8007ef4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8007da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8007daa:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d113      	bne.n	8007dde <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8007dba:	e010      	b.n	8007dde <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dbc:	4b4c      	ldr	r3, [pc, #304]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d102      	bne.n	8007dce <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dc8:	4b4b      	ldr	r3, [pc, #300]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8007dca:	647b      	str	r3, [r7, #68]	; 0x44
 8007dcc:	e007      	b.n	8007dde <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007dce:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d101      	bne.n	8007dde <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dda:	4b48      	ldr	r3, [pc, #288]	; (8007efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007dde:	4b44      	ldr	r3, [pc, #272]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 030c 	and.w	r3, r3, #12
 8007de6:	2b0c      	cmp	r3, #12
 8007de8:	d17b      	bne.n	8007ee2 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007dea:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8007df4:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007dfc:	2370      	movs	r3, #112	; 0x70
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	fa93 f3a3 	rbit	r3, r3
 8007e06:	623b      	str	r3, [r7, #32]
  return(result);
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	fab3 f383 	clz	r3, r3
 8007e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e12:	3301      	adds	r3, #1
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8007e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d002      	beq.n	8007e22 <HAL_RCC_GetSysClockFreq+0x116>
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d018      	beq.n	8007e52 <HAL_RCC_GetSysClockFreq+0x146>
 8007e20:	e02f      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8007e22:	4a35      	ldr	r2, [pc, #212]	; (8007ef8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	4a31      	ldr	r2, [pc, #196]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007e2c:	68d2      	ldr	r2, [r2, #12]
 8007e2e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8007e32:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007e36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	fa92 f2a2 	rbit	r2, r2
 8007e3e:	61ba      	str	r2, [r7, #24]
  return(result);
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	fab2 f282 	clz	r2, r2
 8007e46:	fa21 f202 	lsr.w	r2, r1, r2
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e50:	e02f      	b.n	8007eb2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8007e52:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007e5c:	68d2      	ldr	r2, [r2, #12]
 8007e5e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8007e62:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007e66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	fa92 f2a2 	rbit	r2, r2
 8007e6e:	613a      	str	r2, [r7, #16]
  return(result);
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	fab2 f282 	clz	r2, r2
 8007e76:	fa21 f202 	lsr.w	r2, r1, r2
 8007e7a:	fb02 f303 	mul.w	r3, r2, r3
 8007e7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e80:	e017      	b.n	8007eb2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8007e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8a:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007e8c:	68d2      	ldr	r2, [r2, #12]
 8007e8e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8007e92:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007e96:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	fa92 f2a2 	rbit	r2, r2
 8007e9e:	60ba      	str	r2, [r7, #8]
  return(result);
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	fab2 f282 	clz	r2, r2
 8007ea6:	fa21 f202 	lsr.w	r2, r1, r2
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007eb0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8007eb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007eba:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8007ebe:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	fa93 f3a3 	rbit	r3, r3
 8007ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	fab3 f383 	clz	r3, r3
 8007ece:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8007ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8007ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3754      	adds	r7, #84	; 0x54
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	0800bdd8 	.word	0x0800bdd8
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	007a1200 	.word	0x007a1200

08007f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f06:	681b      	ldr	r3, [r3, #0]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr
 8007f10:	200002cc 	.word	0x200002cc

08007f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8007f1a:	f7ff fff1 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f1e:	4601      	mov	r1, r0
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007f2c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	fa93 f3a3 	rbit	r3, r3
 8007f34:	603b      	str	r3, [r7, #0]
  return(result);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	fab3 f383 	clz	r3, r3
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	4a04      	ldr	r2, [pc, #16]	; (8007f54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007f42:	5cd3      	ldrb	r3, [r2, r3]
 8007f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40021000 	.word	0x40021000
 8007f54:	0800bdd0 	.word	0x0800bdd0

08007f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8007f5e:	f7ff ffcf 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 8007f62:	4601      	mov	r1, r0
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8007f6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007f70:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	fa93 f3a3 	rbit	r3, r3
 8007f78:	603b      	str	r3, [r7, #0]
  return(result);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	fab3 f383 	clz	r3, r3
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007f86:	5cd3      	ldrb	r3, [r2, r3]
 8007f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40021000 	.word	0x40021000
 8007f98:	0800bdd0 	.word	0x0800bdd0

08007f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fac:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fb8:	f7ff f99a 	bl	80072f0 <HAL_PWREx_GetVoltageRange>
 8007fbc:	6178      	str	r0, [r7, #20]
 8007fbe:	e014      	b.n	8007fea <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fc0:	4b25      	ldr	r3, [pc, #148]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc4:	4a24      	ldr	r2, [pc, #144]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fca:	6593      	str	r3, [r2, #88]	; 0x58
 8007fcc:	4b22      	ldr	r3, [pc, #136]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fd8:	f7ff f98a 	bl	80072f0 <HAL_PWREx_GetVoltageRange>
 8007fdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fde:	4b1e      	ldr	r3, [pc, #120]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe2:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff0:	d10b      	bne.n	800800a <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d919      	bls.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8007ffc:	d902      	bls.n	8008004 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ffe:	2302      	movs	r3, #2
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	e013      	b.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008004:	2301      	movs	r3, #1
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	e010      	b.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b80      	cmp	r3, #128	; 0x80
 800800e:	d902      	bls.n	8008016 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008010:	2303      	movs	r3, #3
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	e00a      	b.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d102      	bne.n	8008022 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800801c:	2302      	movs	r3, #2
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	e004      	b.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b70      	cmp	r3, #112	; 0x70
 8008026:	d101      	bne.n	800802c <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008028:	2301      	movs	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800802c:	4b0b      	ldr	r3, [pc, #44]	; (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f023 0207 	bic.w	r2, r3, #7
 8008034:	4909      	ldr	r1, [pc, #36]	; (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800803c:	4b07      	ldr	r3, [pc, #28]	; (800805c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	429a      	cmp	r2, r3
 8008048:	d001      	beq.n	800804e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40021000 	.word	0x40021000
 800805c:	40022000 	.word	0x40022000

08008060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008070:	2300      	movs	r3, #0
 8008072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008074:	2300      	movs	r3, #0
 8008076:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008080:	2b00      	cmp	r3, #0
 8008082:	d03f      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808c:	d01c      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800808e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008092:	d802      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00e      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008098:	e01f      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800809a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800809e:	d003      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80080a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080a4:	d01c      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80080a6:	e018      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080a8:	4b82      	ldr	r3, [pc, #520]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4a81      	ldr	r2, [pc, #516]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080b4:	e015      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3304      	adds	r3, #4
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fab3 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80080c2:	4603      	mov	r3, r0
 80080c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080c6:	e00c      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3320      	adds	r3, #32
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fbfe 	bl	80088d0 <RCCEx_PLLSAI2_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080d8:	e003      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	74fb      	strb	r3, [r7, #19]
      break;
 80080de:	e000      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 80080e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e2:	7cfb      	ldrb	r3, [r7, #19]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080e8:	4b72      	ldr	r3, [pc, #456]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f6:	496f      	ldr	r1, [pc, #444]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80080fe:	e001      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	7cfb      	ldrb	r3, [r7, #19]
 8008102:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d03f      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008118:	d01c      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800811a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800811e:	d802      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008124:	e01f      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800812a:	d003      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800812c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008130:	d01c      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008132:	e018      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008134:	4b5f      	ldr	r3, [pc, #380]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4a5e      	ldr	r2, [pc, #376]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800813a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800813e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008140:	e015      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3304      	adds	r3, #4
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fa6d 	bl	8008628 <RCCEx_PLLSAI1_Config>
 800814e:	4603      	mov	r3, r0
 8008150:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008152:	e00c      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3320      	adds	r3, #32
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fbb8 	bl	80088d0 <RCCEx_PLLSAI2_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008164:	e003      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	74fb      	strb	r3, [r7, #19]
      break;
 800816a:	e000      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800816c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800816e:	7cfb      	ldrb	r3, [r7, #19]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008174:	4b4f      	ldr	r3, [pc, #316]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008182:	494c      	ldr	r1, [pc, #304]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800818a:	e001      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	7cfb      	ldrb	r3, [r7, #19]
 800818e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 809a 	beq.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b44      	ldr	r3, [pc, #272]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10d      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	4a40      	ldr	r2, [pc, #256]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6593      	str	r3, [r2, #88]	; 0x58
 80081ba:	4b3e      	ldr	r3, [pc, #248]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80081bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c6:	2301      	movs	r3, #1
 80081c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ca:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a3a      	ldr	r2, [pc, #232]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d6:	f7fd feb1 	bl	8005f3c <HAL_GetTick>
 80081da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081dc:	e009      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081de:	f7fd fead 	bl	8005f3c <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d902      	bls.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	74fb      	strb	r3, [r7, #19]
        break;
 80081f0:	e005      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081f2:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 80081fe:	7cfb      	ldrb	r3, [r7, #19]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d15b      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008204:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01f      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	429a      	cmp	r2, r3
 8008220:	d019      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008222:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800822e:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800823e:	4b1d      	ldr	r3, [pc, #116]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800824a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800824e:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d016      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fd fe6c 	bl	8005f3c <HAL_GetTick>
 8008264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8008266:	e00b      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008268:	f7fd fe68 	bl	8005f3c <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	; 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d902      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	74fb      	strb	r3, [r7, #19]
            break;
 800827e:	e006      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ec      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 800828e:	7cfb      	ldrb	r3, [r7, #19]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10c      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a4:	4903      	ldr	r1, [pc, #12]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082ac:	e008      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082ae:	7cfb      	ldrb	r3, [r7, #19]
 80082b0:	74bb      	strb	r3, [r7, #18]
 80082b2:	e005      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	7cfb      	ldrb	r3, [r7, #19]
 80082be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c0:	7c7b      	ldrb	r3, [r7, #17]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c6:	4b9e      	ldr	r3, [pc, #632]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	4a9d      	ldr	r2, [pc, #628]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80082cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082de:	4b98      	ldr	r3, [pc, #608]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e4:	f023 0203 	bic.w	r2, r3, #3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	4994      	ldr	r1, [pc, #592]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008300:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f023 020c 	bic.w	r2, r3, #12
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	498c      	ldr	r1, [pc, #560]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008322:	4b87      	ldr	r3, [pc, #540]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	4983      	ldr	r1, [pc, #524]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008344:	4b7e      	ldr	r3, [pc, #504]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	497b      	ldr	r1, [pc, #492]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008366:	4b76      	ldr	r3, [pc, #472]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008374:	4972      	ldr	r1, [pc, #456]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008388:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008396:	496a      	ldr	r1, [pc, #424]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008398:	4313      	orrs	r3, r2
 800839a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083aa:	4b65      	ldr	r3, [pc, #404]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b8:	4961      	ldr	r1, [pc, #388]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083cc:	4b5c      	ldr	r3, [pc, #368]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	4959      	ldr	r1, [pc, #356]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083ee:	4b54      	ldr	r3, [pc, #336]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	4950      	ldr	r1, [pc, #320]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008410:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	4948      	ldr	r1, [pc, #288]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008420:	4313      	orrs	r3, r2
 8008422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008432:	4b43      	ldr	r3, [pc, #268]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	493f      	ldr	r1, [pc, #252]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d028      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008454:	4b3a      	ldr	r3, [pc, #232]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008462:	4937      	ldr	r1, [pc, #220]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008464:	4313      	orrs	r3, r2
 8008466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008474:	4b32      	ldr	r3, [pc, #200]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4a31      	ldr	r2, [pc, #196]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800847a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800847e:	60d3      	str	r3, [r2, #12]
 8008480:	e011      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800848a:	d10c      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3304      	adds	r3, #4
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f8c8 	bl	8008628 <RCCEx_PLLSAI1_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800849c:	7cfb      	ldrb	r3, [r7, #19]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* set overall return value */
        status = ret;
 80084a2:	7cfb      	ldrb	r3, [r7, #19]
 80084a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d028      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084b2:	4b23      	ldr	r3, [pc, #140]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	491f      	ldr	r1, [pc, #124]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d0:	d106      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084d2:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4a1a      	ldr	r2, [pc, #104]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80084d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084dc:	60d3      	str	r3, [r2, #12]
 80084de:	e011      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	2101      	movs	r1, #1
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f899 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02b      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	4908      	ldr	r1, [pc, #32]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800852e:	d109      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008530:	4b03      	ldr	r3, [pc, #12]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	4a02      	ldr	r2, [pc, #8]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8008536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800853a:	60d3      	str	r3, [r2, #12]
 800853c:	e014      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800853e:	bf00      	nop
 8008540:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800854c:	d10c      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3304      	adds	r3, #4
 8008552:	2101      	movs	r1, #1
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f867 	bl	8008628 <RCCEx_PLLSAI1_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800855e:	7cfb      	ldrb	r3, [r7, #19]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8008564:	7cfb      	ldrb	r3, [r7, #19]
 8008566:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008574:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008582:	4928      	ldr	r1, [pc, #160]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008592:	d10d      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2102      	movs	r1, #2
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f844 	bl	8008628 <RCCEx_PLLSAI1_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085a4:	7cfb      	ldrb	r3, [r7, #19]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
 80085ac:	74bb      	strb	r3, [r7, #18]
 80085ae:	e011      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b8:	d10c      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3320      	adds	r3, #32
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f985 	bl	80088d0 <RCCEx_PLLSAI2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80085ca:	7cfb      	ldrb	r3, [r7, #19]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80085d0:	7cfb      	ldrb	r3, [r7, #19]
 80085d2:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085e0:	4b10      	ldr	r3, [pc, #64]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80085e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ee:	490d      	ldr	r1, [pc, #52]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008602:	4b08      	ldr	r3, [pc, #32]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 800861a:	7cbb      	ldrb	r3, [r7, #18]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40021000 	.word	0x40021000

08008628 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b094      	sub	sp, #80	; 0x50
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800863c:	4ba3      	ldr	r3, [pc, #652]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d023      	beq.n	8008690 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008648:	4ba0      	ldr	r3, [pc, #640]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0203 	and.w	r2, r3, #3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d117      	bne.n	8008688 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
       || 
 800865c:	2b00      	cmp	r3, #0
 800865e:	d013      	beq.n	8008688 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8008660:	4b9a      	ldr	r3, [pc, #616]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008668:	2370      	movs	r3, #112	; 0x70
 800866a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866e:	fa93 f3a3 	rbit	r3, r3
 8008672:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	fab3 f383 	clz	r3, r3
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
       || 
 8008684:	429a      	cmp	r2, r3
 8008686:	d054      	beq.n	8008732 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800868e:	e050      	b.n	8008732 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d00d      	beq.n	80086b4 <RCCEx_PLLSAI1_Config+0x8c>
 8008698:	2b03      	cmp	r3, #3
 800869a:	d015      	beq.n	80086c8 <RCCEx_PLLSAI1_Config+0xa0>
 800869c:	2b01      	cmp	r3, #1
 800869e:	d123      	bne.n	80086e8 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086a0:	4b8a      	ldr	r3, [pc, #552]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d121      	bne.n	80086f0 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80086b2:	e01d      	b.n	80086f0 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80086b4:	4b85      	ldr	r3, [pc, #532]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d119      	bne.n	80086f4 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80086c6:	e015      	b.n	80086f4 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086c8:	4b80      	ldr	r3, [pc, #512]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d111      	bne.n	80086f8 <RCCEx_PLLSAI1_Config+0xd0>
 80086d4:	4b7d      	ldr	r3, [pc, #500]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80086e6:	e007      	b.n	80086f8 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 80086ee:	e004      	b.n	80086fa <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80086f8:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80086fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d117      	bne.n	8008732 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8008702:	4b72      	ldr	r3, [pc, #456]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	1e58      	subs	r0, r3, #1
 8008714:	2370      	movs	r3, #112	; 0x70
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	fa93 f3a3 	rbit	r3, r3
 800871e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	fab3 f383 	clz	r3, r3
 8008726:	fa00 f303 	lsl.w	r3, r0, r3
 800872a:	430b      	orrs	r3, r1
 800872c:	4967      	ldr	r1, [pc, #412]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 800872e:	4313      	orrs	r3, r2
 8008730:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 8008732:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008736:	2b00      	cmp	r3, #0
 8008738:	f040 80c2 	bne.w	80088c0 <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800873c:	4b63      	ldr	r3, [pc, #396]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a62      	ldr	r2, [pc, #392]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008748:	f7fd fbf8 	bl	8005f3c <HAL_GetTick>
 800874c:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800874e:	e00a      	b.n	8008766 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008750:	f7fd fbf4 	bl	8005f3c <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d903      	bls.n	8008766 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8008764:	e005      	b.n	8008772 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8008766:	4b59      	ldr	r3, [pc, #356]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1ee      	bne.n	8008750 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8008772:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 80a2 	bne.w	80088c0 <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d126      	bne.n	80087d0 <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8008782:	4b52      	ldr	r3, [pc, #328]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800878a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6891      	ldr	r1, [r2, #8]
 8008792:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879a:	fa92 f2a2 	rbit	r2, r2
 800879e:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 80087a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a2:	fab2 f282 	clz	r2, r2
 80087a6:	4091      	lsls	r1, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68d2      	ldr	r2, [r2, #12]
 80087ac:	0910      	lsrs	r0, r2, #4
 80087ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80087b2:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087b6:	fa92 f2a2 	rbit	r2, r2
 80087ba:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 80087bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087be:	fab2 f282 	clz	r2, r2
 80087c2:	fa00 f202 	lsl.w	r2, r0, r2
 80087c6:	430a      	orrs	r2, r1
 80087c8:	4940      	ldr	r1, [pc, #256]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	610b      	str	r3, [r1, #16]
 80087ce:	e051      	b.n	8008874 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d127      	bne.n	8008826 <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80087d6:	4b3d      	ldr	r3, [pc, #244]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80087de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6891      	ldr	r1, [r2, #8]
 80087e6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80087ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	fa92 f2a2 	rbit	r2, r2
 80087f2:	61ba      	str	r2, [r7, #24]
  return(result);
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	fab2 f282 	clz	r2, r2
 80087fa:	4091      	lsls	r1, r2
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6912      	ldr	r2, [r2, #16]
 8008800:	0852      	lsrs	r2, r2, #1
 8008802:	1e50      	subs	r0, r2, #1
 8008804:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8008808:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880c:	fa92 f2a2 	rbit	r2, r2
 8008810:	623a      	str	r2, [r7, #32]
  return(result);
 8008812:	6a3a      	ldr	r2, [r7, #32]
 8008814:	fab2 f282 	clz	r2, r2
 8008818:	fa00 f202 	lsl.w	r2, r0, r2
 800881c:	430a      	orrs	r2, r1
 800881e:	492b      	ldr	r1, [pc, #172]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	610b      	str	r3, [r1, #16]
 8008824:	e026      	b.n	8008874 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8008826:	4b29      	ldr	r3, [pc, #164]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800882e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6891      	ldr	r1, [r2, #8]
 8008836:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800883a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	fa92 f2a2 	rbit	r2, r2
 8008842:	60ba      	str	r2, [r7, #8]
  return(result);
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	fab2 f282 	clz	r2, r2
 800884a:	4091      	lsls	r1, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6952      	ldr	r2, [r2, #20]
 8008850:	0852      	lsrs	r2, r2, #1
 8008852:	1e50      	subs	r0, r2, #1
 8008854:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	fa92 f2a2 	rbit	r2, r2
 8008860:	613a      	str	r2, [r7, #16]
  return(result);
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	fab2 f282 	clz	r2, r2
 8008868:	fa00 f202 	lsl.w	r2, r0, r2
 800886c:	430a      	orrs	r2, r1
 800886e:	4917      	ldr	r1, [pc, #92]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008870:	4313      	orrs	r3, r2
 8008872:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008874:	4b15      	ldr	r3, [pc, #84]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a14      	ldr	r2, [pc, #80]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 800887a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800887e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008880:	f7fd fb5c 	bl	8005f3c <HAL_GetTick>
 8008884:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8008886:	e00a      	b.n	800889e <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008888:	f7fd fb58 	bl	8005f3c <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d903      	bls.n	800889e <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800889c:	e005      	b.n	80088aa <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0ee      	beq.n	8008888 <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 80088aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	4904      	ldr	r1, [pc, #16]	; (80088cc <RCCEx_PLLSAI1_Config+0x2a4>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 80088c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3750      	adds	r7, #80	; 0x50
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40021000 	.word	0x40021000

080088d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b090      	sub	sp, #64	; 0x40
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088e4:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0303 	and.w	r3, r3, #3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d023      	beq.n	8008938 <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80088f0:	4b8a      	ldr	r3, [pc, #552]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f003 0203 	and.w	r2, r3, #3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d117      	bne.n	8008930 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
       || 
 8008904:	2b00      	cmp	r3, #0
 8008906:	d013      	beq.n	8008930 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 8008908:	4b84      	ldr	r3, [pc, #528]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008910:	2370      	movs	r3, #112	; 0x70
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	fa93 f3a3 	rbit	r3, r3
 800891a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	fab3 f383 	clz	r3, r3
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
       || 
 800892c:	429a      	cmp	r2, r3
 800892e:	d054      	beq.n	80089da <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008936:	e050      	b.n	80089da <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d00d      	beq.n	800895c <RCCEx_PLLSAI2_Config+0x8c>
 8008940:	2b03      	cmp	r3, #3
 8008942:	d015      	beq.n	8008970 <RCCEx_PLLSAI2_Config+0xa0>
 8008944:	2b01      	cmp	r3, #1
 8008946:	d123      	bne.n	8008990 <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008948:	4b74      	ldr	r3, [pc, #464]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d121      	bne.n	8008998 <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 800895a:	e01d      	b.n	8008998 <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800895c:	4b6f      	ldr	r3, [pc, #444]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008964:	2b00      	cmp	r3, #0
 8008966:	d119      	bne.n	800899c <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 800896e:	e015      	b.n	800899c <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008970:	4b6a      	ldr	r3, [pc, #424]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d111      	bne.n	80089a0 <RCCEx_PLLSAI2_Config+0xd0>
 800897c:	4b67      	ldr	r3, [pc, #412]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 800898e:	e007      	b.n	80089a0 <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8008996:	e004      	b.n	80089a2 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8008998:	bf00      	nop
 800899a:	e002      	b.n	80089a2 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 80089a0:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80089a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d117      	bne.n	80089da <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80089aa:	4b5c      	ldr	r3, [pc, #368]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	1e58      	subs	r0, r3, #1
 80089bc:	2370      	movs	r3, #112	; 0x70
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	fa93 f3a3 	rbit	r3, r3
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	fab3 f383 	clz	r3, r3
 80089ce:	fa00 f303 	lsl.w	r3, r0, r3
 80089d2:	430b      	orrs	r3, r1
 80089d4:	4951      	ldr	r1, [pc, #324]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 80089da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f040 8096 	bne.w	8008b10 <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089e4:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a4c      	ldr	r2, [pc, #304]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 80089ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f0:	f7fd faa4 	bl	8005f3c <HAL_GetTick>
 80089f4:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80089f6:	e00a      	b.n	8008a0e <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089f8:	f7fd faa0 	bl	8005f3c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d903      	bls.n	8008a0e <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8008a0c:	e005      	b.n	8008a1a <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8008a0e:	4b43      	ldr	r3, [pc, #268]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1ee      	bne.n	80089f8 <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8008a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d176      	bne.n	8008b10 <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d126      	bne.n	8008a76 <RCCEx_PLLSAI2_Config+0x1a6>
        MODIFY_REG(RCC->PLLSAI2CFGR, 
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV, 
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (PllSai2->PLLSAI2P << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8008a28:	4b3c      	ldr	r3, [pc, #240]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6891      	ldr	r1, [r2, #8]
 8008a38:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008a3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	fa92 f2a2 	rbit	r2, r2
 8008a44:	61ba      	str	r2, [r7, #24]
  return(result);
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	fab2 f282 	clz	r2, r2
 8008a4c:	4091      	lsls	r1, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68d2      	ldr	r2, [r2, #12]
 8008a52:	0910      	lsrs	r0, r2, #4
 8008a54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a58:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a5c:	fa92 f2a2 	rbit	r2, r2
 8008a60:	623a      	str	r2, [r7, #32]
  return(result);
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	fab2 f282 	clz	r2, r2
 8008a68:	fa00 f202 	lsl.w	r2, r0, r2
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	492b      	ldr	r1, [pc, #172]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	614b      	str	r3, [r1, #20]
 8008a74:	e026      	b.n	8008ac4 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8008a76:	4b29      	ldr	r3, [pc, #164]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	6891      	ldr	r1, [r2, #8]
 8008a86:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008a8a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	fa92 f2a2 	rbit	r2, r2
 8008a92:	60ba      	str	r2, [r7, #8]
  return(result);
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	fab2 f282 	clz	r2, r2
 8008a9a:	4091      	lsls	r1, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6912      	ldr	r2, [r2, #16]
 8008aa0:	0852      	lsrs	r2, r2, #1
 8008aa2:	1e50      	subs	r0, r2, #1
 8008aa4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	fa92 f2a2 	rbit	r2, r2
 8008ab0:	613a      	str	r2, [r7, #16]
  return(result);
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	fab2 f282 	clz	r2, r2
 8008ab8:	fa00 f202 	lsl.w	r2, r0, r2
 8008abc:	430a      	orrs	r2, r1
 8008abe:	4917      	ldr	r1, [pc, #92]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	614b      	str	r3, [r1, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ac4:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad0:	f7fd fa34 	bl	8005f3c <HAL_GetTick>
 8008ad4:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8008ad6:	e00a      	b.n	8008aee <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ad8:	f7fd fa30 	bl	8005f3c <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d903      	bls.n	8008aee <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8008aec:	e005      	b.n	8008afa <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0ee      	beq.n	8008ad8 <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 8008afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008b04:	695a      	ldr	r2, [r3, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	4904      	ldr	r1, [pc, #16]	; (8008b1c <RCCEx_PLLSAI2_Config+0x24c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 8008b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3740      	adds	r7, #64	; 0x40
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	40021000 	.word	0x40021000

08008b20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e01d      	b.n	8008ba2 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f002 fabe 	bl	800b0fc <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f000 f888 	bl	8008ca8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e06c      	b.n	8008ca0 <HAL_TIM_OC_ConfigChannel+0xf4>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b14      	cmp	r3, #20
 8008bda:	d857      	bhi.n	8008c8c <HAL_TIM_OC_ConfigChannel+0xe0>
 8008bdc:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <HAL_TIM_OC_ConfigChannel+0x38>)
 8008bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be2:	bf00      	nop
 8008be4:	08008c39 	.word	0x08008c39
 8008be8:	08008c8d 	.word	0x08008c8d
 8008bec:	08008c8d 	.word	0x08008c8d
 8008bf0:	08008c8d 	.word	0x08008c8d
 8008bf4:	08008c47 	.word	0x08008c47
 8008bf8:	08008c8d 	.word	0x08008c8d
 8008bfc:	08008c8d 	.word	0x08008c8d
 8008c00:	08008c8d 	.word	0x08008c8d
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008c8d 	.word	0x08008c8d
 8008c0c:	08008c8d 	.word	0x08008c8d
 8008c10:	08008c8d 	.word	0x08008c8d
 8008c14:	08008c63 	.word	0x08008c63
 8008c18:	08008c8d 	.word	0x08008c8d
 8008c1c:	08008c8d 	.word	0x08008c8d
 8008c20:	08008c8d 	.word	0x08008c8d
 8008c24:	08008c71 	.word	0x08008c71
 8008c28:	08008c8d 	.word	0x08008c8d
 8008c2c:	08008c8d 	.word	0x08008c8d
 8008c30:	08008c8d 	.word	0x08008c8d
 8008c34:	08008c7f 	.word	0x08008c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f8c6 	bl	8008dd0 <TIM_OC1_SetConfig>
    }
    break;
 8008c44:	e023      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f955 	bl	8008efc <TIM_OC2_SetConfig>
    }
    break;
 8008c52:	e01c      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f9dc 	bl	8009018 <TIM_OC3_SetConfig>
    }
    break;
 8008c60:	e015      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fa63 	bl	8009134 <TIM_OC4_SetConfig>
    }
    break;
 8008c6e:	e00e      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 faca 	bl	8009210 <TIM_OC5_SetConfig>
    }
    break;
 8008c7c:	e007      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fb2d 	bl	80092e4 <TIM_OC6_SetConfig>
    }
    break;
 8008c8a:	e000      	b.n	8008c8e <HAL_TIM_OC_ConfigChannel+0xe2>

    default:
    break;
 8008c8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a3c      	ldr	r2, [pc, #240]	; (8008db0 <TIM_Base_SetConfig+0x108>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d013      	beq.n	8008cec <TIM_Base_SetConfig+0x44>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	d00f      	beq.n	8008cec <TIM_Base_SetConfig+0x44>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a39      	ldr	r2, [pc, #228]	; (8008db4 <TIM_Base_SetConfig+0x10c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00b      	beq.n	8008cec <TIM_Base_SetConfig+0x44>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a38      	ldr	r2, [pc, #224]	; (8008db8 <TIM_Base_SetConfig+0x110>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d007      	beq.n	8008cec <TIM_Base_SetConfig+0x44>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a37      	ldr	r2, [pc, #220]	; (8008dbc <TIM_Base_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_Base_SetConfig+0x44>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a36      	ldr	r2, [pc, #216]	; (8008dc0 <TIM_Base_SetConfig+0x118>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d108      	bne.n	8008cfe <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2b      	ldr	r2, [pc, #172]	; (8008db0 <TIM_Base_SetConfig+0x108>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d01f      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0c:	d01b      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a28      	ldr	r2, [pc, #160]	; (8008db4 <TIM_Base_SetConfig+0x10c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d017      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a27      	ldr	r2, [pc, #156]	; (8008db8 <TIM_Base_SetConfig+0x110>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d013      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a26      	ldr	r2, [pc, #152]	; (8008dbc <TIM_Base_SetConfig+0x114>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00f      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a25      	ldr	r2, [pc, #148]	; (8008dc0 <TIM_Base_SetConfig+0x118>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00b      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <TIM_Base_SetConfig+0x11c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d007      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <TIM_Base_SetConfig+0x120>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d003      	beq.n	8008d46 <TIM_Base_SetConfig+0x9e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a22      	ldr	r2, [pc, #136]	; (8008dcc <TIM_Base_SetConfig+0x124>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d108      	bne.n	8008d58 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a0f      	ldr	r2, [pc, #60]	; (8008db0 <TIM_Base_SetConfig+0x108>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00f      	beq.n	8008d96 <TIM_Base_SetConfig+0xee>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <TIM_Base_SetConfig+0x118>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00b      	beq.n	8008d96 <TIM_Base_SetConfig+0xee>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a10      	ldr	r2, [pc, #64]	; (8008dc4 <TIM_Base_SetConfig+0x11c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d007      	beq.n	8008d96 <TIM_Base_SetConfig+0xee>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a0f      	ldr	r2, [pc, #60]	; (8008dc8 <TIM_Base_SetConfig+0x120>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d003      	beq.n	8008d96 <TIM_Base_SetConfig+0xee>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a0e      	ldr	r2, [pc, #56]	; (8008dcc <TIM_Base_SetConfig+0x124>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d103      	bne.n	8008d9e <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	615a      	str	r2, [r3, #20]
}
 8008da4:	bf00      	nop
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	40000c00 	.word	0x40000c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40014400 	.word	0x40014400
 8008dcc:	40014800 	.word	0x40014800

08008dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0201 	bic.w	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f023 0302 	bic.w	r3, r3, #2
 8008e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a2c      	ldr	r2, [pc, #176]	; (8008ee8 <TIM_OC1_SetConfig+0x118>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00f      	beq.n	8008e5c <TIM_OC1_SetConfig+0x8c>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a2b      	ldr	r2, [pc, #172]	; (8008eec <TIM_OC1_SetConfig+0x11c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <TIM_OC1_SetConfig+0x8c>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a2a      	ldr	r2, [pc, #168]	; (8008ef0 <TIM_OC1_SetConfig+0x120>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d007      	beq.n	8008e5c <TIM_OC1_SetConfig+0x8c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a29      	ldr	r2, [pc, #164]	; (8008ef4 <TIM_OC1_SetConfig+0x124>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_OC1_SetConfig+0x8c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a28      	ldr	r2, [pc, #160]	; (8008ef8 <TIM_OC1_SetConfig+0x128>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d10c      	bne.n	8008e76 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0308 	bic.w	r3, r3, #8
 8008e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f023 0304 	bic.w	r3, r3, #4
 8008e74:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <TIM_OC1_SetConfig+0x118>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00f      	beq.n	8008e9e <TIM_OC1_SetConfig+0xce>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a1a      	ldr	r2, [pc, #104]	; (8008eec <TIM_OC1_SetConfig+0x11c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <TIM_OC1_SetConfig+0xce>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <TIM_OC1_SetConfig+0x120>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d007      	beq.n	8008e9e <TIM_OC1_SetConfig+0xce>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <TIM_OC1_SetConfig+0x124>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_OC1_SetConfig+0xce>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <TIM_OC1_SetConfig+0x128>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d111      	bne.n	8008ec2 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	621a      	str	r2, [r3, #32]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40013400 	.word	0x40013400
 8008ef0:	40014000 	.word	0x40014000
 8008ef4:	40014400 	.word	0x40014400
 8008ef8:	40014800 	.word	0x40014800

08008efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f023 0210 	bic.w	r2, r3, #16
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f023 0320 	bic.w	r3, r3, #32
 8008f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a27      	ldr	r2, [pc, #156]	; (8009004 <TIM_OC2_SetConfig+0x108>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC2_SetConfig+0x78>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a26      	ldr	r2, [pc, #152]	; (8009008 <TIM_OC2_SetConfig+0x10c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d10d      	bne.n	8008f90 <TIM_OC2_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8e:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <TIM_OC2_SetConfig+0x108>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00f      	beq.n	8008fb8 <TIM_OC2_SetConfig+0xbc>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a1b      	ldr	r2, [pc, #108]	; (8009008 <TIM_OC2_SetConfig+0x10c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00b      	beq.n	8008fb8 <TIM_OC2_SetConfig+0xbc>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a1a      	ldr	r2, [pc, #104]	; (800900c <TIM_OC2_SetConfig+0x110>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <TIM_OC2_SetConfig+0xbc>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a19      	ldr	r2, [pc, #100]	; (8009010 <TIM_OC2_SetConfig+0x114>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_OC2_SetConfig+0xbc>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a18      	ldr	r2, [pc, #96]	; (8009014 <TIM_OC2_SetConfig+0x118>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d113      	bne.n	8008fe0 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr
 8009004:	40012c00 	.word	0x40012c00
 8009008:	40013400 	.word	0x40013400
 800900c:	40014000 	.word	0x40014000
 8009010:	40014400 	.word	0x40014400
 8009014:	40014800 	.word	0x40014800

08009018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009018:	b480      	push	{r7}
 800901a:	b087      	sub	sp, #28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a27      	ldr	r2, [pc, #156]	; (8009120 <TIM_OC3_SetConfig+0x108>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC3_SetConfig+0x76>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a26      	ldr	r2, [pc, #152]	; (8009124 <TIM_OC3_SetConfig+0x10c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10d      	bne.n	80090aa <TIM_OC3_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090a8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <TIM_OC3_SetConfig+0x108>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00f      	beq.n	80090d2 <TIM_OC3_SetConfig+0xba>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1b      	ldr	r2, [pc, #108]	; (8009124 <TIM_OC3_SetConfig+0x10c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00b      	beq.n	80090d2 <TIM_OC3_SetConfig+0xba>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1a      	ldr	r2, [pc, #104]	; (8009128 <TIM_OC3_SetConfig+0x110>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d007      	beq.n	80090d2 <TIM_OC3_SetConfig+0xba>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a19      	ldr	r2, [pc, #100]	; (800912c <TIM_OC3_SetConfig+0x114>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_OC3_SetConfig+0xba>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a18      	ldr	r2, [pc, #96]	; (8009130 <TIM_OC3_SetConfig+0x118>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d113      	bne.n	80090fa <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	621a      	str	r2, [r3, #32]
}
 8009114:	bf00      	nop
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40012c00 	.word	0x40012c00
 8009124:	40013400 	.word	0x40013400
 8009128:	40014000 	.word	0x40014000
 800912c:	40014400 	.word	0x40014400
 8009130:	40014800 	.word	0x40014800

08009134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800916e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800917a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800918e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	031b      	lsls	r3, r3, #12
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a17      	ldr	r2, [pc, #92]	; (80091fc <TIM_OC4_SetConfig+0xc8>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d00f      	beq.n	80091c4 <TIM_OC4_SetConfig+0x90>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a16      	ldr	r2, [pc, #88]	; (8009200 <TIM_OC4_SetConfig+0xcc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00b      	beq.n	80091c4 <TIM_OC4_SetConfig+0x90>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a15      	ldr	r2, [pc, #84]	; (8009204 <TIM_OC4_SetConfig+0xd0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d007      	beq.n	80091c4 <TIM_OC4_SetConfig+0x90>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <TIM_OC4_SetConfig+0xd4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_OC4_SetConfig+0x90>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a13      	ldr	r2, [pc, #76]	; (800920c <TIM_OC4_SetConfig+0xd8>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d109      	bne.n	80091d8 <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	019b      	lsls	r3, r3, #6
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	621a      	str	r2, [r3, #32]
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	40013400 	.word	0x40013400
 8009204:	40014000 	.word	0x40014000
 8009208:	40014400 	.word	0x40014400
 800920c:	40014800 	.word	0x40014800

08009210 <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800924a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009260:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a17      	ldr	r2, [pc, #92]	; (80092d0 <TIM_OC5_SetConfig+0xc0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00f      	beq.n	8009296 <TIM_OC5_SetConfig+0x86>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <TIM_OC5_SetConfig+0xc4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00b      	beq.n	8009296 <TIM_OC5_SetConfig+0x86>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <TIM_OC5_SetConfig+0xc8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <TIM_OC5_SetConfig+0x86>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a14      	ldr	r2, [pc, #80]	; (80092dc <TIM_OC5_SetConfig+0xcc>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d003      	beq.n	8009296 <TIM_OC5_SetConfig+0x86>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <TIM_OC5_SetConfig+0xd0>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d109      	bne.n	80092aa <TIM_OC5_SetConfig+0x9a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800929c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	621a      	str	r2, [r3, #32]
}
 80092c4:	bf00      	nop
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bc80      	pop	{r7}
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40013400 	.word	0x40013400
 80092d8:	40014000 	.word	0x40014000
 80092dc:	40014400 	.word	0x40014400
 80092e0:	40014800 	.word	0x40014800

080092e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009316:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800931e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009322:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4313      	orrs	r3, r2
 800932e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009336:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	051b      	lsls	r3, r3, #20
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a17      	ldr	r2, [pc, #92]	; (80093a4 <TIM_OC6_SetConfig+0xc0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00f      	beq.n	800936c <TIM_OC6_SetConfig+0x88>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a16      	ldr	r2, [pc, #88]	; (80093a8 <TIM_OC6_SetConfig+0xc4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00b      	beq.n	800936c <TIM_OC6_SetConfig+0x88>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a15      	ldr	r2, [pc, #84]	; (80093ac <TIM_OC6_SetConfig+0xc8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d007      	beq.n	800936c <TIM_OC6_SetConfig+0x88>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <TIM_OC6_SetConfig+0xcc>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_OC6_SetConfig+0x88>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <TIM_OC6_SetConfig+0xd0>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d109      	bne.n	8009380 <TIM_OC6_SetConfig+0x9c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	029b      	lsls	r3, r3, #10
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	621a      	str	r2, [r3, #32]
}
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr
 80093a4:	40012c00 	.word	0x40012c00
 80093a8:	40013400 	.word	0x40013400
 80093ac:	40014000 	.word	0x40014000
 80093b0:	40014400 	.word	0x40014400
 80093b4:	40014800 	.word	0x40014800

080093b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e03d      	b.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1a      	ldr	r2, [pc, #104]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a19      	ldr	r2, [pc, #100]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d108      	bne.n	800940e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009402:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009414:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009426:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	4313      	orrs	r3, r2
 8009430:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40012c00 	.word	0x40012c00
 800945c:	40013400 	.word	0x40013400

08009460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e043      	b.n	80094fa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f7 fc26 	bl	8000cd8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2224      	movs	r2, #36	; 0x24
 8009490:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0201 	bic.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9d9 	bl	800985c <UART_SetConfig>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e022      	b.n	80094fa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fcff 	bl	8009ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094d0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094e0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f042 0201 	orr.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fd85 	bl	800a002 <UART_CheckIdleState>
 80094f8:	4603      	mov	r3, r0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b20      	cmp	r3, #32
 800951c:	d154      	bne.n	80095c8 <HAL_UART_Transmit_DMA+0xc4>
  {
    if((pData == NULL ) || (Size == 0))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_UART_Transmit_DMA+0x26>
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e04d      	b.n	80095ca <HAL_UART_Transmit_DMA+0xc6>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_UART_Transmit_DMA+0x38>
 8009538:	2302      	movs	r3, #2
 800953a:	e046      	b.n	80095ca <HAL_UART_Transmit_DMA+0xc6>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	88fa      	ldrh	r2, [r7, #6]
 800954e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	88fa      	ldrh	r2, [r7, #6]
 8009556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2221      	movs	r2, #33	; 0x21
 8009564:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800956c:	4a19      	ldr	r2, [pc, #100]	; (80095d4 <HAL_UART_Transmit_DMA+0xd0>)
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009574:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <HAL_UART_Transmit_DMA+0xd4>)
 8009576:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957c:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_UART_Transmit_DMA+0xd8>)
 800957e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	2200      	movs	r2, #0
 8009586:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8009588:	f107 0308 	add.w	r3, r7, #8
 800958c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6819      	ldr	r1, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3328      	adds	r3, #40	; 0x28
 800959c:	461a      	mov	r2, r3
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	f7fc fedc 	bl	800635c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2240      	movs	r2, #64	; 0x40
 80095aa:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689a      	ldr	r2, [r3, #8]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095c2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	e000      	b.n	80095ca <HAL_UART_Transmit_DMA+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80095c8:	2302      	movs	r3, #2
  }
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	0800a18d 	.word	0x0800a18d
 80095d8:	0800a1e1 	.word	0x0800a1e1
 80095dc:	0800a1fd 	.word	0x0800a1fd

080095e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10d      	bne.n	8009622 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <HAL_UART_IRQHandler+0x42>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fead 	bl	800a37a <UART_Receive_IT>
      return;
 8009620:	e0fa      	b.n	8009818 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60bb      	str	r3, [r7, #8]
  if((errorflags != RESET) && ((cr3its & (USART_CR3_EIE | USART_CR1_PEIE)) != RESET))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80b6 	beq.w	800979e <HAL_UART_IRQHandler+0x1be>
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	f240 1301 	movw	r3, #257	; 0x101
 8009638:	4013      	ands	r3, r2
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 80af 	beq.w	800979e <HAL_UART_IRQHandler+0x1be>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00e      	beq.n	8009668 <HAL_UART_IRQHandler+0x88>
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009650:	2b00      	cmp	r3, #0
 8009652:	d009      	beq.n	8009668 <HAL_UART_IRQHandler+0x88>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2201      	movs	r2, #1
 800965a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009660:	f043 0201 	orr.w	r2, r3, #1
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00e      	beq.n	8009690 <HAL_UART_IRQHandler+0xb0>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <HAL_UART_IRQHandler+0xb0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2202      	movs	r2, #2
 8009682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009688:	f043 0204 	orr.w	r2, r3, #4
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f003 0304 	and.w	r3, r3, #4
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd8>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d009      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2204      	movs	r2, #4
 80096aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b0:	f043 0202 	orr.w	r2, r3, #2
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d013      	beq.n	80096ea <HAL_UART_IRQHandler+0x10a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <HAL_UART_IRQHandler+0xf6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2208      	movs	r2, #8
 80096dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e2:	f043 0208 	orr.w	r2, r3, #8
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8091 	beq.w	8009816 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <HAL_UART_IRQHandler+0x12e>
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <HAL_UART_IRQHandler+0x12e>
      {
        UART_Receive_IT(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fe36 	bl	800a37a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <HAL_UART_IRQHandler+0x148>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d131      	bne.n	800978c <HAL_UART_IRQHandler+0x1ac>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fd12 	bl	800a152 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d123      	bne.n	8009784 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800974a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009750:	2b00      	cmp	r3, #0
 8009752:	d013      	beq.n	800977c <HAL_UART_IRQHandler+0x19c>
          {
            /* Set the UART DMA Abort callback : 
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009758:	4a31      	ldr	r2, [pc, #196]	; (8009820 <HAL_UART_IRQHandler+0x240>)
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009760:	4618      	mov	r0, r3
 8009762:	f7fc fe5b 	bl	800641c <HAL_DMA_Abort_IT>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d016      	beq.n	800979a <HAL_UART_IRQHandler+0x1ba>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009776:	4610      	mov	r0, r2
 8009778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800977a:	e00e      	b.n	800979a <HAL_UART_IRQHandler+0x1ba>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f863 	bl	8009848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009782:	e00a      	b.n	800979a <HAL_UART_IRQHandler+0x1ba>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f85f 	bl	8009848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978a:	e006      	b.n	800979a <HAL_UART_IRQHandler+0x1ba>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f85b 	bl	8009848 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8009798:	e03d      	b.n	8009816 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979a:	bf00      	nop
    return;
 800979c:	e03b      	b.n	8009816 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  cr3its = READ_REG(huart->Instance->CR3);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	60bb      	str	r3, [r7, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d015      	beq.n	80097dc <HAL_UART_IRQHandler+0x1fc>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d010      	beq.n	80097dc <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097c2:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fe3d 	bl	800a454 <HAL_UARTEx_WakeupCallback>
    return;
 80097da:	e01d      	b.n	8009818 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <HAL_UART_IRQHandler+0x218>
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fd55 	bl	800a2a0 <UART_Transmit_IT>
    return;
 80097f6:	e00f      	b.n	8009818 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <HAL_UART_IRQHandler+0x238>
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fd9c 	bl	800a34a <UART_EndTransmit_IT>
    return;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_UART_IRQHandler+0x238>
    return;
 8009816:	bf00      	nop
  }

}
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	0800a275 	.word	0x0800a275

08009824 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr

08009836 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr

08009848 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
	...

0800985c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800985c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800986a:	2310      	movs	r3, #16
 800986c:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 800986e:	2300      	movs	r3, #0
 8009870:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 8009872:	2300      	movs	r3, #0
 8009874:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	4bac      	ldr	r3, [pc, #688]	; (8009b4c <UART_SetConfig+0x2f0>)
 800989a:	4013      	ands	r3, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	6979      	ldr	r1, [r7, #20]
 80098a2:	430b      	orrs	r3, r1
 80098a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4aa2      	ldr	r2, [pc, #648]	; (8009b50 <UART_SetConfig+0x2f4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a99      	ldr	r2, [pc, #612]	; (8009b54 <UART_SetConfig+0x2f8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d121      	bne.n	8009938 <UART_SetConfig+0xdc>
 80098f4:	4b98      	ldr	r3, [pc, #608]	; (8009b58 <UART_SetConfig+0x2fc>)
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d816      	bhi.n	8009930 <UART_SetConfig+0xd4>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <UART_SetConfig+0xac>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009919 	.word	0x08009919
 800990c:	08009925 	.word	0x08009925
 8009910:	0800991f 	.word	0x0800991f
 8009914:	0800992b 	.word	0x0800992b
 8009918:	2301      	movs	r3, #1
 800991a:	74fb      	strb	r3, [r7, #19]
 800991c:	e0e6      	b.n	8009aec <UART_SetConfig+0x290>
 800991e:	2302      	movs	r3, #2
 8009920:	74fb      	strb	r3, [r7, #19]
 8009922:	e0e3      	b.n	8009aec <UART_SetConfig+0x290>
 8009924:	2304      	movs	r3, #4
 8009926:	74fb      	strb	r3, [r7, #19]
 8009928:	e0e0      	b.n	8009aec <UART_SetConfig+0x290>
 800992a:	2308      	movs	r3, #8
 800992c:	74fb      	strb	r3, [r7, #19]
 800992e:	e0dd      	b.n	8009aec <UART_SetConfig+0x290>
 8009930:	2310      	movs	r3, #16
 8009932:	74fb      	strb	r3, [r7, #19]
 8009934:	bf00      	nop
 8009936:	e0d9      	b.n	8009aec <UART_SetConfig+0x290>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a87      	ldr	r2, [pc, #540]	; (8009b5c <UART_SetConfig+0x300>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d134      	bne.n	80099ac <UART_SetConfig+0x150>
 8009942:	4b85      	ldr	r3, [pc, #532]	; (8009b58 <UART_SetConfig+0x2fc>)
 8009944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009948:	f003 030c 	and.w	r3, r3, #12
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d829      	bhi.n	80099a4 <UART_SetConfig+0x148>
 8009950:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <UART_SetConfig+0xfc>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	0800998d 	.word	0x0800998d
 800995c:	080099a5 	.word	0x080099a5
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099a5 	.word	0x080099a5
 8009968:	08009999 	.word	0x08009999
 800996c:	080099a5 	.word	0x080099a5
 8009970:	080099a5 	.word	0x080099a5
 8009974:	080099a5 	.word	0x080099a5
 8009978:	08009993 	.word	0x08009993
 800997c:	080099a5 	.word	0x080099a5
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099a5 	.word	0x080099a5
 8009988:	0800999f 	.word	0x0800999f
 800998c:	2300      	movs	r3, #0
 800998e:	74fb      	strb	r3, [r7, #19]
 8009990:	e0ac      	b.n	8009aec <UART_SetConfig+0x290>
 8009992:	2302      	movs	r3, #2
 8009994:	74fb      	strb	r3, [r7, #19]
 8009996:	e0a9      	b.n	8009aec <UART_SetConfig+0x290>
 8009998:	2304      	movs	r3, #4
 800999a:	74fb      	strb	r3, [r7, #19]
 800999c:	e0a6      	b.n	8009aec <UART_SetConfig+0x290>
 800999e:	2308      	movs	r3, #8
 80099a0:	74fb      	strb	r3, [r7, #19]
 80099a2:	e0a3      	b.n	8009aec <UART_SetConfig+0x290>
 80099a4:	2310      	movs	r3, #16
 80099a6:	74fb      	strb	r3, [r7, #19]
 80099a8:	bf00      	nop
 80099aa:	e09f      	b.n	8009aec <UART_SetConfig+0x290>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a6b      	ldr	r2, [pc, #428]	; (8009b60 <UART_SetConfig+0x304>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d120      	bne.n	80099f8 <UART_SetConfig+0x19c>
 80099b6:	4b68      	ldr	r3, [pc, #416]	; (8009b58 <UART_SetConfig+0x2fc>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d00f      	beq.n	80099e4 <UART_SetConfig+0x188>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d802      	bhi.n	80099ce <UART_SetConfig+0x172>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <UART_SetConfig+0x17c>
 80099cc:	e010      	b.n	80099f0 <UART_SetConfig+0x194>
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d005      	beq.n	80099de <UART_SetConfig+0x182>
 80099d2:	2b30      	cmp	r3, #48	; 0x30
 80099d4:	d009      	beq.n	80099ea <UART_SetConfig+0x18e>
 80099d6:	e00b      	b.n	80099f0 <UART_SetConfig+0x194>
 80099d8:	2300      	movs	r3, #0
 80099da:	74fb      	strb	r3, [r7, #19]
 80099dc:	e086      	b.n	8009aec <UART_SetConfig+0x290>
 80099de:	2302      	movs	r3, #2
 80099e0:	74fb      	strb	r3, [r7, #19]
 80099e2:	e083      	b.n	8009aec <UART_SetConfig+0x290>
 80099e4:	2304      	movs	r3, #4
 80099e6:	74fb      	strb	r3, [r7, #19]
 80099e8:	e080      	b.n	8009aec <UART_SetConfig+0x290>
 80099ea:	2308      	movs	r3, #8
 80099ec:	74fb      	strb	r3, [r7, #19]
 80099ee:	e07d      	b.n	8009aec <UART_SetConfig+0x290>
 80099f0:	2310      	movs	r3, #16
 80099f2:	74fb      	strb	r3, [r7, #19]
 80099f4:	bf00      	nop
 80099f6:	e079      	b.n	8009aec <UART_SetConfig+0x290>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a59      	ldr	r2, [pc, #356]	; (8009b64 <UART_SetConfig+0x308>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d120      	bne.n	8009a44 <UART_SetConfig+0x1e8>
 8009a02:	4b55      	ldr	r3, [pc, #340]	; (8009b58 <UART_SetConfig+0x2fc>)
 8009a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d00f      	beq.n	8009a30 <UART_SetConfig+0x1d4>
 8009a10:	2b40      	cmp	r3, #64	; 0x40
 8009a12:	d802      	bhi.n	8009a1a <UART_SetConfig+0x1be>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <UART_SetConfig+0x1c8>
 8009a18:	e010      	b.n	8009a3c <UART_SetConfig+0x1e0>
 8009a1a:	2b80      	cmp	r3, #128	; 0x80
 8009a1c:	d005      	beq.n	8009a2a <UART_SetConfig+0x1ce>
 8009a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8009a20:	d009      	beq.n	8009a36 <UART_SetConfig+0x1da>
 8009a22:	e00b      	b.n	8009a3c <UART_SetConfig+0x1e0>
 8009a24:	2300      	movs	r3, #0
 8009a26:	74fb      	strb	r3, [r7, #19]
 8009a28:	e060      	b.n	8009aec <UART_SetConfig+0x290>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	74fb      	strb	r3, [r7, #19]
 8009a2e:	e05d      	b.n	8009aec <UART_SetConfig+0x290>
 8009a30:	2304      	movs	r3, #4
 8009a32:	74fb      	strb	r3, [r7, #19]
 8009a34:	e05a      	b.n	8009aec <UART_SetConfig+0x290>
 8009a36:	2308      	movs	r3, #8
 8009a38:	74fb      	strb	r3, [r7, #19]
 8009a3a:	e057      	b.n	8009aec <UART_SetConfig+0x290>
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	74fb      	strb	r3, [r7, #19]
 8009a40:	bf00      	nop
 8009a42:	e053      	b.n	8009aec <UART_SetConfig+0x290>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a47      	ldr	r2, [pc, #284]	; (8009b68 <UART_SetConfig+0x30c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d124      	bne.n	8009a98 <UART_SetConfig+0x23c>
 8009a4e:	4b42      	ldr	r3, [pc, #264]	; (8009b58 <UART_SetConfig+0x2fc>)
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5c:	d012      	beq.n	8009a84 <UART_SetConfig+0x228>
 8009a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a62:	d802      	bhi.n	8009a6a <UART_SetConfig+0x20e>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <UART_SetConfig+0x21c>
 8009a68:	e012      	b.n	8009a90 <UART_SetConfig+0x234>
 8009a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a6e:	d006      	beq.n	8009a7e <UART_SetConfig+0x222>
 8009a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a74:	d009      	beq.n	8009a8a <UART_SetConfig+0x22e>
 8009a76:	e00b      	b.n	8009a90 <UART_SetConfig+0x234>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	74fb      	strb	r3, [r7, #19]
 8009a7c:	e036      	b.n	8009aec <UART_SetConfig+0x290>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	74fb      	strb	r3, [r7, #19]
 8009a82:	e033      	b.n	8009aec <UART_SetConfig+0x290>
 8009a84:	2304      	movs	r3, #4
 8009a86:	74fb      	strb	r3, [r7, #19]
 8009a88:	e030      	b.n	8009aec <UART_SetConfig+0x290>
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	74fb      	strb	r3, [r7, #19]
 8009a8e:	e02d      	b.n	8009aec <UART_SetConfig+0x290>
 8009a90:	2310      	movs	r3, #16
 8009a92:	74fb      	strb	r3, [r7, #19]
 8009a94:	bf00      	nop
 8009a96:	e029      	b.n	8009aec <UART_SetConfig+0x290>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a2c      	ldr	r2, [pc, #176]	; (8009b50 <UART_SetConfig+0x2f4>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d123      	bne.n	8009aea <UART_SetConfig+0x28e>
 8009aa2:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <UART_SetConfig+0x2fc>)
 8009aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab0:	d012      	beq.n	8009ad8 <UART_SetConfig+0x27c>
 8009ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab6:	d802      	bhi.n	8009abe <UART_SetConfig+0x262>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d007      	beq.n	8009acc <UART_SetConfig+0x270>
 8009abc:	e012      	b.n	8009ae4 <UART_SetConfig+0x288>
 8009abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ac2:	d006      	beq.n	8009ad2 <UART_SetConfig+0x276>
 8009ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ac8:	d009      	beq.n	8009ade <UART_SetConfig+0x282>
 8009aca:	e00b      	b.n	8009ae4 <UART_SetConfig+0x288>
 8009acc:	2300      	movs	r3, #0
 8009ace:	74fb      	strb	r3, [r7, #19]
 8009ad0:	e00c      	b.n	8009aec <UART_SetConfig+0x290>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	74fb      	strb	r3, [r7, #19]
 8009ad6:	e009      	b.n	8009aec <UART_SetConfig+0x290>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	74fb      	strb	r3, [r7, #19]
 8009adc:	e006      	b.n	8009aec <UART_SetConfig+0x290>
 8009ade:	2308      	movs	r3, #8
 8009ae0:	74fb      	strb	r3, [r7, #19]
 8009ae2:	e003      	b.n	8009aec <UART_SetConfig+0x290>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	74fb      	strb	r3, [r7, #19]
 8009ae8:	e000      	b.n	8009aec <UART_SetConfig+0x290>
 8009aea:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <UART_SetConfig+0x2f4>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	f040 80fc 	bne.w	8009cf0 <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	2b08      	cmp	r3, #8
 8009b00:	d836      	bhi.n	8009b70 <UART_SetConfig+0x314>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x2ac>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b71 	.word	0x08009b71
 8009b18:	08009b3b 	.word	0x08009b3b
 8009b1c:	08009b71 	.word	0x08009b71
 8009b20:	08009b71 	.word	0x08009b71
 8009b24:	08009b71 	.word	0x08009b71
 8009b28:	08009b43 	.word	0x08009b43
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fe f9f2 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 8009b30:	6178      	str	r0, [r7, #20]
      break;
 8009b32:	e020      	b.n	8009b76 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8009b34:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <UART_SetConfig+0x310>)
 8009b36:	617b      	str	r3, [r7, #20]
      break;
 8009b38:	e01d      	b.n	8009b76 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8009b3a:	f7fe f8e7 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8009b3e:	6178      	str	r0, [r7, #20]
      break;
 8009b40:	e019      	b.n	8009b76 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8009b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b46:	617b      	str	r3, [r7, #20]
      break;
 8009b48:	e015      	b.n	8009b76 <UART_SetConfig+0x31a>
 8009b4a:	bf00      	nop
 8009b4c:	efff69f3 	.word	0xefff69f3
 8009b50:	40008000 	.word	0x40008000
 8009b54:	40013800 	.word	0x40013800
 8009b58:	40021000 	.word	0x40021000
 8009b5c:	40004400 	.word	0x40004400
 8009b60:	40004800 	.word	0x40004800
 8009b64:	40004c00 	.word	0x40004c00
 8009b68:	40005000 	.word	0x40005000
 8009b6c:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	73fb      	strb	r3, [r7, #15]
      break;
 8009b74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 8198 	beq.w	8009eae <UART_SetConfig+0x652>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	4613      	mov	r3, r2
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d305      	bcc.n	8009b9a <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	031b      	lsls	r3, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d902      	bls.n	8009ba0 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	73fb      	strb	r3, [r7, #15]
 8009b9e:	e186      	b.n	8009eae <UART_SetConfig+0x652>
      }
      else
      {
        switch (clocksource)
 8009ba0:	7cfb      	ldrb	r3, [r7, #19]
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	f200 8091 	bhi.w	8009cca <UART_SetConfig+0x46e>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x354>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009ccb 	.word	0x08009ccb
 8009bb8:	08009c21 	.word	0x08009c21
 8009bbc:	08009ccb 	.word	0x08009ccb
 8009bc0:	08009c55 	.word	0x08009c55
 8009bc4:	08009ccb 	.word	0x08009ccb
 8009bc8:	08009ccb 	.word	0x08009ccb
 8009bcc:	08009ccb 	.word	0x08009ccb
 8009bd0:	08009ca1 	.word	0x08009ca1
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009bd4:	f7fe f99e 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	4619      	mov	r1, r3
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	f04f 0400 	mov.w	r4, #0
 8009be8:	0214      	lsls	r4, r2, #8
 8009bea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009bee:	020b      	lsls	r3, r1, #8
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	6852      	ldr	r2, [r2, #4]
 8009bf4:	0852      	lsrs	r2, r2, #1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	eb13 0b01 	adds.w	fp, r3, r1
 8009c00:	eb44 0c02 	adc.w	ip, r4, r2
 8009c04:	4658      	mov	r0, fp
 8009c06:	4661      	mov	r1, ip
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f04f 0400 	mov.w	r4, #0
 8009c10:	461a      	mov	r2, r3
 8009c12:	4623      	mov	r3, r4
 8009c14:	f7f6 fb2c 	bl	8000270 <__aeabi_uldivmod>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	617b      	str	r3, [r7, #20]
          break;
 8009c1e:	e057      	b.n	8009cd0 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	f04f 0400 	mov.w	r4, #0
 8009c2a:	49a4      	ldr	r1, [pc, #656]	; (8009ebc <UART_SetConfig+0x660>)
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	eb13 0b01 	adds.w	fp, r3, r1
 8009c34:	eb44 0c02 	adc.w	ip, r4, r2
 8009c38:	4658      	mov	r0, fp
 8009c3a:	4661      	mov	r1, ip
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f04f 0400 	mov.w	r4, #0
 8009c44:	461a      	mov	r2, r3
 8009c46:	4623      	mov	r3, r4
 8009c48:	f7f6 fb12 	bl	8000270 <__aeabi_uldivmod>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	617b      	str	r3, [r7, #20]
          break;
 8009c52:	e03d      	b.n	8009cd0 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009c54:	f7fe f85a 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f04f 0200 	mov.w	r2, #0
 8009c60:	f04f 0300 	mov.w	r3, #0
 8009c64:	f04f 0400 	mov.w	r4, #0
 8009c68:	0214      	lsls	r4, r2, #8
 8009c6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009c6e:	020b      	lsls	r3, r1, #8
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6852      	ldr	r2, [r2, #4]
 8009c74:	0852      	lsrs	r2, r2, #1
 8009c76:	4611      	mov	r1, r2
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	eb13 0b01 	adds.w	fp, r3, r1
 8009c80:	eb44 0c02 	adc.w	ip, r4, r2
 8009c84:	4658      	mov	r0, fp
 8009c86:	4661      	mov	r1, ip
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f04f 0400 	mov.w	r4, #0
 8009c90:	461a      	mov	r2, r3
 8009c92:	4623      	mov	r3, r4
 8009c94:	f7f6 faec 	bl	8000270 <__aeabi_uldivmod>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	617b      	str	r3, [r7, #20]
          break;
 8009c9e:	e017      	b.n	8009cd0 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	f04f 0400 	mov.w	r4, #0
 8009caa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8009cae:	f144 0100 	adc.w	r1, r4, #0
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f04f 0400 	mov.w	r4, #0
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	f7f6 fad7 	bl	8000270 <__aeabi_uldivmod>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	617b      	str	r3, [r7, #20]
          break;
 8009cc8:	e002      	b.n	8009cd0 <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8009cce:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x48e>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x48e>
        {
           huart->Instance->BRR = tmpreg;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e0e1      	b.n	8009eae <UART_SetConfig+0x652>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
 8009cee:	e0de      	b.n	8009eae <UART_SetConfig+0x652>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf8:	d16f      	bne.n	8009dda <UART_SetConfig+0x57e>
  {
    switch (clocksource)
 8009cfa:	7cfb      	ldrb	r3, [r7, #19]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d857      	bhi.n	8009db0 <UART_SetConfig+0x554>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x4ac>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d49 	.word	0x08009d49
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009db1 	.word	0x08009db1
 8009d18:	08009d7f 	.word	0x08009d7f
 8009d1c:	08009db1 	.word	0x08009db1
 8009d20:	08009db1 	.word	0x08009db1
 8009d24:	08009db1 	.word	0x08009db1
 8009d28:	08009d9b 	.word	0x08009d9b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009d2c:	f7fe f8f2 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 8009d30:	4603      	mov	r3, r0
 8009d32:	005a      	lsls	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	085b      	lsrs	r3, r3, #1
 8009d3a:	441a      	add	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d44:	823b      	strh	r3, [r7, #16]
      break;
 8009d46:	e036      	b.n	8009db6 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009d48:	f7fe f906 	bl	8007f58 <HAL_RCC_GetPCLK2Freq>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	005a      	lsls	r2, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	441a      	add	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	823b      	strh	r3, [r7, #16]
      break;
 8009d62:	e028      	b.n	8009db6 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009d6e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6852      	ldr	r2, [r2, #4]
 8009d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d7a:	823b      	strh	r3, [r7, #16]
      break;
 8009d7c:	e01b      	b.n	8009db6 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009d7e:	f7fd ffc5 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8009d82:	4603      	mov	r3, r0
 8009d84:	005a      	lsls	r2, r3, #1
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	085b      	lsrs	r3, r3, #1
 8009d8c:	441a      	add	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	823b      	strh	r3, [r7, #16]
      break;
 8009d98:	e00d      	b.n	8009db6 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dac:	823b      	strh	r3, [r7, #16]
      break;
 8009dae:	e002      	b.n	8009db6 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	73fb      	strb	r3, [r7, #15]
      break;
 8009db4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8009db6:	8a3b      	ldrh	r3, [r7, #16]
 8009db8:	f023 030f 	bic.w	r3, r3, #15
 8009dbc:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8009dbe:	8a3b      	ldrh	r3, [r7, #16]
 8009dc0:	105b      	asrs	r3, r3, #1
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f003 0307 	and.w	r3, r3, #7
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	89bb      	ldrh	r3, [r7, #12]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	89ba      	ldrh	r2, [r7, #12]
 8009dd6:	60da      	str	r2, [r3, #12]
 8009dd8:	e069      	b.n	8009eae <UART_SetConfig+0x652>
  }
  else
  {
    switch (clocksource)
 8009dda:	7cfb      	ldrb	r3, [r7, #19]
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d863      	bhi.n	8009ea8 <UART_SetConfig+0x64c>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x58c>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e2d 	.word	0x08009e2d
 8009df0:	08009e4d 	.word	0x08009e4d
 8009df4:	08009ea9 	.word	0x08009ea9
 8009df8:	08009e6d 	.word	0x08009e6d
 8009dfc:	08009ea9 	.word	0x08009ea9
 8009e00:	08009ea9 	.word	0x08009ea9
 8009e04:	08009ea9 	.word	0x08009ea9
 8009e08:	08009e8d 	.word	0x08009e8d
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009e0c:	f7fe f882 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 8009e10:	4602      	mov	r2, r0
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	085b      	lsrs	r3, r3, #1
 8009e18:	441a      	add	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60da      	str	r2, [r3, #12]
      break;
 8009e2a:	e040      	b.n	8009eae <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009e2c:	f7fe f894 	bl	8007f58 <HAL_RCC_GetPCLK2Freq>
 8009e30:	4602      	mov	r2, r0
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	085b      	lsrs	r3, r3, #1
 8009e38:	441a      	add	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60da      	str	r2, [r3, #12]
      break;
 8009e4a:	e030      	b.n	8009eae <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	085b      	lsrs	r3, r3, #1
 8009e52:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009e56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6852      	ldr	r2, [r2, #4]
 8009e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60da      	str	r2, [r3, #12]
      break;
 8009e6a:	e020      	b.n	8009eae <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009e6c:	f7fd ff4e 	bl	8007d0c <HAL_RCC_GetSysClockFreq>
 8009e70:	4602      	mov	r2, r0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	441a      	add	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60da      	str	r2, [r3, #12]
      break;
 8009e8a:	e010      	b.n	8009eae <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	085b      	lsrs	r3, r3, #1
 8009e92:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60da      	str	r2, [r3, #12]
      break;
 8009ea6:	e002      	b.n	8009eae <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009eac:	bf00      	nop
    }
  }

  return ret;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]

}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009eba:	bf00      	nop
 8009ebc:	f4240000 	.word	0xf4240000

08009ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	f003 0308 	and.w	r3, r3, #8
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01a      	beq.n	8009fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fbe:	d10a      	bne.n	8009fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr

0800a002 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af02      	add	r7, sp, #8
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a014:	f7fb ff92 	bl	8005f3c <HAL_GetTick>
 800a018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b08      	cmp	r3, #8
 800a026:	d10e      	bne.n	800a046 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f82c 	bl	800a094 <UART_WaitOnFlagUntilTimeout>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e022      	b.n	800a08c <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d10e      	bne.n	800a072 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f816 	bl	800a094 <UART_WaitOnFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e00c      	b.n	800a08c <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a4:	e02c      	b.n	800a100 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	d028      	beq.n	800a100 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d007      	beq.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0b4:	f7fb ff42 	bl	8005f3c <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d21d      	bcs.n	800a100 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0201 	bic.w	r2, r2, #1
 800a0e2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e00f      	b.n	800a120 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	69da      	ldr	r2, [r3, #28]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4013      	ands	r3, r2
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	bf0c      	ite	eq
 800a110:	2301      	moveq	r3, #1
 800a112:	2300      	movne	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	461a      	mov	r2, r3
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d0c3      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a146:	601a      	str	r2, [r3, #0]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bc80      	pop	{r7}
 800a150:	4770      	bx	lr

0800a152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a170:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0201 	bic.w	r2, r2, #1
 800a180:	609a      	str	r2, [r3, #8]
}
 800a182:	bf00      	nop
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a198:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0320 	and.w	r3, r3, #32
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d114      	bne.n	800a1d2 <UART_DMATransmitCplt+0x46>
  {  
    huart->TxXferCount = 0;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1be:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ce:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800a1d0:	e002      	b.n	800a1d8 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7f6 fcbe 	bl	8000b54 <HAL_UART_TxCpltCallback>
}
 800a1d8:	bf00      	nop
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ec:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff fb18 	bl	8009824 <HAL_UART_TxHalfCpltCallback>
}
 800a1f4:	bf00      	nop
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b21      	cmp	r3, #33	; 0x21
 800a224:	d109      	bne.n	800a23a <UART_DMAError+0x3e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d102      	bne.n	800a23a <UART_DMAError+0x3e>
  {
    UART_EndTxTransfer(huart);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7ff ff77 	bl	800a128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b22      	cmp	r3, #34	; 0x22
 800a244:	d109      	bne.n	800a25a <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d102      	bne.n	800a25a <UART_DMAError+0x5e>
  {
    UART_EndRxTransfer(huart);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff ff7c 	bl	800a152 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a25e:	f043 0210 	orr.w	r2, r3, #16
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff faee 	bl	8009848 <HAL_UART_ErrorCallback>
}
 800a26c:	bf00      	nop
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff fad8 	bl	8009848 <HAL_UART_ErrorCallback>
}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b21      	cmp	r3, #33	; 0x21
 800a2b2:	d144      	bne.n	800a33e <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d111      	bne.n	800a2e2 <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2cc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2dc:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e02e      	b.n	800a340 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ea:	d114      	bne.n	800a316 <UART_Transmit_IT+0x76>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d110      	bne.n	800a316 <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f8:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	881a      	ldrh	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a306:	b292      	uxth	r2, r2
 800a308:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a30e:	1c9a      	adds	r2, r3, #2
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	64da      	str	r2, [r3, #76]	; 0x4c
 800a314:	e009      	b.n	800a32a <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	64d1      	str	r1, [r2, #76]	; 0x4c
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	b292      	uxth	r2, r2
 800a328:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a330:	3b01      	subs	r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e000      	b.n	800a340 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a33e:	2302      	movs	r3, #2
  }
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr

0800a34a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a360:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2220      	movs	r2, #32
 800a366:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7f6 fbf2 	bl	8000b54 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a37a:	b590      	push	{r4, r7, lr}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a388:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b22      	cmp	r3, #34	; 0x22
 800a394:	d14f      	bne.n	800a436 <UART_Receive_IT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a39c:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a6:	d112      	bne.n	800a3ce <UART_Receive_IT+0x54>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10e      	bne.n	800a3ce <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b4:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a3b6:	89ba      	ldrh	r2, [r7, #12]
 800a3b8:	89fb      	ldrh	r3, [r7, #14]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c6:	1c9a      	adds	r2, r3, #2
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	655a      	str	r2, [r3, #84]	; 0x54
 800a3cc:	e00b      	b.n	800a3e6 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3ce:	89bb      	ldrh	r3, [r7, #12]
 800a3d0:	b2d9      	uxtb	r1, r3
 800a3d2:	89fb      	ldrh	r3, [r7, #14]
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3da:	1c5c      	adds	r4, r3, #1
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	6544      	str	r4, [r0, #84]	; 0x54
 800a3e0:	400a      	ands	r2, r1
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d118      	bne.n	800a432 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a40e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fa04 	bl	8009836 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	e00c      	b.n	800a44c <UART_Receive_IT+0xd2>
    }

    return HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	e00a      	b.n	800a44c <UART_Receive_IT+0xd2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	8b1b      	ldrh	r3, [r3, #24]
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f042 0208 	orr.w	r2, r2, #8
 800a446:	b292      	uxth	r2, r2
 800a448:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 800a44a:	2302      	movs	r3, #2
  }
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	bd90      	pop	{r4, r7, pc}

0800a454 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr
	...

0800a468 <MX_TIM5_Init>:
 */
TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800a46e:	4b17      	ldr	r3, [pc, #92]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a470:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <MX_TIM5_Init+0x68>)
 800a472:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800a474:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a476:	2253      	movs	r2, #83	; 0x53
 800a478:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a47a:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 800a480:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a482:	f04f 32ff 	mov.w	r2, #4294967295
 800a486:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a488:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 800a48e:	480f      	ldr	r0, [pc, #60]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a490:	f7fe fb60 	bl	8008b54 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a494:	2300      	movs	r3, #0
 800a496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a498:	2300      	movs	r3, #0
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 800a49c:	f107 031c 	add.w	r3, r7, #28
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	480a      	ldr	r0, [pc, #40]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a4a4:	f7fe ff88 	bl	80093b8 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 800a4b8:	463b      	mov	r3, r7
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4803      	ldr	r0, [pc, #12]	; (800a4cc <MX_TIM5_Init+0x64>)
 800a4c0:	f7fe fb74 	bl	8008bac <HAL_TIM_OC_ConfigChannel>

}
 800a4c4:	bf00      	nop
 800a4c6:	3728      	adds	r7, #40	; 0x28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20000ab4 	.word	0x20000ab4
 800a4d0:	40000c00 	.word	0x40000c00

0800a4d4 <TimeStamp_Init>:

void TimeStamp_Init(){
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 800a4d8:	f7ff ffc6 	bl	800a468 <MX_TIM5_Init>
}
 800a4dc:	bf00      	nop
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <TimeStamp_Reset>:

void TimeStamp_Reset(){
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 800a4e4:	4804      	ldr	r0, [pc, #16]	; (800a4f8 <TimeStamp_Reset+0x18>)
 800a4e6:	f7fe fb1b 	bl	8008b20 <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 800a4ea:	4b03      	ldr	r3, [pc, #12]	; (800a4f8 <TimeStamp_Reset+0x18>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a4f2:	bf00      	nop
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000ab4 	.word	0x20000ab4

0800a4fc <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 800a500:	4b03      	ldr	r3, [pc, #12]	; (800a510 <TimeStamp_Get+0x14>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800a506:	4618      	mov	r0, r3
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20000ab4 	.word	0x20000ab4

0800a514 <BSP_GetPushButton>:
#endif

#define BSP_BP_PORT GPIOC
#define BSP_BP_PIN  GPIO_PIN_13

int BSP_GetPushButton(void){
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 800a51a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a51e:	4805      	ldr	r0, [pc, #20]	; (800a534 <BSP_GetPushButton+0x20>)
 800a520:	f7fc fa46 	bl	80069b0 <HAL_GPIO_ReadPin>
 800a524:	4603      	mov	r3, r0
 800a526:	71fb      	strb	r3, [r7, #7]
    return state;
 800a528:	79fb      	ldrb	r3, [r7, #7]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	48000800 	.word	0x48000800

0800a538 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed to let user know the mode
 * switch is taken into account
 *
 * @return True if button remains pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
    uint32_t TimeStarted;
    TimeStarted = HAL_GetTick();
 800a53e:	f7fb fcfd 	bl	8005f3c <HAL_GetTick>
 800a542:	6078      	str	r0, [r7, #4]
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800a544:	e00a      	b.n	800a55c <PusbButton_WaitUnPress+0x24>
        if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 800a546:	f7fb fcf9 	bl	8005f3c <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a554:	d902      	bls.n	800a55c <PusbButton_WaitUnPress+0x24>
            XNUCLEO53L0A1_SetDisplayString (" rb ");
 800a556:	480b      	ldr	r0, [pc, #44]	; (800a584 <PusbButton_WaitUnPress+0x4c>)
 800a558:	f7f6 fa94 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800a55c:	f7ff ffda 	bl	800a514 <BSP_GetPushButton>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0ef      	beq.n	800a546 <PusbButton_WaitUnPress+0xe>
        }
    }
    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 800a566:	f7fb fce9 	bl	8005f3c <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a574:	bf8c      	ite	hi
 800a576:	2301      	movhi	r3, #1
 800a578:	2300      	movls	r3, #0
 800a57a:	b2db      	uxtb	r3, r3

}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	0800be24 	.word	0x0800be24

0800a588 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 800a590:	f107 0308 	add.w	r3, r7, #8
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	4905      	ldr	r1, [pc, #20]	; (800a5ac <HandleError+0x24>)
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fe6d 	bl	800b278 <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 800a59e:	f107 0308 	add.w	r3, r7, #8
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f6 fa6e 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 800a5a8:	e7fe      	b.n	800a5a8 <HandleError+0x20>
 800a5aa:	bf00      	nop
 800a5ac:	0800be2c 	.word	0x0800be2c

0800a5b0 <DetectSensors>:
 * Reset all sensor then do presence detection
 *
 * All present devices are data initiated and assigned to their final I2C address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    int i;
    uint16_t Id;
    int status;
    int FinalAddress;

    char PresentMsg[5]="    ";
 800a5b8:	4a7e      	ldr	r2, [pc, #504]	; (800a7b4 <DetectSensors+0x204>)
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5c2:	6018      	str	r0, [r3, #0]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	7019      	strb	r1, [r3, #0]
    /* Reset all */
    nDevPresent = 0;
 800a5c8:	4b7b      	ldr	r3, [pc, #492]	; (800a7b8 <DetectSensors+0x208>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	e007      	b.n	800a5e4 <DetectSensors+0x34>
        status = XNUCLEO53L0A1_ResetId(i, 0);
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	69f8      	ldr	r0, [r7, #28]
 800a5d8:	f7f6 f94e 	bl	8000878 <XNUCLEO53L0A1_ResetId>
 800a5dc:	61b8      	str	r0, [r7, #24]
    for (i = 0; i < 3; i++)
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	ddf4      	ble.n	800a5d4 <DetectSensors+0x24>

    /* detect all sensors (even on-board)*/
    for (i = 0; i < 3; i++) {
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e0a3      	b.n	800a738 <DetectSensors+0x188>
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a5f6:	fb02 f303 	mul.w	r3, r2, r3
 800a5fa:	4a70      	ldr	r2, [pc, #448]	; (800a7bc <DetectSensors+0x20c>)
 800a5fc:	4413      	add	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2252      	movs	r2, #82	; 0x52
 800a604:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a616:	2101      	movs	r1, #1
 800a618:	4618      	mov	r0, r3
 800a61a:	f7f6 f92d 	bl	8000878 <XNUCLEO53L0A1_ResetId>
 800a61e:	61b8      	str	r0, [r7, #24]
        HAL_Delay(2);
 800a620:	2002      	movs	r0, #2
 800a622:	f7fb fc95 	bl	8005f50 <HAL_Delay>
        FinalAddress=0x52+(i+1)*2;
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	332a      	adds	r3, #42	; 0x2a
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d106      	bne.n	800a642 <DetectSensors+0x92>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 800a634:	2200      	movs	r2, #0
 800a636:	2188      	movs	r1, #136	; 0x88
 800a638:	6978      	ldr	r0, [r7, #20]
 800a63a:	f7f6 fc8d 	bl	8000f58 <VL53L0X_WrByte>
 800a63e:	4603      	mov	r3, r0
 800a640:	61bb      	str	r3, [r7, #24]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800a642:	f107 030e 	add.w	r3, r7, #14
 800a646:	461a      	mov	r2, r3
 800a648:	21c0      	movs	r1, #192	; 0xc0
 800a64a:	6978      	ldr	r0, [r7, #20]
 800a64c:	f7f6 fd30 	bl	80010b0 <VL53L0X_RdWord>
 800a650:	4603      	mov	r3, r0
 800a652:	61bb      	str	r3, [r7, #24]
            if (status) {
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <DetectSensors+0xb4>
                debug_printf("#%d Read id fail\n", i);
 800a65a:	69f9      	ldr	r1, [r7, #28]
 800a65c:	4858      	ldr	r0, [pc, #352]	; (800a7c0 <DetectSensors+0x210>)
 800a65e:	f7f6 fac1 	bl	8000be4 <uart_printf>
                break;
 800a662:	e05f      	b.n	800a724 <DetectSensors+0x174>
            }
            if (Id == 0xEEAA) {
 800a664:	89fb      	ldrh	r3, [r7, #14]
 800a666:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d152      	bne.n	800a714 <DetectSensors+0x164>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	4619      	mov	r1, r3
 800a674:	6978      	ldr	r0, [r7, #20]
 800a676:	f7f6 fdb1 	bl	80011dc <VL53L0X_SetDeviceAddress>
 800a67a:	4603      	mov	r3, r0
 800a67c:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <DetectSensors+0xde>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 800a684:	69f9      	ldr	r1, [r7, #28]
 800a686:	484f      	ldr	r0, [pc, #316]	; (800a7c4 <DetectSensors+0x214>)
 800a688:	f7f6 faac 	bl	8000be4 <uart_printf>
                    break;
 800a68c:	e04a      	b.n	800a724 <DetectSensors+0x174>
                }
                pDev->I2cDevAddr = FinalAddress;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	b2da      	uxtb	r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800a698:	f107 030e 	add.w	r3, r7, #14
 800a69c:	461a      	mov	r2, r3
 800a69e:	21c0      	movs	r1, #192	; 0xc0
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	f7f6 fd05 	bl	80010b0 <VL53L0X_RdWord>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <DetectSensors+0x10a>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
 800a6b0:	69f9      	ldr	r1, [r7, #28]
 800a6b2:	4845      	ldr	r0, [pc, #276]	; (800a7c8 <DetectSensors+0x218>)
 800a6b4:	f7f6 fa96 	bl	8000be4 <uart_printf>
					break;
 800a6b8:	e034      	b.n	800a724 <DetectSensors+0x174>
				}

                status = VL53L0X_DataInit(pDev);
 800a6ba:	6978      	ldr	r0, [r7, #20]
 800a6bc:	f7f6 fda6 	bl	800120c <VL53L0X_DataInit>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	61bb      	str	r3, [r7, #24]
                if( status == 0 ){
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d11f      	bne.n	800a70a <DetectSensors+0x15a>
                    pDev->Present = 1;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a6de:	461a      	mov	r2, r3
 800a6e0:	483a      	ldr	r0, [pc, #232]	; (800a7cc <DetectSensors+0x21c>)
 800a6e2:	f7f6 fa7f 	bl	8000be4 <uart_printf>
                nDevPresent++;
 800a6e6:	4b34      	ldr	r3, [pc, #208]	; (800a7b8 <DetectSensors+0x208>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	4a32      	ldr	r2, [pc, #200]	; (800a7b8 <DetectSensors+0x208>)
 800a6ee:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	409a      	lsls	r2, r3
 800a6f6:	4b36      	ldr	r3, [pc, #216]	; (800a7d0 <DetectSensors+0x220>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	4a34      	ldr	r2, [pc, #208]	; (800a7d0 <DetectSensors+0x220>)
 800a6fe:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	2201      	movs	r2, #1
 800a704:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800a708:	e00c      	b.n	800a724 <DetectSensors+0x174>
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 800a70a:	69f9      	ldr	r1, [r7, #28]
 800a70c:	4831      	ldr	r0, [pc, #196]	; (800a7d4 <DetectSensors+0x224>)
 800a70e:	f7f6 fa69 	bl	8000be4 <uart_printf>
                    break;
 800a712:	e007      	b.n	800a724 <DetectSensors+0x174>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
 800a714:	89fb      	ldrh	r3, [r7, #14]
 800a716:	461a      	mov	r2, r3
 800a718:	69f9      	ldr	r1, [r7, #28]
 800a71a:	482f      	ldr	r0, [pc, #188]	; (800a7d8 <DetectSensors+0x228>)
 800a71c:	f7f6 fa62 	bl	8000be4 <uart_printf>
                status = 1;
 800a720:	2301      	movs	r3, #1
 800a722:	61bb      	str	r3, [r7, #24]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <DetectSensors+0x182>
            XNUCLEO53L0A1_ResetId(i, 0);
 800a72a:	2100      	movs	r1, #0
 800a72c:	69f8      	ldr	r0, [r7, #28]
 800a72e:	f7f6 f8a3 	bl	8000878 <XNUCLEO53L0A1_ResetId>
    for (i = 0; i < 3; i++) {
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	3301      	adds	r3, #1
 800a736:	61fb      	str	r3, [r7, #28]
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	f77f af58 	ble.w	800a5f0 <DetectSensors+0x40>
        }
    }
    /* Display detected sensor(s) */
    if( SetDisplay ){
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d030      	beq.n	800a7a8 <DetectSensors+0x1f8>
        for(i=0; i<3; i++){
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e01f      	b.n	800a78c <DetectSensors+0x1dc>
            if( VL53L0XDevs[i].Present ){
 800a74c:	4a1b      	ldr	r2, [pc, #108]	; (800a7bc <DetectSensors+0x20c>)
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a754:	fb01 f303 	mul.w	r3, r1, r3
 800a758:	4413      	add	r3, r2
 800a75a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d010      	beq.n	800a786 <DetectSensors+0x1d6>
                PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	3301      	adds	r3, #1
 800a768:	4914      	ldr	r1, [pc, #80]	; (800a7bc <DetectSensors+0x20c>)
 800a76a:	69fa      	ldr	r2, [r7, #28]
 800a76c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a770:	fb00 f202 	mul.w	r2, r0, r2
 800a774:	440a      	add	r2, r1
 800a776:	f202 1261 	addw	r2, r2, #353	; 0x161
 800a77a:	7812      	ldrb	r2, [r2, #0]
 800a77c:	f107 0120 	add.w	r1, r7, #32
 800a780:	440b      	add	r3, r1
 800a782:	f803 2c18 	strb.w	r2, [r3, #-24]
        for(i=0; i<3; i++){
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	3301      	adds	r3, #1
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	dddc      	ble.n	800a74c <DetectSensors+0x19c>
            }
        }
        PresentMsg[0]=' ';
 800a792:	2320      	movs	r3, #32
 800a794:	723b      	strb	r3, [r7, #8]
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f6 f972 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
        HAL_Delay(1000);
 800a7a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7a4:	f7fb fbd4 	bl	8005f50 <HAL_Delay>
    }

    return nDevPresent;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <DetectSensors+0x208>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3720      	adds	r7, #32
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	0800bee4 	.word	0x0800bee4
 800a7b8:	20000958 	.word	0x20000958
 800a7bc:	200002e8 	.word	0x200002e8
 800a7c0:	0800be34 	.word	0x0800be34
 800a7c4:	0800be48 	.word	0x0800be48
 800a7c8:	0800be6c 	.word	0x0800be6c
 800a7cc:	0800bea0 	.word	0x0800bea0
 800a7d0:	20000ab0 	.word	0x20000ab0
 800a7d4:	0800be84 	.word	0x0800be84
 800a7d8:	0800bed0 	.word	0x0800bed0

0800a7dc <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	; 0x30
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800a7e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800a7ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800a7f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 800a7f2:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800a7f6:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 800a7f8:	230e      	movs	r3, #14
 800a7fa:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 800a7fc:	230a      	movs	r3, #10
 800a7fe:	77bb      	strb	r3, [r7, #30]

    for( i=0; i<3; i++){
 800a800:	2300      	movs	r3, #0
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a804:	e140      	b.n	800aa88 <SetupSingleShot+0x2ac>
        if( VL53L0XDevs[i].Present){
 800a806:	4aa4      	ldr	r2, [pc, #656]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	4413      	add	r3, r2
 800a814:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 8131 	beq.w	800aa82 <SetupSingleShot+0x2a6>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a826:	fb02 f303 	mul.w	r3, r2, r3
 800a82a:	4a9b      	ldr	r2, [pc, #620]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a82c:	4413      	add	r3, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f6 fe50 	bl	80014d4 <VL53L0X_StaticInit>
 800a834:	4603      	mov	r3, r0
 800a836:	61bb      	str	r3, [r7, #24]
            if( status ){
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <SetupSingleShot+0x6a>
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
 800a83e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a840:	4896      	ldr	r0, [pc, #600]	; (800aa9c <SetupSingleShot+0x2c0>)
 800a842:	f7f6 f9cf 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a84c:	fb02 f303 	mul.w	r3, r2, r3
 800a850:	4a91      	ldr	r2, [pc, #580]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a852:	4413      	add	r3, r2
 800a854:	f107 0216 	add.w	r2, r7, #22
 800a858:	f107 0117 	add.w	r1, r7, #23
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7f7 fce5 	bl	800222c <VL53L0X_PerformRefCalibration>
 800a862:	4603      	mov	r3, r0
 800a864:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <SetupSingleShot+0x96>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 800a86c:	488c      	ldr	r0, [pc, #560]	; (800aaa0 <SetupSingleShot+0x2c4>)
 800a86e:	f7f6 f9b9 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	4a86      	ldr	r2, [pc, #536]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a87e:	4413      	add	r3, r2
 800a880:	f107 020f 	add.w	r2, r7, #15
 800a884:	f107 0110 	add.w	r1, r7, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f8 f95d 	bl	8002b48 <VL53L0X_PerformRefSpadManagement>
 800a88e:	4603      	mov	r3, r0
 800a890:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <SetupSingleShot+0xc2>
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 800a898:	4882      	ldr	r0, [pc, #520]	; (800aaa4 <SetupSingleShot+0x2c8>)
 800a89a:	f7f6 f9a3 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a8a4:	fb02 f303 	mul.w	r3, r2, r3
 800a8a8:	4a7b      	ldr	r2, [pc, #492]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a8aa:	4413      	add	r3, r2
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7f7 f822 	bl	80018f8 <VL53L0X_SetDeviceMode>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	61bb      	str	r3, [r7, #24]
            if( status ){
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <SetupSingleShot+0xe8>
               debug_printf("VL53L0X_SetDeviceMode failed\n");
 800a8be:	487a      	ldr	r0, [pc, #488]	; (800aaa8 <SetupSingleShot+0x2cc>)
 800a8c0:	f7f6 f990 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	4a72      	ldr	r2, [pc, #456]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a8d0:	4413      	add	r3, r2
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f7 faa4 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <SetupSingleShot+0x110>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 800a8e6:	4871      	ldr	r0, [pc, #452]	; (800aaac <SetupSingleShot+0x2d0>)
 800a8e8:	f7f6 f97c 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a8f2:	fb02 f303 	mul.w	r3, r2, r3
 800a8f6:	4a68      	ldr	r2, [pc, #416]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a8f8:	4413      	add	r3, r2
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f7 fa90 	bl	8001e24 <VL53L0X_SetLimitCheckEnable>
 800a904:	4603      	mov	r3, r0
 800a906:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <SetupSingleShot+0x138>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 800a90e:	4867      	ldr	r0, [pc, #412]	; (800aaac <SetupSingleShot+0x2d0>)
 800a910:	f7f6 f968 	bl	8000be4 <uart_printf>
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d01e      	beq.n	800a958 <SetupSingleShot+0x17c>
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d00f      	beq.n	800a93e <SetupSingleShot+0x162>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d128      	bne.n	800a974 <SetupSingleShot+0x198>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 800a922:	f641 1399 	movw	r3, #6553	; 0x1999
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 800a928:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
            	timingBudget = 33000;
 800a92e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800a932:	623b      	str	r3, [r7, #32]
            	preRangeVcselPeriod = 18;
 800a934:	2312      	movs	r3, #18
 800a936:	77fb      	strb	r3, [r7, #31]
            	finalRangeVcselPeriod = 14;
 800a938:	230e      	movs	r3, #14
 800a93a:	77bb      	strb	r3, [r7, #30]
            	break;
 800a93c:	e01d      	b.n	800a97a <SetupSingleShot+0x19e>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 800a93e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(18*65536);
 800a944:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 200000;
 800a94a:	4b59      	ldr	r3, [pc, #356]	; (800aab0 <SetupSingleShot+0x2d4>)
 800a94c:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 800a94e:	230e      	movs	r3, #14
 800a950:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 800a952:	230a      	movs	r3, #10
 800a954:	77bb      	strb	r3, [r7, #30]
				break;
 800a956:	e010      	b.n	800a97a <SetupSingleShot+0x19e>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 800a958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(32*65536);
 800a95e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a962:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 800a964:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a968:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 800a96a:	230e      	movs	r3, #14
 800a96c:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 800a96e:	230a      	movs	r3, #10
 800a970:	77bb      	strb	r3, [r7, #30]
				break;
 800a972:	e002      	b.n	800a97a <SetupSingleShot+0x19e>
            default:
            	debug_printf("Not Supported");
 800a974:	484f      	ldr	r0, [pc, #316]	; (800aab4 <SetupSingleShot+0x2d8>)
 800a976:	f7f6 f935 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a980:	fb02 f303 	mul.w	r3, r2, r3
 800a984:	4a44      	ldr	r2, [pc, #272]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a986:	4413      	add	r3, r2
 800a988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a98a:	2101      	movs	r1, #1
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f7 faf7 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 800a992:	4603      	mov	r3, r0
 800a994:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <SetupSingleShot+0x1c6>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 800a99c:	4846      	ldr	r0, [pc, #280]	; (800aab8 <SetupSingleShot+0x2dc>)
 800a99e:	f7f6 f921 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800a9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a9a8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ac:	4a3a      	ldr	r2, [pc, #232]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a9ae:	4413      	add	r3, r2
 800a9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7f7 fae3 	bl	8001f80 <VL53L0X_SetLimitCheckValue>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	61bb      	str	r3, [r7, #24]
			if( status ){
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <SetupSingleShot+0x1ee>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 800a9c4:	483c      	ldr	r0, [pc, #240]	; (800aab8 <SetupSingleShot+0x2dc>)
 800a9c6:	f7f6 f90d 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
 800a9d4:	4a30      	ldr	r2, [pc, #192]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a9d6:	4413      	add	r3, r2
 800a9d8:	6a39      	ldr	r1, [r7, #32]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f7 f805 	bl	80019ea <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	61bb      	str	r3, [r7, #24]
            if( status ){
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <SetupSingleShot+0x214>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800a9ea:	4834      	ldr	r0, [pc, #208]	; (800aabc <SetupSingleShot+0x2e0>)
 800a9ec:	f7f6 f8fa 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
 800a9fa:	4a27      	ldr	r2, [pc, #156]	; (800aa98 <SetupSingleShot+0x2bc>)
 800a9fc:	4413      	add	r3, r2
 800a9fe:	7ffa      	ldrb	r2, [r7, #31]
 800aa00:	2100      	movs	r1, #0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f7 f817 	bl	8001a36 <VL53L0X_SetVcselPulsePeriod>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	61bb      	str	r3, [r7, #24]
			if( status ){
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <SetupSingleShot+0x23c>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800aa12:	482b      	ldr	r0, [pc, #172]	; (800aac0 <SetupSingleShot+0x2e4>)
 800aa14:	f7f6 f8e6 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
 800aa22:	4a1d      	ldr	r2, [pc, #116]	; (800aa98 <SetupSingleShot+0x2bc>)
 800aa24:	4413      	add	r3, r2
 800aa26:	7fba      	ldrb	r2, [r7, #30]
 800aa28:	2101      	movs	r1, #1
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7f7 f803 	bl	8001a36 <VL53L0X_SetVcselPulsePeriod>
 800aa30:	4603      	mov	r3, r0
 800aa32:	61bb      	str	r3, [r7, #24]
			if( status ){
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <SetupSingleShot+0x264>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800aa3a:	4821      	ldr	r0, [pc, #132]	; (800aac0 <SetupSingleShot+0x2e4>)
 800aa3c:	f7f6 f8d2 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
 800aa4a:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <SetupSingleShot+0x2bc>)
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f107 0216 	add.w	r2, r7, #22
 800aa52:	f107 0117 	add.w	r1, r7, #23
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7f7 fbe8 	bl	800222c <VL53L0X_PerformRefCalibration>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	61bb      	str	r3, [r7, #24]
			if( status ){
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <SetupSingleShot+0x290>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 800aa66:	480e      	ldr	r0, [pc, #56]	; (800aaa0 <SetupSingleShot+0x2c4>)
 800aa68:	f7f6 f8bc 	bl	8000be4 <uart_printf>
			}

            VL53L0XDevs[i].LeakyFirst=1;
 800aa6c:	4a0a      	ldr	r2, [pc, #40]	; (800aa98 <SetupSingleShot+0x2bc>)
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa7e:	2201      	movs	r2, #1
 800aa80:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	3301      	adds	r3, #1
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	f77f aebb 	ble.w	800a806 <SetupSingleShot+0x2a>
        }
    }
}
 800aa90:	bf00      	nop
 800aa92:	3730      	adds	r7, #48	; 0x30
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200002e8 	.word	0x200002e8
 800aa9c:	0800beec 	.word	0x0800beec
 800aaa0:	0800bf0c 	.word	0x0800bf0c
 800aaa4:	0800bf34 	.word	0x0800bf34
 800aaa8:	0800bf60 	.word	0x0800bf60
 800aaac:	0800bf80 	.word	0x0800bf80
 800aab0:	00030d40 	.word	0x00030d40
 800aab4:	0800bfa4 	.word	0x0800bfa4
 800aab8:	0800bfb4 	.word	0x0800bfb4
 800aabc:	0800bfd8 	.word	0x0800bfd8
 800aac0:	0800c010 	.word	0x0800c010

0800aac4 <RangeToLetter>:

char RangeToLetter(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
    char c;
    if( pRange->RangeStatus == 0 ){
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	7e1b      	ldrb	r3, [r3, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d116      	bne.n	800ab04 <RangeToLetter+0x40>
        if( pDev->LeakyRange < RangeLow ){
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800aadc:	4b0d      	ldr	r3, [pc, #52]	; (800ab14 <RangeToLetter+0x50>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	da02      	bge.n	800aaea <RangeToLetter+0x26>
            c='_';
 800aae4:	235f      	movs	r3, #95	; 0x5f
 800aae6:	73fb      	strb	r3, [r7, #15]
 800aae8:	e00e      	b.n	800ab08 <RangeToLetter+0x44>
        }
        else if( pDev->LeakyRange < RangeMedium ){
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800aaf0:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <RangeToLetter+0x54>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	da02      	bge.n	800aafe <RangeToLetter+0x3a>
                c='=';
 800aaf8:	233d      	movs	r3, #61	; 0x3d
 800aafa:	73fb      	strb	r3, [r7, #15]
 800aafc:	e004      	b.n	800ab08 <RangeToLetter+0x44>
        }
        else {
            c = '~';
 800aafe:	237e      	movs	r3, #126	; 0x7e
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	e001      	b.n	800ab08 <RangeToLetter+0x44>
        }

    }
    else{
        c='-';
 800ab04:	232d      	movs	r3, #45	; 0x2d
 800ab06:	73fb      	strb	r3, [r7, #15]
    }
    return c;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr
 800ab14:	20000798 	.word	0x20000798
 800ab18:	2000079c 	.word	0x2000079c

0800ab1c <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	7e1b      	ldrb	r3, [r3, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d124      	bne.n	800ab78 <Sensor_SetNewRange+0x5c>
        if( pDev->LeakyFirst ){
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00a      	beq.n	800ab4e <Sensor_SetNewRange+0x32>
            pDev->LeakyFirst = 0;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	891b      	ldrh	r3, [r3, #8]
 800ab44:	461a      	mov	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        }
    }
    else{
        pDev->LeakyFirst = 1;
    }
}
 800ab4c:	e018      	b.n	800ab80 <Sensor_SetNewRange+0x64>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <Sensor_SetNewRange+0x70>)
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	fb02 f203 	mul.w	r2, r2, r3
 800ab5c:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <Sensor_SetNewRange+0x70>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	8909      	ldrh	r1, [r1, #8]
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	121a      	asrs	r2, r3, #8
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 800ab76:	e003      	b.n	800ab80 <Sensor_SetNewRange+0x64>
        pDev->LeakyFirst = 1;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bc80      	pop	{r7}
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	200002e4 	.word	0x200002e4

0800ab90 <RangeDemo>:
 * Implement the ranging demo with all modes managed through the blue button (short and long press)
 * This function implements a while loop until the blue button is pressed
 * @param UseSensorsMask Mask of any sensors to use if not only one present
 * @param rangingConfig Ranging configuration to be used (same for all sensors)
 */
int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig){
 800ab90:	b590      	push	{r4, r7, lr}
 800ab92:	b08d      	sub	sp, #52	; 0x34
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
    int over=0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61bb      	str	r3, [r7, #24]
    int status;
    char StrDisplay[5];
    char c;
    int i;
    int nSensorToUse;
    int SingleSensorNo=0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]

    /* Setup all sensors in Single Shot mode */
    SetupSingleShot(rangingConfig);
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fe18 	bl	800a7dc <SetupSingleShot>

    /* Which sensor to use ? */
    for(i=0, nSensorToUse=0; i<3; i++){
 800abac:	2300      	movs	r3, #0
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
 800abb0:	2300      	movs	r3, #0
 800abb2:	623b      	str	r3, [r7, #32]
 800abb4:	e01e      	b.n	800abf4 <RangeDemo+0x64>
        if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	fa42 f303 	asr.w	r3, r2, r3
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d013      	beq.n	800abee <RangeDemo+0x5e>
 800abc6:	4a8f      	ldr	r2, [pc, #572]	; (800ae04 <RangeDemo+0x274>)
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800abce:	fb01 f303 	mul.w	r3, r1, r3
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d007      	beq.n	800abee <RangeDemo+0x5e>
            nSensorToUse++;
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	3301      	adds	r3, #1
 800abe2:	623b      	str	r3, [r7, #32]
            if( nSensorToUse==1 )
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <RangeDemo+0x5e>
                SingleSensorNo=i;
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	61fb      	str	r3, [r7, #28]
    for(i=0, nSensorToUse=0; i<3; i++){
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	3301      	adds	r3, #1
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	dddd      	ble.n	800abb6 <RangeDemo+0x26>
        }
    }
    if( nSensorToUse == 0 ){
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <RangeDemo+0x76>
        return -1;
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	e0f9      	b.n	800adfa <RangeDemo+0x26a>
    }

    /* Start ranging until blue button is pressed */
    do{
        if( nSensorToUse >1 ){
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	dd77      	ble.n	800acfc <RangeDemo+0x16c>
        	/* Multiple devices */
            strcpy(StrDisplay, "    ");
 800ac0c:	4a7e      	ldr	r2, [pc, #504]	; (800ae08 <RangeDemo+0x278>)
 800ac0e:	f107 030c 	add.w	r3, r7, #12
 800ac12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac16:	6018      	str	r0, [r3, #0]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	7019      	strb	r1, [r3, #0]
            for( i=0; i<3; i++){
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac20:	e068      	b.n	800acf4 <RangeDemo+0x164>
                if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 800ac22:	4a78      	ldr	r2, [pc, #480]	; (800ae04 <RangeDemo+0x274>)
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ac2a:	fb01 f303 	mul.w	r3, r1, r3
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d058      	beq.n	800acec <RangeDemo+0x15c>
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	fa42 f303 	asr.w	r3, r2, r3
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d050      	beq.n	800acec <RangeDemo+0x15c>
                    continue;
                /* Call All-In-One blocking API function */
                status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasurementData);
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	4a6b      	ldr	r2, [pc, #428]	; (800ae04 <RangeDemo+0x274>)
 800ac56:	4413      	add	r3, r2
 800ac58:	496c      	ldr	r1, [pc, #432]	; (800ae0c <RangeDemo+0x27c>)
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7f7 fd88 	bl	8002770 <VL53L0X_PerformSingleRangingMeasurement>
 800ac60:	4603      	mov	r3, r0
 800ac62:	617b      	str	r3, [r7, #20]
                if( status ){
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <RangeDemo+0xe0>
                    HandleError(ERR_DEMO_RANGE_MULTI);
 800ac6a:	2002      	movs	r0, #2
 800ac6c:	f7ff fc8c 	bl	800a588 <HandleError>
                }
                /* Push data logging to UART */
                trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 800ac70:	4a64      	ldr	r2, [pc, #400]	; (800ae04 <RangeDemo+0x274>)
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac82:	681c      	ldr	r4, [r3, #0]
 800ac84:	f7ff fc3a 	bl	800a4fc <TimeStamp_Get>
 800ac88:	4601      	mov	r1, r0
 800ac8a:	4b60      	ldr	r3, [pc, #384]	; (800ae0c <RangeDemo+0x27c>)
 800ac8c:	7e1b      	ldrb	r3, [r3, #24]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	4b5e      	ldr	r3, [pc, #376]	; (800ae0c <RangeDemo+0x27c>)
 800ac92:	891b      	ldrh	r3, [r3, #8]
 800ac94:	461a      	mov	r2, r3
 800ac96:	4b5d      	ldr	r3, [pc, #372]	; (800ae0c <RangeDemo+0x27c>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	9200      	str	r2, [sp, #0]
 800ac9e:	4603      	mov	r3, r0
 800aca0:	460a      	mov	r2, r1
 800aca2:	4621      	mov	r1, r4
 800aca4:	485a      	ldr	r0, [pc, #360]	; (800ae10 <RangeDemo+0x280>)
 800aca6:	f7f5 ff9d 	bl	8000be4 <uart_printf>
                /* Store new ranging distance */
                Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800acb0:	fb02 f303 	mul.w	r3, r2, r3
 800acb4:	4a53      	ldr	r2, [pc, #332]	; (800ae04 <RangeDemo+0x274>)
 800acb6:	4413      	add	r3, r2
 800acb8:	4954      	ldr	r1, [pc, #336]	; (800ae0c <RangeDemo+0x27c>)
 800acba:	4618      	mov	r0, r3
 800acbc:	f7ff ff2e 	bl	800ab1c <Sensor_SetNewRange>
                /* Translate distance in bar graph (multiple device) */
                c = RangeToLetter(&VL53L0XDevs[i],&RangingMeasurementData);
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	4a4e      	ldr	r2, [pc, #312]	; (800ae04 <RangeDemo+0x274>)
 800accc:	4413      	add	r3, r2
 800acce:	494f      	ldr	r1, [pc, #316]	; (800ae0c <RangeDemo+0x27c>)
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fef7 	bl	800aac4 <RangeToLetter>
 800acd6:	4603      	mov	r3, r0
 800acd8:	74fb      	strb	r3, [r7, #19]
                StrDisplay[i+1]=c;
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	3301      	adds	r3, #1
 800acde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ace2:	4413      	add	r3, r2
 800ace4:	7cfa      	ldrb	r2, [r7, #19]
 800ace6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800acea:	e000      	b.n	800acee <RangeDemo+0x15e>
                    continue;
 800acec:	bf00      	nop
            for( i=0; i<3; i++){
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	3301      	adds	r3, #1
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dd93      	ble.n	800ac22 <RangeDemo+0x92>
 800acfa:	e069      	b.n	800add0 <RangeDemo+0x240>
            }
        }
        else{
            /* only one sensor */
        	/* Call All-In-One blocking API function */
            status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ad02:	fb02 f303 	mul.w	r3, r2, r3
 800ad06:	4a3f      	ldr	r2, [pc, #252]	; (800ae04 <RangeDemo+0x274>)
 800ad08:	4413      	add	r3, r2
 800ad0a:	4940      	ldr	r1, [pc, #256]	; (800ae0c <RangeDemo+0x27c>)
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7f7 fd2f 	bl	8002770 <VL53L0X_PerformSingleRangingMeasurement>
 800ad12:	4603      	mov	r3, r0
 800ad14:	617b      	str	r3, [r7, #20]
            if( status ==0 ){
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d156      	bne.n	800adca <RangeDemo+0x23a>
            	/* Push data logging to UART */
            	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 800ad1c:	4a39      	ldr	r2, [pc, #228]	; (800ae04 <RangeDemo+0x274>)
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad2e:	681c      	ldr	r4, [r3, #0]
 800ad30:	f7ff fbe4 	bl	800a4fc <TimeStamp_Get>
 800ad34:	4601      	mov	r1, r0
 800ad36:	4b35      	ldr	r3, [pc, #212]	; (800ae0c <RangeDemo+0x27c>)
 800ad38:	7e1b      	ldrb	r3, [r3, #24]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	4b33      	ldr	r3, [pc, #204]	; (800ae0c <RangeDemo+0x27c>)
 800ad3e:	891b      	ldrh	r3, [r3, #8]
 800ad40:	461a      	mov	r2, r3
 800ad42:	4b32      	ldr	r3, [pc, #200]	; (800ae0c <RangeDemo+0x27c>)
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	9200      	str	r2, [sp, #0]
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	460a      	mov	r2, r1
 800ad4e:	4621      	mov	r1, r4
 800ad50:	482f      	ldr	r0, [pc, #188]	; (800ae10 <RangeDemo+0x280>)
 800ad52:	f7f5 ff47 	bl	8000be4 <uart_printf>
            	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ad5c:	fb02 f303 	mul.w	r3, r2, r3
 800ad60:	4a28      	ldr	r2, [pc, #160]	; (800ae04 <RangeDemo+0x274>)
 800ad62:	4413      	add	r3, r2
 800ad64:	4929      	ldr	r1, [pc, #164]	; (800ae0c <RangeDemo+0x27c>)
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fed8 	bl	800ab1c <Sensor_SetNewRange>
                /* Display distance in cm */
            	if( RangingMeasurementData.RangeStatus == 0 ){
 800ad6c:	4b27      	ldr	r3, [pc, #156]	; (800ae0c <RangeDemo+0x27c>)
 800ad6e:	7e1b      	ldrb	r3, [r3, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d116      	bne.n	800ada2 <RangeDemo+0x212>
                    sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);
 800ad74:	4a23      	ldr	r2, [pc, #140]	; (800ae04 <RangeDemo+0x274>)
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ad7c:	fb01 f303 	mul.w	r3, r1, r3
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a22      	ldr	r2, [pc, #136]	; (800ae14 <RangeDemo+0x284>)
 800ad8a:	fb82 1203 	smull	r1, r2, r2, r3
 800ad8e:	1092      	asrs	r2, r2, #2
 800ad90:	17db      	asrs	r3, r3, #31
 800ad92:	1ad2      	subs	r2, r2, r3
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	491f      	ldr	r1, [pc, #124]	; (800ae18 <RangeDemo+0x288>)
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fa6c 	bl	800b278 <siprintf>
 800ada0:	e016      	b.n	800add0 <RangeDemo+0x240>
                }
                else{
                    sprintf(StrDisplay, "----");
 800ada2:	4a1e      	ldr	r2, [pc, #120]	; (800ae1c <RangeDemo+0x28c>)
 800ada4:	f107 030c 	add.w	r3, r7, #12
 800ada8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adac:	6018      	str	r0, [r3, #0]
 800adae:	3304      	adds	r3, #4
 800adb0:	7019      	strb	r1, [r3, #0]
                    StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
 800adb2:	4a14      	ldr	r2, [pc, #80]	; (800ae04 <RangeDemo+0x274>)
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800adba:	fb01 f303 	mul.w	r3, r1, r3
 800adbe:	4413      	add	r3, r2
 800adc0:	f203 1361 	addw	r3, r3, #353	; 0x161
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	733b      	strb	r3, [r7, #12]
 800adc8:	e002      	b.n	800add0 <RangeDemo+0x240>
                }
            }
            else{
                HandleError(ERR_DEMO_RANGE_ONE);
 800adca:	2001      	movs	r0, #1
 800adcc:	f7ff fbdc 	bl	800a588 <HandleError>
            }
        }
        XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	4618      	mov	r0, r3
 800add6:	f7f5 fe55 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
        /* Check blue button */
        if( !BSP_GetPushButton() ){
 800adda:	f7ff fb9b 	bl	800a514 <BSP_GetPushButton>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <RangeDemo+0x25a>
            over=1;
 800ade4:	2301      	movs	r3, #1
 800ade6:	61bb      	str	r3, [r7, #24]
            break;
 800ade8:	e003      	b.n	800adf2 <RangeDemo+0x262>
        }
    }while( !over);
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	f43f af0a 	beq.w	800ac06 <RangeDemo+0x76>
    /* Wait button to be un-pressed to decide if it is a short or long press */
    status=PusbButton_WaitUnPress();
 800adf2:	f7ff fba1 	bl	800a538 <PusbButton_WaitUnPress>
 800adf6:	6178      	str	r0, [r7, #20]
    return status;
 800adf8:	697b      	ldr	r3, [r7, #20]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	372c      	adds	r7, #44	; 0x2c
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd90      	pop	{r4, r7, pc}
 800ae02:	bf00      	nop
 800ae04:	200002e8 	.word	0x200002e8
 800ae08:	0800bee4 	.word	0x0800bee4
 800ae0c:	20000af0 	.word	0x20000af0
 800ae10:	0800c034 	.word	0x0800c034
 800ae14:	66666667 	.word	0x66666667
 800ae18:	0800c044 	.word	0x0800c044
 800ae1c:	0800c04c 	.word	0x0800c04c

0800ae20 <ResetAndDetectSensor>:
    XNUCLEO53L0A1_SetIntrStateId(0, XNUCLEO53L0A1_DEV_CENTER);
    VL53L0A1_EXTI_IOUnconfigure(XNUCLEO53L0A1_DEV_CENTER);
}
#endif

void ResetAndDetectSensor(int SetDisplay){
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fbc1 	bl	800a5b0 <DetectSensors>
 800ae2e:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dd07      	ble.n	800ae46 <ResetAndDetectSensor+0x26>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d108      	bne.n	800ae4e <ResetAndDetectSensor+0x2e>
 800ae3c:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <ResetAndDetectSensor+0x38>)
 800ae3e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	f7ff fb9d 	bl	800a588 <HandleError>
    }
}
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	200002e8 	.word	0x200002e8

0800ae5c <main>:

/* USER CODE END 0 */

int main(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ExitWithLongPress;
  RangingConfig_e RangingConfig = LONG_RANGE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  DemoMode_e DemoMode = RANGE_VALUE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73bb      	strb	r3, [r7, #14]
  int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ae6e:	f7fb f825 	bl	8005ebc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800ae72:	f000 f861 	bl	800af38 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ae76:	f000 f8d9 	bl	800b02c <MX_GPIO_Init>

  /* Initialize timestamping for UART logging */
  TimeStamp_Init();
 800ae7a:	f7ff fb2b 	bl	800a4d4 <TimeStamp_Init>

  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_Init();
 800ae7e:	f7f5 fc73 	bl	8000768 <XNUCLEO53L0A1_Init>
  uart_printf(WelcomeMsg);
 800ae82:	4828      	ldr	r0, [pc, #160]	; (800af24 <main+0xc8>)
 800ae84:	f7f5 feae 	bl	8000be4 <uart_printf>
  XNUCLEO53L0A1_SetDisplayString("53L0");
 800ae88:	4827      	ldr	r0, [pc, #156]	; (800af28 <main+0xcc>)
 800ae8a:	f7f5 fdfb 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
  HAL_Delay(WelcomeTime);
 800ae8e:	f44f 7025 	mov.w	r0, #660	; 0x294
 800ae92:	f7fb f85d 	bl	8005f50 <HAL_Delay>
  ResetAndDetectSensor(1);
 800ae96:	2001      	movs	r0, #1
 800ae98:	f7ff ffc2 	bl	800ae20 <ResetAndDetectSensor>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
      /* Display demo mode */
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	4a23      	ldr	r2, [pc, #140]	; (800af2c <main+0xd0>)
 800aea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7f5 fded 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
      HAL_Delay(ModeChangeDispTime);
 800aeaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aeae:	f7fb f84f 	bl	8005f50 <HAL_Delay>

      /* Display Ranging config */
	  XNUCLEO53L0A1_SetDisplayString(RangingConfigTxt[RangingConfig]);
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	4a1e      	ldr	r2, [pc, #120]	; (800af30 <main+0xd4>)
 800aeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f5 fde2 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
	  HAL_Delay(ModeChangeDispTime);
 800aec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aec4:	f7fb f844 	bl	8005f50 <HAL_Delay>

	  /* Reset and Detect all sensors */
      ResetAndDetectSensor(0);
 800aec8:	2000      	movs	r0, #0
 800aeca:	f7ff ffa9 	bl	800ae20 <ResetAndDetectSensor>

      /* Reset Timestamping */
      TimeStamp_Reset();
 800aece:	f7ff fb07 	bl	800a4e0 <TimeStamp_Reset>
      ResetAndDetectSensor(0);
      AlarmDemo();
#else

      /* Start Ranging demo */
      ExitWithLongPress = RangeDemo(UseSensorsMask, RangingConfig);
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	4619      	mov	r1, r3
 800aed6:	68b8      	ldr	r0, [r7, #8]
 800aed8:	f7ff fe5a 	bl	800ab90 <RangeDemo>
 800aedc:	6078      	str	r0, [r7, #4]

      /* Blue button has been pressed (long or short press) */
      if(ExitWithLongPress){
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d012      	beq.n	800af0a <main+0xae>
    	  /* Long press : change demo mode if multiple sensors present*/
    	  if( nDevPresent >1 ){
 800aee4:	4b13      	ldr	r3, [pc, #76]	; (800af34 <main+0xd8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	ddd7      	ble.n	800ae9c <main+0x40>
    		  /* If more than one sensor is present then toggle demo mode */
    		  DemoMode = (DemoMode == RANGE_VALUE) ? BAR_GRAPH : RANGE_VALUE;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bf0c      	ite	eq
 800aef2:	2301      	moveq	r3, #1
 800aef4:	2300      	movne	r3, #0
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	73bb      	strb	r3, [r7, #14]
    		  UseSensorsMask = (DemoMode == BAR_GRAPH) ? 0x7 : 1<<XNUCLEO53L0A1_DEV_CENTER;
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <main+0xa8>
 800af00:	2307      	movs	r3, #7
 800af02:	e000      	b.n	800af06 <main+0xaa>
 800af04:	2302      	movs	r3, #2
 800af06:	60bb      	str	r3, [r7, #8]
 800af08:	e7c8      	b.n	800ae9c <main+0x40>
    	  }
      } else {
    	  /* Short press : change ranging config */
    	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED : ((RangingConfig == HIGH_SPEED) ? HIGH_ACCURACY : LONG_RANGE);
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <main+0xc2>
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d101      	bne.n	800af1a <main+0xbe>
 800af16:	2302      	movs	r3, #2
 800af18:	e002      	b.n	800af20 <main+0xc4>
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <main+0xc4>
 800af1e:	2301      	movs	r3, #1
 800af20:	73fb      	strb	r3, [r7, #15]
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 800af22:	e7bb      	b.n	800ae9c <main+0x40>
 800af24:	200007a0 	.word	0x200007a0
 800af28:	0800c054 	.word	0x0800c054
 800af2c:	200002dc 	.word	0x200002dc
 800af30:	200002d0 	.word	0x200002d0
 800af34:	20000958 	.word	0x20000958

0800af38 <SystemClock_Config>:
}
#endif

#ifdef STM32L476xx
void SystemClock_Config(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b0ba      	sub	sp, #232	; 0xe8
 800af3c:	af00      	add	r7, sp, #0
     RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800af3e:	2302      	movs	r3, #2
 800af40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800af44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800af4c:	2310      	movs	r3, #16
 800af4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af52:	2302      	movs	r3, #2
 800af54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800af58:	2302      	movs	r3, #2
 800af5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 800af64:	230a      	movs	r3, #10
 800af66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800af6a:	2307      	movs	r3, #7
 800af6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800af70:	2302      	movs	r3, #2
 800af72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800af76:	2302      	movs	r3, #2
 800af78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800af7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800af80:	4618      	mov	r0, r3
 800af82:	f7fc fa17 	bl	80073b4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af86:	230f      	movs	r3, #15
 800af88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af8c:	2303      	movs	r3, #3
 800af8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af92:	2300      	movs	r3, #0
 800af94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800af98:	2300      	movs	r3, #0
 800af9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800af9e:	2300      	movs	r3, #0
 800afa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800afa4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800afa8:	2104      	movs	r1, #4
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fc fd8c 	bl	8007ac8 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800afb4:	2300      	movs	r3, #0
 800afb6:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800afb8:	f107 0308 	add.w	r3, r7, #8
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fd f84f 	bl	8008060 <HAL_RCCEx_PeriphCLKConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800afc2:	2302      	movs	r3, #2
 800afc4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800afc6:	2300      	movs	r3, #0
 800afc8:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800afca:	f107 0308 	add.w	r3, r7, #8
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd f846 	bl	8008060 <HAL_RCCEx_PeriphCLKConfig>


  __PWR_CLK_ENABLE();
 800afd4:	4b13      	ldr	r3, [pc, #76]	; (800b024 <SystemClock_Config+0xec>)
 800afd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd8:	4a12      	ldr	r2, [pc, #72]	; (800b024 <SystemClock_Config+0xec>)
 800afda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afde:	6593      	str	r3, [r2, #88]	; 0x58
 800afe0:	4b10      	ldr	r3, [pc, #64]	; (800b024 <SystemClock_Config+0xec>)
 800afe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800afec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aff0:	f7fc f98a 	bl	8007308 <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800aff4:	f7fc ff84 	bl	8007f00 <HAL_RCC_GetHCLKFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <SystemClock_Config+0xf0>)
 800affc:	fba3 2302 	umull	r2, r3, r3, r2
 800b000:	099b      	lsrs	r3, r3, #6
 800b002:	4618      	mov	r0, r3
 800b004:	f7fb f8b7 	bl	8006176 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b008:	2004      	movs	r0, #4
 800b00a:	f7fb f8c1 	bl	8006190 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b00e:	2200      	movs	r2, #0
 800b010:	2100      	movs	r1, #0
 800b012:	f04f 30ff 	mov.w	r0, #4294967295
 800b016:	f7fb f884 	bl	8006122 <HAL_NVIC_SetPriority>
}
 800b01a:	bf00      	nop
 800b01c:	37e8      	adds	r7, #232	; 0xe8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40021000 	.word	0x40021000
 800b028:	10624dd3 	.word	0x10624dd3

0800b02c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	; 0x28
 800b030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800b032:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b036:	4a27      	ldr	r2, [pc, #156]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b038:	f043 0304 	orr.w	r3, r3, #4
 800b03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b03e:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	613b      	str	r3, [r7, #16]
 800b048:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 800b04a:	4b22      	ldr	r3, [pc, #136]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04e:	4a21      	ldr	r2, [pc, #132]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b054:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b056:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	4a1b      	ldr	r2, [pc, #108]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b06e:	4b19      	ldr	r3, [pc, #100]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800b07a:	4b16      	ldr	r3, [pc, #88]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07e:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b080:	f043 0302 	orr.w	r3, r3, #2
 800b084:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <MX_GPIO_Init+0xa8>)
 800b088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	607b      	str	r3, [r7, #4]
 800b090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800b092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b098:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <MX_GPIO_Init+0xac>)
 800b09a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b0a0:	f107 0314 	add.w	r3, r7, #20
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	480d      	ldr	r0, [pc, #52]	; (800b0dc <MX_GPIO_Init+0xb0>)
 800b0a8:	f7fb fad6 	bl	8006658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800b0ac:	2320      	movs	r3, #32
 800b0ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b0bc:	f107 0314 	add.w	r3, r7, #20
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0c6:	f7fb fac7 	bl	8006658 <HAL_GPIO_Init>

}
 800b0ca:	bf00      	nop
 800b0cc:	3728      	adds	r7, #40	; 0x28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	40021000 	.word	0x40021000
 800b0d8:	10120000 	.word	0x10120000
 800b0dc:	48000800 	.word	0x48000800

0800b0e0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0e4:	2003      	movs	r0, #3
 800b0e6:	f7fb f811 	bl	800610c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	f7fb f816 	bl	8006122 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b0f6:	bf00      	nop
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10c:	d10c      	bne.n	800b128 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 800b10e:	4b11      	ldr	r3, [pc, #68]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b112:	4a10      	ldr	r2, [pc, #64]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	6593      	str	r3, [r2, #88]	; 0x58
 800b11a:	4b0e      	ldr	r3, [pc, #56]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800b126:	e010      	b.n	800b14a <HAL_TIM_OC_MspInit+0x4e>
  else if(htim_oc->Instance==TIM5)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <HAL_TIM_OC_MspInit+0x5c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d10b      	bne.n	800b14a <HAL_TIM_OC_MspInit+0x4e>
    __TIM5_CLK_ENABLE();
 800b132:	4b08      	ldr	r3, [pc, #32]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b136:	4a07      	ldr	r2, [pc, #28]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b138:	f043 0308 	orr.w	r3, r3, #8
 800b13c:	6593      	str	r3, [r2, #88]	; 0x58
 800b13e:	4b05      	ldr	r3, [pc, #20]	; (800b154 <HAL_TIM_OC_MspInit+0x58>)
 800b140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	60bb      	str	r3, [r7, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
}
 800b14a:	bf00      	nop
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	bc80      	pop	{r7}
 800b152:	4770      	bx	lr
 800b154:	40021000 	.word	0x40021000
 800b158:	40000c00 	.word	0x40000c00

0800b15c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800b15c:	b480      	push	{r7}
 800b15e:	af00      	add	r7, sp, #0
}
 800b160:	bf00      	nop
 800b162:	46bd      	mov	sp, r7
 800b164:	bc80      	pop	{r7}
 800b166:	4770      	bx	lr

0800b168 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800b16c:	e7fe      	b.n	800b16c <HardFault_Handler+0x4>

0800b16e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800b16e:	b480      	push	{r7}
 800b170:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800b172:	e7fe      	b.n	800b172 <MemManage_Handler+0x4>

0800b174 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800b178:	e7fe      	b.n	800b178 <BusFault_Handler+0x4>

0800b17a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800b17a:	b480      	push	{r7}
 800b17c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800b17e:	e7fe      	b.n	800b17e <UsageFault_Handler+0x4>

0800b180 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
}
 800b184:	bf00      	nop
 800b186:	46bd      	mov	sp, r7
 800b188:	bc80      	pop	{r7}
 800b18a:	4770      	bx	lr

0800b18c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
}
 800b190:	bf00      	nop
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr

0800b198 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
}
 800b19c:	bf00      	nop
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bc80      	pop	{r7}
 800b1a2:	4770      	bx	lr

0800b1a4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800b1a8:	f7fa feba 	bl	8005f20 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800b1ac:	f7fb f80c 	bl	80061c8 <HAL_SYSTICK_IRQHandler>
}
 800b1b0:	bf00      	nop
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b1b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b1ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b1b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b1ba:	e003      	b.n	800b1c4 <LoopCopyDataInit>

0800b1bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b1bc:	4b0c      	ldr	r3, [pc, #48]	; (800b1f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b1be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b1c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b1c2:	3104      	adds	r1, #4

0800b1c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b1c4:	480b      	ldr	r0, [pc, #44]	; (800b1f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b1c6:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b1c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b1ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b1cc:	d3f6      	bcc.n	800b1bc <CopyDataInit>
	ldr	r2, =_sbss
 800b1ce:	4a0b      	ldr	r2, [pc, #44]	; (800b1fc <LoopForever+0x12>)
	b	LoopFillZerobss
 800b1d0:	e002      	b.n	800b1d8 <LoopFillZerobss>

0800b1d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b1d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b1d4:	f842 3b04 	str.w	r3, [r2], #4

0800b1d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b1d8:	4b09      	ldr	r3, [pc, #36]	; (800b200 <LoopForever+0x16>)
	cmp	r2, r3
 800b1da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b1dc:	d3f9      	bcc.n	800b1d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b1de:	f7fa fe41 	bl	8005e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b1e2:	f000 f811 	bl	800b208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b1e6:	f7ff fe39 	bl	800ae5c <main>

0800b1ea <LoopForever>:

LoopForever:
    b LoopForever
 800b1ea:	e7fe      	b.n	800b1ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b1ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800b1f0:	0800c0a8 	.word	0x0800c0a8
	ldr	r0, =_sdata
 800b1f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b1f8:	20000830 	.word	0x20000830
	ldr	r2, =_sbss
 800b1fc:	20000830 	.word	0x20000830
	ldr	r3, = _ebss
 800b200:	20000b10 	.word	0x20000b10

0800b204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b204:	e7fe      	b.n	800b204 <ADC1_2_IRQHandler>
	...

0800b208 <__libc_init_array>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	4e0d      	ldr	r6, [pc, #52]	; (800b240 <__libc_init_array+0x38>)
 800b20c:	4c0d      	ldr	r4, [pc, #52]	; (800b244 <__libc_init_array+0x3c>)
 800b20e:	1ba4      	subs	r4, r4, r6
 800b210:	10a4      	asrs	r4, r4, #2
 800b212:	2500      	movs	r5, #0
 800b214:	42a5      	cmp	r5, r4
 800b216:	d109      	bne.n	800b22c <__libc_init_array+0x24>
 800b218:	4e0b      	ldr	r6, [pc, #44]	; (800b248 <__libc_init_array+0x40>)
 800b21a:	4c0c      	ldr	r4, [pc, #48]	; (800b24c <__libc_init_array+0x44>)
 800b21c:	f000 fc78 	bl	800bb10 <_init>
 800b220:	1ba4      	subs	r4, r4, r6
 800b222:	10a4      	asrs	r4, r4, #2
 800b224:	2500      	movs	r5, #0
 800b226:	42a5      	cmp	r5, r4
 800b228:	d105      	bne.n	800b236 <__libc_init_array+0x2e>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b230:	4798      	blx	r3
 800b232:	3501      	adds	r5, #1
 800b234:	e7ee      	b.n	800b214 <__libc_init_array+0xc>
 800b236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b23a:	4798      	blx	r3
 800b23c:	3501      	adds	r5, #1
 800b23e:	e7f2      	b.n	800b226 <__libc_init_array+0x1e>
 800b240:	0800c098 	.word	0x0800c098
 800b244:	0800c098 	.word	0x0800c098
 800b248:	0800c098 	.word	0x0800c098
 800b24c:	0800c09c 	.word	0x0800c09c

0800b250 <memcpy>:
 800b250:	b510      	push	{r4, lr}
 800b252:	1e43      	subs	r3, r0, #1
 800b254:	440a      	add	r2, r1
 800b256:	4291      	cmp	r1, r2
 800b258:	d100      	bne.n	800b25c <memcpy+0xc>
 800b25a:	bd10      	pop	{r4, pc}
 800b25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b264:	e7f7      	b.n	800b256 <memcpy+0x6>

0800b266 <memset>:
 800b266:	4402      	add	r2, r0
 800b268:	4603      	mov	r3, r0
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d100      	bne.n	800b270 <memset+0xa>
 800b26e:	4770      	bx	lr
 800b270:	f803 1b01 	strb.w	r1, [r3], #1
 800b274:	e7f9      	b.n	800b26a <memset+0x4>
	...

0800b278 <siprintf>:
 800b278:	b40e      	push	{r1, r2, r3}
 800b27a:	b500      	push	{lr}
 800b27c:	b09c      	sub	sp, #112	; 0x70
 800b27e:	ab1d      	add	r3, sp, #116	; 0x74
 800b280:	9002      	str	r0, [sp, #8]
 800b282:	9006      	str	r0, [sp, #24]
 800b284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b288:	4809      	ldr	r0, [pc, #36]	; (800b2b0 <siprintf+0x38>)
 800b28a:	9107      	str	r1, [sp, #28]
 800b28c:	9104      	str	r1, [sp, #16]
 800b28e:	4909      	ldr	r1, [pc, #36]	; (800b2b4 <siprintf+0x3c>)
 800b290:	f853 2b04 	ldr.w	r2, [r3], #4
 800b294:	9105      	str	r1, [sp, #20]
 800b296:	6800      	ldr	r0, [r0, #0]
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	a902      	add	r1, sp, #8
 800b29c:	f000 f8a8 	bl	800b3f0 <_svfiprintf_r>
 800b2a0:	9b02      	ldr	r3, [sp, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	b01c      	add	sp, #112	; 0x70
 800b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2ac:	b003      	add	sp, #12
 800b2ae:	4770      	bx	lr
 800b2b0:	200007c8 	.word	0x200007c8
 800b2b4:	ffff0208 	.word	0xffff0208

0800b2b8 <strcpy>:
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2be:	f803 2b01 	strb.w	r2, [r3], #1
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	d1f9      	bne.n	800b2ba <strcpy+0x2>
 800b2c6:	4770      	bx	lr

0800b2c8 <_vsniprintf_r>:
 800b2c8:	b530      	push	{r4, r5, lr}
 800b2ca:	1e14      	subs	r4, r2, #0
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	b09b      	sub	sp, #108	; 0x6c
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	da05      	bge.n	800b2e0 <_vsniprintf_r+0x18>
 800b2d4:	238b      	movs	r3, #139	; 0x8b
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	b01b      	add	sp, #108	; 0x6c
 800b2de:	bd30      	pop	{r4, r5, pc}
 800b2e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2e8:	bf14      	ite	ne
 800b2ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2ee:	4623      	moveq	r3, r4
 800b2f0:	9302      	str	r3, [sp, #8]
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2f8:	9100      	str	r1, [sp, #0]
 800b2fa:	9104      	str	r1, [sp, #16]
 800b2fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b300:	4602      	mov	r2, r0
 800b302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b304:	4669      	mov	r1, sp
 800b306:	4628      	mov	r0, r5
 800b308:	f000 f872 	bl	800b3f0 <_svfiprintf_r>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	bfbc      	itt	lt
 800b310:	238b      	movlt	r3, #139	; 0x8b
 800b312:	602b      	strlt	r3, [r5, #0]
 800b314:	2c00      	cmp	r4, #0
 800b316:	d0e1      	beq.n	800b2dc <_vsniprintf_r+0x14>
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e7dd      	b.n	800b2dc <_vsniprintf_r+0x14>

0800b320 <vsniprintf>:
 800b320:	b507      	push	{r0, r1, r2, lr}
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4613      	mov	r3, r2
 800b326:	460a      	mov	r2, r1
 800b328:	4601      	mov	r1, r0
 800b32a:	4803      	ldr	r0, [pc, #12]	; (800b338 <vsniprintf+0x18>)
 800b32c:	6800      	ldr	r0, [r0, #0]
 800b32e:	f7ff ffcb 	bl	800b2c8 <_vsniprintf_r>
 800b332:	b003      	add	sp, #12
 800b334:	f85d fb04 	ldr.w	pc, [sp], #4
 800b338:	200007c8 	.word	0x200007c8

0800b33c <__ssputs_r>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	688e      	ldr	r6, [r1, #8]
 800b342:	429e      	cmp	r6, r3
 800b344:	4682      	mov	sl, r0
 800b346:	460c      	mov	r4, r1
 800b348:	4690      	mov	r8, r2
 800b34a:	4699      	mov	r9, r3
 800b34c:	d837      	bhi.n	800b3be <__ssputs_r+0x82>
 800b34e:	898a      	ldrh	r2, [r1, #12]
 800b350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b354:	d031      	beq.n	800b3ba <__ssputs_r+0x7e>
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	6909      	ldr	r1, [r1, #16]
 800b35a:	1a6f      	subs	r7, r5, r1
 800b35c:	6965      	ldr	r5, [r4, #20]
 800b35e:	2302      	movs	r3, #2
 800b360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b364:	fb95 f5f3 	sdiv	r5, r5, r3
 800b368:	f109 0301 	add.w	r3, r9, #1
 800b36c:	443b      	add	r3, r7
 800b36e:	429d      	cmp	r5, r3
 800b370:	bf38      	it	cc
 800b372:	461d      	movcc	r5, r3
 800b374:	0553      	lsls	r3, r2, #21
 800b376:	d530      	bpl.n	800b3da <__ssputs_r+0x9e>
 800b378:	4629      	mov	r1, r5
 800b37a:	f000 fb21 	bl	800b9c0 <_malloc_r>
 800b37e:	4606      	mov	r6, r0
 800b380:	b950      	cbnz	r0, 800b398 <__ssputs_r+0x5c>
 800b382:	230c      	movs	r3, #12
 800b384:	f8ca 3000 	str.w	r3, [sl]
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b398:	463a      	mov	r2, r7
 800b39a:	6921      	ldr	r1, [r4, #16]
 800b39c:	f7ff ff58 	bl	800b250 <memcpy>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	6126      	str	r6, [r4, #16]
 800b3ae:	6165      	str	r5, [r4, #20]
 800b3b0:	443e      	add	r6, r7
 800b3b2:	1bed      	subs	r5, r5, r7
 800b3b4:	6026      	str	r6, [r4, #0]
 800b3b6:	60a5      	str	r5, [r4, #8]
 800b3b8:	464e      	mov	r6, r9
 800b3ba:	454e      	cmp	r6, r9
 800b3bc:	d900      	bls.n	800b3c0 <__ssputs_r+0x84>
 800b3be:	464e      	mov	r6, r9
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	f000 fa93 	bl	800b8f0 <memmove>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	1b9b      	subs	r3, r3, r6
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	441e      	add	r6, r3
 800b3d4:	6026      	str	r6, [r4, #0]
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e7dc      	b.n	800b394 <__ssputs_r+0x58>
 800b3da:	462a      	mov	r2, r5
 800b3dc:	f000 fb4a 	bl	800ba74 <_realloc_r>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d1e2      	bne.n	800b3ac <__ssputs_r+0x70>
 800b3e6:	6921      	ldr	r1, [r4, #16]
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f000 fa9b 	bl	800b924 <_free_r>
 800b3ee:	e7c8      	b.n	800b382 <__ssputs_r+0x46>

0800b3f0 <_svfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	461d      	mov	r5, r3
 800b3f6:	898b      	ldrh	r3, [r1, #12]
 800b3f8:	061f      	lsls	r7, r3, #24
 800b3fa:	b09d      	sub	sp, #116	; 0x74
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	4616      	mov	r6, r2
 800b402:	d50f      	bpl.n	800b424 <_svfiprintf_r+0x34>
 800b404:	690b      	ldr	r3, [r1, #16]
 800b406:	b96b      	cbnz	r3, 800b424 <_svfiprintf_r+0x34>
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f000 fad9 	bl	800b9c0 <_malloc_r>
 800b40e:	6020      	str	r0, [r4, #0]
 800b410:	6120      	str	r0, [r4, #16]
 800b412:	b928      	cbnz	r0, 800b420 <_svfiprintf_r+0x30>
 800b414:	230c      	movs	r3, #12
 800b416:	f8c8 3000 	str.w	r3, [r8]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	e0c8      	b.n	800b5b2 <_svfiprintf_r+0x1c2>
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	6163      	str	r3, [r4, #20]
 800b424:	2300      	movs	r3, #0
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
 800b428:	2320      	movs	r3, #32
 800b42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b42e:	2330      	movs	r3, #48	; 0x30
 800b430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b434:	9503      	str	r5, [sp, #12]
 800b436:	f04f 0b01 	mov.w	fp, #1
 800b43a:	4637      	mov	r7, r6
 800b43c:	463d      	mov	r5, r7
 800b43e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b442:	b10b      	cbz	r3, 800b448 <_svfiprintf_r+0x58>
 800b444:	2b25      	cmp	r3, #37	; 0x25
 800b446:	d13e      	bne.n	800b4c6 <_svfiprintf_r+0xd6>
 800b448:	ebb7 0a06 	subs.w	sl, r7, r6
 800b44c:	d00b      	beq.n	800b466 <_svfiprintf_r+0x76>
 800b44e:	4653      	mov	r3, sl
 800b450:	4632      	mov	r2, r6
 800b452:	4621      	mov	r1, r4
 800b454:	4640      	mov	r0, r8
 800b456:	f7ff ff71 	bl	800b33c <__ssputs_r>
 800b45a:	3001      	adds	r0, #1
 800b45c:	f000 80a4 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b462:	4453      	add	r3, sl
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	783b      	ldrb	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 809d 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b46e:	2300      	movs	r3, #0
 800b470:	f04f 32ff 	mov.w	r2, #4294967295
 800b474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b480:	931a      	str	r3, [sp, #104]	; 0x68
 800b482:	462f      	mov	r7, r5
 800b484:	2205      	movs	r2, #5
 800b486:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b48a:	4850      	ldr	r0, [pc, #320]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b48c:	f7f4 fea0 	bl	80001d0 <memchr>
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	b9d0      	cbnz	r0, 800b4ca <_svfiprintf_r+0xda>
 800b494:	06d9      	lsls	r1, r3, #27
 800b496:	bf44      	itt	mi
 800b498:	2220      	movmi	r2, #32
 800b49a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b49e:	071a      	lsls	r2, r3, #28
 800b4a0:	bf44      	itt	mi
 800b4a2:	222b      	movmi	r2, #43	; 0x2b
 800b4a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4a8:	782a      	ldrb	r2, [r5, #0]
 800b4aa:	2a2a      	cmp	r2, #42	; 0x2a
 800b4ac:	d015      	beq.n	800b4da <_svfiprintf_r+0xea>
 800b4ae:	9a07      	ldr	r2, [sp, #28]
 800b4b0:	462f      	mov	r7, r5
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	250a      	movs	r5, #10
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d94d      	bls.n	800b55e <_svfiprintf_r+0x16e>
 800b4c2:	b1b8      	cbz	r0, 800b4f4 <_svfiprintf_r+0x104>
 800b4c4:	e00f      	b.n	800b4e6 <_svfiprintf_r+0xf6>
 800b4c6:	462f      	mov	r7, r5
 800b4c8:	e7b8      	b.n	800b43c <_svfiprintf_r+0x4c>
 800b4ca:	4a40      	ldr	r2, [pc, #256]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b4cc:	1a80      	subs	r0, r0, r2
 800b4ce:	fa0b f000 	lsl.w	r0, fp, r0
 800b4d2:	4318      	orrs	r0, r3
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	463d      	mov	r5, r7
 800b4d8:	e7d3      	b.n	800b482 <_svfiprintf_r+0x92>
 800b4da:	9a03      	ldr	r2, [sp, #12]
 800b4dc:	1d11      	adds	r1, r2, #4
 800b4de:	6812      	ldr	r2, [r2, #0]
 800b4e0:	9103      	str	r1, [sp, #12]
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	db01      	blt.n	800b4ea <_svfiprintf_r+0xfa>
 800b4e6:	9207      	str	r2, [sp, #28]
 800b4e8:	e004      	b.n	800b4f4 <_svfiprintf_r+0x104>
 800b4ea:	4252      	negs	r2, r2
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	783b      	ldrb	r3, [r7, #0]
 800b4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f8:	d10c      	bne.n	800b514 <_svfiprintf_r+0x124>
 800b4fa:	787b      	ldrb	r3, [r7, #1]
 800b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fe:	d133      	bne.n	800b568 <_svfiprintf_r+0x178>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	1d1a      	adds	r2, r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	9203      	str	r2, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfb8      	it	lt
 800b50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b510:	3702      	adds	r7, #2
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	4d2e      	ldr	r5, [pc, #184]	; (800b5d0 <_svfiprintf_r+0x1e0>)
 800b516:	7839      	ldrb	r1, [r7, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4628      	mov	r0, r5
 800b51c:	f7f4 fe58 	bl	80001d0 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_svfiprintf_r+0x142>
 800b522:	2340      	movs	r3, #64	; 0x40
 800b524:	1b40      	subs	r0, r0, r5
 800b526:	fa03 f000 	lsl.w	r0, r3, r0
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	4303      	orrs	r3, r0
 800b52e:	3701      	adds	r7, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	7839      	ldrb	r1, [r7, #0]
 800b534:	4827      	ldr	r0, [pc, #156]	; (800b5d4 <_svfiprintf_r+0x1e4>)
 800b536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53a:	2206      	movs	r2, #6
 800b53c:	1c7e      	adds	r6, r7, #1
 800b53e:	f7f4 fe47 	bl	80001d0 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d038      	beq.n	800b5b8 <_svfiprintf_r+0x1c8>
 800b546:	4b24      	ldr	r3, [pc, #144]	; (800b5d8 <_svfiprintf_r+0x1e8>)
 800b548:	bb13      	cbnz	r3, 800b590 <_svfiprintf_r+0x1a0>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	444b      	add	r3, r9
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e76d      	b.n	800b43a <_svfiprintf_r+0x4a>
 800b55e:	fb05 3202 	mla	r2, r5, r2, r3
 800b562:	2001      	movs	r0, #1
 800b564:	460f      	mov	r7, r1
 800b566:	e7a6      	b.n	800b4b6 <_svfiprintf_r+0xc6>
 800b568:	2300      	movs	r3, #0
 800b56a:	3701      	adds	r7, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	250a      	movs	r5, #10
 800b572:	4638      	mov	r0, r7
 800b574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b578:	3a30      	subs	r2, #48	; 0x30
 800b57a:	2a09      	cmp	r2, #9
 800b57c:	d903      	bls.n	800b586 <_svfiprintf_r+0x196>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0c8      	beq.n	800b514 <_svfiprintf_r+0x124>
 800b582:	9105      	str	r1, [sp, #20]
 800b584:	e7c6      	b.n	800b514 <_svfiprintf_r+0x124>
 800b586:	fb05 2101 	mla	r1, r5, r1, r2
 800b58a:	2301      	movs	r3, #1
 800b58c:	4607      	mov	r7, r0
 800b58e:	e7f0      	b.n	800b572 <_svfiprintf_r+0x182>
 800b590:	ab03      	add	r3, sp, #12
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4622      	mov	r2, r4
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b598:	a904      	add	r1, sp, #16
 800b59a:	4640      	mov	r0, r8
 800b59c:	f3af 8000 	nop.w
 800b5a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	d1d6      	bne.n	800b556 <_svfiprintf_r+0x166>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	065b      	lsls	r3, r3, #25
 800b5ac:	f53f af35 	bmi.w	800b41a <_svfiprintf_r+0x2a>
 800b5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b2:	b01d      	add	sp, #116	; 0x74
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b5c0:	a904      	add	r1, sp, #16
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f000 f882 	bl	800b6cc <_printf_i>
 800b5c8:	e7ea      	b.n	800b5a0 <_svfiprintf_r+0x1b0>
 800b5ca:	bf00      	nop
 800b5cc:	0800c059 	.word	0x0800c059
 800b5d0:	0800c05f 	.word	0x0800c05f
 800b5d4:	0800c063 	.word	0x0800c063
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	0800b33d 	.word	0x0800b33d

0800b5e0 <_printf_common>:
 800b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e4:	4691      	mov	r9, r2
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	688a      	ldr	r2, [r1, #8]
 800b5ea:	690b      	ldr	r3, [r1, #16]
 800b5ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	bfb8      	it	lt
 800b5f4:	4613      	movlt	r3, r2
 800b5f6:	f8c9 3000 	str.w	r3, [r9]
 800b5fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5fe:	4606      	mov	r6, r0
 800b600:	460c      	mov	r4, r1
 800b602:	b112      	cbz	r2, 800b60a <_printf_common+0x2a>
 800b604:	3301      	adds	r3, #1
 800b606:	f8c9 3000 	str.w	r3, [r9]
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	0699      	lsls	r1, r3, #26
 800b60e:	bf42      	ittt	mi
 800b610:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b614:	3302      	addmi	r3, #2
 800b616:	f8c9 3000 	strmi.w	r3, [r9]
 800b61a:	6825      	ldr	r5, [r4, #0]
 800b61c:	f015 0506 	ands.w	r5, r5, #6
 800b620:	d107      	bne.n	800b632 <_printf_common+0x52>
 800b622:	f104 0a19 	add.w	sl, r4, #25
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	f8d9 2000 	ldr.w	r2, [r9]
 800b62c:	1a9b      	subs	r3, r3, r2
 800b62e:	42ab      	cmp	r3, r5
 800b630:	dc28      	bgt.n	800b684 <_printf_common+0xa4>
 800b632:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b636:	6822      	ldr	r2, [r4, #0]
 800b638:	3300      	adds	r3, #0
 800b63a:	bf18      	it	ne
 800b63c:	2301      	movne	r3, #1
 800b63e:	0692      	lsls	r2, r2, #26
 800b640:	d42d      	bmi.n	800b69e <_printf_common+0xbe>
 800b642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b646:	4639      	mov	r1, r7
 800b648:	4630      	mov	r0, r6
 800b64a:	47c0      	blx	r8
 800b64c:	3001      	adds	r0, #1
 800b64e:	d020      	beq.n	800b692 <_printf_common+0xb2>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	68e5      	ldr	r5, [r4, #12]
 800b654:	f8d9 2000 	ldr.w	r2, [r9]
 800b658:	f003 0306 	and.w	r3, r3, #6
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	bf08      	it	eq
 800b660:	1aad      	subeq	r5, r5, r2
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	bf0c      	ite	eq
 800b668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b66c:	2500      	movne	r5, #0
 800b66e:	4293      	cmp	r3, r2
 800b670:	bfc4      	itt	gt
 800b672:	1a9b      	subgt	r3, r3, r2
 800b674:	18ed      	addgt	r5, r5, r3
 800b676:	f04f 0900 	mov.w	r9, #0
 800b67a:	341a      	adds	r4, #26
 800b67c:	454d      	cmp	r5, r9
 800b67e:	d11a      	bne.n	800b6b6 <_printf_common+0xd6>
 800b680:	2000      	movs	r0, #0
 800b682:	e008      	b.n	800b696 <_printf_common+0xb6>
 800b684:	2301      	movs	r3, #1
 800b686:	4652      	mov	r2, sl
 800b688:	4639      	mov	r1, r7
 800b68a:	4630      	mov	r0, r6
 800b68c:	47c0      	blx	r8
 800b68e:	3001      	adds	r0, #1
 800b690:	d103      	bne.n	800b69a <_printf_common+0xba>
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69a:	3501      	adds	r5, #1
 800b69c:	e7c3      	b.n	800b626 <_printf_common+0x46>
 800b69e:	18e1      	adds	r1, r4, r3
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	2030      	movs	r0, #48	; 0x30
 800b6a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6a8:	4422      	add	r2, r4
 800b6aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	e7c5      	b.n	800b642 <_printf_common+0x62>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	4630      	mov	r0, r6
 800b6be:	47c0      	blx	r8
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d0e6      	beq.n	800b692 <_printf_common+0xb2>
 800b6c4:	f109 0901 	add.w	r9, r9, #1
 800b6c8:	e7d8      	b.n	800b67c <_printf_common+0x9c>
	...

0800b6cc <_printf_i>:
 800b6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	7e09      	ldrb	r1, [r1, #24]
 800b6d8:	b085      	sub	sp, #20
 800b6da:	296e      	cmp	r1, #110	; 0x6e
 800b6dc:	4617      	mov	r7, r2
 800b6de:	4606      	mov	r6, r0
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6e4:	f000 80b3 	beq.w	800b84e <_printf_i+0x182>
 800b6e8:	d822      	bhi.n	800b730 <_printf_i+0x64>
 800b6ea:	2963      	cmp	r1, #99	; 0x63
 800b6ec:	d036      	beq.n	800b75c <_printf_i+0x90>
 800b6ee:	d80a      	bhi.n	800b706 <_printf_i+0x3a>
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	f000 80b9 	beq.w	800b868 <_printf_i+0x19c>
 800b6f6:	2958      	cmp	r1, #88	; 0x58
 800b6f8:	f000 8083 	beq.w	800b802 <_printf_i+0x136>
 800b6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b700:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b704:	e032      	b.n	800b76c <_printf_i+0xa0>
 800b706:	2964      	cmp	r1, #100	; 0x64
 800b708:	d001      	beq.n	800b70e <_printf_i+0x42>
 800b70a:	2969      	cmp	r1, #105	; 0x69
 800b70c:	d1f6      	bne.n	800b6fc <_printf_i+0x30>
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	6813      	ldr	r3, [r2, #0]
 800b712:	0605      	lsls	r5, r0, #24
 800b714:	f103 0104 	add.w	r1, r3, #4
 800b718:	d52a      	bpl.n	800b770 <_printf_i+0xa4>
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6011      	str	r1, [r2, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da03      	bge.n	800b72a <_printf_i+0x5e>
 800b722:	222d      	movs	r2, #45	; 0x2d
 800b724:	425b      	negs	r3, r3
 800b726:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b72a:	486f      	ldr	r0, [pc, #444]	; (800b8e8 <_printf_i+0x21c>)
 800b72c:	220a      	movs	r2, #10
 800b72e:	e039      	b.n	800b7a4 <_printf_i+0xd8>
 800b730:	2973      	cmp	r1, #115	; 0x73
 800b732:	f000 809d 	beq.w	800b870 <_printf_i+0x1a4>
 800b736:	d808      	bhi.n	800b74a <_printf_i+0x7e>
 800b738:	296f      	cmp	r1, #111	; 0x6f
 800b73a:	d020      	beq.n	800b77e <_printf_i+0xb2>
 800b73c:	2970      	cmp	r1, #112	; 0x70
 800b73e:	d1dd      	bne.n	800b6fc <_printf_i+0x30>
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	f043 0320 	orr.w	r3, r3, #32
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	e003      	b.n	800b752 <_printf_i+0x86>
 800b74a:	2975      	cmp	r1, #117	; 0x75
 800b74c:	d017      	beq.n	800b77e <_printf_i+0xb2>
 800b74e:	2978      	cmp	r1, #120	; 0x78
 800b750:	d1d4      	bne.n	800b6fc <_printf_i+0x30>
 800b752:	2378      	movs	r3, #120	; 0x78
 800b754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b758:	4864      	ldr	r0, [pc, #400]	; (800b8ec <_printf_i+0x220>)
 800b75a:	e055      	b.n	800b808 <_printf_i+0x13c>
 800b75c:	6813      	ldr	r3, [r2, #0]
 800b75e:	1d19      	adds	r1, r3, #4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6011      	str	r1, [r2, #0]
 800b764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b76c:	2301      	movs	r3, #1
 800b76e:	e08c      	b.n	800b88a <_printf_i+0x1be>
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6011      	str	r1, [r2, #0]
 800b774:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b778:	bf18      	it	ne
 800b77a:	b21b      	sxthne	r3, r3
 800b77c:	e7cf      	b.n	800b71e <_printf_i+0x52>
 800b77e:	6813      	ldr	r3, [r2, #0]
 800b780:	6825      	ldr	r5, [r4, #0]
 800b782:	1d18      	adds	r0, r3, #4
 800b784:	6010      	str	r0, [r2, #0]
 800b786:	0628      	lsls	r0, r5, #24
 800b788:	d501      	bpl.n	800b78e <_printf_i+0xc2>
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	e002      	b.n	800b794 <_printf_i+0xc8>
 800b78e:	0668      	lsls	r0, r5, #25
 800b790:	d5fb      	bpl.n	800b78a <_printf_i+0xbe>
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	4854      	ldr	r0, [pc, #336]	; (800b8e8 <_printf_i+0x21c>)
 800b796:	296f      	cmp	r1, #111	; 0x6f
 800b798:	bf14      	ite	ne
 800b79a:	220a      	movne	r2, #10
 800b79c:	2208      	moveq	r2, #8
 800b79e:	2100      	movs	r1, #0
 800b7a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7a4:	6865      	ldr	r5, [r4, #4]
 800b7a6:	60a5      	str	r5, [r4, #8]
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	f2c0 8095 	blt.w	800b8d8 <_printf_i+0x20c>
 800b7ae:	6821      	ldr	r1, [r4, #0]
 800b7b0:	f021 0104 	bic.w	r1, r1, #4
 800b7b4:	6021      	str	r1, [r4, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d13d      	bne.n	800b836 <_printf_i+0x16a>
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	f040 808e 	bne.w	800b8dc <_printf_i+0x210>
 800b7c0:	4665      	mov	r5, ip
 800b7c2:	2a08      	cmp	r2, #8
 800b7c4:	d10b      	bne.n	800b7de <_printf_i+0x112>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	07db      	lsls	r3, r3, #31
 800b7ca:	d508      	bpl.n	800b7de <_printf_i+0x112>
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	6862      	ldr	r2, [r4, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	bfde      	ittt	le
 800b7d4:	2330      	movle	r3, #48	; 0x30
 800b7d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7de:	ebac 0305 	sub.w	r3, ip, r5
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	f8cd 8000 	str.w	r8, [sp]
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	aa03      	add	r2, sp, #12
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7ff fef6 	bl	800b5e0 <_printf_common>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d14d      	bne.n	800b894 <_printf_i+0x1c8>
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	b005      	add	sp, #20
 800b7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b802:	4839      	ldr	r0, [pc, #228]	; (800b8e8 <_printf_i+0x21c>)
 800b804:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b808:	6813      	ldr	r3, [r2, #0]
 800b80a:	6821      	ldr	r1, [r4, #0]
 800b80c:	1d1d      	adds	r5, r3, #4
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6015      	str	r5, [r2, #0]
 800b812:	060a      	lsls	r2, r1, #24
 800b814:	d50b      	bpl.n	800b82e <_printf_i+0x162>
 800b816:	07ca      	lsls	r2, r1, #31
 800b818:	bf44      	itt	mi
 800b81a:	f041 0120 	orrmi.w	r1, r1, #32
 800b81e:	6021      	strmi	r1, [r4, #0]
 800b820:	b91b      	cbnz	r3, 800b82a <_printf_i+0x15e>
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	f022 0220 	bic.w	r2, r2, #32
 800b828:	6022      	str	r2, [r4, #0]
 800b82a:	2210      	movs	r2, #16
 800b82c:	e7b7      	b.n	800b79e <_printf_i+0xd2>
 800b82e:	064d      	lsls	r5, r1, #25
 800b830:	bf48      	it	mi
 800b832:	b29b      	uxthmi	r3, r3
 800b834:	e7ef      	b.n	800b816 <_printf_i+0x14a>
 800b836:	4665      	mov	r5, ip
 800b838:	fbb3 f1f2 	udiv	r1, r3, r2
 800b83c:	fb02 3311 	mls	r3, r2, r1, r3
 800b840:	5cc3      	ldrb	r3, [r0, r3]
 800b842:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b846:	460b      	mov	r3, r1
 800b848:	2900      	cmp	r1, #0
 800b84a:	d1f5      	bne.n	800b838 <_printf_i+0x16c>
 800b84c:	e7b9      	b.n	800b7c2 <_printf_i+0xf6>
 800b84e:	6813      	ldr	r3, [r2, #0]
 800b850:	6825      	ldr	r5, [r4, #0]
 800b852:	6961      	ldr	r1, [r4, #20]
 800b854:	1d18      	adds	r0, r3, #4
 800b856:	6010      	str	r0, [r2, #0]
 800b858:	0628      	lsls	r0, r5, #24
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	d501      	bpl.n	800b862 <_printf_i+0x196>
 800b85e:	6019      	str	r1, [r3, #0]
 800b860:	e002      	b.n	800b868 <_printf_i+0x19c>
 800b862:	066a      	lsls	r2, r5, #25
 800b864:	d5fb      	bpl.n	800b85e <_printf_i+0x192>
 800b866:	8019      	strh	r1, [r3, #0]
 800b868:	2300      	movs	r3, #0
 800b86a:	6123      	str	r3, [r4, #16]
 800b86c:	4665      	mov	r5, ip
 800b86e:	e7b9      	b.n	800b7e4 <_printf_i+0x118>
 800b870:	6813      	ldr	r3, [r2, #0]
 800b872:	1d19      	adds	r1, r3, #4
 800b874:	6011      	str	r1, [r2, #0]
 800b876:	681d      	ldr	r5, [r3, #0]
 800b878:	6862      	ldr	r2, [r4, #4]
 800b87a:	2100      	movs	r1, #0
 800b87c:	4628      	mov	r0, r5
 800b87e:	f7f4 fca7 	bl	80001d0 <memchr>
 800b882:	b108      	cbz	r0, 800b888 <_printf_i+0x1bc>
 800b884:	1b40      	subs	r0, r0, r5
 800b886:	6060      	str	r0, [r4, #4]
 800b888:	6863      	ldr	r3, [r4, #4]
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	2300      	movs	r3, #0
 800b88e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b892:	e7a7      	b.n	800b7e4 <_printf_i+0x118>
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	462a      	mov	r2, r5
 800b898:	4639      	mov	r1, r7
 800b89a:	4630      	mov	r0, r6
 800b89c:	47c0      	blx	r8
 800b89e:	3001      	adds	r0, #1
 800b8a0:	d0aa      	beq.n	800b7f8 <_printf_i+0x12c>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	079b      	lsls	r3, r3, #30
 800b8a6:	d413      	bmi.n	800b8d0 <_printf_i+0x204>
 800b8a8:	68e0      	ldr	r0, [r4, #12]
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	4298      	cmp	r0, r3
 800b8ae:	bfb8      	it	lt
 800b8b0:	4618      	movlt	r0, r3
 800b8b2:	e7a3      	b.n	800b7fc <_printf_i+0x130>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	464a      	mov	r2, r9
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	47c0      	blx	r8
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d09a      	beq.n	800b7f8 <_printf_i+0x12c>
 800b8c2:	3501      	adds	r5, #1
 800b8c4:	68e3      	ldr	r3, [r4, #12]
 800b8c6:	9a03      	ldr	r2, [sp, #12]
 800b8c8:	1a9b      	subs	r3, r3, r2
 800b8ca:	42ab      	cmp	r3, r5
 800b8cc:	dcf2      	bgt.n	800b8b4 <_printf_i+0x1e8>
 800b8ce:	e7eb      	b.n	800b8a8 <_printf_i+0x1dc>
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	f104 0919 	add.w	r9, r4, #25
 800b8d6:	e7f5      	b.n	800b8c4 <_printf_i+0x1f8>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1ac      	bne.n	800b836 <_printf_i+0x16a>
 800b8dc:	7803      	ldrb	r3, [r0, #0]
 800b8de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8e6:	e76c      	b.n	800b7c2 <_printf_i+0xf6>
 800b8e8:	0800c06a 	.word	0x0800c06a
 800b8ec:	0800c07b 	.word	0x0800c07b

0800b8f0 <memmove>:
 800b8f0:	4288      	cmp	r0, r1
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	eb01 0302 	add.w	r3, r1, r2
 800b8f8:	d807      	bhi.n	800b90a <memmove+0x1a>
 800b8fa:	1e42      	subs	r2, r0, #1
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d00a      	beq.n	800b916 <memmove+0x26>
 800b900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b904:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b908:	e7f8      	b.n	800b8fc <memmove+0xc>
 800b90a:	4283      	cmp	r3, r0
 800b90c:	d9f5      	bls.n	800b8fa <memmove+0xa>
 800b90e:	1881      	adds	r1, r0, r2
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	42d3      	cmn	r3, r2
 800b914:	d100      	bne.n	800b918 <memmove+0x28>
 800b916:	bd10      	pop	{r4, pc}
 800b918:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b91c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b920:	e7f7      	b.n	800b912 <memmove+0x22>
	...

0800b924 <_free_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4605      	mov	r5, r0
 800b928:	2900      	cmp	r1, #0
 800b92a:	d045      	beq.n	800b9b8 <_free_r+0x94>
 800b92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b930:	1f0c      	subs	r4, r1, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfb8      	it	lt
 800b936:	18e4      	addlt	r4, r4, r3
 800b938:	f000 f8d2 	bl	800bae0 <__malloc_lock>
 800b93c:	4a1f      	ldr	r2, [pc, #124]	; (800b9bc <_free_r+0x98>)
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	4610      	mov	r0, r2
 800b942:	b933      	cbnz	r3, 800b952 <_free_r+0x2e>
 800b944:	6063      	str	r3, [r4, #4]
 800b946:	6014      	str	r4, [r2, #0]
 800b948:	4628      	mov	r0, r5
 800b94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b94e:	f000 b8c8 	b.w	800bae2 <__malloc_unlock>
 800b952:	42a3      	cmp	r3, r4
 800b954:	d90c      	bls.n	800b970 <_free_r+0x4c>
 800b956:	6821      	ldr	r1, [r4, #0]
 800b958:	1862      	adds	r2, r4, r1
 800b95a:	4293      	cmp	r3, r2
 800b95c:	bf04      	itt	eq
 800b95e:	681a      	ldreq	r2, [r3, #0]
 800b960:	685b      	ldreq	r3, [r3, #4]
 800b962:	6063      	str	r3, [r4, #4]
 800b964:	bf04      	itt	eq
 800b966:	1852      	addeq	r2, r2, r1
 800b968:	6022      	streq	r2, [r4, #0]
 800b96a:	6004      	str	r4, [r0, #0]
 800b96c:	e7ec      	b.n	800b948 <_free_r+0x24>
 800b96e:	4613      	mov	r3, r2
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	b10a      	cbz	r2, 800b978 <_free_r+0x54>
 800b974:	42a2      	cmp	r2, r4
 800b976:	d9fa      	bls.n	800b96e <_free_r+0x4a>
 800b978:	6819      	ldr	r1, [r3, #0]
 800b97a:	1858      	adds	r0, r3, r1
 800b97c:	42a0      	cmp	r0, r4
 800b97e:	d10b      	bne.n	800b998 <_free_r+0x74>
 800b980:	6820      	ldr	r0, [r4, #0]
 800b982:	4401      	add	r1, r0
 800b984:	1858      	adds	r0, r3, r1
 800b986:	4282      	cmp	r2, r0
 800b988:	6019      	str	r1, [r3, #0]
 800b98a:	d1dd      	bne.n	800b948 <_free_r+0x24>
 800b98c:	6810      	ldr	r0, [r2, #0]
 800b98e:	6852      	ldr	r2, [r2, #4]
 800b990:	605a      	str	r2, [r3, #4]
 800b992:	4401      	add	r1, r0
 800b994:	6019      	str	r1, [r3, #0]
 800b996:	e7d7      	b.n	800b948 <_free_r+0x24>
 800b998:	d902      	bls.n	800b9a0 <_free_r+0x7c>
 800b99a:	230c      	movs	r3, #12
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	e7d3      	b.n	800b948 <_free_r+0x24>
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	1821      	adds	r1, r4, r0
 800b9a4:	428a      	cmp	r2, r1
 800b9a6:	bf04      	itt	eq
 800b9a8:	6811      	ldreq	r1, [r2, #0]
 800b9aa:	6852      	ldreq	r2, [r2, #4]
 800b9ac:	6062      	str	r2, [r4, #4]
 800b9ae:	bf04      	itt	eq
 800b9b0:	1809      	addeq	r1, r1, r0
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	605c      	str	r4, [r3, #4]
 800b9b6:	e7c7      	b.n	800b948 <_free_r+0x24>
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000095c 	.word	0x2000095c

0800b9c0 <_malloc_r>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	1ccd      	adds	r5, r1, #3
 800b9c4:	f025 0503 	bic.w	r5, r5, #3
 800b9c8:	3508      	adds	r5, #8
 800b9ca:	2d0c      	cmp	r5, #12
 800b9cc:	bf38      	it	cc
 800b9ce:	250c      	movcc	r5, #12
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	db01      	blt.n	800b9da <_malloc_r+0x1a>
 800b9d6:	42a9      	cmp	r1, r5
 800b9d8:	d903      	bls.n	800b9e2 <_malloc_r+0x22>
 800b9da:	230c      	movs	r3, #12
 800b9dc:	6033      	str	r3, [r6, #0]
 800b9de:	2000      	movs	r0, #0
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	f000 f87d 	bl	800bae0 <__malloc_lock>
 800b9e6:	4a21      	ldr	r2, [pc, #132]	; (800ba6c <_malloc_r+0xac>)
 800b9e8:	6814      	ldr	r4, [r2, #0]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	b991      	cbnz	r1, 800ba14 <_malloc_r+0x54>
 800b9ee:	4c20      	ldr	r4, [pc, #128]	; (800ba70 <_malloc_r+0xb0>)
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	b91b      	cbnz	r3, 800b9fc <_malloc_r+0x3c>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 f863 	bl	800bac0 <_sbrk_r>
 800b9fa:	6020      	str	r0, [r4, #0]
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f000 f85e 	bl	800bac0 <_sbrk_r>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d124      	bne.n	800ba52 <_malloc_r+0x92>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	6033      	str	r3, [r6, #0]
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f000 f868 	bl	800bae2 <__malloc_unlock>
 800ba12:	e7e4      	b.n	800b9de <_malloc_r+0x1e>
 800ba14:	680b      	ldr	r3, [r1, #0]
 800ba16:	1b5b      	subs	r3, r3, r5
 800ba18:	d418      	bmi.n	800ba4c <_malloc_r+0x8c>
 800ba1a:	2b0b      	cmp	r3, #11
 800ba1c:	d90f      	bls.n	800ba3e <_malloc_r+0x7e>
 800ba1e:	600b      	str	r3, [r1, #0]
 800ba20:	50cd      	str	r5, [r1, r3]
 800ba22:	18cc      	adds	r4, r1, r3
 800ba24:	4630      	mov	r0, r6
 800ba26:	f000 f85c 	bl	800bae2 <__malloc_unlock>
 800ba2a:	f104 000b 	add.w	r0, r4, #11
 800ba2e:	1d23      	adds	r3, r4, #4
 800ba30:	f020 0007 	bic.w	r0, r0, #7
 800ba34:	1ac3      	subs	r3, r0, r3
 800ba36:	d0d3      	beq.n	800b9e0 <_malloc_r+0x20>
 800ba38:	425a      	negs	r2, r3
 800ba3a:	50e2      	str	r2, [r4, r3]
 800ba3c:	e7d0      	b.n	800b9e0 <_malloc_r+0x20>
 800ba3e:	428c      	cmp	r4, r1
 800ba40:	684b      	ldr	r3, [r1, #4]
 800ba42:	bf16      	itet	ne
 800ba44:	6063      	strne	r3, [r4, #4]
 800ba46:	6013      	streq	r3, [r2, #0]
 800ba48:	460c      	movne	r4, r1
 800ba4a:	e7eb      	b.n	800ba24 <_malloc_r+0x64>
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	6849      	ldr	r1, [r1, #4]
 800ba50:	e7cc      	b.n	800b9ec <_malloc_r+0x2c>
 800ba52:	1cc4      	adds	r4, r0, #3
 800ba54:	f024 0403 	bic.w	r4, r4, #3
 800ba58:	42a0      	cmp	r0, r4
 800ba5a:	d005      	beq.n	800ba68 <_malloc_r+0xa8>
 800ba5c:	1a21      	subs	r1, r4, r0
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f000 f82e 	bl	800bac0 <_sbrk_r>
 800ba64:	3001      	adds	r0, #1
 800ba66:	d0cf      	beq.n	800ba08 <_malloc_r+0x48>
 800ba68:	6025      	str	r5, [r4, #0]
 800ba6a:	e7db      	b.n	800ba24 <_malloc_r+0x64>
 800ba6c:	2000095c 	.word	0x2000095c
 800ba70:	20000960 	.word	0x20000960

0800ba74 <_realloc_r>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	4607      	mov	r7, r0
 800ba78:	4614      	mov	r4, r2
 800ba7a:	460e      	mov	r6, r1
 800ba7c:	b921      	cbnz	r1, 800ba88 <_realloc_r+0x14>
 800ba7e:	4611      	mov	r1, r2
 800ba80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba84:	f7ff bf9c 	b.w	800b9c0 <_malloc_r>
 800ba88:	b922      	cbnz	r2, 800ba94 <_realloc_r+0x20>
 800ba8a:	f7ff ff4b 	bl	800b924 <_free_r>
 800ba8e:	4625      	mov	r5, r4
 800ba90:	4628      	mov	r0, r5
 800ba92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba94:	f000 f826 	bl	800bae4 <_malloc_usable_size_r>
 800ba98:	42a0      	cmp	r0, r4
 800ba9a:	d20f      	bcs.n	800babc <_realloc_r+0x48>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7ff ff8e 	bl	800b9c0 <_malloc_r>
 800baa4:	4605      	mov	r5, r0
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d0f2      	beq.n	800ba90 <_realloc_r+0x1c>
 800baaa:	4631      	mov	r1, r6
 800baac:	4622      	mov	r2, r4
 800baae:	f7ff fbcf 	bl	800b250 <memcpy>
 800bab2:	4631      	mov	r1, r6
 800bab4:	4638      	mov	r0, r7
 800bab6:	f7ff ff35 	bl	800b924 <_free_r>
 800baba:	e7e9      	b.n	800ba90 <_realloc_r+0x1c>
 800babc:	4635      	mov	r5, r6
 800babe:	e7e7      	b.n	800ba90 <_realloc_r+0x1c>

0800bac0 <_sbrk_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4c06      	ldr	r4, [pc, #24]	; (800badc <_sbrk_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4605      	mov	r5, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	f000 f812 	bl	800baf4 <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_sbrk_r+0x1a>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	b103      	cbz	r3, 800bada <_sbrk_r+0x1a>
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20000b0c 	.word	0x20000b0c

0800bae0 <__malloc_lock>:
 800bae0:	4770      	bx	lr

0800bae2 <__malloc_unlock>:
 800bae2:	4770      	bx	lr

0800bae4 <_malloc_usable_size_r>:
 800bae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae8:	1f18      	subs	r0, r3, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfbc      	itt	lt
 800baee:	580b      	ldrlt	r3, [r1, r0]
 800baf0:	18c0      	addlt	r0, r0, r3
 800baf2:	4770      	bx	lr

0800baf4 <_sbrk>:
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <_sbrk+0x14>)
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	4602      	mov	r2, r0
 800bafa:	b909      	cbnz	r1, 800bb00 <_sbrk+0xc>
 800bafc:	4903      	ldr	r1, [pc, #12]	; (800bb0c <_sbrk+0x18>)
 800bafe:	6019      	str	r1, [r3, #0]
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	4402      	add	r2, r0
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	4770      	bx	lr
 800bb08:	20000964 	.word	0x20000964
 800bb0c:	20000b10 	.word	0x20000b10

0800bb10 <_init>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr

0800bb1c <_fini>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr
