
MM_Squick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d760  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab8  0800dab8  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dac0  0800dac0  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dac0  0800dac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dac4  0800dac4  0001dac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800dac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  2000032c  0800ddf4  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800ddf4  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c86  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000370d  00000000  00000000  00040fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001998  00000000  00000000  000446f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00046088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2ea  00000000  00000000  000478a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c28  00000000  00000000  00062b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e7b4  00000000  00000000  000767b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007484  00000000  00000000  00114fe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000032c 	.word	0x2000032c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8e8 	.word	0x0800d8e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000330 	.word	0x20000330
 80001dc:	0800d8e8 	.word	0x0800d8e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <VL_Init_All>:
vl_struct VLS;
VL53L0X_DEV vldev;
uint8_t VL_Data_Updated[3] = {0,0,0};
uint8_t VL_Data_Ready[3] = {0,0,0};

uint8_t VL_Init_All(I2C_HandleTypeDef * hi2c){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

	//HAL_Delay(1000);

	for(j=0; j<VL_DEV_NUMBER; j++)  // 3
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e064      	b.n	800065c <VL_Init_All+0xdc>
	{
		VL_List[j].Device = &devs[j];
 8000592:	7bfa      	ldrb	r2, [r7, #15]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800059a:	fb01 f202 	mul.w	r2, r1, r2
 800059e:	4938      	ldr	r1, [pc, #224]	; (8000680 <VL_Init_All+0x100>)
 80005a0:	440a      	add	r2, r1
 80005a2:	4938      	ldr	r1, [pc, #224]	; (8000684 <VL_Init_All+0x104>)
 80005a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		VL_List[j].Device->I2cDevAddr = VL_DEFAULT_ADDRESS;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	4a36      	ldr	r2, [pc, #216]	; (8000684 <VL_Init_All+0x104>)
 80005ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005b0:	2252      	movs	r2, #82	; 0x52
 80005b2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		VL_List[j].Device->i2c_handle = hi2c;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	4a32      	ldr	r2, [pc, #200]	; (8000684 <VL_Init_All+0x104>)
 80005ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		VL_List[j].ID = j;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <VL_Init_All+0x104>)
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	711a      	strb	r2, [r3, #4]

		VLS.MEMORY[j] = -1;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <VL_Init_All+0x108>)
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005dc:	80da      	strh	r2, [r3, #6]
		VLS.STATE[j] = -1;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <VL_Init_All+0x108>)
 80005e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		VL_Enable(j);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f84f 	bl	8000690 <VL_Enable>
		VL_init_sensor_setAddres(VL_List[j].Device, (VL_DEFAULT_ADDRESS + j*2 + 2));
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4a23      	ldr	r2, [pc, #140]	; (8000684 <VL_Init_All+0x104>)
 80005f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	332a      	adds	r3, #42	; 0x2a
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f007 fa5b 	bl	8007ac2 <VL_init_sensor_setAddres>
		HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f007 fc49 	bl	8007ea4 <HAL_Delay>
		VL_init_parameters(VL_List[j].Device, LONG_RANGE, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <VL_Init_All+0x104>)
 8000616:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800061a:	2201      	movs	r2, #1
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f007 faa2 	bl	8007b68 <VL_init_parameters>
		HAL_Delay(50);
 8000624:	2032      	movs	r0, #50	; 0x32
 8000626:	f007 fc3d 	bl	8007ea4 <HAL_Delay>
		VL_set_interrupt(VL_List[j].Device, 1, VL53L0X_INTERRUPTPOLARITY_LOW);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <VL_Init_All+0x104>)
 800062e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fa72 	bl	8007b20 <VL_set_interrupt>
		HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f007 fc31 	bl	8007ea4 <HAL_Delay>
		VL_start_measurement_non_blocking(VL_List[j].Device);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <VL_Init_All+0x104>)
 8000646:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fb80 	bl	8007d50 <VL_start_measurement_non_blocking>
		HAL_Delay(50);
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f007 fc27 	bl	8007ea4 <HAL_Delay>
	for(j=0; j<VL_DEV_NUMBER; j++)  // 3
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d997      	bls.n	8000592 <VL_Init_All+0x12>
	}

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <VL_Init_All+0x10c>)
 800066a:	f008 fe47 	bl	80092fc <HAL_GPIO_WritePin>
	VL_Enable(42);
 800066e:	202a      	movs	r0, #42	; 0x2a
 8000670:	f000 f80e 	bl	8000690 <VL_Enable>
	return 1;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003a0 	.word	0x200003a0
 8000684:	20000374 	.word	0x20000374
 8000688:	2000038c 	.word	0x2000038c
 800068c:	40020400 	.word	0x40020400

08000690 <VL_Enable>:



void VL_Enable(uint8_t VL_Index){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    switch(VL_Index){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d01b      	beq.n	80006d8 <VL_Enable+0x48>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	dc02      	bgt.n	80006aa <VL_Enable+0x1a>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <VL_Enable+0x24>
 80006a8:	e04c      	b.n	8000744 <VL_Enable+0xb4>
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d026      	beq.n	80006fc <VL_Enable+0x6c>
 80006ae:	2b2a      	cmp	r3, #42	; 0x2a
 80006b0:	d036      	beq.n	8000720 <VL_Enable+0x90>
 80006b2:	e047      	b.n	8000744 <VL_Enable+0xb4>
		case 0:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	4826      	ldr	r0, [pc, #152]	; (8000754 <VL_Enable+0xc4>)
 80006bc:	f008 fe1e 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4823      	ldr	r0, [pc, #140]	; (8000754 <VL_Enable+0xc4>)
 80006c8:	f008 fe18 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4820      	ldr	r0, [pc, #128]	; (8000754 <VL_Enable+0xc4>)
 80006d2:	f008 fe13 	bl	80092fc <HAL_GPIO_WritePin>
				break;
 80006d6:	e035      	b.n	8000744 <VL_Enable+0xb4>
		case 1:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	481d      	ldr	r0, [pc, #116]	; (8000754 <VL_Enable+0xc4>)
 80006e0:	f008 fe0c 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	481a      	ldr	r0, [pc, #104]	; (8000754 <VL_Enable+0xc4>)
 80006ec:	f008 fe06 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4817      	ldr	r0, [pc, #92]	; (8000754 <VL_Enable+0xc4>)
 80006f6:	f008 fe01 	bl	80092fc <HAL_GPIO_WritePin>
		    	break;
 80006fa:	e023      	b.n	8000744 <VL_Enable+0xb4>
		case 2:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <VL_Enable+0xc4>)
 8000704:	f008 fdfa 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <VL_Enable+0xc4>)
 8000710:	f008 fdf4 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480e      	ldr	r0, [pc, #56]	; (8000754 <VL_Enable+0xc4>)
 800071a:	f008 fdef 	bl	80092fc <HAL_GPIO_WritePin>
		    	break;
 800071e:	e011      	b.n	8000744 <VL_Enable+0xb4>
		case 42:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <VL_Enable+0xc4>)
 8000728:	f008 fde8 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <VL_Enable+0xc4>)
 8000734:	f008 fde2 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2108      	movs	r1, #8
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <VL_Enable+0xc4>)
 800073e:	f008 fddd 	bl	80092fc <HAL_GPIO_WritePin>
			break;
 8000742:	bf00      	nop
    }
    HAL_Delay(3);
 8000744:	2003      	movs	r0, #3
 8000746:	f007 fbad 	bl	8007ea4 <HAL_Delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020800 	.word	0x40020800

08000758 <_write>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, uint8_t *ptr, int len){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 100);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	b29a      	uxth	r2, r3
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <_write+0x24>)
 800076e:	f00b fa56 	bl	800bc1e <HAL_UART_Transmit>
	return  len;
 8000772:	687b      	ldr	r3, [r7, #4]
};
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200009a8 	.word	0x200009a8

08000780 <read_encoders>:
	};
	return zmienna;
}


void read_encoders(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	printf("LEFT  :  POS[mm] : %d     VEL[mm/s] : %d  \r\n", ENC_L.absolute_pos/10, ENC_L.curr_speed/10);
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <read_encoders+0x58>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <read_encoders+0x5c>)
 800078a:	fb82 1203 	smull	r1, r2, r2, r3
 800078e:	1092      	asrs	r2, r2, #2
 8000790:	17db      	asrs	r3, r3, #31
 8000792:	1ad1      	subs	r1, r2, r3
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <read_encoders+0x58>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <read_encoders+0x5c>)
 800079a:	fb82 0203 	smull	r0, r2, r2, r3
 800079e:	1092      	asrs	r2, r2, #2
 80007a0:	17db      	asrs	r3, r3, #31
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <read_encoders+0x60>)
 80007a8:	f00c fe9c 	bl	800d4e4 <iprintf>
	printf("RIGHT :  POS[mm] : %d     VEL[mm/s] : %d  \r\n", ENC_P.absolute_pos/10, ENC_P.curr_speed/10);
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <read_encoders+0x64>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <read_encoders+0x5c>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad1      	subs	r1, r2, r3
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <read_encoders+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <read_encoders+0x5c>)
 80007c2:	fb82 0203 	smull	r0, r2, r2, r3
 80007c6:	1092      	asrs	r2, r2, #2
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <read_encoders+0x68>)
 80007d0:	f00c fe88 	bl	800d4e4 <iprintf>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000a88 	.word	0x20000a88
 80007dc:	66666667 	.word	0x66666667
 80007e0:	0800d900 	.word	0x0800d900
 80007e4:	20000920 	.word	0x20000920
 80007e8:	0800d930 	.word	0x0800d930

080007ec <get_encoder_pos>:



void get_encoder_pos(){
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
	int diff=0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	int pos_L=0, pos_P=0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
	pos_L = htim2.Instance->CNT;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <get_encoder_pos+0xd0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	60bb      	str	r3, [r7, #8]
	pos_P = htim3.Instance->CNT;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <get_encoder_pos+0xd4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080c:	607b      	str	r3, [r7, #4]
	htim2.Instance->CNT = ENC_ZERO;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <get_encoder_pos+0xd0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = ENC_ZERO;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <get_encoder_pos+0xd4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000820:	625a      	str	r2, [r3, #36]	; 0x24


	diff = pos_L - ENC_ZERO;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000828:	60fb      	str	r3, [r7, #12]
	diff = diff*170/51;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	22aa      	movs	r2, #170	; 0xaa
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <get_encoder_pos+0xd8>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	441a      	add	r2, r3
 800083a:	1152      	asrs	r2, r2, #5
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	60fb      	str	r3, [r7, #12]
	ENC_L.absolute_pos -= diff;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <get_encoder_pos+0xdc>)
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <get_encoder_pos+0xdc>)
 800084c:	6053      	str	r3, [r2, #4]
	ENC_L.curr_speed = - diff*463/10;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f46f 72e7 	mvn.w	r2, #462	; 0x1ce
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <get_encoder_pos+0xe0>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	1092      	asrs	r2, r2, #2
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <get_encoder_pos+0xdc>)
 8000866:	6013      	str	r3, [r2, #0]

	diff = pos_P - ENC_ZERO;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800086e:	60fb      	str	r3, [r7, #12]
	diff = diff*170/51;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	22aa      	movs	r2, #170	; 0xaa
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <get_encoder_pos+0xd8>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	441a      	add	r2, r3
 8000880:	1152      	asrs	r2, r2, #5
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	60fb      	str	r3, [r7, #12]
	ENC_P.absolute_pos += diff;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <get_encoder_pos+0xe4>)
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <get_encoder_pos+0xe4>)
 8000892:	6053      	str	r3, [r2, #4]
	ENC_P.curr_speed = diff*463/10;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f240 12cf 	movw	r2, #463	; 0x1cf
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <get_encoder_pos+0xe0>)
 80008a0:	fb82 1203 	smull	r1, r2, r2, r3
 80008a4:	1092      	asrs	r2, r2, #2
 80008a6:	17db      	asrs	r3, r3, #31
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <get_encoder_pos+0xe4>)
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000bc4 	.word	0x20000bc4
 80008c0:	20000898 	.word	0x20000898
 80008c4:	a0a0a0a1 	.word	0xa0a0a0a1
 80008c8:	20000a88 	.word	0x20000a88
 80008cc:	66666667 	.word	0x66666667
 80008d0:	20000920 	.word	0x20000920

080008d4 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	transmission_request=0;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_UART_TxCpltCallback+0x20>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
	bt_data=0;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_UART_TxCpltCallback+0x24>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart1, &bt_data, 1);

}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000350 	.word	0x20000350
 80008f8:	20000a90 	.word	0x20000a90

080008fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	__NOP();
 8000904:	bf00      	nop
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]


	if(huart->Instance==USART1){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a7d      	ldr	r2, [pc, #500]	; (8000b18 <HAL_UART_RxCpltCallback+0x204>)
 8000922:	4293      	cmp	r3, r2
 8000924:	f040 80f4 	bne.w	8000b10 <HAL_UART_RxCpltCallback+0x1fc>
//				HAL_UART_Transmit_IT(&huart1, bt_settings, 14);
//			}else{
//				HAL_UART_Receive_IT(&huart1, &bt_data, 1);
//			};
//		};
		rx_flag=1;
 8000928:	4b7c      	ldr	r3, [pc, #496]	; (8000b1c <HAL_UART_RxCpltCallback+0x208>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
		if(bt_data=='w'){
 800092e:	4b7c      	ldr	r3, [pc, #496]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b77      	cmp	r3, #119	; 0x77
 8000934:	d102      	bne.n	800093c <HAL_UART_RxCpltCallback+0x28>
			direction='w';
 8000936:	4b7b      	ldr	r3, [pc, #492]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000938:	2277      	movs	r2, #119	; 0x77
 800093a:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='s'){
 800093c:	4b78      	ldr	r3, [pc, #480]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d102      	bne.n	800094a <HAL_UART_RxCpltCallback+0x36>
			direction='s';
 8000944:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000946:	2273      	movs	r2, #115	; 0x73
 8000948:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='a'){
 800094a:	4b75      	ldr	r3, [pc, #468]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b61      	cmp	r3, #97	; 0x61
 8000950:	d102      	bne.n	8000958 <HAL_UART_RxCpltCallback+0x44>
			direction='a';
 8000952:	4b74      	ldr	r3, [pc, #464]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000954:	2261      	movs	r2, #97	; 0x61
 8000956:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='d'){
 8000958:	4b71      	ldr	r3, [pc, #452]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b64      	cmp	r3, #100	; 0x64
 800095e:	d102      	bne.n	8000966 <HAL_UART_RxCpltCallback+0x52>
			direction='d';
 8000960:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <HAL_UART_RxCpltCallback+0x210>)
 8000962:	2264      	movs	r2, #100	; 0x64
 8000964:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='p'){
 8000966:	4b6e      	ldr	r3, [pc, #440]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b70      	cmp	r3, #112	; 0x70
 800096c:	d102      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x60>
			option='p';
 800096e:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000970:	2270      	movs	r2, #112	; 0x70
 8000972:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='m'){
 8000974:	4b6a      	ldr	r3, [pc, #424]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b6d      	cmp	r3, #109	; 0x6d
 800097a:	d102      	bne.n	8000982 <HAL_UART_RxCpltCallback+0x6e>
			option='m';
 800097c:	4b6a      	ldr	r3, [pc, #424]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 800097e:	226d      	movs	r2, #109	; 0x6d
 8000980:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='r'){
 8000982:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b72      	cmp	r3, #114	; 0x72
 8000988:	d102      	bne.n	8000990 <HAL_UART_RxCpltCallback+0x7c>
			option='r';
 800098a:	4b67      	ldr	r3, [pc, #412]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 800098c:	2272      	movs	r2, #114	; 0x72
 800098e:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='z'){
 8000990:	4b63      	ldr	r3, [pc, #396]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b7a      	cmp	r3, #122	; 0x7a
 8000996:	d102      	bne.n	800099e <HAL_UART_RxCpltCallback+0x8a>
			option='z';
 8000998:	4b63      	ldr	r3, [pc, #396]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 800099a:	227a      	movs	r2, #122	; 0x7a
 800099c:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='g'){
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b67      	cmp	r3, #103	; 0x67
 80009a4:	d102      	bne.n	80009ac <HAL_UART_RxCpltCallback+0x98>
			option='g';
 80009a6:	4b60      	ldr	r3, [pc, #384]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 80009a8:	2267      	movs	r2, #103	; 0x67
 80009aa:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='0'){
 80009ac:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b30      	cmp	r3, #48	; 0x30
 80009b2:	d102      	bne.n	80009ba <HAL_UART_RxCpltCallback+0xa6>
			speed_mm=0;
 80009b4:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='1'){
 80009ba:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b31      	cmp	r3, #49	; 0x31
 80009c0:	d102      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0xb4>
			speed_mm=100;
 80009c2:	4b5a      	ldr	r3, [pc, #360]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='2'){
 80009c8:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b32      	cmp	r3, #50	; 0x32
 80009ce:	d102      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0xc2>
			speed_mm=200;
 80009d0:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 80009d2:	22c8      	movs	r2, #200	; 0xc8
 80009d4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='3'){
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b33      	cmp	r3, #51	; 0x33
 80009dc:	d103      	bne.n	80009e6 <HAL_UART_RxCpltCallback+0xd2>
			speed_mm=300;
 80009de:	4b53      	ldr	r3, [pc, #332]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 80009e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009e4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='4'){
 80009e6:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b34      	cmp	r3, #52	; 0x34
 80009ec:	d103      	bne.n	80009f6 <HAL_UART_RxCpltCallback+0xe2>
			speed_mm=400;
 80009ee:	4b4f      	ldr	r3, [pc, #316]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 80009f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009f4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='5'){
 80009f6:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b35      	cmp	r3, #53	; 0x35
 80009fc:	d103      	bne.n	8000a06 <HAL_UART_RxCpltCallback+0xf2>
			speed_mm=500;
 80009fe:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 8000a00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a04:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='6'){
 8000a06:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b36      	cmp	r3, #54	; 0x36
 8000a0c:	d103      	bne.n	8000a16 <HAL_UART_RxCpltCallback+0x102>
			speed_mm=600;
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 8000a10:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000a14:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='7'){
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b37      	cmp	r3, #55	; 0x37
 8000a1c:	d103      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x112>
			speed_mm=700;
 8000a1e:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 8000a20:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000a24:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='8'){
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b38      	cmp	r3, #56	; 0x38
 8000a2c:	d103      	bne.n	8000a36 <HAL_UART_RxCpltCallback+0x122>
			speed_mm=800;
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 8000a30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a34:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='9'){
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b39      	cmp	r3, #57	; 0x39
 8000a3c:	d103      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0x132>
			speed_mm=900;
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 8000a40:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000a44:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='c'){
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b63      	cmp	r3, #99	; 0x63
 8000a4c:	d10b      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0x152>
			option='Q';
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000a50:	2251      	movs	r2, #81	; 0x51
 8000a52:	701a      	strb	r2, [r3, #0]
			kp++;
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a64:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='v'){
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b76      	cmp	r3, #118	; 0x76
 8000a6c:	d10b      	bne.n	8000a86 <HAL_UART_RxCpltCallback+0x172>
			option='Q';
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000a70:	2251      	movs	r2, #81	; 0x51
 8000a72:	701a      	strb	r2, [r3, #0]
			kp--;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a84:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='b'){
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b62      	cmp	r3, #98	; 0x62
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_UART_RxCpltCallback+0x192>
			option='Q';
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000a90:	2251      	movs	r2, #81	; 0x51
 8000a92:	701a      	strb	r2, [r3, #0]
			ki++;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000aa4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='n'){
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b6e      	cmp	r3, #110	; 0x6e
 8000aac:	d10b      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x1b2>
			option='Q';
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000ab0:	2251      	movs	r2, #81	; 0x51
 8000ab2:	701a      	strb	r2, [r3, #0]
			ki--;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='m'){
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b6d      	cmp	r3, #109	; 0x6d
 8000acc:	d10b      	bne.n	8000ae6 <HAL_UART_RxCpltCallback+0x1d2>
			option='Q';
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000ad0:	2251      	movs	r2, #81	; 0x51
 8000ad2:	701a      	strb	r2, [r3, #0]
			kd++;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	3301      	adds	r3, #1
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000ae4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data==','){
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b2c      	cmp	r3, #44	; 0x2c
 8000aec:	d10b      	bne.n	8000b06 <HAL_UART_RxCpltCallback+0x1f2>
			option='Q';
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000af0:	2251      	movs	r2, #81	; 0x51
 8000af2:	701a      	strb	r2, [r3, #0]
			kd--;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000b04:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	4905      	ldr	r1, [pc, #20]	; (8000b20 <HAL_UART_RxCpltCallback+0x20c>)
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000b0c:	f00b f920 	bl	800bd50 <HAL_UART_Receive_IT>
	};

}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	20000355 	.word	0x20000355
 8000b20:	20000a90 	.word	0x20000a90
 8000b24:	20000354 	.word	0x20000354
 8000b28:	2000035c 	.word	0x2000035c
 8000b2c:	2000035a 	.word	0x2000035a
 8000b30:	20000362 	.word	0x20000362
 8000b34:	20000364 	.word	0x20000364
 8000b38:	20000366 	.word	0x20000366
 8000b3c:	200009a8 	.word	0x200009a8

08000b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM10){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d112      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x38>
		get_encoder_pos();
 8000b52:	f7ff fe4b 	bl	80007ec <get_encoder_pos>
		if(initialization_encoders==0){
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d108      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x32>
			initialization_encoders=1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
			ENC_P.absolute_pos=0;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
			ENC_L.absolute_pos=0;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]

		}
		timer_flag=1;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM11){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d102      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x48>
		adc_flag=1;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40014400 	.word	0x40014400
 8000b94:	2000035d 	.word	0x2000035d
 8000b98:	20000920 	.word	0x20000920
 8000b9c:	20000a88 	.word	0x20000a88
 8000ba0:	20000357 	.word	0x20000357
 8000ba4:	40014800 	.word	0x40014800
 8000ba8:	20000358 	.word	0x20000358

08000bac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUT_2_Pin){
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bbc:	d10e      	bne.n	8000bdc <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x80>)
 8000bc2:	f008 fbb4 	bl	800932e <HAL_GPIO_TogglePin>
		pwm_value-=50;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3b32      	subs	r3, #50	; 0x32
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bce:	6013      	str	r3, [r2, #0]
		printf("Kliknieto BUT_2  PWM = %d \r\n", pwm_value);
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bd8:	f00c fc84 	bl	800d4e4 <iprintf>
	}
	if(GPIO_Pin == VL_INT_L_Pin){  // left sensor
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d108      	bne.n	8000bf4 <HAL_GPIO_EXTI_Callback+0x48>
		printf("LEWY READY \r\n");
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000be4:	f00c fcf2 	bl	800d5cc <puts>
		VL_Data_Ready[0] = 1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x90>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
		vl_flag=1;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x94>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == VL_INT_F_Pin){  // front sensor
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d108      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x60>
		printf("FRONT READY \r\n");
 8000bfa:	4812      	ldr	r0, [pc, #72]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x98>)
 8000bfc:	f00c fce6 	bl	800d5cc <puts>
		VL_Data_Ready[1] = 1;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x90>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	705a      	strb	r2, [r3, #1]
		vl_flag=1;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == VL_INT_R_Pin){  // right sensor
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d108      	bne.n	8000c24 <HAL_GPIO_EXTI_Callback+0x78>
		printf("PRAWY READY \r\n");
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c14:	f00c fcda 	bl	800d5cc <puts>
		VL_Data_Ready[2] = 1;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x90>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	709a      	strb	r2, [r3, #2]
		vl_flag=1;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	2000034c 	.word	0x2000034c
 8000c34:	0800d960 	.word	0x0800d960
 8000c38:	0800d980 	.word	0x0800d980
 8000c3c:	20000348 	.word	0x20000348
 8000c40:	20000356 	.word	0x20000356
 8000c44:	0800d990 	.word	0x0800d990
 8000c48:	0800d9a0 	.word	0x0800d9a0

08000c4c <PWM>:



void PWM(int lewy, int prawy) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	if (lewy >= 0) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db1c      	blt.n	8000c96 <PWM+0x4a>
		if (lewy > MOTOR_MAX) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c62:	4293      	cmp	r3, r2
 8000c64:	dd02      	ble.n	8000c6c <PWM+0x20>
			lewy = MOTOR_MAX;
 8000c66:	f242 730f 	movw	r3, #9999	; 0x270f
 8000c6a:	607b      	str	r3, [r7, #4]
		};
		if(direction_set[0]!=1){
 8000c6c:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <PWM+0x170>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d02c      	beq.n	8000cd0 <PWM+0x84>
			HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7c:	4850      	ldr	r0, [pc, #320]	; (8000dc0 <PWM+0x174>)
 8000c7e:	f008 fb3d 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c88:	484d      	ldr	r0, [pc, #308]	; (8000dc0 <PWM+0x174>)
 8000c8a:	f008 fb37 	bl	80092fc <HAL_GPIO_WritePin>
			direction_set[0]=1;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <PWM+0x170>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e01c      	b.n	8000cd0 <PWM+0x84>
		}
	} else if (lewy < 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da19      	bge.n	8000cd0 <PWM+0x84>
		if (lewy < -MOTOR_MAX) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a49      	ldr	r2, [pc, #292]	; (8000dc4 <PWM+0x178>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	da01      	bge.n	8000ca8 <PWM+0x5c>
			lewy = -MOTOR_MAX;
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <PWM+0x178>)
 8000ca6:	607b      	str	r3, [r7, #4]
		};
		if(direction_set[0]!=2){
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <PWM+0x170>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d00e      	beq.n	8000cd0 <PWM+0x84>
			HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4841      	ldr	r0, [pc, #260]	; (8000dc0 <PWM+0x174>)
 8000cba:	f008 fb1f 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	483e      	ldr	r0, [pc, #248]	; (8000dc0 <PWM+0x174>)
 8000cc6:	f008 fb19 	bl	80092fc <HAL_GPIO_WritePin>
			direction_set[0]=2;
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <PWM+0x170>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	701a      	strb	r2, [r3, #0]
		}

	};

	if (prawy >= 0) {
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db1c      	blt.n	8000d10 <PWM+0xc4>
		if (prawy > MOTOR_MAX) {
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	dd02      	ble.n	8000ce6 <PWM+0x9a>
			prawy = MOTOR_MAX;
 8000ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ce4:	603b      	str	r3, [r7, #0]
		};
		if(direction_set[1]!=1){
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <PWM+0x170>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d02c      	beq.n	8000d4a <PWM+0xfe>
			HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf6:	4834      	ldr	r0, [pc, #208]	; (8000dc8 <PWM+0x17c>)
 8000cf8:	f008 fb00 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d02:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <PWM+0x17c>)
 8000d04:	f008 fafa 	bl	80092fc <HAL_GPIO_WritePin>
			direction_set[1]=1;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <PWM+0x170>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	705a      	strb	r2, [r3, #1]
 8000d0e:	e01c      	b.n	8000d4a <PWM+0xfe>
		}
	} else if (prawy < 0) {
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da19      	bge.n	8000d4a <PWM+0xfe>
		if (prawy < -MOTOR_MAX) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <PWM+0x178>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	da01      	bge.n	8000d22 <PWM+0xd6>
			prawy = -MOTOR_MAX;
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <PWM+0x178>)
 8000d20:	603b      	str	r3, [r7, #0]
		};
		if(direction_set[1]!=2){
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <PWM+0x170>)
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d00e      	beq.n	8000d4a <PWM+0xfe>
			HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d32:	4825      	ldr	r0, [pc, #148]	; (8000dc8 <PWM+0x17c>)
 8000d34:	f008 fae2 	bl	80092fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <PWM+0x17c>)
 8000d40:	f008 fadc 	bl	80092fc <HAL_GPIO_WritePin>
			direction_set[1]=2;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <PWM+0x170>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	705a      	strb	r2, [r3, #1]
		}
	};

	if(prawy==0 && lewy==0){
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d120      	bne.n	8000d92 <PWM+0x146>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d11d      	bne.n	8000d92 <PWM+0x146>
		direction_set[1]=0;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <PWM+0x170>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	705a      	strb	r2, [r3, #1]
		direction_set[0]=0;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <PWM+0x170>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <PWM+0x17c>)
 8000d6a:	f008 fac7 	bl	80092fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d74:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <PWM+0x17c>)
 8000d76:	f008 fac1 	bl	80092fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <PWM+0x174>)
 8000d82:	f008 fabb 	bl	80092fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <PWM+0x174>)
 8000d8e:	f008 fab5 	bl	80092fc <HAL_GPIO_WritePin>

	}
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, abs(lewy));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <PWM+0x180>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, abs(prawy));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000da8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <PWM+0x180>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000360 	.word	0x20000360
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	ffffd8f1 	.word	0xffffd8f1
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	20000a94 	.word	0x20000a94

08000dd0 <pos_and_speed_measurement>:


void pos_and_speed_measurement(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	PWM(speed_mm, speed_mm);
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <pos_and_speed_measurement+0x48>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <pos_and_speed_measurement+0x48>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	4610      	mov	r0, r2
 8000de8:	f7ff ff30 	bl	8000c4c <PWM>
	for(int i=0; i<10; i++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	e007      	b.n	8000e02 <pos_and_speed_measurement+0x32>
		HAL_Delay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f007 f856 	bl	8007ea4 <HAL_Delay>
		read_encoders();
 8000df8:	f7ff fcc2 	bl	8000780 <read_encoders>
	for(int i=0; i<10; i++){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	ddf4      	ble.n	8000df2 <pos_and_speed_measurement+0x22>
	}
	PWM(0,0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff1e 	bl	8000c4c <PWM>


}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000035a 	.word	0x2000035a

08000e1c <initialize_PID>:

void initialize_PID(short k_p, short k_i, short k_d){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
 8000e26:	460b      	mov	r3, r1
 8000e28:	80bb      	strh	r3, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	807b      	strh	r3, [r7, #2]
	  //Regulator został nastrojony przy pomocy metody ręcznej
	  // Najpierw zmieniając Kp aż do wystąpienia oscylacji i wybrać polowe wartosci
	  // Potem ustalając Ki az do skrocenia czasu regulacji
	  // Na koncu regulacja Kd

	  pid_init(&pid_L, kp*0.1f, ki*0.01f, kd*0.01f, 4, 40);  // 10ms ze wzgledu na 25Hz
 8000e2e:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <initialize_PID+0x1cc>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000fec <initialize_PID+0x1d0>
 8000e40:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e44:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <initialize_PID+0x1d4>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e52:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000ff4 <initialize_PID+0x1d8>
 8000e56:	ee27 6a87 	vmul.f32	s12, s15, s14
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <initialize_PID+0x1dc>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000ff4 <initialize_PID+0x1d8>
 8000e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e70:	2228      	movs	r2, #40	; 0x28
 8000e72:	2104      	movs	r1, #4
 8000e74:	eeb0 1a67 	vmov.f32	s2, s15
 8000e78:	eef0 0a46 	vmov.f32	s1, s12
 8000e7c:	eeb0 0a66 	vmov.f32	s0, s13
 8000e80:	485e      	ldr	r0, [pc, #376]	; (8000ffc <initialize_PID+0x1e0>)
 8000e82:	f000 ff9c 	bl	8001dbe <pid_init>
	  pid_L.p_max = pid_scale(&pid_L, MOTOR_MAX);
 8000e86:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001000 <initialize_PID+0x1e4>
 8000e8a:	485c      	ldr	r0, [pc, #368]	; (8000ffc <initialize_PID+0x1e0>)
 8000e8c:	f001 f8da 	bl	8002044 <pid_scale>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <initialize_PID+0x1e0>)
 8000e94:	619a      	str	r2, [r3, #24]
	  pid_L.p_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000e96:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001004 <initialize_PID+0x1e8>
 8000e9a:	4858      	ldr	r0, [pc, #352]	; (8000ffc <initialize_PID+0x1e0>)
 8000e9c:	f001 f8d2 	bl	8002044 <pid_scale>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <initialize_PID+0x1e0>)
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
	  pid_L.i_max = pid_scale(&pid_L, MOTOR_MAX);
 8000ea6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001000 <initialize_PID+0x1e4>
 8000eaa:	4854      	ldr	r0, [pc, #336]	; (8000ffc <initialize_PID+0x1e0>)
 8000eac:	f001 f8ca 	bl	8002044 <pid_scale>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <initialize_PID+0x1e0>)
 8000eb4:	61da      	str	r2, [r3, #28]
	  pid_L.i_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000eb6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001004 <initialize_PID+0x1e8>
 8000eba:	4850      	ldr	r0, [pc, #320]	; (8000ffc <initialize_PID+0x1e0>)
 8000ebc:	f001 f8c2 	bl	8002044 <pid_scale>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <initialize_PID+0x1e0>)
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
	  pid_L.d_max = pid_scale(&pid_L, MOTOR_MAX);
 8000ec6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001000 <initialize_PID+0x1e4>
 8000eca:	484c      	ldr	r0, [pc, #304]	; (8000ffc <initialize_PID+0x1e0>)
 8000ecc:	f001 f8ba 	bl	8002044 <pid_scale>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <initialize_PID+0x1e0>)
 8000ed4:	621a      	str	r2, [r3, #32]
	  pid_L.d_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000ed6:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001004 <initialize_PID+0x1e8>
 8000eda:	4848      	ldr	r0, [pc, #288]	; (8000ffc <initialize_PID+0x1e0>)
 8000edc:	f001 f8b2 	bl	8002044 <pid_scale>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <initialize_PID+0x1e0>)
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	  pid_L.total_max = pid_scale(&pid_L, MOTOR_MAX);
 8000ee6:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001000 <initialize_PID+0x1e4>
 8000eea:	4844      	ldr	r0, [pc, #272]	; (8000ffc <initialize_PID+0x1e0>)
 8000eec:	f001 f8aa 	bl	8002044 <pid_scale>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <initialize_PID+0x1e0>)
 8000ef4:	649a      	str	r2, [r3, #72]	; 0x48
	  pid_L.total_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000ef6:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001004 <initialize_PID+0x1e8>
 8000efa:	4840      	ldr	r0, [pc, #256]	; (8000ffc <initialize_PID+0x1e0>)
 8000efc:	f001 f8a2 	bl	8002044 <pid_scale>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <initialize_PID+0x1e0>)
 8000f04:	64da      	str	r2, [r3, #76]	; 0x4c

	  //Regulator został nastrojony przy pomocy metody ręcznej
	  // Najpierw zmieniając Kp aż do wystąpienia oscylacji i wybrać polowe wartosci
	  // Potem ustalając Ki az do skrocenia czasu regulacji
	  // Na koncu regulacja Kd
	  pid_init(&pid_P, kp*0.1f, ki*0.01f, kd*0.01f, 4, 40);  // 40ms ze wzgledu na 25Hz
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <initialize_PID+0x1cc>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f14:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000fec <initialize_PID+0x1d0>
 8000f18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <initialize_PID+0x1d4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000ff4 <initialize_PID+0x1d8>
 8000f2e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <initialize_PID+0x1dc>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000ff4 <initialize_PID+0x1d8>
 8000f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f48:	2228      	movs	r2, #40	; 0x28
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f50:	eef0 0a46 	vmov.f32	s1, s12
 8000f54:	eeb0 0a66 	vmov.f32	s0, s13
 8000f58:	482b      	ldr	r0, [pc, #172]	; (8001008 <initialize_PID+0x1ec>)
 8000f5a:	f000 ff30 	bl	8001dbe <pid_init>
	  pid_P.p_max = pid_scale(&pid_P, MOTOR_MAX);
 8000f5e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001000 <initialize_PID+0x1e4>
 8000f62:	4829      	ldr	r0, [pc, #164]	; (8001008 <initialize_PID+0x1ec>)
 8000f64:	f001 f86e 	bl	8002044 <pid_scale>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <initialize_PID+0x1ec>)
 8000f6c:	619a      	str	r2, [r3, #24]
	  pid_P.p_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000f6e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001004 <initialize_PID+0x1e8>
 8000f72:	4825      	ldr	r0, [pc, #148]	; (8001008 <initialize_PID+0x1ec>)
 8000f74:	f001 f866 	bl	8002044 <pid_scale>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <initialize_PID+0x1ec>)
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
	  pid_P.i_max = pid_scale(&pid_P, MOTOR_MAX);
 8000f7e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001000 <initialize_PID+0x1e4>
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <initialize_PID+0x1ec>)
 8000f84:	f001 f85e 	bl	8002044 <pid_scale>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <initialize_PID+0x1ec>)
 8000f8c:	61da      	str	r2, [r3, #28]
	  pid_P.i_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000f8e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001004 <initialize_PID+0x1e8>
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <initialize_PID+0x1ec>)
 8000f94:	f001 f856 	bl	8002044 <pid_scale>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <initialize_PID+0x1ec>)
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
	  pid_P.d_max = pid_scale(&pid_P, MOTOR_MAX);
 8000f9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001000 <initialize_PID+0x1e4>
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <initialize_PID+0x1ec>)
 8000fa4:	f001 f84e 	bl	8002044 <pid_scale>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <initialize_PID+0x1ec>)
 8000fac:	621a      	str	r2, [r3, #32]
	  pid_P.d_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000fae:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001004 <initialize_PID+0x1e8>
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <initialize_PID+0x1ec>)
 8000fb4:	f001 f846 	bl	8002044 <pid_scale>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <initialize_PID+0x1ec>)
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	  pid_P.total_max = pid_scale(&pid_P, MOTOR_MAX);
 8000fbe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001000 <initialize_PID+0x1e4>
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <initialize_PID+0x1ec>)
 8000fc4:	f001 f83e 	bl	8002044 <pid_scale>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <initialize_PID+0x1ec>)
 8000fcc:	649a      	str	r2, [r3, #72]	; 0x48
	  pid_P.total_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000fce:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001004 <initialize_PID+0x1e8>
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <initialize_PID+0x1ec>)
 8000fd4:	f001 f836 	bl	8002044 <pid_scale>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <initialize_PID+0x1ec>)
 8000fdc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000362 	.word	0x20000362
 8000fec:	3dcccccd 	.word	0x3dcccccd
 8000ff0:	20000364 	.word	0x20000364
 8000ff4:	3c23d70a 	.word	0x3c23d70a
 8000ff8:	20000366 	.word	0x20000366
 8000ffc:	20000950 	.word	0x20000950
 8001000:	461c3c00 	.word	0x461c3c00
 8001004:	c61c3c00 	.word	0xc61c3c00
 8001008:	20000b14 	.word	0x20000b14

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int L_pwm_pid=0, P_pwm_pid=0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f006 fed1 	bl	8007dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 fa41 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 fdb3 	bl	8001b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001026:	f000 fd91 	bl	8001b4c <MX_DMA_Init>
  MX_I2C1_Init();
 800102a:	f000 fb3b 	bl	80016a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800102e:	f000 fd39 	bl	8001aa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001032:	f000 fd61 	bl	8001af8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001036:	f000 fb99 	bl	800176c <MX_TIM1_Init>
  MX_ADC1_Init();
 800103a:	f000 fa9b 	bl	8001574 <MX_ADC1_Init>
  MX_SPI1_Init();
 800103e:	f000 fb5f 	bl	8001700 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001042:	f000 fc3f 	bl	80018c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001046:	f000 fc91 	bl	800196c <MX_TIM3_Init>
  MX_TIM10_Init();
 800104a:	f000 fce3 	bl	8001a14 <MX_TIM10_Init>
  MX_TIM11_Init();
 800104e:	f000 fd05 	bl	8001a5c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, 0 );
 8001052:	4bc7      	ldr	r3, [pc, #796]	; (8001370 <main+0x364>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, 0 );
 800105a:	4bc5      	ldr	r3, [pc, #788]	; (8001370 <main+0x364>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_1);
 8001062:	2100      	movs	r1, #0
 8001064:	48c2      	ldr	r0, [pc, #776]	; (8001370 <main+0x364>)
 8001066:	f009 fe43 	bl	800acf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_2);
 800106a:	2104      	movs	r1, #4
 800106c:	48c0      	ldr	r0, [pc, #768]	; (8001370 <main+0x364>)
 800106e:	f009 fe3f 	bl	800acf0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	48be      	ldr	r0, [pc, #760]	; (8001374 <main+0x368>)
 800107a:	f008 f93f 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	48bb      	ldr	r0, [pc, #748]	; (8001374 <main+0x368>)
 8001086:	f008 f939 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	48b9      	ldr	r0, [pc, #740]	; (8001378 <main+0x36c>)
 8001092:	f008 f933 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109c:	48b6      	ldr	r0, [pc, #728]	; (8001378 <main+0x36c>)
 800109e:	f008 f92d 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	48b4      	ldr	r0, [pc, #720]	; (800137c <main+0x370>)
 80010aa:	f008 f927 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2104      	movs	r1, #4
 80010b2:	48b2      	ldr	r0, [pc, #712]	; (800137c <main+0x370>)
 80010b4:	f008 f922 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2102      	movs	r1, #2
 80010bc:	48af      	ldr	r0, [pc, #700]	; (800137c <main+0x370>)
 80010be:	f008 f91d 	bl	80092fc <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	49ae      	ldr	r1, [pc, #696]	; (8001380 <main+0x374>)
 80010c6:	48af      	ldr	r0, [pc, #700]	; (8001384 <main+0x378>)
 80010c8:	f00a fe42 	bl	800bd50 <HAL_UART_Receive_IT>
  VL_Init_All(&hi2c1);
 80010cc:	48ae      	ldr	r0, [pc, #696]	; (8001388 <main+0x37c>)
 80010ce:	f7ff fa57 	bl	8000580 <VL_Init_All>
  HAL_TIM_Base_Start_IT(&htim10);
 80010d2:	48ae      	ldr	r0, [pc, #696]	; (800138c <main+0x380>)
 80010d4:	f009 fdb3 	bl	800ac3e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80010d8:	48ad      	ldr	r0, [pc, #692]	; (8001390 <main+0x384>)
 80010da:	f009 fdb0 	bl	800ac3e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010de:	213c      	movs	r1, #60	; 0x3c
 80010e0:	48ac      	ldr	r0, [pc, #688]	; (8001394 <main+0x388>)
 80010e2:	f009 fec9 	bl	800ae78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010e6:	213c      	movs	r1, #60	; 0x3c
 80010e8:	48ab      	ldr	r0, [pc, #684]	; (8001398 <main+0x38c>)
 80010ea:	f009 fec5 	bl	800ae78 <HAL_TIM_Encoder_Start>
  htim2.Instance->CNT = ENC_ZERO;
 80010ee:	4baa      	ldr	r3, [pc, #680]	; (8001398 <main+0x38c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  htim3.Instance->CNT = ENC_ZERO;
 80010f8:	4ba6      	ldr	r3, [pc, #664]	; (8001394 <main+0x388>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

  initialize_PID(kp, ki, kd);
 8001102:	4ba6      	ldr	r3, [pc, #664]	; (800139c <main+0x390>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b218      	sxth	r0, r3
 8001108:	4ba5      	ldr	r3, [pc, #660]	; (80013a0 <main+0x394>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b219      	sxth	r1, r3
 800110e:	4ba5      	ldr	r3, [pc, #660]	; (80013a4 <main+0x398>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b21b      	sxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	f7ff fe81 	bl	8000e1c <initialize_PID>

  HAL_ADC_Start_DMA(&hadc1, adc_measurements, 6);
 800111a:	2206      	movs	r2, #6
 800111c:	49a2      	ldr	r1, [pc, #648]	; (80013a8 <main+0x39c>)
 800111e:	48a3      	ldr	r0, [pc, #652]	; (80013ac <main+0x3a0>)
 8001120:	f006 ff26 	bl	8007f70 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(adc_measurements[0]<2600){
 8001124:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <main+0x39c>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	f640 2227 	movw	r2, #2599	; 0xa27
 800112e:	4293      	cmp	r3, r2
 8001130:	d808      	bhi.n	8001144 <main+0x138>
		  HAL_Delay(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f006 feb5 	bl	8007ea4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800113a:	2102      	movs	r1, #2
 800113c:	488f      	ldr	r0, [pc, #572]	; (800137c <main+0x370>)
 800113e:	f008 f8f6 	bl	800932e <HAL_GPIO_TogglePin>
 8001142:	e7ef      	b.n	8001124 <main+0x118>
	  }else{
		  if(timer_flag==1){
 8001144:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <main+0x3a4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d14d      	bne.n	80011ea <main+0x1de>
		  		  timer_flag=0;
 800114e:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <main+0x3a4>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
		  		  L_pwm_pid = pid_calc(&pid_L, ENC_L.curr_speed, speed_mm*10);
 8001154:	4b97      	ldr	r3, [pc, #604]	; (80013b4 <main+0x3a8>)
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	4b97      	ldr	r3, [pc, #604]	; (80013b8 <main+0x3ac>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b21b      	sxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	461a      	mov	r2, r3
 800116a:	4894      	ldr	r0, [pc, #592]	; (80013bc <main+0x3b0>)
 800116c:	f000 feb2 	bl	8001ed4 <pid_calc>
 8001170:	6078      	str	r0, [r7, #4]
		  		  P_pwm_pid = pid_calc(&pid_P, ENC_P.curr_speed, speed_mm*10);
 8001172:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <main+0x3b4>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4b90      	ldr	r3, [pc, #576]	; (80013b8 <main+0x3ac>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b21b      	sxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	461a      	mov	r2, r3
 8001188:	488e      	ldr	r0, [pc, #568]	; (80013c4 <main+0x3b8>)
 800118a:	f000 fea3 	bl	8001ed4 <pid_calc>
 800118e:	6038      	str	r0, [r7, #0]
		  		  if(option=='g'){
 8001190:	4b8d      	ldr	r3, [pc, #564]	; (80013c8 <main+0x3bc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b67      	cmp	r3, #103	; 0x67
 8001198:	d127      	bne.n	80011ea <main+0x1de>
		  			  printf("SET: %d     MEAS:  %d     RES:  %d \r\n", speed_mm*10, ENC_L.curr_speed, L_pwm_pid );
 800119a:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <main+0x3ac>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4619      	mov	r1, r3
 80011ac:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <main+0x3a8>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4886      	ldr	r0, [pc, #536]	; (80013cc <main+0x3c0>)
 80011b4:	f00c f996 	bl	800d4e4 <iprintf>
		  			  PWM(speed_mm*10+L_pwm_pid, speed_mm*10+P_pwm_pid);
 80011b8:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <main+0x3ac>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	461a      	mov	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	18d0      	adds	r0, r2, r3
 80011ce:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <main+0x3ac>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fd31 	bl	8000c4c <PWM>
		  		  }
		  	  }
		  	  if(rx_flag==1){
 80011ea:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <main+0x3c4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d197      	bne.n	8001124 <main+0x118>
		  		  switch(direction){
 80011f4:	4b77      	ldr	r3, [pc, #476]	; (80013d4 <main+0x3c8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	3b61      	subs	r3, #97	; 0x61
 80011fa:	2b16      	cmp	r3, #22
 80011fc:	d848      	bhi.n	8001290 <main+0x284>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <main+0x1f8>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	0800126f 	.word	0x0800126f
 8001208:	08001291 	.word	0x08001291
 800120c:	08001291 	.word	0x08001291
 8001210:	08001285 	.word	0x08001285
 8001214:	08001291 	.word	0x08001291
 8001218:	08001291 	.word	0x08001291
 800121c:	08001291 	.word	0x08001291
 8001220:	08001291 	.word	0x08001291
 8001224:	08001291 	.word	0x08001291
 8001228:	08001291 	.word	0x08001291
 800122c:	08001291 	.word	0x08001291
 8001230:	08001291 	.word	0x08001291
 8001234:	08001291 	.word	0x08001291
 8001238:	08001291 	.word	0x08001291
 800123c:	08001291 	.word	0x08001291
 8001240:	08001291 	.word	0x08001291
 8001244:	08001291 	.word	0x08001291
 8001248:	08001291 	.word	0x08001291
 800124c:	0800127b 	.word	0x0800127b
 8001250:	08001291 	.word	0x08001291
 8001254:	08001291 	.word	0x08001291
 8001258:	08001291 	.word	0x08001291
 800125c:	08001261 	.word	0x08001261
		  		  case 'w':
		  			  PWM(8000,8000);
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001268:	f7ff fcf0 	bl	8000c4c <PWM>
		  			  break;
 800126c:	e010      	b.n	8001290 <main+0x284>
		  		  case 'a':
		  			  PWM(-4000,4000);
 800126e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001272:	4859      	ldr	r0, [pc, #356]	; (80013d8 <main+0x3cc>)
 8001274:	f7ff fcea 	bl	8000c4c <PWM>
		  			  break;
 8001278:	e00a      	b.n	8001290 <main+0x284>
		  		  case 's':
		  			  PWM(-8000,-8000);
 800127a:	4958      	ldr	r1, [pc, #352]	; (80013dc <main+0x3d0>)
 800127c:	4857      	ldr	r0, [pc, #348]	; (80013dc <main+0x3d0>)
 800127e:	f7ff fce5 	bl	8000c4c <PWM>
		  			  break;
 8001282:	e005      	b.n	8001290 <main+0x284>
		  		  case 'd':
		  			  PWM(4000,-4000);
 8001284:	4954      	ldr	r1, [pc, #336]	; (80013d8 <main+0x3cc>)
 8001286:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800128a:	f7ff fcdf 	bl	8000c4c <PWM>
		  			  break;
 800128e:	bf00      	nop

		  		  }
		  		  if(direction != ' '){
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <main+0x3c8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b20      	cmp	r3, #32
 8001296:	d00c      	beq.n	80012b2 <main+0x2a6>
		  			  HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f006 fe03 	bl	8007ea4 <HAL_Delay>
		  			  printf("Stopping\r\n");
 800129e:	4850      	ldr	r0, [pc, #320]	; (80013e0 <main+0x3d4>)
 80012a0:	f00c f994 	bl	800d5cc <puts>
		  			  PWM(0,0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff fcd0 	bl	8000c4c <PWM>
		  			  direction=' ';
 80012ac:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <main+0x3c8>)
 80012ae:	2220      	movs	r2, #32
 80012b0:	701a      	strb	r2, [r3, #0]
		  		  }

		  		  switch(option){
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <main+0x3bc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3b51      	subs	r3, #81	; 0x51
 80012ba:	2b29      	cmp	r3, #41	; 0x29
 80012bc:	f200 80db 	bhi.w	8001476 <main+0x46a>
 80012c0:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <main+0x2bc>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080013f1 	.word	0x080013f1
 80012cc:	08001477 	.word	0x08001477
 80012d0:	08001477 	.word	0x08001477
 80012d4:	08001477 	.word	0x08001477
 80012d8:	08001477 	.word	0x08001477
 80012dc:	08001477 	.word	0x08001477
 80012e0:	08001477 	.word	0x08001477
 80012e4:	08001477 	.word	0x08001477
 80012e8:	08001477 	.word	0x08001477
 80012ec:	08001477 	.word	0x08001477
 80012f0:	08001477 	.word	0x08001477
 80012f4:	08001477 	.word	0x08001477
 80012f8:	08001477 	.word	0x08001477
 80012fc:	08001477 	.word	0x08001477
 8001300:	08001477 	.word	0x08001477
 8001304:	08001477 	.word	0x08001477
 8001308:	08001477 	.word	0x08001477
 800130c:	08001477 	.word	0x08001477
 8001310:	08001477 	.word	0x08001477
 8001314:	08001477 	.word	0x08001477
 8001318:	08001477 	.word	0x08001477
 800131c:	08001477 	.word	0x08001477
 8001320:	08001477 	.word	0x08001477
 8001324:	08001477 	.word	0x08001477
 8001328:	08001477 	.word	0x08001477
 800132c:	08001477 	.word	0x08001477
 8001330:	08001477 	.word	0x08001477
 8001334:	08001477 	.word	0x08001477
 8001338:	0800143b 	.word	0x0800143b
 800133c:	08001477 	.word	0x08001477
 8001340:	08001477 	.word	0x08001477
 8001344:	080013e5 	.word	0x080013e5
 8001348:	08001477 	.word	0x08001477
 800134c:	08001447 	.word	0x08001447
 8001350:	08001477 	.word	0x08001477
 8001354:	08001477 	.word	0x08001477
 8001358:	08001477 	.word	0x08001477
 800135c:	08001477 	.word	0x08001477
 8001360:	08001477 	.word	0x08001477
 8001364:	08001477 	.word	0x08001477
 8001368:	08001477 	.word	0x08001477
 800136c:	08001427 	.word	0x08001427
 8001370:	20000a94 	.word	0x20000a94
 8001374:	40020800 	.word	0x40020800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	20000a90 	.word	0x20000a90
 8001384:	200009a8 	.word	0x200009a8
 8001388:	200007f4 	.word	0x200007f4
 800138c:	20000848 	.word	0x20000848
 8001390:	200009e8 	.word	0x200009e8
 8001394:	20000898 	.word	0x20000898
 8001398:	20000bc4 	.word	0x20000bc4
 800139c:	20000362 	.word	0x20000362
 80013a0:	20000364 	.word	0x20000364
 80013a4:	20000366 	.word	0x20000366
 80013a8:	200007e8 	.word	0x200007e8
 80013ac:	200008d8 	.word	0x200008d8
 80013b0:	20000357 	.word	0x20000357
 80013b4:	20000a88 	.word	0x20000a88
 80013b8:	2000035a 	.word	0x2000035a
 80013bc:	20000950 	.word	0x20000950
 80013c0:	20000920 	.word	0x20000920
 80013c4:	20000b14 	.word	0x20000b14
 80013c8:	2000035c 	.word	0x2000035c
 80013cc:	0800d9b0 	.word	0x0800d9b0
 80013d0:	20000355 	.word	0x20000355
 80013d4:	20000354 	.word	0x20000354
 80013d8:	fffff060 	.word	0xfffff060
 80013dc:	ffffe0c0 	.word	0xffffe0c0
 80013e0:	0800d9d8 	.word	0x0800d9d8
		  		  case 'p':
		  			  read_encoders();
 80013e4:	f7ff f9cc 	bl	8000780 <read_encoders>
		  			  option=' ';
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <main+0x474>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	701a      	strb	r2, [r3, #0]
		  			  break;
 80013ee:	e042      	b.n	8001476 <main+0x46a>
		  		  case 'Q':
		  			  printf("Kp %d  Ki  %d  Kd  %d \r\n", kp, ki, kd );
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <main+0x478>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <main+0x47c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <main+0x480>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4822      	ldr	r0, [pc, #136]	; (8001490 <main+0x484>)
 8001408:	f00c f86c 	bl	800d4e4 <iprintf>
		  			  initialize_PID(kp, ki, kd);
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <main+0x478>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b218      	sxth	r0, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <main+0x47c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b219      	sxth	r1, r3
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <main+0x480>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b21b      	sxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	f7ff fcfc 	bl	8000e1c <initialize_PID>
		  			  break;
 8001424:	e027      	b.n	8001476 <main+0x46a>
		  		  case 'z':
		  			  ENC_L.absolute_pos=0;
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <main+0x488>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
		  			  ENC_P.absolute_pos=0;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <main+0x48c>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
		  			  option=' ';
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <main+0x474>)
 8001434:	2220      	movs	r2, #32
 8001436:	701a      	strb	r2, [r3, #0]
		  			  break;
 8001438:	e01d      	b.n	8001476 <main+0x46a>
		  		  case 'm':
		  			  pos_and_speed_measurement();
 800143a:	f7ff fcc9 	bl	8000dd0 <pos_and_speed_measurement>
		  			  option=' ';
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <main+0x474>)
 8001440:	2220      	movs	r2, #32
 8001442:	701a      	strb	r2, [r3, #0]
		  			  break;
 8001444:	e017      	b.n	8001476 <main+0x46a>
		  		  case 'r':
		  			  PWM(speed_mm*10, speed_mm*10);
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <main+0x490>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b21b      	sxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4618      	mov	r0, r3
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <main+0x490>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b21b      	sxth	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fbef 	bl	8000c4c <PWM>
		  			  option=' ';
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <main+0x474>)
 8001470:	2220      	movs	r2, #32
 8001472:	701a      	strb	r2, [r3, #0]
		  			  break;
 8001474:	bf00      	nop
		  		  case 'g':
		  			  break;
		  		  }
		  		  rx_flag=0;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <main+0x494>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
	  if(adc_measurements[0]<2600){
 800147c:	e652      	b.n	8001124 <main+0x118>
 800147e:	bf00      	nop
 8001480:	2000035c 	.word	0x2000035c
 8001484:	20000362 	.word	0x20000362
 8001488:	20000364 	.word	0x20000364
 800148c:	20000366 	.word	0x20000366
 8001490:	0800d9e4 	.word	0x0800d9e4
 8001494:	20000a88 	.word	0x20000a88
 8001498:	20000920 	.word	0x20000920
 800149c:	2000035a 	.word	0x2000035a
 80014a0:	20000355 	.word	0x20000355

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	; 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2230      	movs	r2, #48	; 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00b fc9d 	bl	800cdf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <SystemClock_Config+0xc8>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <SystemClock_Config+0xc8>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <SystemClock_Config+0xc8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <SystemClock_Config+0xcc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a20      	ldr	r2, [pc, #128]	; (8001570 <SystemClock_Config+0xcc>)
 80014ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <SystemClock_Config+0xcc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001514:	2308      	movs	r3, #8
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001518:	2360      	movs	r3, #96	; 0x60
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4618      	mov	r0, r3
 800152a:	f008 febd 	bl	800a2a8 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001534:	f000 fc3c 	bl	8001db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2101      	movs	r1, #1
 8001552:	4618      	mov	r0, r3
 8001554:	f009 f918 	bl	800a788 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800155e:	f000 fc27 	bl	8001db0 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001586:	4b44      	ldr	r3, [pc, #272]	; (8001698 <MX_ADC1_Init+0x124>)
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <MX_ADC1_Init+0x128>)
 800158a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_ADC1_Init+0x124>)
 800158e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <MX_ADC1_Init+0x124>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_ADC1_Init+0x124>)
 800159c:	2201      	movs	r2, #1
 800159e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <MX_ADC1_Init+0x124>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <MX_ADC1_Init+0x124>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <MX_ADC1_Init+0x124>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MX_ADC1_Init+0x124>)
 80015b6:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <MX_ADC1_Init+0x12c>)
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <MX_ADC1_Init+0x124>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_ADC1_Init+0x124>)
 80015c2:	2206      	movs	r2, #6
 80015c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <MX_ADC1_Init+0x124>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <MX_ADC1_Init+0x124>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d4:	4830      	ldr	r0, [pc, #192]	; (8001698 <MX_ADC1_Init+0x124>)
 80015d6:	f006 fc87 	bl	8007ee8 <HAL_ADC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 fbe6 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015ec:	2307      	movs	r3, #7
 80015ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4828      	ldr	r0, [pc, #160]	; (8001698 <MX_ADC1_Init+0x124>)
 80015f6:	f006 fdad 	bl	8008154 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001600:	f000 fbd6 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001604:	230f      	movs	r3, #15
 8001606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	4821      	ldr	r0, [pc, #132]	; (8001698 <MX_ADC1_Init+0x124>)
 8001612:	f006 fd9f 	bl	8008154 <HAL_ADC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800161c:	f000 fbc8 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001620:	2302      	movs	r3, #2
 8001622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001624:	2303      	movs	r3, #3
 8001626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <MX_ADC1_Init+0x124>)
 800162e:	f006 fd91 	bl	8008154 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001638:	f000 fbba 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800163c:	2303      	movs	r3, #3
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001640:	2304      	movs	r3, #4
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_ADC1_Init+0x124>)
 800164a:	f006 fd83 	bl	8008154 <HAL_ADC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001654:	f000 fbac 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001658:	2304      	movs	r3, #4
 800165a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800165c:	2305      	movs	r3, #5
 800165e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_ADC1_Init+0x124>)
 8001666:	f006 fd75 	bl	8008154 <HAL_ADC_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001670:	f000 fb9e 	bl	8001db0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001674:	2305      	movs	r3, #5
 8001676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001678:	2306      	movs	r3, #6
 800167a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_ADC1_Init+0x124>)
 8001682:	f006 fd67 	bl	8008154 <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800168c:	f000 fb90 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200008d8 	.word	0x200008d8
 800169c:	40012000 	.word	0x40012000
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MX_I2C1_Init+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_I2C1_Init+0x58>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_I2C1_Init+0x50>)
 80016e2:	f007 fe57 	bl	8009394 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 fb60 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200007f4 	.word	0x200007f4
 80016f8:	40005400 	.word	0x40005400
 80016fc:	000186a0 	.word	0x000186a0

08001700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_SPI1_Init+0x64>)
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <MX_SPI1_Init+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI1_Init+0x64>)
 800170c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_SPI1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI1_Init+0x64>)
 8001734:	2218      	movs	r2, #24
 8001736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI1_Init+0x64>)
 800174c:	220a      	movs	r2, #10
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_SPI1_Init+0x64>)
 8001752:	f009 f9e5 	bl	800ab20 <HAL_SPI_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800175c:	f000 fb28 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000b6c 	.word	0x20000b6c
 8001768:	40013000 	.word	0x40013000

0800176c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2220      	movs	r2, #32
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00b fb24 	bl	800cdf2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017aa:	4b44      	ldr	r3, [pc, #272]	; (80018bc <MX_TIM1_Init+0x150>)
 80017ac:	4a44      	ldr	r2, [pc, #272]	; (80018c0 <MX_TIM1_Init+0x154>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MX_TIM1_Init+0x150>)
 80017b2:	2218      	movs	r2, #24
 80017b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <MX_TIM1_Init+0x150>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <MX_TIM1_Init+0x150>)
 80017be:	f242 720f 	movw	r2, #9999	; 0x270f
 80017c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <MX_TIM1_Init+0x150>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ca:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <MX_TIM1_Init+0x150>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <MX_TIM1_Init+0x150>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d6:	4839      	ldr	r0, [pc, #228]	; (80018bc <MX_TIM1_Init+0x150>)
 80017d8:	f009 fa06 	bl	800abe8 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017e2:	f000 fae5 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f0:	4619      	mov	r1, r3
 80017f2:	4832      	ldr	r0, [pc, #200]	; (80018bc <MX_TIM1_Init+0x150>)
 80017f4:	f009 fd46 	bl	800b284 <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017fe:	f000 fad7 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <MX_TIM1_Init+0x150>)
 8001804:	f009 fa3f 	bl	800ac86 <HAL_TIM_PWM_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800180e:	f000 facf 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800181a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181e:	4619      	mov	r1, r3
 8001820:	4826      	ldr	r0, [pc, #152]	; (80018bc <MX_TIM1_Init+0x150>)
 8001822:	f00a f8db 	bl	800b9dc <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800182c:	f000 fac0 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <MX_TIM1_Init+0x150>)
 8001856:	f009 fc4f 	bl	800b0f8 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001860:	f000 faa6 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_TIM1_Init+0x150>)
 800186e:	f009 fc43 	bl	800b0f8 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001878:	f000 fa9a 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM1_Init+0x150>)
 80018a0:	f00a f90a 	bl	800bab8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80018aa:	f000 fa81 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM1_Init+0x150>)
 80018b0:	f000 fe1c 	bl	80024ec <HAL_TIM_MspPostInit>

}
 80018b4:	bf00      	nop
 80018b6:	3758      	adds	r7, #88	; 0x58
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000a94 	.word	0x20000a94
 80018c0:	40010000 	.word	0x40010000

080018c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00b fa8d 	bl	800cdf2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_TIM2_Init+0xa4>)
 80018e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_TIM2_Init+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM2_Init+0xa4>)
 80018f0:	2210      	movs	r2, #16
 80018f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM2_Init+0xa4>)
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM2_Init+0xa4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM2_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001908:	2301      	movs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001920:	2301      	movs	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM2_Init+0xa4>)
 8001934:	f009 fa0e 	bl	800ad54 <HAL_TIM_Encoder_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800193e:	f000 fa37 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM2_Init+0xa4>)
 8001950:	f00a f844 	bl	800b9dc <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800195a:	f000 fa29 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3730      	adds	r7, #48	; 0x30
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000bc4 	.word	0x20000bc4

0800196c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00b fa39 	bl	800cdf2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <MX_TIM3_Init+0xa0>)
 800198a:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <MX_TIM3_Init+0xa4>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_TIM3_Init+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM3_Init+0xa0>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_TIM3_Init+0xa0>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c6:	2301      	movs	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019da:	f009 f9bb 	bl	800ad54 <HAL_TIM_Encoder_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019e4:	f000 f9e4 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM3_Init+0xa0>)
 80019f6:	f009 fff1 	bl	800b9dc <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a00:	f000 f9d6 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000898 	.word	0x20000898
 8001a10:	40000400 	.word	0x40000400

08001a14 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <MX_TIM10_Init+0x44>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a20:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a24:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a32:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_TIM10_Init+0x40>)
 8001a42:	f009 f8d1 	bl	800abe8 <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001a4c:	f000 f9b0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000848 	.word	0x20000848
 8001a58:	40014400 	.word	0x40014400

08001a5c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <MX_TIM11_Init+0x44>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4799;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a68:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001a6c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a76:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a7a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_TIM11_Init+0x40>)
 8001a8a:	f009 f8ad 	bl	800abe8 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001a94:	f000 f98c 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200009e8 	.word	0x200009e8
 8001aa0:	40014800 	.word	0x40014800

08001aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_USART1_UART_Init+0x50>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_USART1_UART_Init+0x4c>)
 8001adc:	f00a f852 	bl	800bb84 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae6:	f000 f963 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200009a8 	.word	0x200009a8
 8001af4:	40011000 	.word	0x40011000

08001af8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART6_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b30:	f00a f828 	bl	800bb84 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f000 f939 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000ad4 	.word	0x20000ad4
 8001b48:	40011400 	.word	0x40011400

08001b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_DMA_Init+0x3c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <MX_DMA_Init+0x3c>)
 8001b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_DMA_Init+0x3c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2038      	movs	r0, #56	; 0x38
 8001b74:	f006 fe79 	bl	800886a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b78:	2038      	movs	r0, #56	; 0x38
 8001b7a:	f006 fe92 	bl	80088a2 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a73      	ldr	r2, [pc, #460]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <MX_GPIO_Init+0x208>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PT_A_Pin|PT_B_Pin|PT_C_Pin|VL_XSHUT_R_Pin
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001c34:	4858      	ldr	r0, [pc, #352]	; (8001d98 <MX_GPIO_Init+0x20c>)
 8001c36:	f007 fb61 	bl	80092fc <HAL_GPIO_WritePin>
                          |L_IN1_Pin|L_IN2_Pin|VL_XSHUT_L_Pin|VL_XSHUT_F_Pin
                          |IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|IR_C_Pin
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f24e 4106 	movw	r1, #58374	; 0xe406
 8001c40:	4856      	ldr	r0, [pc, #344]	; (8001d9c <MX_GPIO_Init+0x210>)
 8001c42:	f007 fb5b 	bl	80092fc <HAL_GPIO_WritePin>
                          |IR_B_Pin|IR_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_IN2_Pin|R_IN1_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001c4c:	4854      	ldr	r0, [pc, #336]	; (8001da0 <MX_GPIO_Init+0x214>)
 8001c4e:	f007 fb55 	bl	80092fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PT_A_Pin PT_B_Pin PT_C_Pin */
  GPIO_InitStruct.Pin = PT_A_Pin|PT_B_Pin|PT_C_Pin;
 8001c52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	484b      	ldr	r0, [pc, #300]	; (8001d98 <MX_GPIO_Init+0x20c>)
 8001c6c:	f007 f9c4 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_1_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_1_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4848      	ldr	r0, [pc, #288]	; (8001da4 <MX_GPIO_Init+0x218>)
 8001c84:	f007 f9b8 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL_INT_R_Pin VL_INT_F_Pin VL_INT_L_Pin */
  GPIO_InitStruct.Pin = VL_INT_R_Pin|VL_INT_F_Pin|VL_INT_L_Pin;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <MX_GPIO_Init+0x21c>)
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	483f      	ldr	r0, [pc, #252]	; (8001d98 <MX_GPIO_Init+0x20c>)
 8001c9c:	f007 f9ac 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL_XSHUT_R_Pin L_IN1_Pin L_IN2_Pin VL_XSHUT_L_Pin
                           VL_XSHUT_F_Pin IMU_CS_Pin */
  GPIO_InitStruct.Pin = VL_XSHUT_R_Pin|L_IN1_Pin|L_IN2_Pin|VL_XSHUT_L_Pin
 8001ca0:	f641 7308 	movw	r3, #7944	; 0x1f08
 8001ca4:	617b      	str	r3, [r7, #20]
                          |VL_XSHUT_F_Pin|IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4837      	ldr	r0, [pc, #220]	; (8001d98 <MX_GPIO_Init+0x20c>)
 8001cba:	f007 f99d 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8001cbe:	f240 4306 	movw	r3, #1030	; 0x406
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4831      	ldr	r0, [pc, #196]	; (8001d9c <MX_GPIO_Init+0x210>)
 8001cd8:	f007 f98e 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_C_Pin IR_B_Pin IR_A_Pin */
  GPIO_InitStruct.Pin = IR_C_Pin|IR_B_Pin|IR_A_Pin;
 8001cdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4829      	ldr	r0, [pc, #164]	; (8001d9c <MX_GPIO_Init+0x210>)
 8001cf6:	f007 f97f 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_IN2_Pin R_IN1_Pin */
  GPIO_InitStruct.Pin = R_IN2_Pin|R_IN1_Pin;
 8001cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4823      	ldr	r0, [pc, #140]	; (8001da0 <MX_GPIO_Init+0x214>)
 8001d14:	f007 f970 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_2_Pin */
  GPIO_InitStruct.Pin = BUT_2_Pin;
 8001d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <MX_GPIO_Init+0x21c>)
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_2_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481c      	ldr	r0, [pc, #112]	; (8001da0 <MX_GPIO_Init+0x214>)
 8001d2e:	f007 f963 	bl	8008ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001d32:	2304      	movs	r3, #4
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_GPIO_Init+0x220>)
 8001d46:	f007 f957 	bl	8008ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2006      	movs	r0, #6
 8001d50:	f006 fd8b 	bl	800886a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d54:	2006      	movs	r0, #6
 8001d56:	f006 fda4 	bl	80088a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2007      	movs	r0, #7
 8001d60:	f006 fd83 	bl	800886a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d64:	2007      	movs	r0, #7
 8001d66:	f006 fd9c 	bl	80088a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2008      	movs	r0, #8
 8001d70:	f006 fd7b 	bl	800886a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d74:	2008      	movs	r0, #8
 8001d76:	f006 fd94 	bl	80088a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2028      	movs	r0, #40	; 0x28
 8001d80:	f006 fd73 	bl	800886a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d84:	2028      	movs	r0, #40	; 0x28
 8001d86:	f006 fd8c 	bl	80088a2 <HAL_NVIC_EnableIRQ>

}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	10110000 	.word	0x10110000
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <pid_init>:
 */

#include "pid.h"

void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b089      	sub	sp, #36	; 0x24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6178      	str	r0, [r7, #20]
 8001dc6:	ed87 0a04 	vstr	s0, [r7, #16]
 8001dca:	edc7 0a03 	vstr	s1, [r7, #12]
 8001dce:	ed87 1a02 	vstr	s2, [r7, #8]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	603a      	str	r2, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
    uint32_t k;
    pid->power = 1;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

    for (k = 0; k < f; ++k){
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e007      	b.n	8001df4 <pid_init+0x36>
        pid->power = pid->power * 2;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	005a      	lsls	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
    for (k = 0; k < f; ++k){
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3f3      	bcc.n	8001de4 <pid_init+0x26>
    }
    pid->f = f;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pid->p = (int32_t) (p * pid->power);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1c:	ee17 2a90 	vmov	r2, s15
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
    pid->i = (int32_t) (i * pid->power);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3c:	ee17 2a90 	vmov	r2, s15
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	605a      	str	r2, [r3, #4]
    pid->d = (int32_t) (d * pid->power);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5c:	ee17 2a90 	vmov	r2, s15
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	609a      	str	r2, [r3, #8]
    pid->p_val = 0;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    pid->i_val = 0;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
    pid->d_val = 0;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    pid->p_max = INT32_MAX;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e7c:	619a      	str	r2, [r3, #24]
    pid->p_min = INT32_MIN;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
    pid->i_max = INT32_MAX;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e8c:	61da      	str	r2, [r3, #28]
    pid->i_min = INT32_MIN;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
    pid->d_max = INT32_MAX;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e9c:	621a      	str	r2, [r3, #32]
    pid->d_min = INT32_MIN;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->e_last = 0;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    pid->sum = 0;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    pid->total_max = INT32_MAX;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001eb8:	649a      	str	r2, [r3, #72]	; 0x48
    pid->total_min = INT32_MIN;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    pid->dt_ms = dt_ms;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001ec8:	bf00      	nop
 8001eca:	3724      	adds	r7, #36	; 0x24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b08b      	sub	sp, #44	; 0x2c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
    int32_t p, i, d, e, total;
    pid->mv = mv;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->dv = dv;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38

    //Wyliczony blad (uchyb) regulacji jako roznica miedzy wartoscia zadana a zmierzona
    e = pid->dv - pid->mv;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
    //Obliczenie czlonu proporcjonalnego jako iloczyn wspolczynnika p oraz uchybu
    p = pid->p * e;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24

    if (p > pid->p_max)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dd03      	ble.n	8001f16 <pid_calc+0x42>
        p = pid->p_max;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e007      	b.n	8001f26 <pid_calc+0x52>
    else if (p < pid->p_min)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	da02      	bge.n	8001f26 <pid_calc+0x52>
        p = pid->p_min;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24

    pid->p_val = p >> pid->f;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	fa43 f202 	asr.w	r2, r3, r2
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	60da      	str	r2, [r3, #12]



    // Wartosc czlon calkujacego to suma dotychczasowych wartości tego członu zaktualizowana
    // o najnowsza wartosc. Czyli uchyb mnożony przez wspolczynnik oraz chwile czasu z zachowaniem jednostki sekund
    i = pid->sum;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	623b      	str	r3, [r7, #32]
    i += (pid->dt_ms * pid->i * e)/1000;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6852      	ldr	r2, [r2, #4]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <pid_calc+0x16c>)
 8001f52:	fb82 1203 	smull	r1, r2, r2, r3
 8001f56:	1192      	asrs	r2, r2, #6
 8001f58:	17db      	asrs	r3, r3, #31
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	4413      	add	r3, r2
 8001f60:	623b      	str	r3, [r7, #32]


    if (i > pid->i_max){
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dd03      	ble.n	8001f74 <pid_calc+0xa0>
        i = pid->i_max;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	e00a      	b.n	8001f8a <pid_calc+0xb6>
    }else if (i < pid->i_min){
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	da05      	bge.n	8001f8a <pid_calc+0xb6>
        i = pid->i_min;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	623b      	str	r3, [r7, #32]
        pid->sum = i;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    };

    pid->i_val = i >> pid->f;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f90:	461a      	mov	r2, r3
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	fa43 f202 	asr.w	r2, r3, r2
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	611a      	str	r2, [r3, #16]

    // Wartosc czlonu rozniczkujacego to iloczyn wspolczynnika pomnozony przez zmiane uchyba (de) oraz
    // pomnozony przez iloraz 1 i stalej czasowej rozniczkowania ( w tym wypadku mozna zapisac po prostu
    // jako dzielenie przez stala czasowa)
    d = (pid->d * (e - pid->e_last))/pid->dt_ms;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fa4:	6979      	ldr	r1, [r7, #20]
 8001fa6:	1a8a      	subs	r2, r1, r2
 8001fa8:	fb02 f203 	mul.w	r2, r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fb4:	61fb      	str	r3, [r7, #28]

    if (d > pid->d_max){
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dd03      	ble.n	8001fc8 <pid_calc+0xf4>
    	d = pid->d_max;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e007      	b.n	8001fd8 <pid_calc+0x104>
    }else if (d < pid->d_min){
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	da02      	bge.n	8001fd8 <pid_calc+0x104>
    	d = pid->d_min;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	61fb      	str	r3, [r7, #28]
    };


    pid->d_val = d >> pid->f;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	fa43 f202 	asr.w	r2, r3, r2
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	615a      	str	r2, [r3, #20]


    total = p + i + d;
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	4413      	add	r3, r2
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]

    if (total > pid->total_max)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dd03      	ble.n	8002008 <pid_calc+0x134>
        total = pid->total_max;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e007      	b.n	8002018 <pid_calc+0x144>
    else if (total < pid->total_min)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	429a      	cmp	r2, r3
 8002010:	da02      	bge.n	8002018 <pid_calc+0x144>
        total = pid->total_min;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	61bb      	str	r3, [r7, #24]

    pid->control = total >> pid->f;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201e:	461a      	mov	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa43 f202 	asr.w	r2, r3, r2
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	651a      	str	r2, [r3, #80]	; 0x50
    pid->e_last = e;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40

    return pid->control;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8002034:	4618      	mov	r0, r3
 8002036:	372c      	adds	r7, #44	; 0x2c
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <pid_scale>:




int32_t pid_scale(cpid_t * pid, float v)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	ed87 0a00 	vstr	s0, [r7]
    return v * pid->power;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800205c:	edd7 7a00 	vldr	s15, [r7]
 8002060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002068:	ee17 3a90 	vmov	r3, s15
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_MspInit+0x4c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_MspInit+0x4c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_ADC_MspInit+0x110>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d171      	bne.n	80021ce <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_ADC_MspInit+0x114>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <HAL_ADC_MspInit+0x114>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_ADC_MspInit+0x114>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_ADC_MspInit+0x114>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a33      	ldr	r2, [pc, #204]	; (80021dc <HAL_ADC_MspInit+0x114>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_ADC_MspInit+0x114>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_ADC_MspInit+0x114>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <HAL_ADC_MspInit+0x114>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_ADC_MspInit+0x114>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_batt_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin
 800213e:	233d      	movs	r3, #61	; 0x3d
 8002140:	617b      	str	r3, [r7, #20]
                          |PT_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002142:	2303      	movs	r3, #3
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4823      	ldr	r0, [pc, #140]	; (80021e0 <HAL_ADC_MspInit+0x118>)
 8002152:	f006 ff51 	bl	8008ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KTIR_1_Pin;
 8002156:	2320      	movs	r3, #32
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215a:	2303      	movs	r3, #3
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KTIR_1_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	481e      	ldr	r0, [pc, #120]	; (80021e4 <HAL_ADC_MspInit+0x11c>)
 800216a:	f006 ff45 	bl	8008ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_ADC_MspInit+0x124>)
 8002172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002194:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 8002198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021b4:	f006 fb90 	bl	80088d8 <HAL_DMA_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80021be:	f7ff fdf7 	bl	8001db0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_ADC_MspInit+0x120>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40012000 	.word	0x40012000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020800 	.word	0x40020800
 80021e8:	20000a28 	.word	0x20000a28
 80021ec:	40026410 	.word	0x40026410

080021f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_I2C_MspInit+0x84>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12c      	bne.n	800226c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_I2C_MspInit+0x88>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800222e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002240:	2304      	movs	r3, #4
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <HAL_I2C_MspInit+0x8c>)
 800224c:	f006 fed4 	bl	8008ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_I2C_MspInit+0x88>)
 800225a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_I2C_MspInit+0x88>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40005400 	.word	0x40005400
 8002278:	40023800 	.word	0x40023800
 800227c:	40020400 	.word	0x40020400

08002280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_SPI_MspInit+0x84>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12b      	bne.n	80022fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_SPI_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80022da:	2338      	movs	r3, #56	; 0x38
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ea:	2305      	movs	r3, #5
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_SPI_MspInit+0x8c>)
 80022f6:	f006 fe7f 	bl	8008ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013000 	.word	0x40013000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400

08002310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <HAL_TIM_Base_MspInit+0xc8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d11e      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2019      	movs	r0, #25
 8002344:	f006 fa91 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002348:	2019      	movs	r0, #25
 800234a:	f006 faaa 	bl	80088a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	201a      	movs	r0, #26
 8002354:	f006 fa89 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002358:	201a      	movs	r0, #26
 800235a:	f006 faa2 	bl	80088a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800235e:	e036      	b.n	80023ce <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM10)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d116      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2019      	movs	r0, #25
 800238c:	f006 fa6d 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002390:	2019      	movs	r0, #25
 8002392:	f006 fa86 	bl	80088a2 <HAL_NVIC_EnableIRQ>
}
 8002396:	e01a      	b.n	80023ce <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM11)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_TIM_Base_MspInit+0xd4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d115      	bne.n	80023ce <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_TIM_Base_MspInit+0xcc>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	201a      	movs	r0, #26
 80023c4:	f006 fa51 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023c8:	201a      	movs	r0, #26
 80023ca:	f006 fa6a 	bl	80088a2 <HAL_NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800

080023e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d135      	bne.n	8002476 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC_L_B_Pin|ENC_L_A_Pin;
 8002442:	f248 0302 	movw	r3, #32770	; 0x8002
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002454:	2301      	movs	r3, #1
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	4821      	ldr	r0, [pc, #132]	; (80024e4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002460:	f006 fdca 	bl	8008ff8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	201c      	movs	r0, #28
 800246a:	f006 f9fe 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800246e:	201c      	movs	r0, #28
 8002470:	f006 fa17 	bl	80088a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002474:	e030      	b.n	80024d8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_TIM_Encoder_MspInit+0x100>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d12b      	bne.n	80024d8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6313      	str	r3, [r2, #48]	; 0x30
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 80024b8:	23c0      	movs	r3, #192	; 0xc0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80024d4:	f006 fd90 	bl	8008ff8 <HAL_GPIO_Init>
}
 80024d8:	bf00      	nop
 80024da:	3730      	adds	r7, #48	; 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40000400 	.word	0x40000400

080024ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIM_MspPostInit+0x68>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d11e      	bne.n	800254c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_TIM_MspPostInit+0x6c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 800252a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800253c:	2301      	movs	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_TIM_MspPostInit+0x70>)
 8002548:	f006 fd56 	bl	8008ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40020000 	.word	0x40020000

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	; 0x30
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 031c 	add.w	r3, r7, #28
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_UART_MspInit+0xf8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d134      	bne.n	80025ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_UART_MspInit+0xfc>)
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_UART_MspInit+0xfc>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_UART_MspInit+0xfc>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_UART_MspInit+0xfc>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_TO_BT_Pin|RX_FROM_BT_Pin;
 80025ba:	23c0      	movs	r3, #192	; 0xc0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ca:	2307      	movs	r3, #7
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4822      	ldr	r0, [pc, #136]	; (8002660 <HAL_UART_MspInit+0x100>)
 80025d6:	f006 fd0f 	bl	8008ff8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2025      	movs	r0, #37	; 0x25
 80025e0:	f006 f943 	bl	800886a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025e4:	2025      	movs	r0, #37	; 0x25
 80025e6:	f006 f95c 	bl	80088a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025ea:	e030      	b.n	800264e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_UART_MspInit+0x104>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_UART_MspInit+0xfc>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <HAL_UART_MspInit+0xfc>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_UART_MspInit+0xfc>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_TO_DEBUG_Pin|RX_FROM_DEBUG_Pin;
 800262e:	23c0      	movs	r3, #192	; 0xc0
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800263e:	2308      	movs	r3, #8
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4807      	ldr	r0, [pc, #28]	; (8002668 <HAL_UART_MspInit+0x108>)
 800264a:	f006 fcd5 	bl	8008ff8 <HAL_GPIO_Init>
}
 800264e:	bf00      	nop
 8002650:	3730      	adds	r7, #48	; 0x30
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40011000 	.word	0x40011000
 800265c:	40023800 	.word	0x40023800
 8002660:	40020400 	.word	0x40020400
 8002664:	40011400 	.word	0x40011400
 8002668:	40020800 	.word	0x40020800

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267e:	e7fe      	b.n	800267e <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler+0x4>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler+0x4>

08002692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c0:	f005 fbd0 	bl	8007e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f006 fe49 	bl	8009364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80026da:	2002      	movs	r0, #2
 80026dc:	f006 fe42 	bl	8009364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80026e8:	2004      	movs	r0, #4
 80026ea:	f006 fe3b 	bl	8009364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80026fa:	f008 fbf4 	bl	800aee6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80026fe:	4803      	ldr	r0, [pc, #12]	; (800270c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002700:	f008 fbf1 	bl	800aee6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000a94 	.word	0x20000a94
 800270c:	20000848 	.word	0x20000848

08002710 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002716:	f008 fbe6 	bl	800aee6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800271c:	f008 fbe3 	bl	800aee6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000a94 	.word	0x20000a94
 8002728:	200009e8 	.word	0x200009e8

0800272c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM2_IRQHandler+0x10>)
 8002732:	f008 fbd8 	bl	800aee6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000bc4 	.word	0x20000bc4

08002740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <USART1_IRQHandler+0x10>)
 8002746:	f009 fb59 	bl	800bdfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200009a8 	.word	0x200009a8

08002754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002758:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800275c:	f006 fe02 	bl	8009364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <DMA2_Stream0_IRQHandler+0x10>)
 800276a:	f006 f9dd 	bl	8008b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000a28 	.word	0x20000a28

08002778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e00a      	b.n	80027a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800278a:	f3af 8000 	nop.w
 800278e:	4601      	mov	r1, r0
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	b2ca      	uxtb	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dbf0      	blt.n	800278a <_read+0x12>
	}

return len;
 80027a8:	687b      	ldr	r3, [r7, #4]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return -1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027da:	605a      	str	r2, [r3, #4]
	return 0;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_isatty>:

int _isatty(int file)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	return 1;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f00a f8be 	bl	800c9cc <__errno>
 8002850:	4602      	mov	r2, r0
 8002852:	230c      	movs	r3, #12
 8002854:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20020000 	.word	0x20020000
 800287c:	00000400 	.word	0x00000400
 8002880:	20000368 	.word	0x20000368
 8002884:	20000c50 	.word	0x20000c50

08002888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <SystemInit+0x28>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <SystemInit+0x28>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SystemInit+0x28>)
 800289e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a2:	609a      	str	r2, [r3, #8]
#endif
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f001 fcd8 	bl	800427a <VL53L0X_get_offset_calibration_data_micro_meter>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	218a      	movs	r1, #138	; 0x8a
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f004 ffdf 	bl	80078b8 <VL53L0X_WrByte>
 80028fa:	4603      	mov	r3, r0
 80028fc:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b096      	sub	sp, #88	; 0x58
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800291a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002922:	2200      	movs	r2, #0
 8002924:	2188      	movs	r1, #136	; 0x88
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f004 ffc6 	bl	80078b8 <VL53L0X_WrByte>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002940:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800294a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a9e      	ldr	r2, [pc, #632]	; (8002bcc <VL53L0X_DataInit+0x2c0>)
 8002952:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a9d      	ldr	r2, [pc, #628]	; (8002bd0 <VL53L0X_DataInit+0x2c4>)
 800295a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fab4 	bl	8002ed8 <VL53L0X_GetDeviceParameters>
 8002970:	4603      	mov	r3, r0
 8002972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002976:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800297a:	2b00      	cmp	r3, #0
 800297c:	d112      	bne.n	80029a4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800297e:	2300      	movs	r3, #0
 8002980:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002982:	2300      	movs	r3, #0
 8002984:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f103 0410 	add.w	r4, r3, #16
 800298c:	f107 0510 	add.w	r5, r7, #16
 8002990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800299a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2264      	movs	r2, #100	; 0x64
 80029a8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f44f 7261 	mov.w	r2, #900	; 0x384
 80029b2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80029c6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80029d2:	2201      	movs	r2, #1
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f004 ff6e 	bl	80078b8 <VL53L0X_WrByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80029ea:	2201      	movs	r2, #1
 80029ec:	21ff      	movs	r1, #255	; 0xff
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f004 ff62 	bl	80078b8 <VL53L0X_WrByte>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f004 ff56 	bl	80078b8 <VL53L0X_WrByte>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002a1a:	f107 030f 	add.w	r3, r7, #15
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2191      	movs	r1, #145	; 0x91
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 ffce 	bl	80079c4 <VL53L0X_RdByte>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2100      	movs	r1, #0
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f004 ff38 	bl	80078b8 <VL53L0X_WrByte>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a56:	2200      	movs	r2, #0
 8002a58:	21ff      	movs	r1, #255	; 0xff
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f004 ff2c 	bl	80078b8 <VL53L0X_WrByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 ff20 	bl	80078b8 <VL53L0X_WrByte>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002a86:	2300      	movs	r3, #0
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
 8002a8a:	e014      	b.n	8002ab6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002a8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d114      	bne.n	8002abe <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fd43 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	dde7      	ble.n	8002a8c <VL53L0X_DataInit+0x180>
 8002abc:	e000      	b.n	8002ac0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002abe:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002ac0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2102      	movs	r1, #2
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fd2b 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002ad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fd1f 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002af0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002af8:	2200      	movs	r2, #0
 8002afa:	2104      	movs	r1, #4
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fd13 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002b08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002b10:	2200      	movs	r2, #0
 8002b12:	2105      	movs	r1, #5
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fd07 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002b20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b28:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fdaa 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002b3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b46:	2101      	movs	r1, #1
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fd9d 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b5c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002b60:	2102      	movs	r1, #2
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fd90 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002b76:	2200      	movs	r2, #0
 8002b78:	2103      	movs	r1, #3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fd84 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	2101      	movs	r1, #1
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f004 fe8c 	bl	80078b8 <VL53L0X_WrByte>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002bae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002bbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3758      	adds	r7, #88	; 0x58
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	00016b85 	.word	0x00016b85
 8002bd0:	000970a4 	.word	0x000970a4

08002bd4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b09e      	sub	sp, #120	; 0x78
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f00a f901 	bl	800cdf2 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002c10:	2101      	movs	r1, #1
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f002 fa87 	bl	8005126 <VL53L0X_get_info_from_device>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d80d      	bhi.n	8002c54 <VL53L0X_StaticInit+0x80>
 8002c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d806      	bhi.n	8002c54 <VL53L0X_StaticInit+0x80>
 8002c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10e      	bne.n	8002c6c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d90b      	bls.n	8002c6c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002c54:	f107 0218 	add.w	r2, r7, #24
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f001 fd06 	bl	8004670 <VL53L0X_perform_ref_spad_management>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002c6a:	e009      	b.n	8002c80 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c70:	461a      	mov	r2, r3
 8002c72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f001 ff07 	bl	8004a88 <VL53L0X_set_reference_spads>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002c80:	4b94      	ldr	r3, [pc, #592]	; (8002ed4 <VL53L0X_StaticInit+0x300>)
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002c84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002c92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002c96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ca6:	e001      	b.n	8002cac <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002ca8:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <VL53L0X_StaticInit+0x300>)
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002cac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002cb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f003 fdda 	bl	8006870 <VL53L0X_load_tuning_settings>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002cc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2304      	movs	r3, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 f8ff 	bl	8003ed8 <VL53L0X_SetGpioConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ce0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d121      	bne.n	8002d2c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	21ff      	movs	r1, #255	; 0xff
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f004 fde3 	bl	80078b8 <VL53L0X_WrByte>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002cf8:	f107 031a 	add.w	r3, r7, #26
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2184      	movs	r1, #132	; 0x84
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f004 fe80 	bl	8007a06 <VL53L0X_RdWord>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d14:	2200      	movs	r2, #0
 8002d16:	21ff      	movs	r1, #255	; 0xff
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f004 fdcd 	bl	80078b8 <VL53L0X_WrByte>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002d34:	8b7b      	ldrh	r3, [r7, #26]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002d40:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d108      	bne.n	8002d5a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8c2 	bl	8002ed8 <VL53L0X_GetDeviceParameters>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002d5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d110      	bne.n	8002d84 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002d62:	f107 0319 	add.w	r3, r7, #25
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f9a0 	bl	80030ae <VL53L0X_GetFractionEnable>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002d74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002d7c:	7e7a      	ldrb	r2, [r7, #25]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002d84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10e      	bne.n	8002daa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 0410 	add.w	r4, r3, #16
 8002d92:	f107 051c 	add.w	r5, r7, #28
 8002d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002daa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d111      	bne.n	8002dd6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002db2:	f107 0319 	add.w	r3, r7, #25
 8002db6:	461a      	mov	r2, r3
 8002db8:	2101      	movs	r1, #1
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f004 fe02 	bl	80079c4 <VL53L0X_RdByte>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002dc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002dce:	7e7a      	ldrb	r2, [r7, #25]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002dd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9d8 	bl	8003198 <VL53L0X_SetSequenceStepEnable>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002dee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002df6:	2200      	movs	r2, #0
 8002df8:	2102      	movs	r1, #2
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9cc 	bl	8003198 <VL53L0X_SetSequenceStepEnable>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002e06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002e1e:	f107 0313 	add.w	r3, r7, #19
 8002e22:	461a      	mov	r2, r3
 8002e24:	2100      	movs	r1, #0
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f99e 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002e3a:	7cfa      	ldrb	r2, [r7, #19]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002e4a:	f107 0313 	add.w	r3, r7, #19
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2101      	movs	r1, #1
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f988 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002e66:	7cfa      	ldrb	r2, [r7, #19]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f002 fed2 	bl	8005c28 <get_sequence_step_timeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f002 febc 	bl	8005c28 <get_sequence_step_timeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002eb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ec6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3770      	adds	r7, #112	; 0x70
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200001bc 	.word	0x200001bc

08002ed8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8cc 	bl	8003088 <VL53L0X_GetDeviceMode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	3308      	adds	r3, #8
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa94 	bl	8003430 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3310      	adds	r3, #16
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 faca 	bl	80034c2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fcb7 	bl	80028b4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d134      	bne.n	8002fbc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	e02a      	b.n	8002fae <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d12a      	bne.n	8002fb6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	b299      	uxth	r1, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3308      	adds	r3, #8
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	461a      	mov	r2, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fbea 	bl	800374c <VL53L0X_GetLimitCheckValue>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d117      	bne.n	8002fba <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3318      	adds	r3, #24
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	461a      	mov	r2, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fb51 	bl	8003640 <VL53L0X_GetLimitCheckEnable>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	ddd1      	ble.n	8002f58 <VL53L0X_GetDeviceParameters+0x80>
 8002fb4:	e002      	b.n	8002fbc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002fba:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	333c      	adds	r3, #60	; 0x3c
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fc4c 	bl	8003868 <VL53L0X_GetWrapAroundCheckEnable>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f895 	bl	8003112 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2b15      	cmp	r3, #21
 800300c:	d832      	bhi.n	8003074 <VL53L0X_SetDeviceMode+0x7c>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <VL53L0X_SetDeviceMode+0x1c>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	0800306d 	.word	0x0800306d
 8003018:	0800306d 	.word	0x0800306d
 800301c:	08003075 	.word	0x08003075
 8003020:	0800306d 	.word	0x0800306d
 8003024:	08003075 	.word	0x08003075
 8003028:	08003075 	.word	0x08003075
 800302c:	08003075 	.word	0x08003075
 8003030:	08003075 	.word	0x08003075
 8003034:	08003075 	.word	0x08003075
 8003038:	08003075 	.word	0x08003075
 800303c:	08003075 	.word	0x08003075
 8003040:	08003075 	.word	0x08003075
 8003044:	08003075 	.word	0x08003075
 8003048:	08003075 	.word	0x08003075
 800304c:	08003075 	.word	0x08003075
 8003050:	08003075 	.word	0x08003075
 8003054:	08003075 	.word	0x08003075
 8003058:	08003075 	.word	0x08003075
 800305c:	08003075 	.word	0x08003075
 8003060:	08003075 	.word	0x08003075
 8003064:	0800306d 	.word	0x0800306d
 8003068:	0800306d 	.word	0x0800306d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	741a      	strb	r2, [r3, #16]
		break;
 8003072:	e001      	b.n	8003078 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003074:	23f8      	movs	r3, #248	; 0xf8
 8003076:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7c1a      	ldrb	r2, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	2109      	movs	r1, #9
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f004 fc7f 	bl	80079c4 <VL53L0X_RdByte>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80030e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f003 fa26 	bl	800654e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f003 faf3 	bl	800670e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800312c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
 8003144:	4613      	mov	r3, r2
 8003146:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800314c:	78ba      	ldrb	r2, [r7, #2]
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f002 ff3b 	bl	8005fce <VL53L0X_set_vcsel_pulse_period>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	460b      	mov	r3, r1
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4619      	mov	r1, r3
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f003 f9ad 	bl	80064e0 <VL53L0X_get_vcsel_pulse_period>
 8003186:	4603      	mov	r3, r0
 8003188:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800318a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
 80031a4:	4613      	mov	r3, r2
 80031a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80031b4:	f107 030f 	add.w	r3, r7, #15
 80031b8:	461a      	mov	r2, r3
 80031ba:	2101      	movs	r1, #1
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f004 fc01 	bl	80079c4 <VL53L0X_RdByte>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80031ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d15a      	bne.n	8003288 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80031d2:	78bb      	ldrb	r3, [r7, #2]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d12b      	bne.n	8003230 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d825      	bhi.n	800322a <VL53L0X_SetSequenceStepEnable+0x92>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f9 	.word	0x080031f9
 80031e8:	08003203 	.word	0x08003203
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	08003217 	.word	0x08003217
 80031f4:	08003221 	.word	0x08003221
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80031f8:	7dbb      	ldrb	r3, [r7, #22]
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	75bb      	strb	r3, [r7, #22]
				break;
 8003200:	e043      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003202:	7dbb      	ldrb	r3, [r7, #22]
 8003204:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003208:	75bb      	strb	r3, [r7, #22]
				break;
 800320a:	e03e      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800320c:	7dbb      	ldrb	r3, [r7, #22]
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	75bb      	strb	r3, [r7, #22]
				break;
 8003214:	e039      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003216:	7dbb      	ldrb	r3, [r7, #22]
 8003218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321c:	75bb      	strb	r3, [r7, #22]
				break;
 800321e:	e034      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003220:	7dbb      	ldrb	r3, [r7, #22]
 8003222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003226:	75bb      	strb	r3, [r7, #22]
				break;
 8003228:	e02f      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800322a:	23fc      	movs	r3, #252	; 0xfc
 800322c:	75fb      	strb	r3, [r7, #23]
 800322e:	e02c      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	2b04      	cmp	r3, #4
 8003234:	d825      	bhi.n	8003282 <VL53L0X_SetSequenceStepEnable+0xea>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003251 	.word	0x08003251
 8003240:	0800325b 	.word	0x0800325b
 8003244:	08003265 	.word	0x08003265
 8003248:	0800326f 	.word	0x0800326f
 800324c:	08003279 	.word	0x08003279
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003250:	7dbb      	ldrb	r3, [r7, #22]
 8003252:	f023 0310 	bic.w	r3, r3, #16
 8003256:	75bb      	strb	r3, [r7, #22]
				break;
 8003258:	e017      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800325a:	7dbb      	ldrb	r3, [r7, #22]
 800325c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003260:	75bb      	strb	r3, [r7, #22]
				break;
 8003262:	e012      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003264:	7dbb      	ldrb	r3, [r7, #22]
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	75bb      	strb	r3, [r7, #22]
				break;
 800326c:	e00d      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800326e:	7dbb      	ldrb	r3, [r7, #22]
 8003270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003274:	75bb      	strb	r3, [r7, #22]
				break;
 8003276:	e008      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003278:	7dbb      	ldrb	r3, [r7, #22]
 800327a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327e:	75bb      	strb	r3, [r7, #22]
				break;
 8003280:	e003      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003282:	23fc      	movs	r3, #252	; 0xfc
 8003284:	75fb      	strb	r3, [r7, #23]
 8003286:	e000      	b.n	800328a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003288:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	7dba      	ldrb	r2, [r7, #22]
 800328e:	429a      	cmp	r2, r3
 8003290:	d01e      	beq.n	80032d0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003292:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d107      	bne.n	80032aa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800329a:	7dbb      	ldrb	r3, [r7, #22]
 800329c:	461a      	mov	r2, r3
 800329e:	2101      	movs	r1, #1
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f004 fb09 	bl	80078b8 <VL53L0X_WrByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80032aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7dba      	ldrb	r2, [r7, #22]
 80032b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80032ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff0e 	bl	80030ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80032d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	72fb      	strb	r3, [r7, #11]
 80032ea:	4613      	mov	r3, r2
 80032ec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d836      	bhi.n	800336c <sequence_step_enabled+0x90>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <sequence_step_enabled+0x28>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003319 	.word	0x08003319
 8003308:	0800332b 	.word	0x0800332b
 800330c:	0800333d 	.word	0x0800333d
 8003310:	0800334f 	.word	0x0800334f
 8003314:	08003361 	.word	0x08003361
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003318:	7abb      	ldrb	r3, [r7, #10]
 800331a:	111b      	asrs	r3, r3, #4
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	701a      	strb	r2, [r3, #0]
		break;
 8003328:	e022      	b.n	8003370 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800332a:	7abb      	ldrb	r3, [r7, #10]
 800332c:	10db      	asrs	r3, r3, #3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	701a      	strb	r2, [r3, #0]
		break;
 800333a:	e019      	b.n	8003370 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800333c:	7abb      	ldrb	r3, [r7, #10]
 800333e:	109b      	asrs	r3, r3, #2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	701a      	strb	r2, [r3, #0]
		break;
 800334c:	e010      	b.n	8003370 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800334e:	7abb      	ldrb	r3, [r7, #10]
 8003350:	119b      	asrs	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	701a      	strb	r2, [r3, #0]
		break;
 800335e:	e007      	b.n	8003370 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003360:	7abb      	ldrb	r3, [r7, #10]
 8003362:	09db      	lsrs	r3, r3, #7
 8003364:	b2da      	uxtb	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	701a      	strb	r2, [r3, #0]
		break;
 800336a:	e001      	b.n	8003370 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800336c:	23fc      	movs	r3, #252	; 0xfc
 800336e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003392:	f107 030e 	add.w	r3, r7, #14
 8003396:	461a      	mov	r2, r3
 8003398:	2101      	movs	r1, #1
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f004 fb12 	bl	80079c4 <VL53L0X_RdByte>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80033a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80033ac:	7bba      	ldrb	r2, [r7, #14]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2100      	movs	r1, #0
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ff92 	bl	80032dc <sequence_step_enabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80033bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d108      	bne.n	80033d6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80033c4:	7bba      	ldrb	r2, [r7, #14]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	3302      	adds	r3, #2
 80033ca:	2101      	movs	r1, #1
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff85 	bl	80032dc <sequence_step_enabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80033de:	7bba      	ldrb	r2, [r7, #14]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	2102      	movs	r1, #2
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff78 	bl	80032dc <sequence_step_enabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80033f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80033f8:	7bba      	ldrb	r2, [r7, #14]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	3303      	adds	r3, #3
 80033fe:	2103      	movs	r1, #3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff6b 	bl	80032dc <sequence_step_enabled>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003412:	7bba      	ldrb	r2, [r7, #14]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	3304      	adds	r3, #4
 8003418:	2104      	movs	r1, #4
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff5e 	bl	80032dc <sequence_step_enabled>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	461a      	mov	r2, r3
 8003444:	21f8      	movs	r1, #248	; 0xf8
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f004 fadd 	bl	8007a06 <VL53L0X_RdWord>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d108      	bne.n	800346a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	461a      	mov	r2, r3
 800345e:	2104      	movs	r1, #4
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f004 faf1 	bl	8007a48 <VL53L0X_RdDWord>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10c      	bne.n	800348c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8003472:	89bb      	ldrh	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	89ba      	ldrh	r2, [r7, #12]
 800347c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800348c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7f1b      	ldrb	r3, [r3, #28]
 80034aa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	7bba      	ldrb	r2, [r7, #14]
 80034b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80034d0:	f107 030e 	add.w	r3, r7, #14
 80034d4:	461a      	mov	r2, r3
 80034d6:	2120      	movs	r1, #32
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f004 fa94 	bl	8007a06 <VL53L0X_RdWord>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80034e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	771a      	strb	r2, [r3, #28]
 8003502:	e00b      	b.n	800351c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800351c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d902      	bls.n	8003554 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800354e:	23fc      	movs	r3, #252	; 0xfc
 8003550:	75fb      	strb	r3, [r7, #23]
 8003552:	e05b      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	73bb      	strb	r3, [r7, #14]
 8003566:	e00a      	b.n	800357e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	330c      	adds	r3, #12
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d841      	bhi.n	8003608 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <VL53L0X_SetLimitCheckEnable+0x64>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035a5 	.word	0x080035a5
 8003590:	080035af 	.word	0x080035af
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035d9 	.word	0x080035d9
 80035a0:	080035f1 	.word	0x080035f1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80035ac:	e02e      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	2144      	movs	r1, #68	; 0x44
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f004 f99f 	bl	80078fc <VL53L0X_WrWord>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

			break;
 80035c2:	e023      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80035cc:	e01e      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80035d6:	e019      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80035d8:	7bbb      	ldrb	r3, [r7, #14]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80035de:	7b7b      	ldrb	r3, [r7, #13]
 80035e0:	22fe      	movs	r2, #254	; 0xfe
 80035e2:	2160      	movs	r1, #96	; 0x60
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 f9ab 	bl	8007940 <VL53L0X_UpdateByte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80035ee:	e00d      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80035f6:	7b7b      	ldrb	r3, [r7, #13]
 80035f8:	22ef      	movs	r2, #239	; 0xef
 80035fa:	2160      	movs	r1, #96	; 0x60
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f004 f99f 	bl	8007940 <VL53L0X_UpdateByte>
 8003602:	4603      	mov	r3, r0
 8003604:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003606:	e001      	b.n	800360c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003608:	23fc      	movs	r3, #252	; 0xfc
 800360a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800360c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10f      	bne.n	8003634 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003626:	e005      	b.n	8003634 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	460b      	mov	r3, r1
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003652:	897b      	ldrh	r3, [r7, #10]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d905      	bls.n	8003664 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003658:	23fc      	movs	r3, #252	; 0xfc
 800365a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e008      	b.n	8003676 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003664:	897b      	ldrh	r3, [r7, #10]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800366e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7dba      	ldrb	r2, [r7, #22]
 8003674:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800367a:	4618      	mov	r0, r3
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	460b      	mov	r3, r1
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80036a6:	7dbb      	ldrb	r3, [r7, #22]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	330c      	adds	r3, #12
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e040      	b.n	800373e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80036bc:	897b      	ldrh	r3, [r7, #10]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d830      	bhi.n	8003724 <VL53L0X_SetLimitCheckValue+0x9c>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <VL53L0X_SetLimitCheckValue+0x40>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036e1 	.word	0x080036e1
 80036cc:	080036e9 	.word	0x080036e9
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	08003707 	.word	0x08003707
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	0800370f 	.word	0x0800370f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80036e6:	e01f      	b.n	8003728 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	2144      	movs	r1, #68	; 0x44
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f004 f902 	bl	80078fc <VL53L0X_WrWord>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80036fc:	e014      	b.n	8003728 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003704:	e010      	b.n	8003728 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800370c:	e00c      	b.n	8003728 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f004 f8ef 	bl	80078fc <VL53L0X_WrWord>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003722:	e001      	b.n	8003728 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003724:	23fc      	movs	r3, #252	; 0xfc
 8003726:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003730:	897b      	ldrh	r3, [r7, #10]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	330c      	adds	r3, #12
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800373e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	460b      	mov	r3, r1
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800375a:	2300      	movs	r3, #0
 800375c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d847      	bhi.n	80037f8 <VL53L0X_GetLimitCheckValue+0xac>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <VL53L0X_GetLimitCheckValue+0x24>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003789 	.word	0x08003789
 8003774:	08003795 	.word	0x08003795
 8003778:	080037bb 	.word	0x080037bb
 800377c:	080037c7 	.word	0x080037c7
 8003780:	080037d3 	.word	0x080037d3
 8003784:	080037d3 	.word	0x080037d3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	77bb      	strb	r3, [r7, #30]
		break;
 8003792:	e033      	b.n	80037fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003794:	f107 0316 	add.w	r3, r7, #22
 8003798:	461a      	mov	r2, r3
 800379a:	2144      	movs	r1, #68	; 0x44
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f004 f932 	bl	8007a06 <VL53L0X_RdWord>
 80037a2:	4603      	mov	r3, r0
 80037a4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80037a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80037ae:	8afb      	ldrh	r3, [r7, #22]
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77bb      	strb	r3, [r7, #30]
		break;
 80037b8:	e020      	b.n	80037fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	77bb      	strb	r3, [r7, #30]
		break;
 80037c4:	e01a      	b.n	80037fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77bb      	strb	r3, [r7, #30]
		break;
 80037d0:	e014      	b.n	80037fc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80037d2:	f107 0316 	add.w	r3, r7, #22
 80037d6:	461a      	mov	r2, r3
 80037d8:	2164      	movs	r1, #100	; 0x64
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f004 f913 	bl	8007a06 <VL53L0X_RdWord>
 80037e0:	4603      	mov	r3, r0
 80037e2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80037e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	025b      	lsls	r3, r3, #9
 80037f0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77bb      	strb	r3, [r7, #30]
		break;
 80037f6:	e001      	b.n	80037fc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80037f8:	23fc      	movs	r3, #252	; 0xfc
 80037fa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12a      	bne.n	800385a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003804:	7fbb      	ldrb	r3, [r7, #30]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d124      	bne.n	8003854 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d110      	bne.n	8003832 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	330c      	adds	r3, #12
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003830:	e013      	b.n	800385a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003838:	897b      	ldrh	r3, [r7, #10]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	330c      	adds	r3, #12
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003852:	e002      	b.n	800385a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800385a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop

08003868 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003876:	f107 030e 	add.w	r3, r7, #14
 800387a:	461a      	mov	r2, r3
 800387c:	2101      	movs	r1, #1
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f004 f8a0 	bl	80079c4 <VL53L0X_RdByte>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10e      	bne.n	80038ae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003890:	7bba      	ldrb	r2, [r7, #14]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003898:	7bbb      	ldrb	r3, [r7, #14]
 800389a:	b25b      	sxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	da03      	bge.n	80038a8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e002      	b.n	80038ae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80038c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80038d8:	f107 030e 	add.w	r3, r7, #14
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fbd2 	bl	8003088 <VL53L0X_GetDeviceMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f898 	bl	8003a2c <VL53L0X_StartMeasurement>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 fb3f 	bl	8004f8c <VL53L0X_measurement_poll_for_completion>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800391a:	7bbb      	ldrb	r3, [r7, #14]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2203      	movs	r2, #3
 8003924:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003944:	2301      	movs	r3, #1
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 fae1 	bl	8004f12 <VL53L0X_perform_ref_calibration>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003976:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003978:	7dbb      	ldrb	r3, [r7, #22]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d005      	beq.n	800398a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800397e:	7dbb      	ldrb	r3, [r7, #22]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d002      	beq.n	800398a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003984:	7dbb      	ldrb	r3, [r7, #22]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d147      	bne.n	8003a1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	f107 0210 	add.w	r2, r7, #16
 8003992:	2101      	movs	r1, #1
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fbc3 	bl	8004120 <VL53L0X_GetInterruptThresholds>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80039a4:	d803      	bhi.n	80039ae <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80039a6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80039a8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80039ac:	d935      	bls.n	8003a1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80039ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d131      	bne.n	8003a1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80039bc:	491a      	ldr	r1, [pc, #104]	; (8003a28 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f002 ff56 	bl	8006870 <VL53L0X_load_tuning_settings>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]
 80039c8:	e027      	b.n	8003a1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80039ca:	2204      	movs	r2, #4
 80039cc:	21ff      	movs	r1, #255	; 0xff
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f003 ff72 	bl	80078b8 <VL53L0X_WrByte>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	4313      	orrs	r3, r2
 80039dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80039de:	2200      	movs	r2, #0
 80039e0:	2170      	movs	r1, #112	; 0x70
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f003 ff68 	bl	80078b8 <VL53L0X_WrByte>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80039f2:	2200      	movs	r2, #0
 80039f4:	21ff      	movs	r1, #255	; 0xff
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f003 ff5e 	bl	80078b8 <VL53L0X_WrByte>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f003 ff54 	bl	80078b8 <VL53L0X_WrByte>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000004 	.word	0x20000004

08003a2c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003a3c:	f107 030e 	add.w	r3, r7, #14
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fb20 	bl	8003088 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f003 ff33 	bl	80078b8 <VL53L0X_WrByte>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a56:	2201      	movs	r2, #1
 8003a58:	21ff      	movs	r1, #255	; 0xff
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f003 ff2c 	bl	80078b8 <VL53L0X_WrByte>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f003 ff25 	bl	80078b8 <VL53L0X_WrByte>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2191      	movs	r1, #145	; 0x91
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f003 ff1b 	bl	80078b8 <VL53L0X_WrByte>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003a86:	2201      	movs	r2, #1
 8003a88:	2100      	movs	r1, #0
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f003 ff14 	bl	80078b8 <VL53L0X_WrByte>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a94:	2200      	movs	r2, #0
 8003a96:	21ff      	movs	r1, #255	; 0xff
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f003 ff0d 	bl	80078b8 <VL53L0X_WrByte>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f003 ff06 	bl	80078b8 <VL53L0X_WrByte>
 8003aac:	4603      	mov	r3, r0
 8003aae:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d037      	beq.n	8003b26 <VL53L0X_StartMeasurement+0xfa>
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d04f      	beq.n	8003b5a <VL53L0X_StartMeasurement+0x12e>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d167      	bne.n	8003b8e <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f003 fef8 	bl	80078b8 <VL53L0X_WrByte>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d15d      	bne.n	8003b94 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8003ae2:	f107 030d 	add.w	r3, r7, #13
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2100      	movs	r1, #0
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f003 ff6a 	bl	80079c4 <VL53L0X_RdByte>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3301      	adds	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003afa:	7b7a      	ldrb	r2, [r7, #13]
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d107      	bne.n	8003b18 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8003b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b16:	d3e1      	bcc.n	8003adc <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b1e:	d339      	bcc.n	8003b94 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003b20:	23f9      	movs	r3, #249	; 0xf9
 8003b22:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003b24:	e036      	b.n	8003b94 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff15 	bl	8003960 <VL53L0X_CheckAndLoadInterruptSettings>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f003 feba 	bl	80078b8 <VL53L0X_WrByte>
 8003b44:	4603      	mov	r3, r0
 8003b46:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d123      	bne.n	8003b98 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2204      	movs	r2, #4
 8003b54:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003b58:	e01e      	b.n	8003b98 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003b62:	2101      	movs	r1, #1
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fefb 	bl	8003960 <VL53L0X_CheckAndLoadInterruptSettings>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003b6e:	2204      	movs	r2, #4
 8003b70:	2100      	movs	r1, #0
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f003 fea0 	bl	80078b8 <VL53L0X_WrByte>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003b8c:	e006      	b.n	8003b9c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003b8e:	23f8      	movs	r3, #248	; 0xf8
 8003b90:	75fb      	strb	r3, [r7, #23]
 8003b92:	e004      	b.n	8003b9e <VL53L0X_StartMeasurement+0x172>
		break;
 8003b94:	bf00      	nop
 8003b96:	e002      	b.n	8003b9e <VL53L0X_StartMeasurement+0x172>
		break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <VL53L0X_StartMeasurement+0x172>
		break;
 8003b9c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003bbe:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003bc0:	7bbb      	ldrb	r3, [r7, #14]
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d112      	bne.n	8003bec <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fb1d 	bl	800420c <VL53L0X_GetInterruptMaskStatus>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d103      	bne.n	8003be4 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e01c      	b.n	8003c1e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e018      	b.n	8003c1e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003bec:	f107 030d 	add.w	r3, r7, #13
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2114      	movs	r1, #20
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f003 fee5 	bl	80079c4 <VL53L0X_RdByte>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003c06:	7b7b      	ldrb	r3, [r7, #13]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b096      	sub	sp, #88	; 0x58
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003c3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c40:	230c      	movs	r3, #12
 8003c42:	2114      	movs	r1, #20
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f003 fe0e 	bl	8007866 <VL53L0X_ReadMulti>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003c50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 80d2 	bne.w	8003dfe <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003c66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003c82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	025b      	lsls	r3, r3, #9
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c9e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003ca0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003cde:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003cee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003cfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d00:	d047      	beq.n	8003d92 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003d02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d04:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003d10:	4a58      	ldr	r2, [pc, #352]	; (8003e74 <VL53L0X_GetRangingMeasurementData+0x248>)
 8003d12:	fb82 1203 	smull	r1, r2, r2, r3
 8003d16:	1192      	asrs	r2, r2, #6
 8003d18:	17db      	asrs	r3, r3, #31
 8003d1a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003d1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7f1b      	ldrb	r3, [r3, #28]
 8003d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02d      	beq.n	8003d92 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003d36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	121b      	asrs	r3, r3, #8
 8003d42:	461a      	mov	r2, r3
				if ((SignalRate
 8003d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10d      	bne.n	8003d66 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8003d4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8003d52:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003d56:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d5a:	e016      	b.n	8003d8a <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8003d5c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003d60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d64:	e011      	b.n	8003d8a <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003d66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d6c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003d70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d72:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003d7a:	121b      	asrs	r3, r3, #8
 8003d7c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003d86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003d8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003d92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003d9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003da6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	75da      	strb	r2, [r3, #23]
 8003db4:	e006      	b.n	8003dc4 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003dbc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003dc4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003dc8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003dcc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f003 f9f0 	bl	80071c0 <VL53L0X_get_pal_range_status>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003dee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003df6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003dfe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12f      	bne.n	8003e66 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f107 040c 	add.w	r4, r7, #12
 8003e0c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e18:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003e20:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003e2e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003e34:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003e3a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003e40:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003e46:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003e4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003e56:	f107 050c 	add.w	r5, r7, #12
 8003e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e66:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3750      	adds	r7, #80	; 0x50
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bdb0      	pop	{r4, r5, r7, pc}
 8003e72:	bf00      	nop
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003e86:	2100      	movs	r1, #0
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff f8b5 	bl	8002ff8 <VL53L0X_SetDeviceMode>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fd16 	bl	80038cc <VL53L0X_PerformSingleMeasurement>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff febc 	bl	8003c2c <VL53L0X_GetRangingMeasurementData>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f962 	bl	800418c <VL53L0X_ClearInterruptMask>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	70fb      	strb	r3, [r7, #3]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70bb      	strb	r3, [r7, #2]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003efc:	23f6      	movs	r3, #246	; 0xf6
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e107      	b.n	8004112 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003f02:	78bb      	ldrb	r3, [r7, #2]
 8003f04:	2b14      	cmp	r3, #20
 8003f06:	d110      	bne.n	8003f2a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003f08:	7e3b      	ldrb	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8003f0e:	2310      	movs	r3, #16
 8003f10:	73bb      	strb	r3, [r7, #14]
 8003f12:	e001      	b.n	8003f18 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2184      	movs	r1, #132	; 0x84
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f003 fcca 	bl	80078b8 <VL53L0X_WrByte>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e0f3      	b.n	8004112 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003f2a:	78bb      	ldrb	r3, [r7, #2]
 8003f2c:	2b15      	cmp	r3, #21
 8003f2e:	f040 8097 	bne.w	8004060 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003f32:	2201      	movs	r2, #1
 8003f34:	21ff      	movs	r1, #255	; 0xff
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f003 fcbe 	bl	80078b8 <VL53L0X_WrByte>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f003 fcb4 	bl	80078b8 <VL53L0X_WrByte>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	21ff      	movs	r1, #255	; 0xff
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f003 fcaa 	bl	80078b8 <VL53L0X_WrByte>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f003 fca0 	bl	80078b8 <VL53L0X_WrByte>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003f82:	2202      	movs	r2, #2
 8003f84:	2185      	movs	r1, #133	; 0x85
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f003 fc96 	bl	80078b8 <VL53L0X_WrByte>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003f96:	2204      	movs	r2, #4
 8003f98:	21ff      	movs	r1, #255	; 0xff
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f003 fc8c 	bl	80078b8 <VL53L0X_WrByte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003faa:	2200      	movs	r2, #0
 8003fac:	21cd      	movs	r1, #205	; 0xcd
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f003 fc82 	bl	80078b8 <VL53L0X_WrByte>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003fbe:	2211      	movs	r2, #17
 8003fc0:	21cc      	movs	r1, #204	; 0xcc
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f003 fc78 	bl	80078b8 <VL53L0X_WrByte>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	21ff      	movs	r1, #255	; 0xff
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f003 fc6e 	bl	80078b8 <VL53L0X_WrByte>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	21be      	movs	r1, #190	; 0xbe
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f003 fc64 	bl	80078b8 <VL53L0X_WrByte>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003ffa:	2206      	movs	r2, #6
 8003ffc:	21ff      	movs	r1, #255	; 0xff
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f003 fc5a 	bl	80078b8 <VL53L0X_WrByte>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	4313      	orrs	r3, r2
 800400c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800400e:	2209      	movs	r2, #9
 8004010:	21cc      	movs	r1, #204	; 0xcc
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f003 fc50 	bl	80078b8 <VL53L0X_WrByte>
 8004018:	4603      	mov	r3, r0
 800401a:	461a      	mov	r2, r3
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	4313      	orrs	r3, r2
 8004020:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004022:	2200      	movs	r2, #0
 8004024:	21ff      	movs	r1, #255	; 0xff
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f003 fc46 	bl	80078b8 <VL53L0X_WrByte>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	4313      	orrs	r3, r2
 8004034:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004036:	2201      	movs	r2, #1
 8004038:	21ff      	movs	r1, #255	; 0xff
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f003 fc3c 	bl	80078b8 <VL53L0X_WrByte>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	4313      	orrs	r3, r2
 8004048:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f003 fc32 	bl	80078b8 <VL53L0X_WrByte>
 8004054:	4603      	mov	r3, r0
 8004056:	461a      	mov	r2, r3
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	4313      	orrs	r3, r2
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e058      	b.n	8004112 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d121      	bne.n	80040ac <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004068:	787b      	ldrb	r3, [r7, #1]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d81b      	bhi.n	80040a6 <VL53L0X_SetGpioConfig+0x1ce>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <VL53L0X_SetGpioConfig+0x19c>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004089 	.word	0x08004089
 8004078:	0800408f 	.word	0x0800408f
 800407c:	08004095 	.word	0x08004095
 8004080:	0800409b 	.word	0x0800409b
 8004084:	080040a1 	.word	0x080040a1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004088:	2300      	movs	r3, #0
 800408a:	73bb      	strb	r3, [r7, #14]
				break;
 800408c:	e00f      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800408e:	2301      	movs	r3, #1
 8004090:	73bb      	strb	r3, [r7, #14]
				break;
 8004092:	e00c      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004094:	2302      	movs	r3, #2
 8004096:	73bb      	strb	r3, [r7, #14]
				break;
 8004098:	e009      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800409a:	2303      	movs	r3, #3
 800409c:	73bb      	strb	r3, [r7, #14]
				break;
 800409e:	e006      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80040a0:	2304      	movs	r3, #4
 80040a2:	73bb      	strb	r3, [r7, #14]
				break;
 80040a4:	e003      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80040a6:	23f5      	movs	r3, #245	; 0xf5
 80040a8:	73fb      	strb	r3, [r7, #15]
 80040aa:	e000      	b.n	80040ae <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80040ac:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	461a      	mov	r2, r3
 80040ba:	210a      	movs	r1, #10
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f003 fbfb 	bl	80078b8 <VL53L0X_WrByte>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80040ce:	7e3b      	ldrb	r3, [r7, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73bb      	strb	r3, [r7, #14]
 80040d8:	e001      	b.n	80040de <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80040da:	2310      	movs	r3, #16
 80040dc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80040de:	7bbb      	ldrb	r3, [r7, #14]
 80040e0:	22ef      	movs	r2, #239	; 0xef
 80040e2:	2184      	movs	r1, #132	; 0x84
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f003 fc2b 	bl	8007940 <VL53L0X_UpdateByte>
 80040ea:	4603      	mov	r3, r0
 80040ec:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80040ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	787a      	ldrb	r2, [r7, #1]
 80040fa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004106:	2100      	movs	r1, #0
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f83f 	bl	800418c <VL53L0X_ClearInterruptMask>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop

08004120 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	460b      	mov	r3, r1
 800412e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	461a      	mov	r2, r3
 800413a:	210e      	movs	r1, #14
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f003 fc62 	bl	8007a06 <VL53L0X_RdWord>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004146:	8abb      	ldrh	r3, [r7, #20]
 8004148:	045b      	lsls	r3, r3, #17
 800414a:	461a      	mov	r2, r3
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <VL53L0X_GetInterruptThresholds+0x68>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10f      	bne.n	800417c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	461a      	mov	r2, r3
 8004162:	210c      	movs	r1, #12
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f003 fc4e 	bl	8007a06 <VL53L0X_RdWord>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800416e:	8abb      	ldrh	r3, [r7, #20]
 8004170:	045b      	lsls	r3, r3, #17
 8004172:	461a      	mov	r2, r3
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <VL53L0X_GetInterruptThresholds+0x68>)
 8004176:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800417c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	1ffe0000 	.word	0x1ffe0000

0800418c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800419e:	2201      	movs	r2, #1
 80041a0:	210b      	movs	r1, #11
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f003 fb88 	bl	80078b8 <VL53L0X_WrByte>
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80041ac:	2200      	movs	r2, #0
 80041ae:	210b      	movs	r1, #11
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f003 fb81 	bl	80078b8 <VL53L0X_WrByte>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4313      	orrs	r3, r2
 80041be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80041c0:	f107 030d 	add.w	r3, r7, #13
 80041c4:	461a      	mov	r2, r3
 80041c6:	2113      	movs	r1, #19
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f003 fbfb 	bl	80079c4 <VL53L0X_RdByte>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	3301      	adds	r3, #1
 80041dc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80041de:	7b7b      	ldrb	r3, [r7, #13]
 80041e0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d803      	bhi.n	80041f6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0d3      	beq.n	800419e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80041fc:	23f4      	movs	r3, #244	; 0xf4
 80041fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800421a:	f107 030e 	add.w	r3, r7, #14
 800421e:	461a      	mov	r2, r3
 8004220:	2113      	movs	r1, #19
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f003 fbce 	bl	80079c4 <VL53L0X_RdByte>
 8004228:	4603      	mov	r3, r0
 800422a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004236:	7bbb      	ldrb	r3, [r7, #14]
 8004238:	f003 0318 	and.w	r3, r3, #24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004240:	23fa      	movs	r3, #250	; 0xfa
 8004242:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800425c:	2300      	movs	r3, #0
 800425e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fa03 	bl	8004670 <VL53L0X_perform_ref_spad_management>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800426e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004288:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800428c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800428e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004292:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	461a      	mov	r2, r3
 800429a:	2128      	movs	r1, #40	; 0x28
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f003 fbb2 	bl	8007a06 <VL53L0X_RdWord>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11e      	bne.n	80042ec <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80042ae:	893b      	ldrh	r3, [r7, #8]
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dd0b      	ble.n	80042dc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80042c4:	893a      	ldrh	r2, [r7, #8]
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	461a      	mov	r2, r3
					* 250;
 80042d0:	23fa      	movs	r3, #250	; 0xfa
 80042d2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e007      	b.n	80042ec <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	b21b      	sxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	23fa      	movs	r3, #250	; 0xfa
 80042e4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80042ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b08b      	sub	sp, #44	; 0x2c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004306:	2308      	movs	r3, #8
 8004308:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	fbb3 f2f2 	udiv	r2, r3, r2
 8004328:	69b9      	ldr	r1, [r7, #24]
 800432a:	fb01 f202 	mul.w	r2, r1, r2
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
 8004336:	e030      	b.n	800439a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	4413      	add	r3, r2
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	429a      	cmp	r2, r3
 800434c:	d11e      	bne.n	800438c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800434e:	7ffa      	ldrb	r2, [r7, #31]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	fa42 f303 	asr.w	r3, r2, r3
 8004356:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800435c:	e016      	b.n	800438c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800435e:	7ffb      	ldrb	r3, [r7, #31]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <get_next_good_spad+0x88>
				success = 1;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	fb02 f203 	mul.w	r2, r2, r3
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	4413      	add	r3, r2
 8004378:	461a      	mov	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	601a      	str	r2, [r3, #0]
				break;
 800437e:	e009      	b.n	8004394 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	3301      	adds	r3, #1
 800438a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	429a      	cmp	r2, r3
 8004392:	d3e4      	bcc.n	800435e <get_next_good_spad+0x66>
				coarseIndex++) {
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	3301      	adds	r3, #1
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800439a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d202      	bcs.n	80043a8 <get_next_good_spad+0xb0>
 80043a2:	7fbb      	ldrb	r3, [r7, #30]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0c7      	beq.n	8004338 <get_next_good_spad+0x40>
		}
	}
}
 80043a8:	bf00      	nop
 80043aa:	372c      	adds	r7, #44	; 0x2c
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <is_aperture+0x30>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <is_aperture+0x22>
		isAperture = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	200002b0 	.word	0x200002b0

080043e8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80043f8:	2308      	movs	r3, #8
 80043fa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	fbb3 f2f2 	udiv	r2, r3, r2
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	fb01 f202 	mul.w	r2, r1, r2
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004420:	23ce      	movs	r3, #206	; 0xce
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e010      	b.n	8004448 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4413      	add	r3, r2
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b25a      	sxtb	r2, r3
 8004430:	2101      	movs	r1, #1
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	b25b      	sxtb	r3, r3
 800443a:	4313      	orrs	r3, r2
 800443c:	b259      	sxtb	r1, r3
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	b2ca      	uxtb	r2, r1
 8004446:	701a      	strb	r2, [r3, #0]

	return status;
 8004448:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3724      	adds	r7, #36	; 0x24
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004462:	2306      	movs	r3, #6
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	21b0      	movs	r1, #176	; 0xb0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f003 f9d1 	bl	8007810 <VL53L0X_WriteMulti>
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004488:	2306      	movs	r3, #6
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	21b0      	movs	r1, #176	; 0xb0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f003 f9e9 	bl	8007866 <VL53L0X_ReadMulti>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80044be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	e02b      	b.n	8004520 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff11 	bl	80042f8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d103      	bne.n	80044e6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80044de:	23ce      	movs	r3, #206	; 0xce
 80044e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80044e4:	e020      	b.n	8004528 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	4413      	add	r3, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff60 	bl	80043b4 <is_aperture>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80044fe:	23ce      	movs	r3, #206	; 0xce
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004504:	e010      	b.n	8004528 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800450a:	6a3a      	ldr	r2, [r7, #32]
 800450c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f7ff ff6a 	bl	80043e8 <enable_spad_bit>
		currentSpad++;
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	3301      	adds	r3, #1
 8004518:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	3301      	adds	r3, #1
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	429a      	cmp	r2, r3
 8004526:	d3cf      	bcc.n	80044c8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800452e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff8d 	bl	8004458 <set_ref_spad_map>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004544:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004548:	2b00      	cmp	r3, #0
 800454a:	d121      	bne.n	8004590 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ff93 	bl	800447e <get_ref_spad_map>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004562:	e011      	b.n	8004588 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	4413      	add	r3, r2
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	f107 0114 	add.w	r1, r7, #20
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	440b      	add	r3, r1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d003      	beq.n	8004582 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800457a:	23ce      	movs	r3, #206	; 0xce
 800457c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004580:	e006      	b.n	8004590 <enable_ref_spads+0xec>
			}
			i++;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	429a      	cmp	r2, r3
 800458e:	d3e9      	bcc.n	8004564 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004590:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004594:	4618      	mov	r0, r3
 8004596:	3730      	adds	r7, #48	; 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80045b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80045bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80045c4:	22c0      	movs	r2, #192	; 0xc0
 80045c6:	2101      	movs	r1, #1
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f003 f975 	bl	80078b8 <VL53L0X_WrByte>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80045d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fc48 	bl	8003e78 <VL53L0X_PerformSingleRangingMeasurement>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80045ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80045f6:	2201      	movs	r2, #1
 80045f8:	21ff      	movs	r1, #255	; 0xff
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f003 f95c 	bl	80078b8 <VL53L0X_WrByte>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	21b6      	movs	r1, #182	; 0xb6
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f003 f9f7 	bl	8007a06 <VL53L0X_RdWord>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800461e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004626:	2200      	movs	r2, #0
 8004628:	21ff      	movs	r1, #255	; 0xff
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f003 f944 	bl	80078b8 <VL53L0X_WrByte>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004636:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800463a:	2b00      	cmp	r3, #0
 800463c:	d112      	bne.n	8004664 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800463e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004642:	461a      	mov	r2, r3
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f003 f936 	bl	80078b8 <VL53L0X_WrByte>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004660:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004664:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b09d      	sub	sp, #116	; 0x74
 8004674:	af06      	add	r7, sp, #24
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8004682:	23b4      	movs	r3, #180	; 0xb4
 8004684:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004688:	2303      	movs	r3, #3
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800468c:	232c      	movs	r3, #44	; 0x2c
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800469c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80046a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80046aa:	2306      	movs	r3, #6
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80046d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046da:	e009      	b.n	80046f0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80046ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ec:	3301      	adds	r3, #1
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3f1      	bcc.n	80046dc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046f8:	2201      	movs	r2, #1
 80046fa:	21ff      	movs	r1, #255	; 0xff
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f003 f8db 	bl	80078b8 <VL53L0X_WrByte>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004708:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004710:	2200      	movs	r2, #0
 8004712:	214f      	movs	r1, #79	; 0x4f
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f003 f8cf 	bl	80078b8 <VL53L0X_WrByte>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004720:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004728:	222c      	movs	r2, #44	; 0x2c
 800472a:	214e      	movs	r1, #78	; 0x4e
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f003 f8c3 	bl	80078b8 <VL53L0X_WrByte>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004738:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004740:	2200      	movs	r2, #0
 8004742:	21ff      	movs	r1, #255	; 0xff
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f003 f8b7 	bl	80078b8 <VL53L0X_WrByte>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004750:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004758:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800475c:	461a      	mov	r2, r3
 800475e:	21b6      	movs	r1, #182	; 0xb6
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f003 f8a9 	bl	80078b8 <VL53L0X_WrByte>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800476c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f003 f89d 	bl	80078b8 <VL53L0X_WrByte>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004784:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800478c:	f107 0210 	add.w	r2, r7, #16
 8004790:	f107 0111 	add.w	r1, r7, #17
 8004794:	2300      	movs	r3, #0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fbbb 	bl	8004f12 <VL53L0X_perform_ref_calibration>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80047a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d121      	bne.n	80047ee <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80047c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80047ca:	f107 0218 	add.w	r2, r7, #24
 80047ce:	9204      	str	r2, [sp, #16]
 80047d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047d6:	9202      	str	r2, [sp, #8]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4623      	mov	r3, r4
 80047e0:	4602      	mov	r2, r0
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fe5e 	bl	80044a4 <enable_ref_spads>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80047ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d174      	bne.n	80048e0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80047fa:	f107 0312 	add.w	r3, r7, #18
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff fecb 	bl	800459c <perform_ref_signal_measurement>
 8004806:	4603      	mov	r3, r0
 8004808:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800480c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004810:	2b00      	cmp	r3, #0
 8004812:	d161      	bne.n	80048d8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004814:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004816:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004818:	429a      	cmp	r2, r3
 800481a:	d25d      	bcs.n	80048d8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800481c:	2300      	movs	r3, #0
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004820:	e009      	b.n	8004836 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004826:	4413      	add	r3, r2
 8004828:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004832:	3301      	adds	r3, #1
 8004834:	64bb      	str	r3, [r7, #72]	; 0x48
 8004836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	429a      	cmp	r2, r3
 800483c:	d3f1      	bcc.n	8004822 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800483e:	e002      	b.n	8004846 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004842:	3301      	adds	r3, #1
 8004844:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004846:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800484a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484c:	4413      	add	r3, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fdb0 	bl	80043b4 <is_aperture>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800485a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	429a      	cmp	r2, r3
 8004860:	d3ee      	bcc.n	8004840 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004876:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800487a:	f107 0218 	add.w	r2, r7, #24
 800487e:	9204      	str	r2, [sp, #16]
 8004880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004882:	9203      	str	r2, [sp, #12]
 8004884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004886:	9202      	str	r2, [sp, #8]
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4623      	mov	r3, r4
 8004890:	4602      	mov	r2, r0
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fe06 	bl	80044a4 <enable_ref_spads>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800489e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11b      	bne.n	80048de <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80048aa:	f107 0312 	add.w	r3, r7, #18
 80048ae:	4619      	mov	r1, r3
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fe73 	bl	800459c <perform_ref_signal_measurement>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80048bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10c      	bne.n	80048de <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80048c4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80048c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d208      	bcs.n	80048de <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80048d6:	e002      	b.n	80048de <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	e000      	b.n	80048e0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80048de:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80048e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 80af 	bne.w	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80048ea:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80048ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048ee:	429a      	cmp	r2, r3
 80048f0:	f240 80aa 	bls.w	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004904:	f107 031c 	add.w	r3, r7, #28
 8004908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490a:	4618      	mov	r0, r3
 800490c:	f008 fa66 	bl	800cddc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004910:	8a7b      	ldrh	r3, [r7, #18]
 8004912:	461a      	mov	r2, r3
 8004914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfb8      	it	lt
 800491c:	425b      	neglt	r3, r3
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004926:	e086      	b.n	8004a36 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	f7ff fcdf 	bl	80042f8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d103      	bne.n	800494a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004942:	23ce      	movs	r3, #206	; 0xce
 8004944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004948:	e07e      	b.n	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800494a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fd2e 	bl	80043b4 <is_aperture>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004968:	e06e      	b.n	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	3301      	adds	r3, #1
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800497a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800497c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fd32 	bl	80043e8 <enable_spad_bit>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800498a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10c      	bne.n	80049ac <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004994:	3301      	adds	r3, #1
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800499e:	4619      	mov	r1, r3
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff fd59 	bl	8004458 <set_ref_spad_map>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80049ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d146      	bne.n	8004a42 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80049b4:	f107 0312 	add.w	r3, r7, #18
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff fdee 	bl	800459c <perform_ref_signal_measurement>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80049c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13b      	bne.n	8004a46 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80049ce:	8a7b      	ldrh	r3, [r7, #18]
 80049d0:	461a      	mov	r2, r3
 80049d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	425b      	neglt	r3, r3
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80049de:	8a7b      	ldrh	r3, [r7, #18]
 80049e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d21c      	bcs.n	8004a20 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d914      	bls.n	8004a18 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80049ee:	f107 031c 	add.w	r3, r7, #28
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff fd2f 	bl	8004458 <set_ref_spad_map>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004a06:	f107 011c 	add.w	r1, r7, #28
 8004a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f008 f9e5 	bl	800cddc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	3b01      	subs	r3, #1
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e00a      	b.n	8004a36 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004a2a:	f107 031c 	add.w	r3, r7, #28
 8004a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a30:	4618      	mov	r0, r3
 8004a32:	f008 f9d3 	bl	800cddc <memcpy>
		while (!complete) {
 8004a36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f43f af74 	beq.w	8004928 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004a40:	e002      	b.n	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004a46:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d115      	bne.n	8004a7c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a54:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004a5c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004a7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	375c      	adds	r7, #92	; 0x5c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}

08004a88 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b093      	sub	sp, #76	; 0x4c
 8004a8c:	af06      	add	r7, sp, #24
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004aa0:	23b4      	movs	r3, #180	; 0xb4
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004aaa:	232c      	movs	r3, #44	; 0x2c
 8004aac:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004aae:	2201      	movs	r2, #1
 8004ab0:	21ff      	movs	r1, #255	; 0xff
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f002 ff00 	bl	80078b8 <VL53L0X_WrByte>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004abe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	214f      	movs	r1, #79	; 0x4f
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f002 fef4 	bl	80078b8 <VL53L0X_WrByte>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004ad6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004ade:	222c      	movs	r2, #44	; 0x2c
 8004ae0:	214e      	movs	r1, #78	; 0x4e
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f002 fee8 	bl	80078b8 <VL53L0X_WrByte>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004aee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004af6:	2200      	movs	r2, #0
 8004af8:	21ff      	movs	r1, #255	; 0xff
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f002 fedc 	bl	80078b8 <VL53L0X_WrByte>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b12:	461a      	mov	r2, r3
 8004b14:	21b6      	movs	r1, #182	; 0xb6
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f002 fece 	bl	80078b8 <VL53L0X_WrByte>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e009      	b.n	8004b3c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	3301      	adds	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3f1      	bcc.n	8004b28 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004b4a:	e002      	b.n	8004b52 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	3301      	adds	r3, #1
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004b52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fc2a 	bl	80043b4 <is_aperture>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <VL53L0X_set_reference_spads+0xe6>
 8004b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d3ee      	bcc.n	8004b4c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b7e:	79f9      	ldrb	r1, [r7, #7]
 8004b80:	f107 0214 	add.w	r2, r7, #20
 8004b84:	9204      	str	r2, [sp, #16]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	9203      	str	r2, [sp, #12]
 8004b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8c:	9202      	str	r2, [sp, #8]
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4623      	mov	r3, r4
 8004b96:	4602      	mov	r2, r0
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fc83 	bl	80044a4 <enable_ref_spads>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10c      	bne.n	8004bc6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	79fa      	ldrb	r2, [r7, #7]
 8004bc2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004bc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3734      	adds	r7, #52	; 0x34
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f002 fe5e 	bl	80078b8 <VL53L0X_WrByte>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9bf 	bl	8004f8c <VL53L0X_measurement_poll_for_completion>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fab5 	bl	800418c <VL53L0X_ClearInterruptMask>
 8004c22:	4603      	mov	r3, r0
 8004c24:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2100      	movs	r1, #0
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f002 fe40 	bl	80078b8 <VL53L0X_WrByte>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	70fb      	strb	r3, [r7, #3]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	70bb      	strb	r3, [r7, #2]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	21ff      	movs	r1, #255	; 0xff
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f002 fe22 	bl	80078b8 <VL53L0X_WrByte>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 fe18 	bl	80078b8 <VL53L0X_WrByte>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c92:	2200      	movs	r2, #0
 8004c94:	21ff      	movs	r1, #255	; 0xff
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f002 fe0e 	bl	80078b8 <VL53L0X_WrByte>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004cac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d009      	beq.n	8004cc8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	21cb      	movs	r1, #203	; 0xcb
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f002 fe83 	bl	80079c4 <VL53L0X_RdByte>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02a      	beq.n	8004d26 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004cd0:	f107 030e 	add.w	r3, r7, #14
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	21ee      	movs	r1, #238	; 0xee
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f002 fe73 	bl	80079c4 <VL53L0X_RdByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e01d      	b.n	8004d26 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004cf2:	78bb      	ldrb	r3, [r7, #2]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	21cb      	movs	r1, #203	; 0xcb
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f002 fddd 	bl	80078b8 <VL53L0X_WrByte>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004d10:	787b      	ldrb	r3, [r7, #1]
 8004d12:	2280      	movs	r2, #128	; 0x80
 8004d14:	21ee      	movs	r1, #238	; 0xee
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 fe12 	bl	8007940 <VL53L0X_UpdateByte>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d26:	2201      	movs	r2, #1
 8004d28:	21ff      	movs	r1, #255	; 0xff
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 fdc4 	bl	80078b8 <VL53L0X_WrByte>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 fdba 	bl	80078b8 <VL53L0X_WrByte>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	21ff      	movs	r1, #255	; 0xff
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f002 fdb0 	bl	80078b8 <VL53L0X_WrByte>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	701a      	strb	r2, [r3, #0]

	return Status;
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b08a      	sub	sp, #40	; 0x28
 8004d7e:	af04      	add	r7, sp, #16
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	4611      	mov	r1, r2
 8004d86:	461a      	mov	r2, r3
 8004d88:	460b      	mov	r3, r1
 8004d8a:	71fb      	strb	r3, [r7, #7]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004da4:	79bb      	ldrb	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004db0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004db2:	2201      	movs	r2, #1
 8004db4:	2101      	movs	r1, #1
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f002 fd7e 	bl	80078b8 <VL53L0X_WrByte>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff01 	bl	8004bd2 <VL53L0X_perform_single_ref_calibration>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d115      	bne.n	8004e08 <VL53L0X_perform_vhv_calibration+0x8e>
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d112      	bne.n	8004e08 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004de2:	7d39      	ldrb	r1, [r7, #20]
 8004de4:	7d7a      	ldrb	r2, [r7, #21]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9303      	str	r3, [sp, #12]
 8004dea:	2301      	movs	r3, #1
 8004dec:	9302      	str	r3, [sp, #8]
 8004dee:	f107 0313 	add.w	r3, r7, #19
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff ff23 	bl	8004c48 <VL53L0X_ref_calibration_io>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]
 8004e06:	e002      	b.n	8004e0e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d112      	bne.n	8004e3c <VL53L0X_perform_vhv_calibration+0xc2>
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e1c:	7dbb      	ldrb	r3, [r7, #22]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2101      	movs	r1, #1
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f002 fd48 	bl	80078b8 <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	7dba      	ldrb	r2, [r7, #22]
 8004e38:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af04      	add	r7, sp, #16
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	71fb      	strb	r3, [r7, #7]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004e6e:	79bb      	ldrb	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004e7a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	2101      	movs	r1, #1
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f002 fd19 	bl	80078b8 <VL53L0X_WrByte>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004e92:	2100      	movs	r1, #0
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fe9c 	bl	8004bd2 <VL53L0X_perform_single_ref_calibration>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d115      	bne.n	8004ed2 <VL53L0X_perform_phase_calibration+0x8a>
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d112      	bne.n	8004ed2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004eac:	7d39      	ldrb	r1, [r7, #20]
 8004eae:	7d7a      	ldrb	r2, [r7, #21]
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	9303      	str	r3, [sp, #12]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	f107 0313 	add.w	r3, r7, #19
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff febe 	bl	8004c48 <VL53L0X_ref_calibration_io>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	75fb      	strb	r3, [r7, #23]
 8004ed0:	e002      	b.n	8004ed8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d112      	bne.n	8004f06 <VL53L0X_perform_phase_calibration+0xbe>
 8004ee0:	79bb      	ldrb	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00f      	beq.n	8004f06 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004ee6:	7dbb      	ldrb	r3, [r7, #22]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2101      	movs	r1, #1
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f002 fce3 	bl	80078b8 <VL53L0X_WrByte>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	7dba      	ldrb	r2, [r7, #22]
 8004f02:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004f2e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	2300      	movs	r3, #0
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff ff1f 	bl	8004d7a <VL53L0X_perform_vhv_calibration>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff ff7a 	bl	8004e48 <VL53L0X_perform_phase_calibration>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10f      	bne.n	8004f80 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f60:	7dbb      	ldrb	r3, [r7, #22]
 8004f62:	461a      	mov	r2, r3
 8004f64:	2101      	movs	r1, #1
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f002 fca6 	bl	80078b8 <VL53L0X_WrByte>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	7dba      	ldrb	r2, [r7, #22]
 8004f7c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004fa0:	f107 030f 	add.w	r3, r7, #15
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fe fdff 	bl	8003baa <VL53L0X_GetMeasurementDataReady>
 8004fac:	4603      	mov	r3, r0
 8004fae:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d110      	bne.n	8004fda <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d00f      	beq.n	8004fde <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004fca:	d302      	bcc.n	8004fd2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004fcc:	23f9      	movs	r3, #249	; 0xf9
 8004fce:	75fb      	strb	r3, [r7, #23]
			break;
 8004fd0:	e006      	b.n	8004fe0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 fd59 	bl	8007a8a <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004fd8:	e7e2      	b.n	8004fa0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004fde:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	4603      	mov	r3, r0
 800501a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005048:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800504a:	e002      	b.n	8005052 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d8f8      	bhi.n	800504c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800505a:	e017      	b.n	800508c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d30b      	bcc.n	8005080 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e002      	b.n	8005086 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	089b      	lsrs	r3, r3, #2
 800508a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e4      	bne.n	800505c <VL53L0X_isqrt+0x24>
	}

	return res;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80050ac:	2200      	movs	r2, #0
 80050ae:	2183      	movs	r1, #131	; 0x83
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 fc01 	bl	80078b8 <VL53L0X_WrByte>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	4313      	orrs	r3, r2
 80050be:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80050c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11e      	bne.n	8005106 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80050cc:	f107 030f 	add.w	r3, r7, #15
 80050d0:	461a      	mov	r2, r3
 80050d2:	2183      	movs	r1, #131	; 0x83
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f002 fc75 	bl	80079c4 <VL53L0X_RdByte>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <VL53L0X_device_read_strobe+0x5a>
 80050e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	3301      	adds	r3, #1
 80050f0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050f8:	d3e8      	bcc.n	80050cc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005100:	d301      	bcc.n	8005106 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005102:	23f9      	movs	r3, #249	; 0xf9
 8005104:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005106:	2201      	movs	r2, #1
 8005108:	2183      	movs	r1, #131	; 0x83
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f002 fbd4 	bl	80078b8 <VL53L0X_WrByte>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	4313      	orrs	r3, r2
 8005118:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800511a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b098      	sub	sp, #96	; 0x60
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005156:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800515a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800516e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005172:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005176:	2b07      	cmp	r3, #7
 8005178:	f000 8408 	beq.w	800598c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800517c:	2201      	movs	r2, #1
 800517e:	2180      	movs	r1, #128	; 0x80
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f002 fb99 	bl	80078b8 <VL53L0X_WrByte>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800518e:	4313      	orrs	r3, r2
 8005190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005194:	2201      	movs	r2, #1
 8005196:	21ff      	movs	r1, #255	; 0xff
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f002 fb8d 	bl	80078b8 <VL53L0X_WrByte>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80051ac:	2200      	movs	r2, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 fb81 	bl	80078b8 <VL53L0X_WrByte>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051be:	4313      	orrs	r3, r2
 80051c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80051c4:	2206      	movs	r2, #6
 80051c6:	21ff      	movs	r1, #255	; 0xff
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f002 fb75 	bl	80078b8 <VL53L0X_WrByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80051dc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80051e0:	461a      	mov	r2, r3
 80051e2:	2183      	movs	r1, #131	; 0x83
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f002 fbed 	bl	80079c4 <VL53L0X_RdByte>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80051f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051fc:	f043 0304 	orr.w	r3, r3, #4
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	2183      	movs	r1, #131	; 0x83
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 fb56 	bl	80078b8 <VL53L0X_WrByte>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005214:	4313      	orrs	r3, r2
 8005216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800521a:	2207      	movs	r2, #7
 800521c:	21ff      	movs	r1, #255	; 0xff
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f002 fb4a 	bl	80078b8 <VL53L0X_WrByte>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800522c:	4313      	orrs	r3, r2
 800522e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005232:	2201      	movs	r2, #1
 8005234:	2181      	movs	r1, #129	; 0x81
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f002 fb3e 	bl	80078b8 <VL53L0X_WrByte>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005244:	4313      	orrs	r3, r2
 8005246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f002 fc1d 	bl	8007a8a <VL53L0X_PollingDelay>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005258:	4313      	orrs	r3, r2
 800525a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800525e:	2201      	movs	r2, #1
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f002 fb28 	bl	80078b8 <VL53L0X_WrByte>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005270:	4313      	orrs	r3, r2
 8005272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8098 	beq.w	80053b2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005286:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 8091 	bne.w	80053b2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005290:	226b      	movs	r2, #107	; 0x6b
 8005292:	2194      	movs	r1, #148	; 0x94
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f002 fb0f 	bl	80078b8 <VL53L0X_WrByte>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fef9 	bl	80050a0 <VL53L0X_device_read_strobe>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80052bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052c0:	461a      	mov	r2, r3
 80052c2:	2190      	movs	r1, #144	; 0x90
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f002 fbbf 	bl	8007a48 <VL53L0X_RdDWord>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	0bdb      	lsrs	r3, r3, #15
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80052f4:	2224      	movs	r2, #36	; 0x24
 80052f6:	2194      	movs	r1, #148	; 0x94
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f002 fadd 	bl	80078b8 <VL53L0X_WrByte>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005306:	4313      	orrs	r3, r2
 8005308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fec7 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005312:	4603      	mov	r3, r0
 8005314:	461a      	mov	r2, r3
 8005316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800531a:	4313      	orrs	r3, r2
 800531c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005324:	461a      	mov	r2, r3
 8005326:	2190      	movs	r1, #144	; 0x90
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f002 fb8d 	bl	8007a48 <VL53L0X_RdDWord>
 800532e:	4603      	mov	r3, r0
 8005330:	461a      	mov	r2, r3
 8005332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005336:	4313      	orrs	r3, r2
 8005338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	b2db      	uxtb	r3, r3
 8005342:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	b2db      	uxtb	r3, r3
 800534a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b2db      	uxtb	r3, r3
 8005352:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	b2db      	uxtb	r3, r3
 8005358:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800535a:	2225      	movs	r2, #37	; 0x25
 800535c:	2194      	movs	r1, #148	; 0x94
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f002 faaa 	bl	80078b8 <VL53L0X_WrByte>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800536c:	4313      	orrs	r3, r2
 800536e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff fe94 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005378:	4603      	mov	r3, r0
 800537a:	461a      	mov	r2, r3
 800537c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005380:	4313      	orrs	r3, r2
 8005382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800538a:	461a      	mov	r2, r3
 800538c:	2190      	movs	r1, #144	; 0x90
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f002 fb5a 	bl	8007a48 <VL53L0X_RdDWord>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800539c:	4313      	orrs	r3, r2
 800539e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8189 	beq.w	80056d0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80053be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053c2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 8182 	bne.w	80056d0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80053cc:	2202      	movs	r2, #2
 80053ce:	2194      	movs	r1, #148	; 0x94
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f002 fa71 	bl	80078b8 <VL53L0X_WrByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053de:	4313      	orrs	r3, r2
 80053e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fe5b 	bl	80050a0 <VL53L0X_device_read_strobe>
 80053ea:	4603      	mov	r3, r0
 80053ec:	461a      	mov	r2, r3
 80053ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80053f8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80053fc:	461a      	mov	r2, r3
 80053fe:	2190      	movs	r1, #144	; 0x90
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 fadf 	bl	80079c4 <VL53L0X_RdByte>
 8005406:	4603      	mov	r3, r0
 8005408:	461a      	mov	r2, r3
 800540a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800540e:	4313      	orrs	r3, r2
 8005410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005414:	227b      	movs	r2, #123	; 0x7b
 8005416:	2194      	movs	r1, #148	; 0x94
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f002 fa4d 	bl	80078b8 <VL53L0X_WrByte>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005426:	4313      	orrs	r3, r2
 8005428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fe37 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800543a:	4313      	orrs	r3, r2
 800543c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005440:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005444:	461a      	mov	r2, r3
 8005446:	2190      	movs	r1, #144	; 0x90
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f002 fabb 	bl	80079c4 <VL53L0X_RdByte>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005456:	4313      	orrs	r3, r2
 8005458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800545c:	2277      	movs	r2, #119	; 0x77
 800545e:	2194      	movs	r1, #148	; 0x94
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f002 fa29 	bl	80078b8 <VL53L0X_WrByte>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800546e:	4313      	orrs	r3, r2
 8005470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fe13 	bl	80050a0 <VL53L0X_device_read_strobe>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005482:	4313      	orrs	r3, r2
 8005484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800548c:	461a      	mov	r2, r3
 800548e:	2190      	movs	r1, #144	; 0x90
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 fad9 	bl	8007a48 <VL53L0X_RdDWord>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800549e:	4313      	orrs	r3, r2
 80054a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	0e5b      	lsrs	r3, r3, #25
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	0adb      	lsrs	r3, r3, #11
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80054ee:	2278      	movs	r2, #120	; 0x78
 80054f0:	2194      	movs	r1, #148	; 0x94
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f002 f9e0 	bl	80078b8 <VL53L0X_WrByte>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005500:	4313      	orrs	r3, r2
 8005502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fdca 	bl	80050a0 <VL53L0X_device_read_strobe>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005514:	4313      	orrs	r3, r2
 8005516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800551a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800551e:	461a      	mov	r2, r3
 8005520:	2190      	movs	r1, #144	; 0x90
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f002 fa90 	bl	8007a48 <VL53L0X_RdDWord>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005530:	4313      	orrs	r3, r2
 8005532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	0f5b      	lsrs	r3, r3, #29
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005540:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005546:	4413      	add	r3, r2
 8005548:	b2db      	uxtb	r3, r3
 800554a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	0d9b      	lsrs	r3, r3, #22
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	b2db      	uxtb	r3, r3
 8005558:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	0bdb      	lsrs	r3, r3, #15
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	b2db      	uxtb	r3, r3
 8005566:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	0a1b      	lsrs	r3, r3, #8
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005572:	b2db      	uxtb	r3, r3
 8005574:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	b2db      	uxtb	r3, r3
 8005582:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	b2db      	uxtb	r3, r3
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005596:	2279      	movs	r2, #121	; 0x79
 8005598:	2194      	movs	r1, #148	; 0x94
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f002 f98c 	bl	80078b8 <VL53L0X_WrByte>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fd76 	bl	80050a0 <VL53L0X_device_read_strobe>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055bc:	4313      	orrs	r3, r2
 80055be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055c6:	461a      	mov	r2, r3
 80055c8:	2190      	movs	r1, #144	; 0x90
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 fa3c 	bl	8007a48 <VL53L0X_RdDWord>
 80055d0:	4603      	mov	r3, r0
 80055d2:	461a      	mov	r2, r3
 80055d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055d8:	4313      	orrs	r3, r2
 80055da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80055ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ee:	4413      	add	r3, r2
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	0cdb      	lsrs	r3, r3, #19
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	0b1b      	lsrs	r3, r3, #12
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	b2db      	uxtb	r3, r3
 800560e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	b2db      	uxtb	r3, r3
 800561c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	b2db      	uxtb	r3, r3
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005630:	227a      	movs	r2, #122	; 0x7a
 8005632:	2194      	movs	r1, #148	; 0x94
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 f93f 	bl	80078b8 <VL53L0X_WrByte>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005642:	4313      	orrs	r3, r2
 8005644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fd29 	bl	80050a0 <VL53L0X_device_read_strobe>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005656:	4313      	orrs	r3, r2
 8005658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800565c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005660:	461a      	mov	r2, r3
 8005662:	2190      	movs	r1, #144	; 0x90
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f002 f9ef 	bl	8007a48 <VL53L0X_RdDWord>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005672:	4313      	orrs	r3, r2
 8005674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	0f9b      	lsrs	r3, r3, #30
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005688:	4413      	add	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	0ddb      	lsrs	r3, r3, #23
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	b2db      	uxtb	r3, r3
 800569a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	0a5b      	lsrs	r3, r3, #9
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	089b      	lsrs	r3, r3, #2
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80f1 	beq.w	80058be <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80056dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056e0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 80ea 	bne.w	80058be <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80056ea:	227b      	movs	r2, #123	; 0x7b
 80056ec:	2194      	movs	r1, #148	; 0x94
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f002 f8e2 	bl	80078b8 <VL53L0X_WrByte>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fccc 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005710:	4313      	orrs	r3, r2
 8005712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571a:	461a      	mov	r2, r3
 800571c:	2190      	movs	r1, #144	; 0x90
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f002 f992 	bl	8007a48 <VL53L0X_RdDWord>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800572c:	4313      	orrs	r3, r2
 800572e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005732:	227c      	movs	r2, #124	; 0x7c
 8005734:	2194      	movs	r1, #148	; 0x94
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f002 f8be 	bl	80078b8 <VL53L0X_WrByte>
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005744:	4313      	orrs	r3, r2
 8005746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fca8 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005750:	4603      	mov	r3, r0
 8005752:	461a      	mov	r2, r3
 8005754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005758:	4313      	orrs	r3, r2
 800575a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800575e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005762:	461a      	mov	r2, r3
 8005764:	2190      	movs	r1, #144	; 0x90
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f002 f96e 	bl	8007a48 <VL53L0X_RdDWord>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005774:	4313      	orrs	r3, r2
 8005776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800577a:	2273      	movs	r2, #115	; 0x73
 800577c:	2194      	movs	r1, #148	; 0x94
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f002 f89a 	bl	80078b8 <VL53L0X_WrByte>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800578c:	4313      	orrs	r3, r2
 800578e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fc84 	bl	80050a0 <VL53L0X_device_read_strobe>
 8005798:	4603      	mov	r3, r0
 800579a:	461a      	mov	r2, r3
 800579c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057aa:	461a      	mov	r2, r3
 80057ac:	2190      	movs	r1, #144	; 0x90
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f002 f94a 	bl	8007a48 <VL53L0X_RdDWord>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057bc:	4313      	orrs	r3, r2
 80057be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80057ca:	2274      	movs	r2, #116	; 0x74
 80057cc:	2194      	movs	r1, #148	; 0x94
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 f872 	bl	80078b8 <VL53L0X_WrByte>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057dc:	4313      	orrs	r3, r2
 80057de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fc5c 	bl	80050a0 <VL53L0X_device_read_strobe>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057fa:	461a      	mov	r2, r3
 80057fc:	2190      	movs	r1, #144	; 0x90
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 f922 	bl	8007a48 <VL53L0X_RdDWord>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800580c:	4313      	orrs	r3, r2
 800580e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005816:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005818:	4313      	orrs	r3, r2
 800581a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800581c:	2275      	movs	r2, #117	; 0x75
 800581e:	2194      	movs	r1, #148	; 0x94
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f002 f849 	bl	80078b8 <VL53L0X_WrByte>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582e:	4313      	orrs	r3, r2
 8005830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fc33 	bl	80050a0 <VL53L0X_device_read_strobe>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005842:	4313      	orrs	r3, r2
 8005844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800584c:	461a      	mov	r2, r3
 800584e:	2190      	movs	r1, #144	; 0x90
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 f8f9 	bl	8007a48 <VL53L0X_RdDWord>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800585e:	4313      	orrs	r3, r2
 8005860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005868:	b29b      	uxth	r3, r3
 800586a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800586c:	2276      	movs	r2, #118	; 0x76
 800586e:	2194      	movs	r1, #148	; 0x94
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f002 f821 	bl	80078b8 <VL53L0X_WrByte>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800587e:	4313      	orrs	r3, r2
 8005880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fc0b 	bl	80050a0 <VL53L0X_device_read_strobe>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005892:	4313      	orrs	r3, r2
 8005894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800589c:	461a      	mov	r2, r3
 800589e:	2190      	movs	r1, #144	; 0x90
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 f8d1 	bl	8007a48 <VL53L0X_RdDWord>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80058b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ba:	4313      	orrs	r3, r2
 80058bc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80058be:	2200      	movs	r2, #0
 80058c0:	2181      	movs	r1, #129	; 0x81
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fff8 	bl	80078b8 <VL53L0X_WrByte>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80058d6:	2206      	movs	r2, #6
 80058d8:	21ff      	movs	r1, #255	; 0xff
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 ffec 	bl	80078b8 <VL53L0X_WrByte>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80058ee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80058f2:	461a      	mov	r2, r3
 80058f4:	2183      	movs	r1, #131	; 0x83
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f002 f864 	bl	80079c4 <VL53L0X_RdByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005904:	4313      	orrs	r3, r2
 8005906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800590a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	2183      	movs	r1, #131	; 0x83
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 ffcd 	bl	80078b8 <VL53L0X_WrByte>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005926:	4313      	orrs	r3, r2
 8005928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800592c:	2201      	movs	r2, #1
 800592e:	21ff      	movs	r1, #255	; 0xff
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 ffc1 	bl	80078b8 <VL53L0X_WrByte>
 8005936:	4603      	mov	r3, r0
 8005938:	461a      	mov	r2, r3
 800593a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800593e:	4313      	orrs	r3, r2
 8005940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005944:	2201      	movs	r2, #1
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 ffb5 	bl	80078b8 <VL53L0X_WrByte>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005956:	4313      	orrs	r3, r2
 8005958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800595c:	2200      	movs	r2, #0
 800595e:	21ff      	movs	r1, #255	; 0xff
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 ffa9 	bl	80078b8 <VL53L0X_WrByte>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800596e:	4313      	orrs	r3, r2
 8005970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 ff9d 	bl	80078b8 <VL53L0X_WrByte>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005986:	4313      	orrs	r3, r2
 8005988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800598c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005990:	2b00      	cmp	r3, #0
 8005992:	f040 808f 	bne.w	8005ab4 <VL53L0X_get_info_from_device+0x98e>
 8005996:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800599a:	2b07      	cmp	r3, #7
 800599c:	f000 808a 	beq.w	8005ab4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d024      	beq.n	80059f4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80059aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059ae:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11e      	bne.n	80059f4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80059bc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80059c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80059ca:	2300      	movs	r3, #0
 80059cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ce:	e00e      	b.n	80059ee <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80059d0:	f107 0208 	add.w	r2, r7, #8
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	4413      	add	r3, r2
 80059d8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059de:	4413      	add	r3, r2
 80059e0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80059e4:	460a      	mov	r2, r1
 80059e6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	3301      	adds	r3, #1
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	dded      	ble.n	80059d0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80059fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a02:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d112      	bne.n	8005a30 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a14:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	33f3      	adds	r3, #243	; 0xf3
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005a24:	f107 0310 	add.w	r3, r7, #16
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a2c:	f007 fe29 	bl	800d682 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d030      	beq.n	8005a9c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005a3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a3e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d12a      	bne.n	8005a9c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a58:	025b      	lsls	r3, r3, #9
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d011      	beq.n	8005a94 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005a84:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005a88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005a94:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005a9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005aaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ab4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3760      	adds	r7, #96	; 0x60
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005ac0:	b490      	push	{r4, r7}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005acc:	f240 6377 	movw	r3, #1655	; 0x677
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005ad8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005adc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005aee:	68bb      	ldr	r3, [r7, #8]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc90      	pop	{r4, r7}
 8005af8:	4770      	bx	lr

08005afa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b087      	sub	sp, #28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d017      	beq.n	8005b44 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b1a:	e005      	b.n	8005b28 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005b22:	89fb      	ldrh	r3, [r7, #14]
 8005b24:	3301      	adds	r3, #1
 8005b26:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f4      	bne.n	8005b1c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005b32:	89fb      	ldrh	r3, [r7, #14]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005b40:	4413      	add	r3, r2
 8005b42:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005b44:	8afb      	ldrh	r3, [r7, #22]

}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	4603      	mov	r3, r0
 8005b5a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005b70:	68fb      	ldr	r3, [r7, #12]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	4619      	mov	r1, r3
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ff92 	bl	8005ac0 <VL53L0X_calc_macro_period_ps>
 8005b9c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ba4:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <VL53L0X_calc_timeout_mclks+0x50>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bb4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	441a      	add	r2, r3
	timeout_period_mclks =
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	10624dd3 	.word	0x10624dd3

08005bd4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
 8005be0:	4613      	mov	r3, r2
 8005be2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff67 	bl	8005ac0 <VL53L0X_calc_macro_period_ps>
 8005bf2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <VL53L0X_calc_timeout_us+0x50>)
 8005bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005c04:	887b      	ldrh	r3, [r7, #2]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <VL53L0X_calc_timeout_us+0x50>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	099b      	lsrs	r3, r3, #6
 8005c18:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	10624dd3 	.word	0x10624dd3

08005c28 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08c      	sub	sp, #48	; 0x30
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <get_sequence_step_timeout+0x38>
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d002      	beq.n	8005c60 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d128      	bne.n	8005cb2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005c60:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005c64:	461a      	mov	r2, r3
 8005c66:	2100      	movs	r1, #0
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7fd fa7d 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005c7c:	f107 0320 	add.w	r3, r7, #32
 8005c80:	461a      	mov	r2, r3
 8005c82:	2146      	movs	r1, #70	; 0x46
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f001 fe9d 	bl	80079c4 <VL53L0X_RdByte>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff5b 	bl	8005b52 <VL53L0X_decode_timeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005ca0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005ca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff ff93 	bl	8005bd4 <VL53L0X_calc_timeout_us>
 8005cae:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cb0:	e092      	b.n	8005dd8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005cb2:	7afb      	ldrb	r3, [r7, #11]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d135      	bne.n	8005d24 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cb8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7fd fa51 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ccc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 8081 	bne.w	8005dd8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cd6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2100      	movs	r1, #0
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7fd fa42 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005cea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005cf2:	f107 031e 	add.w	r3, r7, #30
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2151      	movs	r1, #81	; 0x51
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 fe83 	bl	8007a06 <VL53L0X_RdWord>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d06:	8bfb      	ldrh	r3, [r7, #30]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff22 	bl	8005b52 <VL53L0X_decode_timeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005d12:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff ff5a 	bl	8005bd4 <VL53L0X_calc_timeout_us>
 8005d20:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d22:	e059      	b.n	8005dd8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005d24:	7afb      	ldrb	r3, [r7, #11]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d156      	bne.n	8005dd8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7fd fb25 	bl	8003380 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01d      	beq.n	8005d7c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d40:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d44:	461a      	mov	r2, r3
 8005d46:	2100      	movs	r1, #0
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7fd fa0d 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005d54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10f      	bne.n	8005d7c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005d5c:	f107 031e 	add.w	r3, r7, #30
 8005d60:	461a      	mov	r2, r3
 8005d62:	2151      	movs	r1, #81	; 0x51
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f001 fe4e 	bl	8007a06 <VL53L0X_RdWord>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d70:	8bfb      	ldrh	r3, [r7, #30]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff feed 	bl	8005b52 <VL53L0X_decode_timeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005d7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7fd f9eb 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005d98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005da0:	f107 031c 	add.w	r3, r7, #28
 8005da4:	461a      	mov	r2, r3
 8005da6:	2171      	movs	r1, #113	; 0x71
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f001 fe2c 	bl	8007a06 <VL53L0X_RdWord>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005db4:	8bbb      	ldrh	r3, [r7, #28]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fecb 	bl	8005b52 <VL53L0X_decode_timeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005dc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005dc8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff feff 	bl	8005bd4 <VL53L0X_calc_timeout_us>
 8005dd6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ddc:	601a      	str	r2, [r3, #0]

	return Status;
 8005dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3730      	adds	r7, #48	; 0x30
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b08a      	sub	sp, #40	; 0x28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	460b      	mov	r3, r1
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <set_sequence_step_timeout+0x26>
 8005e04:	7afb      	ldrb	r3, [r7, #11]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d002      	beq.n	8005e10 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d138      	bne.n	8005e82 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e10:	f107 031b 	add.w	r3, r7, #27
 8005e14:	461a      	mov	r2, r3
 8005e16:	2100      	movs	r1, #0
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7fd f9a5 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11a      	bne.n	8005e62 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005e2c:	7efb      	ldrb	r3, [r7, #27]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fea4 	bl	8005b80 <VL53L0X_calc_timeout_mclks>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005e3c:	8bbb      	ldrh	r3, [r7, #28]
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d903      	bls.n	8005e4c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005e44:	23ff      	movs	r3, #255	; 0xff
 8005e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e4a:	e004      	b.n	8005e56 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005e4c:	8bbb      	ldrh	r3, [r7, #28]
 8005e4e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005e50:	3b01      	subs	r3, #1
 8005e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005e62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 80ab 	bne.w	8005fc2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e70:	461a      	mov	r2, r3
 8005e72:	2146      	movs	r1, #70	; 0x46
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f001 fd1f 	bl	80078b8 <VL53L0X_WrByte>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005e80:	e09f      	b.n	8005fc2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d135      	bne.n	8005ef4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11b      	bne.n	8005ec8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e90:	f107 031b 	add.w	r3, r7, #27
 8005e94:	461a      	mov	r2, r3
 8005e96:	2100      	movs	r1, #0
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7fd f965 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005ea4:	7efb      	ldrb	r3, [r7, #27]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fe68 	bl	8005b80 <VL53L0X_calc_timeout_mclks>
 8005eb0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005eb2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fe1f 	bl	8005afa <VL53L0X_encode_timeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ec0:	8b3a      	ldrh	r2, [r7, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d108      	bne.n	8005ee2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005ed0:	8b3b      	ldrh	r3, [r7, #24]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2151      	movs	r1, #81	; 0x51
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 fd10 	bl	80078fc <VL53L0X_WrWord>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005ee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d16b      	bne.n	8005fc2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005ef2:	e066      	b.n	8005fc2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d160      	bne.n	8005fbc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005efa:	f107 0310 	add.w	r3, r7, #16
 8005efe:	4619      	mov	r1, r3
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7fd fa3d 	bl	8003380 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005f0a:	7cfb      	ldrb	r3, [r7, #19]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01d      	beq.n	8005f4c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f10:	f107 031b 	add.w	r3, r7, #27
 8005f14:	461a      	mov	r2, r3
 8005f16:	2100      	movs	r1, #0
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fd f925 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10f      	bne.n	8005f4c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005f2c:	f107 0318 	add.w	r3, r7, #24
 8005f30:	461a      	mov	r2, r3
 8005f32:	2151      	movs	r1, #81	; 0x51
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 fd66 	bl	8007a06 <VL53L0X_RdWord>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005f40:	8b3b      	ldrh	r3, [r7, #24]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fe05 	bl	8005b52 <VL53L0X_decode_timeout>
 8005f48:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f54:	f107 031b 	add.w	r3, r7, #27
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7fd f903 	bl	8003168 <VL53L0X_GetVcselPulsePeriod>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d128      	bne.n	8005fc2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005f70:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8005f72:	461a      	mov	r2, r3
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fe02 	bl	8005b80 <VL53L0X_calc_timeout_mclks>
 8005f7c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	4413      	add	r3, r2
 8005f84:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8005f86:	6a38      	ldr	r0, [r7, #32]
 8005f88:	f7ff fdb7 	bl	8005afa <VL53L0X_encode_timeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8005f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005f98:	8bfb      	ldrh	r3, [r7, #30]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2171      	movs	r1, #113	; 0x71
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 fcac 	bl	80078fc <VL53L0X_WrWord>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005fba:	e002      	b.n	8005fc2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fbc:	23fc      	movs	r3, #252	; 0xfc
 8005fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005fc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3728      	adds	r7, #40	; 0x28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b08a      	sub	sp, #40	; 0x28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8005fea:	2312      	movs	r3, #18
 8005fec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8005ff6:	230e      	movs	r3, #14
 8005ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006000:	78bb      	ldrb	r3, [r7, #2]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800600c:	23fc      	movs	r3, #252	; 0xfc
 800600e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006012:	e020      	b.n	8006056 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10d      	bne.n	8006036 <VL53L0X_set_vcsel_pulse_period+0x68>
 800601a:	78ba      	ldrb	r2, [r7, #2]
 800601c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006020:	429a      	cmp	r2, r3
 8006022:	d304      	bcc.n	800602e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006024:	78ba      	ldrb	r2, [r7, #2]
 8006026:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800602e:	23fc      	movs	r3, #252	; 0xfc
 8006030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006034:	e00f      	b.n	8006056 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10c      	bne.n	8006056 <VL53L0X_set_vcsel_pulse_period+0x88>
 800603c:	78ba      	ldrb	r2, [r7, #2]
 800603e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006042:	429a      	cmp	r2, r3
 8006044:	d304      	bcc.n	8006050 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006046:	78ba      	ldrb	r2, [r7, #2]
 8006048:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800604c:	429a      	cmp	r2, r3
 800604e:	d902      	bls.n	8006056 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006050:	23fc      	movs	r3, #252	; 0xfc
 8006052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800605e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006062:	e239      	b.n	80064d8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d150      	bne.n	800610c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800606a:	78bb      	ldrb	r3, [r7, #2]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d110      	bne.n	8006092 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006070:	2218      	movs	r2, #24
 8006072:	2157      	movs	r1, #87	; 0x57
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fc1f 	bl	80078b8 <VL53L0X_WrByte>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006080:	2208      	movs	r2, #8
 8006082:	2156      	movs	r1, #86	; 0x56
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fc17 	bl	80078b8 <VL53L0X_WrByte>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006090:	e17f      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006092:	78bb      	ldrb	r3, [r7, #2]
 8006094:	2b0e      	cmp	r3, #14
 8006096:	d110      	bne.n	80060ba <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006098:	2230      	movs	r2, #48	; 0x30
 800609a:	2157      	movs	r1, #87	; 0x57
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fc0b 	bl	80078b8 <VL53L0X_WrByte>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80060a8:	2208      	movs	r2, #8
 80060aa:	2156      	movs	r1, #86	; 0x56
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fc03 	bl	80078b8 <VL53L0X_WrByte>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060b8:	e16b      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80060ba:	78bb      	ldrb	r3, [r7, #2]
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d110      	bne.n	80060e2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	2157      	movs	r1, #87	; 0x57
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fbf7 	bl	80078b8 <VL53L0X_WrByte>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80060d0:	2208      	movs	r2, #8
 80060d2:	2156      	movs	r1, #86	; 0x56
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fbef 	bl	80078b8 <VL53L0X_WrByte>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060e0:	e157      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80060e2:	78bb      	ldrb	r3, [r7, #2]
 80060e4:	2b12      	cmp	r3, #18
 80060e6:	f040 8154 	bne.w	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80060ea:	2250      	movs	r2, #80	; 0x50
 80060ec:	2157      	movs	r1, #87	; 0x57
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fbe2 	bl	80078b8 <VL53L0X_WrByte>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80060fa:	2208      	movs	r2, #8
 80060fc:	2156      	movs	r1, #86	; 0x56
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fbda 	bl	80078b8 <VL53L0X_WrByte>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800610a:	e142      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	2b01      	cmp	r3, #1
 8006110:	f040 813f 	bne.w	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006114:	78bb      	ldrb	r3, [r7, #2]
 8006116:	2b08      	cmp	r3, #8
 8006118:	d14c      	bne.n	80061b4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800611a:	2210      	movs	r2, #16
 800611c:	2148      	movs	r1, #72	; 0x48
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fbca 	bl	80078b8 <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800612a:	2208      	movs	r2, #8
 800612c:	2147      	movs	r1, #71	; 0x47
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 fbc2 	bl	80078b8 <VL53L0X_WrByte>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800613a:	2202      	movs	r2, #2
 800613c:	2132      	movs	r1, #50	; 0x32
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fbba 	bl	80078b8 <VL53L0X_WrByte>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800614c:	4313      	orrs	r3, r2
 800614e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006152:	220c      	movs	r2, #12
 8006154:	2130      	movs	r1, #48	; 0x30
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fbae 	bl	80078b8 <VL53L0X_WrByte>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006164:	4313      	orrs	r3, r2
 8006166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800616a:	2201      	movs	r2, #1
 800616c:	21ff      	movs	r1, #255	; 0xff
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fba2 	bl	80078b8 <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800617c:	4313      	orrs	r3, r2
 800617e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006182:	2230      	movs	r2, #48	; 0x30
 8006184:	2130      	movs	r1, #48	; 0x30
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fb96 	bl	80078b8 <VL53L0X_WrByte>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006194:	4313      	orrs	r3, r2
 8006196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800619a:	2200      	movs	r2, #0
 800619c:	21ff      	movs	r1, #255	; 0xff
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fb8a 	bl	80078b8 <VL53L0X_WrByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061b2:	e0ee      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80061b4:	78bb      	ldrb	r3, [r7, #2]
 80061b6:	2b0a      	cmp	r3, #10
 80061b8:	d14c      	bne.n	8006254 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80061ba:	2228      	movs	r2, #40	; 0x28
 80061bc:	2148      	movs	r1, #72	; 0x48
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fb7a 	bl	80078b8 <VL53L0X_WrByte>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80061ca:	2208      	movs	r2, #8
 80061cc:	2147      	movs	r1, #71	; 0x47
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fb72 	bl	80078b8 <VL53L0X_WrByte>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80061da:	2203      	movs	r2, #3
 80061dc:	2132      	movs	r1, #50	; 0x32
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fb6a 	bl	80078b8 <VL53L0X_WrByte>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80061f2:	2209      	movs	r2, #9
 80061f4:	2130      	movs	r1, #48	; 0x30
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fb5e 	bl	80078b8 <VL53L0X_WrByte>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006204:	4313      	orrs	r3, r2
 8006206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800620a:	2201      	movs	r2, #1
 800620c:	21ff      	movs	r1, #255	; 0xff
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fb52 	bl	80078b8 <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800621c:	4313      	orrs	r3, r2
 800621e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006222:	2220      	movs	r2, #32
 8006224:	2130      	movs	r1, #48	; 0x30
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fb46 	bl	80078b8 <VL53L0X_WrByte>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006234:	4313      	orrs	r3, r2
 8006236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800623a:	2200      	movs	r2, #0
 800623c:	21ff      	movs	r1, #255	; 0xff
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fb3a 	bl	80078b8 <VL53L0X_WrByte>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800624c:	4313      	orrs	r3, r2
 800624e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006252:	e09e      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006254:	78bb      	ldrb	r3, [r7, #2]
 8006256:	2b0c      	cmp	r3, #12
 8006258:	d14c      	bne.n	80062f4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800625a:	2238      	movs	r2, #56	; 0x38
 800625c:	2148      	movs	r1, #72	; 0x48
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fb2a 	bl	80078b8 <VL53L0X_WrByte>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800626a:	2208      	movs	r2, #8
 800626c:	2147      	movs	r1, #71	; 0x47
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fb22 	bl	80078b8 <VL53L0X_WrByte>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800627a:	2203      	movs	r2, #3
 800627c:	2132      	movs	r1, #50	; 0x32
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fb1a 	bl	80078b8 <VL53L0X_WrByte>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800628c:	4313      	orrs	r3, r2
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006292:	2208      	movs	r2, #8
 8006294:	2130      	movs	r1, #48	; 0x30
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fb0e 	bl	80078b8 <VL53L0X_WrByte>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062aa:	2201      	movs	r2, #1
 80062ac:	21ff      	movs	r1, #255	; 0xff
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fb02 	bl	80078b8 <VL53L0X_WrByte>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062bc:	4313      	orrs	r3, r2
 80062be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80062c2:	2220      	movs	r2, #32
 80062c4:	2130      	movs	r1, #48	; 0x30
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 faf6 	bl	80078b8 <VL53L0X_WrByte>
 80062cc:	4603      	mov	r3, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80062da:	2200      	movs	r2, #0
 80062dc:	21ff      	movs	r1, #255	; 0xff
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 faea 	bl	80078b8 <VL53L0X_WrByte>
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062f2:	e04e      	b.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80062f4:	78bb      	ldrb	r3, [r7, #2]
 80062f6:	2b0e      	cmp	r3, #14
 80062f8:	d14b      	bne.n	8006392 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80062fa:	2248      	movs	r2, #72	; 0x48
 80062fc:	2148      	movs	r1, #72	; 0x48
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fada 	bl	80078b8 <VL53L0X_WrByte>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800630a:	2208      	movs	r2, #8
 800630c:	2147      	movs	r1, #71	; 0x47
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fad2 	bl	80078b8 <VL53L0X_WrByte>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800631a:	2203      	movs	r2, #3
 800631c:	2132      	movs	r1, #50	; 0x32
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 faca 	bl	80078b8 <VL53L0X_WrByte>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800632c:	4313      	orrs	r3, r2
 800632e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006332:	2207      	movs	r2, #7
 8006334:	2130      	movs	r1, #48	; 0x30
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fabe 	bl	80078b8 <VL53L0X_WrByte>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006344:	4313      	orrs	r3, r2
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800634a:	2201      	movs	r2, #1
 800634c:	21ff      	movs	r1, #255	; 0xff
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fab2 	bl	80078b8 <VL53L0X_WrByte>
 8006354:	4603      	mov	r3, r0
 8006356:	461a      	mov	r2, r3
 8006358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800635c:	4313      	orrs	r3, r2
 800635e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006362:	2220      	movs	r2, #32
 8006364:	2130      	movs	r1, #48	; 0x30
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 faa6 	bl	80078b8 <VL53L0X_WrByte>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006374:	4313      	orrs	r3, r2
 8006376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800637a:	2200      	movs	r2, #0
 800637c:	21ff      	movs	r1, #255	; 0xff
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fa9a 	bl	80078b8 <VL53L0X_WrByte>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800638c:	4313      	orrs	r3, r2
 800638e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006392:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006396:	2b00      	cmp	r3, #0
 8006398:	d17f      	bne.n	800649a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800639a:	78bb      	ldrb	r3, [r7, #2]
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe fe38 	bl	8005012 <VL53L0X_encode_vcsel_period>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d045      	beq.n	800643e <VL53L0X_set_vcsel_pulse_period+0x470>
 80063b2:	e06e      	b.n	8006492 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80063b4:	f107 0314 	add.w	r3, r7, #20
 80063b8:	461a      	mov	r2, r3
 80063ba:	2103      	movs	r1, #3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fc33 	bl	8005c28 <get_sequence_step_timeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80063c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	461a      	mov	r2, r3
 80063d6:	2102      	movs	r1, #2
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fc25 	bl	8005c28 <get_sequence_step_timeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80063e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80063ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80063f0:	461a      	mov	r2, r3
 80063f2:	2150      	movs	r1, #80	; 0x50
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fa5f 	bl	80078b8 <VL53L0X_WrByte>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006404:	2b00      	cmp	r3, #0
 8006406:	d108      	bne.n	800641a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	461a      	mov	r2, r3
 800640c:	2103      	movs	r1, #3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fceb 	bl	8005dea <set_sequence_step_timeout>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800641a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800641e:	2b00      	cmp	r3, #0
 8006420:	d108      	bne.n	8006434 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	461a      	mov	r2, r3
 8006426:	2102      	movs	r1, #2
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fcde 	bl	8005dea <set_sequence_step_timeout>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	78ba      	ldrb	r2, [r7, #2]
 8006438:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800643c:	e02e      	b.n	800649c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800643e:	f107 0318 	add.w	r3, r7, #24
 8006442:	461a      	mov	r2, r3
 8006444:	2104      	movs	r1, #4
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fbee 	bl	8005c28 <get_sequence_step_timeout>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800645a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800645e:	461a      	mov	r2, r3
 8006460:	2170      	movs	r1, #112	; 0x70
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fa28 	bl	80078b8 <VL53L0X_WrByte>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800646e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	461a      	mov	r2, r3
 800647a:	2104      	movs	r1, #4
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fcb4 	bl	8005dea <set_sequence_step_timeout>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	78ba      	ldrb	r2, [r7, #2]
 800648c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006490:	e004      	b.n	800649c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006492:	23fc      	movs	r3, #252	; 0xfc
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006498:	e000      	b.n	800649c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800649a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800649c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80064aa:	69f9      	ldr	r1, [r7, #28]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fc fe1d 	bl	80030ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80064b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80064c0:	f107 010f 	add.w	r1, r7, #15
 80064c4:	2301      	movs	r3, #1
 80064c6:	2200      	movs	r2, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fe fcbd 	bl	8004e48 <VL53L0X_perform_phase_calibration>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80064d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	460b      	mov	r3, r1
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <VL53L0X_get_vcsel_pulse_period+0x1e>
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d00a      	beq.n	8006512 <VL53L0X_get_vcsel_pulse_period+0x32>
 80064fc:	e013      	b.n	8006526 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80064fe:	f107 0316 	add.w	r3, r7, #22
 8006502:	461a      	mov	r2, r3
 8006504:	2150      	movs	r1, #80	; 0x50
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f001 fa5c 	bl	80079c4 <VL53L0X_RdByte>
 800650c:	4603      	mov	r3, r0
 800650e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006510:	e00b      	b.n	800652a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006512:	f107 0316 	add.w	r3, r7, #22
 8006516:	461a      	mov	r2, r3
 8006518:	2170      	movs	r1, #112	; 0x70
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f001 fa52 	bl	80079c4 <VL53L0X_RdByte>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006524:	e001      	b.n	800652a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006526:	23fc      	movs	r3, #252	; 0xfc
 8006528:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800652a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006532:	7dbb      	ldrb	r3, [r7, #22]
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fd59 	bl	8004fec <VL53L0X_decode_vcsel_period>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	701a      	strb	r2, [r3, #0]

	return Status;
 8006542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b092      	sub	sp, #72	; 0x48
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800655e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006562:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006564:	f240 7376 	movw	r3, #1910	; 0x776
 8006568:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800656a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800656e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006570:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006576:	f240 234e 	movw	r3, #590	; 0x24e
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800657c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006582:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006588:	f240 2326 	movw	r3, #550	; 0x226
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006592:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006596:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d205      	bcs.n	80065b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065a4:	23fc      	movs	r3, #252	; 0xfc
 80065a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80065aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80065ae:	e0aa      	b.n	8006706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80065b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fc fedc 	bl	8003380 <VL53L0X_GetSequenceStepEnables>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80065ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d15b      	bne.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80065d6:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80065dc:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80065e2:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d052      	beq.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	461a      	mov	r2, r3
 80065ee:	2102      	movs	r1, #2
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fb19 	bl	8005c28 <get_sequence_step_timeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80065fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006604:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006608:	e07d      	b.n	8006706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800660a:	7d3b      	ldrb	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00f      	beq.n	8006630 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006610:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	429a      	cmp	r2, r3
 800661e:	d204      	bcs.n	800662a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
 8006628:	e002      	b.n	8006630 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800662a:	23fc      	movs	r3, #252	; 0xfc
 800662c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006630:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006638:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800663c:	e063      	b.n	8006706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800663e:	7dbb      	ldrb	r3, [r7, #22]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	4413      	add	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006652:	429a      	cmp	r2, r3
 8006654:	d204      	bcs.n	8006660 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
 800665e:	e016      	b.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006660:	23fc      	movs	r3, #252	; 0xfc
 8006662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006666:	e012      	b.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006668:	7d7b      	ldrb	r3, [r7, #21]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00f      	beq.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006672:	4413      	add	r3, r2
 8006674:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	429a      	cmp	r2, r3
 800667c:	d204      	bcs.n	8006688 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800667e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
 8006686:	e002      	b.n	800668e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006688:	23fc      	movs	r3, #252	; 0xfc
 800668a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800668e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006696:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800669a:	e034      	b.n	8006706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d019      	beq.n	80066d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80066a2:	f107 030c 	add.w	r3, r7, #12
 80066a6:	461a      	mov	r2, r3
 80066a8:	2103      	movs	r1, #3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fabc 	bl	8005c28 <get_sequence_step_timeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ba:	4413      	add	r3, r2
 80066bc:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d204      	bcs.n	80066d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	643b      	str	r3, [r7, #64]	; 0x40
 80066ce:	e002      	b.n	80066d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066d0:	23fc      	movs	r3, #252	; 0xfc
 80066d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80066d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d111      	bne.n	8006702 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80066de:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80066e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80066ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ee:	2104      	movs	r1, #4
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fb7a 	bl	8005dea <set_sequence_step_timeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006702:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006706:	4618      	mov	r0, r3
 8006708:	3748      	adds	r7, #72	; 0x48
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b090      	sub	sp, #64	; 0x40
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
 800671a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800671e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006722:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006724:	f240 7376 	movw	r3, #1910	; 0x776
 8006728:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800672a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006730:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006734:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006736:	f240 234e 	movw	r3, #590	; 0x24e
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800673c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006742:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006748:	f240 2326 	movw	r3, #550	; 0x226
 800674c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	441a      	add	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800675c:	f107 0318 	add.w	r3, r7, #24
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fc fe0c 	bl	8003380 <VL53L0X_GetSequenceStepEnables>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800676e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006776:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800677a:	e075      	b.n	8006868 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800677c:	7e3b      	ldrb	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006782:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006788:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d030      	beq.n	80067f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	461a      	mov	r2, r3
 8006794:	2102      	movs	r1, #2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fa46 	bl	8005c28 <get_sequence_step_timeout>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80067a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d122      	bne.n	80067f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80067aa:	7e3b      	ldrb	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80067b4:	6939      	ldr	r1, [r7, #16]
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80067ba:	441a      	add	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80067c0:	7ebb      	ldrb	r3, [r7, #26]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80067ca:	6939      	ldr	r1, [r7, #16]
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	440b      	add	r3, r1
 80067d0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80067d2:	441a      	add	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e00a      	b.n	80067f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80067da:	7e7b      	ldrb	r3, [r7, #25]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80067e4:	6939      	ldr	r1, [r7, #16]
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80067ea:	441a      	add	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d114      	bne.n	8006822 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80067f8:	7efb      	ldrb	r3, [r7, #27]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	461a      	mov	r2, r3
 8006804:	2103      	movs	r1, #3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fa0e 	bl	8005c28 <get_sequence_step_timeout>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800681c:	441a      	add	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006822:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006826:	2b00      	cmp	r3, #0
 8006828:	d114      	bne.n	8006854 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800682a:	7f3b      	ldrb	r3, [r7, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d011      	beq.n	8006854 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	461a      	mov	r2, r3
 8006836:	2104      	movs	r1, #4
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff f9f5 	bl	8005c28 <get_sequence_step_timeout>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800684e:	441a      	add	r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006854:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006864:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006868:	4618      	mov	r0, r3
 800686a:	3740      	adds	r7, #64	; 0x40
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800687a:	2300      	movs	r3, #0
 800687c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006882:	e0c6      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4413      	add	r3, r2
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	3301      	adds	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006894:	7cfb      	ldrb	r3, [r7, #19]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	f040 808d 	bne.w	80069b6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	747b      	strb	r3, [r7, #17]
			Index++;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	3301      	adds	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80068ac:	7c7b      	ldrb	r3, [r7, #17]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d87e      	bhi.n	80069b0 <VL53L0X_load_tuning_settings+0x140>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <VL53L0X_load_tuning_settings+0x48>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	08006903 	.word	0x08006903
 80068c0:	0800693d 	.word	0x0800693d
 80068c4:	08006977 	.word	0x08006977
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4413      	add	r3, r2
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	3301      	adds	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	4413      	add	r3, r2
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	3301      	adds	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80068e8:	7c3b      	ldrb	r3, [r7, #16]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	89ba      	ldrh	r2, [r7, #12]
 80068fc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006900:	e087      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	4413      	add	r3, r2
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	743b      	strb	r3, [r7, #16]
				Index++;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	3301      	adds	r3, #1
 8006910:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	4413      	add	r3, r2
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3301      	adds	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006922:	7c3b      	ldrb	r3, [r7, #16]
 8006924:	b29b      	uxth	r3, r3
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	b29a      	uxth	r2, r3
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	b29b      	uxth	r3, r3
 800692e:	4413      	add	r3, r2
 8006930:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	89ba      	ldrh	r2, [r7, #12]
 8006936:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800693a:	e06a      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4413      	add	r3, r2
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	743b      	strb	r3, [r7, #16]
				Index++;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	3301      	adds	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3301      	adds	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800695c:	7c3b      	ldrb	r3, [r7, #16]
 800695e:	b29b      	uxth	r3, r3
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	b29a      	uxth	r2, r3
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	b29b      	uxth	r3, r3
 8006968:	4413      	add	r3, r2
 800696a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	89ba      	ldrh	r2, [r7, #12]
 8006970:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006974:	e04d      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	4413      	add	r3, r2
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	3301      	adds	r3, #1
 8006994:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006996:	7c3b      	ldrb	r3, [r7, #16]
 8006998:	b29b      	uxth	r3, r3
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	b29a      	uxth	r2, r3
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	89ba      	ldrh	r2, [r7, #12]
 80069aa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80069ae:	e030      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069b0:	23fc      	movs	r3, #252	; 0xfc
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e02d      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d828      	bhi.n	8006a0e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3301      	adds	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e00f      	b.n	80069f2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	7819      	ldrb	r1, [r3, #0]
 80069da:	f107 0208 	add.w	r2, r7, #8
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	4413      	add	r3, r2
 80069e2:	460a      	mov	r2, r1
 80069e4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	3301      	adds	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3301      	adds	r3, #1
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	7cfb      	ldrb	r3, [r7, #19]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	dbeb      	blt.n	80069d2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80069fa:	7cfb      	ldrb	r3, [r7, #19]
 80069fc:	f107 0208 	add.w	r2, r7, #8
 8006a00:	7cb9      	ldrb	r1, [r7, #18]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 ff04 	bl	8007810 <VL53L0X_WriteMulti>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e001      	b.n	8006a12 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a0e:	23fc      	movs	r3, #252	; 0xfc
 8006a10:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	4413      	add	r3, r2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <VL53L0X_load_tuning_settings+0x1b8>
 8006a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af2e 	beq.w	8006884 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006a4a:	f107 0313 	add.w	r3, r7, #19
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7fc fd21 	bl	8003498 <VL53L0X_GetXTalkCompensationEnable>
 8006a56:	4603      	mov	r3, r0
 8006a58:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006a5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d111      	bne.n	8006a86 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006a62:	7cfb      	ldrb	r3, [r7, #19]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	8a9b      	ldrh	r3, [r3, #20]
 8006a72:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	3380      	adds	r3, #128	; 0x80
 8006a80:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006aaa:	f107 0310 	add.w	r3, r7, #16
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff ffbe 	bl	8006a34 <VL53L0X_get_total_xtalk_rate>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	441a      	add	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]

	return Status;
 8006ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b09a      	sub	sp, #104	; 0x68
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006aea:	2312      	movs	r3, #18
 8006aec:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006af2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006af4:	2342      	movs	r3, #66	; 0x42
 8006af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006af8:	2306      	movs	r3, #6
 8006afa:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006afc:	2307      	movs	r3, #7
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	3380      	adds	r3, #128	; 0x80
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b2c:	fb02 f303 	mul.w	r3, r2, r3
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01b      	beq.n	8006b74 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b48:	4413      	add	r3, r2
 8006b4a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006b56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b58:	4613      	mov	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	4413      	add	r3, r2
 8006b5e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9e:	085a      	lsrs	r2, r3, #1
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	441a      	add	r2, r3
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bbc:	d302      	bcc.n	8006bc4 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8006bbe:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <VL53L0X_calc_dmax+0x238>)
 8006bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc2:	e016      	b.n	8006bf2 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc6:	085a      	lsrs	r2, r3, #1
 8006bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bca:	441a      	add	r2, r3
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
 8006bf0:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	039b      	lsls	r3, r3, #14
 8006bf6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006bfa:	4a47      	ldr	r2, [pc, #284]	; (8006d18 <VL53L0X_calc_dmax+0x23c>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	099b      	lsrs	r3, r3, #6
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	fb02 f303 	mul.w	r3, r2, r3
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
 8006c16:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006c3a:	0b9b      	lsrs	r3, r3, #14
 8006c3c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c42:	4413      	add	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	039b      	lsls	r3, r3, #14
 8006c5e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4413      	add	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <VL53L0X_calc_dmax+0x23c>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c9a:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <VL53L0X_calc_dmax+0x23c>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	099b      	lsrs	r3, r3, #6
 8006ca2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca6:	3380      	adds	r3, #128	; 0x80
 8006ca8:	0a1b      	lsrs	r3, r3, #8
 8006caa:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	085a      	lsrs	r2, r3, #1
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	441a      	add	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cc2:	e001      	b.n	8006cc8 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006cc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006cca:	f7fe f9b5 	bl	8005038 <VL53L0X_isqrt>
 8006cce:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	085a      	lsrs	r2, r3, #1
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	441a      	add	r2, r3
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce6:	e001      	b.n	8006cec <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006cec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006cee:	f7fe f9a3 	bl	8005038 <VL53L0X_isqrt>
 8006cf2:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d902      	bls.n	8006d08 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8006d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d06:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006d08:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3768      	adds	r7, #104	; 0x68
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	fff00000 	.word	0xfff00000
 8006d18:	10624dd3 	.word	0x10624dd3

08006d1c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b0b4      	sub	sp, #208	; 0xd0
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006d2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006d32:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006d3a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8006d3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006d42:	f241 235c 	movw	r3, #4700	; 0x125c
 8006d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006d4a:	4b9e      	ldr	r3, [pc, #632]	; (8006fc4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8006d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006d50:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006d54:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006d56:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006d64:	4b98      	ldr	r3, [pc, #608]	; (8006fc8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8006d66:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006d6e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006d72:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006d74:	f240 6377 	movw	r3, #1655	; 0x677
 8006d78:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006d9c:	f107 0310 	add.w	r3, r7, #16
 8006da0:	461a      	mov	r2, r3
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fe74 	bl	8006a92 <VL53L0X_get_total_signal_rate>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006db0:	f107 0314 	add.w	r3, r7, #20
 8006db4:	461a      	mov	r2, r3
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff fe3b 	bl	8006a34 <VL53L0X_get_total_xtalk_rate>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006de8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d902      	bls.n	8006df8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006df8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d168      	bne.n	8006ed2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006e10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006e14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7fe feae 	bl	8005b80 <VL53L0X_calc_timeout_mclks>
 8006e24:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006e36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006e3a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7fe fe9b 	bl	8005b80 <VL53L0X_calc_timeout_mclks>
 8006e4a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8006e52:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d102      	bne.n	8006e60 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e64:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006e66:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	02db      	lsls	r3, r3, #11
 8006e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e7c:	4a53      	ldr	r2, [pc, #332]	; (8006fcc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e82:	099b      	lsrs	r3, r3, #6
 8006e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e9e:	4a4b      	ldr	r2, [pc, #300]	; (8006fcc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	099b      	lsrs	r3, r3, #6
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3380      	adds	r3, #128	; 0x80
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
 8006ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ec4:	3380      	adds	r3, #128	; 0x80
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006ed2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006eda:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006ede:	e165      	b.n	80071ac <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8006ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eec:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ef4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e153      	b.n	80071a8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006f00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d102      	bne.n	8006f0e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f16:	041a      	lsls	r2, r3, #16
 8006f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d902      	bls.n	8006f32 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006f42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe f872 	bl	8005038 <VL53L0X_isqrt>
 8006f54:	4603      	mov	r3, r0
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	891b      	ldrh	r3, [r3, #8]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f70:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006f72:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006f74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006f78:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	099b      	lsrs	r3, r3, #6
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8006f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f8a:	4a10      	ldr	r2, [pc, #64]	; (8006fcc <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f90:	099b      	lsrs	r3, r3, #6
 8006f92:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfb8      	it	lt
 8006fa6:	425b      	neglt	r3, r3
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	7e1b      	ldrb	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8006fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fc0:	e035      	b.n	800702e <VL53L0X_calc_sigma_estimate+0x312>
 8006fc2:	bf00      	nop
 8006fc4:	028f87ae 	.word	0x028f87ae
 8006fc8:	0006999a 	.word	0x0006999a
 8006fcc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006ff0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff6:	4413      	add	r3, r2
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007002:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800700a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007028:	0b9b      	lsrs	r3, r3, #14
 800702a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800702e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800704e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	4413      	add	r3, r2
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007072:	f7fd ffe1 	bl	8005038 <VL53L0X_isqrt>
 8007076:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	3332      	adds	r3, #50	; 0x32
 8007082:	4a4c      	ldr	r2, [pc, #304]	; (80071b4 <VL53L0X_calc_sigma_estimate+0x498>)
 8007084:	fba2 2303 	umull	r2, r3, r2, r3
 8007088:	095a      	lsrs	r2, r3, #5
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007098:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80070a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070a8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80070ac:	3308      	adds	r3, #8
 80070ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80070b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070b6:	4a40      	ldr	r2, [pc, #256]	; (80071b8 <VL53L0X_calc_sigma_estimate+0x49c>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	0b5b      	lsrs	r3, r3, #13
 80070be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80070c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d902      	bls.n	80070d2 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80070cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80070d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070da:	4413      	add	r3, r2
 80070dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80070e0:	4a36      	ldr	r2, [pc, #216]	; (80071bc <VL53L0X_calc_sigma_estimate+0x4a0>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80070ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070f2:	441a      	add	r2, r3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd ff9c 	bl	8005038 <VL53L0X_isqrt>
 8007100:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800710e:	4a2b      	ldr	r2, [pc, #172]	; (80071bc <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	099b      	lsrs	r3, r3, #6
 8007116:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800711c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	4413      	add	r3, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7fd ff7e 	bl	8005038 <VL53L0X_isqrt>
 800713c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007144:	fb02 f303 	mul.w	r3, r2, r3
 8007148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800714c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <VL53L0X_calc_sigma_estimate+0x44a>
 8007152:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <VL53L0X_calc_sigma_estimate+0x44a>
 800715a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800715e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007162:	429a      	cmp	r2, r3
 8007164:	d903      	bls.n	800716e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800716a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007174:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007180:	6939      	ldr	r1, [r7, #16]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9303      	str	r3, [sp, #12]
 8007186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800719a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fc9d 	bl	8006adc <VL53L0X_calc_dmax>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071a8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	37c0      	adds	r7, #192	; 0xc0
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	51eb851f 	.word	0x51eb851f
 80071b8:	d1b71759 	.word	0xd1b71759
 80071bc:	10624dd3 	.word	0x10624dd3

080071c0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b090      	sub	sp, #64	; 0x40
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	461a      	mov	r2, r3
 80071cc:	460b      	mov	r3, r1
 80071ce:	72fb      	strb	r3, [r7, #11]
 80071d0:	4613      	mov	r3, r2
 80071d2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	10db      	asrs	r3, r3, #3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007220:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
 8007228:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800722c:	2b05      	cmp	r3, #5
 800722e:	d013      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007230:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007234:	2b07      	cmp	r3, #7
 8007236:	d00f      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007238:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800723c:	2b0c      	cmp	r3, #12
 800723e:	d00b      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007240:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007244:	2b0d      	cmp	r3, #13
 8007246:	d007      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800724c:	2b0e      	cmp	r3, #14
 800724e:	d003      	beq.n	8007258 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d103      	bne.n	8007260 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007258:	2301      	movs	r3, #1
 800725a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800725e:	e002      	b.n	8007266 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007266:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800726e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007272:	461a      	mov	r2, r3
 8007274:	2100      	movs	r1, #0
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fc f9e2 	bl	8003640 <VL53L0X_GetLimitCheckEnable>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007286:	2b00      	cmp	r3, #0
 8007288:	d02e      	beq.n	80072e8 <VL53L0X_get_pal_range_status+0x128>
 800728a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12a      	bne.n	80072e8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007292:	f107 0310 	add.w	r3, r7, #16
 8007296:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800729a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fd3d 	bl	8006d1c <VL53L0X_calc_sigma_estimate>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80072a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80072b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80072c0:	f107 0320 	add.w	r3, r7, #32
 80072c4:	461a      	mov	r2, r3
 80072c6:	2100      	movs	r1, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7fc fa3f 	bl	800374c <VL53L0X_GetLimitCheckValue>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80072da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072dc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80072de:	429a      	cmp	r2, r3
 80072e0:	d902      	bls.n	80072e8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80072e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80072f0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80072f4:	461a      	mov	r2, r3
 80072f6:	2102      	movs	r1, #2
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7fc f9a1 	bl	8003640 <VL53L0X_GetLimitCheckEnable>
 80072fe:	4603      	mov	r3, r0
 8007300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007304:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007308:	2b00      	cmp	r3, #0
 800730a:	d044      	beq.n	8007396 <VL53L0X_get_pal_range_status+0x1d6>
 800730c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007310:	2b00      	cmp	r3, #0
 8007312:	d140      	bne.n	8007396 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007314:	f107 031c 	add.w	r3, r7, #28
 8007318:	461a      	mov	r2, r3
 800731a:	2102      	movs	r1, #2
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7fc fa15 	bl	800374c <VL53L0X_GetLimitCheckValue>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007328:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007330:	2201      	movs	r2, #1
 8007332:	21ff      	movs	r1, #255	; 0xff
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fabf 	bl	80078b8 <VL53L0X_WrByte>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007340:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007348:	f107 0316 	add.w	r3, r7, #22
 800734c:	461a      	mov	r2, r3
 800734e:	21b6      	movs	r1, #182	; 0xb6
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fb58 	bl	8007a06 <VL53L0X_RdWord>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800735c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007360:	2b00      	cmp	r3, #0
 8007362:	d107      	bne.n	8007374 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007364:	2200      	movs	r2, #0
 8007366:	21ff      	movs	r1, #255	; 0xff
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 faa5 	bl	80078b8 <VL53L0X_WrByte>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007374:	8afb      	ldrh	r3, [r7, #22]
 8007376:	025b      	lsls	r3, r3, #9
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d006      	beq.n	8007396 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007388:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800738a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738c:	429a      	cmp	r2, r3
 800738e:	d902      	bls.n	8007396 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007390:	2301      	movs	r3, #1
 8007392:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007396:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800739e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073a2:	461a      	mov	r2, r3
 80073a4:	2103      	movs	r1, #3
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7fc f94a 	bl	8003640 <VL53L0X_GetLimitCheckEnable>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80073b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d023      	beq.n	8007402 <VL53L0X_get_pal_range_status+0x242>
 80073ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d11f      	bne.n	8007402 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80073c2:	893b      	ldrh	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
 80073cc:	e005      	b.n	80073da <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	021a      	lsls	r2, r3, #8
 80073d2:	893b      	ldrh	r3, [r7, #8]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80073da:	f107 0318 	add.w	r3, r7, #24
 80073de:	461a      	mov	r2, r3
 80073e0:	2103      	movs	r1, #3
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7fc f9b2 	bl	800374c <VL53L0X_GetLimitCheckValue>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80073f4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80073f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d202      	bcs.n	8007402 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007402:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d14a      	bne.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800740a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800740e:	2b01      	cmp	r3, #1
 8007410:	d103      	bne.n	800741a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e042      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800741a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800741e:	2b01      	cmp	r3, #1
 8007420:	d007      	beq.n	8007432 <VL53L0X_get_pal_range_status+0x272>
 8007422:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007426:	2b02      	cmp	r3, #2
 8007428:	d003      	beq.n	8007432 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800742a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800742e:	2b03      	cmp	r3, #3
 8007430:	d103      	bne.n	800743a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	2205      	movs	r2, #5
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	e032      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800743a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800743e:	2b06      	cmp	r3, #6
 8007440:	d003      	beq.n	800744a <VL53L0X_get_pal_range_status+0x28a>
 8007442:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007446:	2b09      	cmp	r3, #9
 8007448:	d103      	bne.n	8007452 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800744a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744c:	2204      	movs	r2, #4
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	e026      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007452:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007456:	2b08      	cmp	r3, #8
 8007458:	d007      	beq.n	800746a <VL53L0X_get_pal_range_status+0x2aa>
 800745a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800745e:	2b0a      	cmp	r3, #10
 8007460:	d003      	beq.n	800746a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007462:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d103      	bne.n	8007472 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800746a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746c:	2203      	movs	r2, #3
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e016      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007476:	2b04      	cmp	r3, #4
 8007478:	d003      	beq.n	8007482 <VL53L0X_get_pal_range_status+0x2c2>
 800747a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800747e:	2b01      	cmp	r3, #1
 8007480:	d103      	bne.n	800748a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007484:	2202      	movs	r2, #2
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e00a      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800748a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800748e:	2b01      	cmp	r3, #1
 8007490:	d103      	bne.n	800749a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e002      	b.n	80074a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800749a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80074a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	2200      	movs	r2, #0
 80074ac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80074ae:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80074b2:	461a      	mov	r2, r3
 80074b4:	2101      	movs	r1, #1
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7fc f8c2 	bl	8003640 <VL53L0X_GetLimitCheckEnable>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80074c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d14f      	bne.n	800756a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80074ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <VL53L0X_get_pal_range_status+0x31a>
 80074d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d103      	bne.n	80074e2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e0:	e002      	b.n	80074e8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80074ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80074f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d003      	beq.n	8007502 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80074fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d103      	bne.n	800750a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007508:	e002      	b.n	8007510 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007516:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800751a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <VL53L0X_get_pal_range_status+0x36a>
 8007522:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d103      	bne.n	8007532 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007530:	e002      	b.n	8007538 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800753e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <VL53L0X_get_pal_range_status+0x392>
 800754a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800754e:	2b01      	cmp	r3, #1
 8007550:	d103      	bne.n	800755a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007558:	e002      	b.n	8007560 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007566:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800756a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800756e:	4618      	mov	r0, r3
 8007570:	3740      	adds	r7, #64	; 0x40
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <VL53L0X_write_byte>:

#include "vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af02      	add	r7, sp, #8
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	461a      	mov	r2, r3
 8007586:	4603      	mov	r3, r0
 8007588:	70fb      	strb	r3, [r7, #3]
 800758a:	460b      	mov	r3, r1
 800758c:	70bb      	strb	r3, [r7, #2]
 800758e:	4613      	mov	r3, r2
 8007590:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <VL53L0X_write_byte+0x44>)
 8007594:	78bb      	ldrb	r3, [r7, #2]
 8007596:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 8007598:	4a08      	ldr	r2, [pc, #32]	; (80075bc <VL53L0X_write_byte+0x44>)
 800759a:	787b      	ldrb	r3, [r7, #1]
 800759c:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	b299      	uxth	r1, r3
 80075a2:	230a      	movs	r3, #10
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	2302      	movs	r3, #2
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <VL53L0X_write_byte+0x44>)
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f002 f82a 	bl	8009604 <HAL_I2C_Master_Transmit>
 80075b0:	4603      	mov	r3, r0

}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000c04 	.word	0x20000c04

080075c0 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	72fb      	strb	r3, [r7, #11]
 80075ce:	4613      	mov	r3, r2
 80075d0:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	b299      	uxth	r1, r3
 80075d6:	f107 020a 	add.w	r2, r7, #10
 80075da:	230a      	movs	r3, #10
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	2301      	movs	r3, #1
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f002 f80f 	bl	8009604 <HAL_I2C_Master_Transmit>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <VL53L0X_read_byte+0x30>
		return 1;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e00c      	b.n	800760a <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	b299      	uxth	r1, r3
 80075fa:	230a      	movs	r3, #10
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	2301      	movs	r3, #1
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f002 f8fc 	bl	8009800 <HAL_I2C_Master_Receive>
 8007608:	4603      	mov	r3, r0



}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	72fb      	strb	r3, [r7, #11]
 8007622:	4613      	mov	r3, r2
 8007624:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	b299      	uxth	r1, r3
 800762a:	f107 020a 	add.w	r2, r7, #10
 800762e:	230a      	movs	r3, #10
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2301      	movs	r3, #1
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f001 ffe5 	bl	8009604 <HAL_I2C_Master_Transmit>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <VL53L0X_read_dword+0x30>
		return 1;
 8007640:	2301      	movs	r3, #1
 8007642:	e021      	b.n	8007688 <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	b299      	uxth	r1, r3
 800764e:	230a      	movs	r3, #10
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2304      	movs	r3, #4
 8007654:	4a0e      	ldr	r2, [pc, #56]	; (8007690 <VL53L0X_read_dword+0x7c>)
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f002 f8d2 	bl	8009800 <HAL_I2C_Master_Receive>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <VL53L0X_read_dword+0x52>
		return 1;
 8007662:	2301      	movs	r3, #1
 8007664:	e010      	b.n	8007688 <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 8007666:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <VL53L0X_read_dword+0x7c>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 800766c:	4b08      	ldr	r3, [pc, #32]	; (8007690 <VL53L0X_read_dword+0x7c>)
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 8007674:	4b06      	ldr	r3, [pc, #24]	; (8007690 <VL53L0X_read_dword+0x7c>)
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	4413      	add	r3, r2
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <VL53L0X_read_dword+0x7c>)
 800767e:	78d2      	ldrb	r2, [r2, #3]
 8007680:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	return 0;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000c04 	.word	0x20000c04

08007694 <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af02      	add	r7, sp, #8
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	70fb      	strb	r3, [r7, #3]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70bb      	strb	r3, [r7, #2]
 80076aa:	4613      	mov	r3, r2
 80076ac:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 80076ae:	4a0d      	ldr	r2, [pc, #52]	; (80076e4 <VL53L0X_write_word+0x50>)
 80076b0:	78bb      	ldrb	r3, [r7, #2]
 80076b2:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 80076b4:	883b      	ldrh	r3, [r7, #0]
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <VL53L0X_write_word+0x50>)
 80076be:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 80076c0:	883b      	ldrh	r3, [r7, #0]
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <VL53L0X_write_word+0x50>)
 80076c6:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	b299      	uxth	r1, r3
 80076cc:	230a      	movs	r3, #10
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2303      	movs	r3, #3
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <VL53L0X_write_word+0x50>)
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 ff95 	bl	8009604 <HAL_I2C_Master_Transmit>
 80076da:	4603      	mov	r3, r0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000c04 	.word	0x20000c04

080076e8 <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	72fb      	strb	r3, [r7, #11]
 80076f6:	4613      	mov	r3, r2
 80076f8:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	b299      	uxth	r1, r3
 80076fe:	f107 020a 	add.w	r2, r7, #10
 8007702:	230a      	movs	r3, #10
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	2301      	movs	r3, #1
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 ff7b 	bl	8009604 <HAL_I2C_Master_Transmit>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <VL53L0X_read_word+0x30>
		return 1;
 8007714:	2301      	movs	r3, #1
 8007716:	e01d      	b.n	8007754 <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	b299      	uxth	r1, r3
 8007722:	230a      	movs	r3, #10
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2302      	movs	r3, #2
 8007728:	4a0c      	ldr	r2, [pc, #48]	; (800775c <VL53L0X_read_word+0x74>)
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f002 f868 	bl	8009800 <HAL_I2C_Master_Receive>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <VL53L0X_read_word+0x52>
		return 1;
 8007736:	2301      	movs	r3, #1
 8007738:	e00c      	b.n	8007754 <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 800773a:	4b08      	ldr	r3, [pc, #32]	; (800775c <VL53L0X_read_word+0x74>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	b29a      	uxth	r2, r3
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <VL53L0X_read_word+0x74>)
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	b29b      	uxth	r3, r3
 800774a:	4413      	add	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	801a      	strh	r2, [r3, #0]
	return 0;
 8007752:	2300      	movs	r3, #0

}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000c04 	.word	0x20000c04

08007760 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	607b      	str	r3, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	72fb      	strb	r3, [r7, #11]
 800776e:	4613      	mov	r3, r2
 8007770:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	b299      	uxth	r1, r3
 8007776:	f107 020a 	add.w	r2, r7, #10
 800777a:	230a      	movs	r3, #10
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	2301      	movs	r3, #1
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 ff3f 	bl	8009604 <HAL_I2C_Master_Transmit>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <VL53L0X_read_multi+0x30>
		return 1;
 800778c:	2301      	movs	r3, #1
 800778e:	e013      	b.n	80077b8 <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	b299      	uxth	r1, r3
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	b29a      	uxth	r2, r3
 800779e:	230a      	movs	r3, #10
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f002 f82a 	bl	8009800 <HAL_I2C_Master_Receive>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <VL53L0X_read_multi+0x56>
		return 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <VL53L0X_read_multi+0x58>
	}

	return 0;
 80077b6:	2300      	movs	r3, #0


}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607b      	str	r3, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	72fb      	strb	r3, [r7, #11]
 80077ce:	4613      	mov	r3, r2
 80077d0:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 80077d2:	4a0d      	ldr	r2, [pc, #52]	; (8007808 <VL53L0X_write_multi+0x48>)
 80077d4:	7abb      	ldrb	r3, [r7, #10]
 80077d6:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	461a      	mov	r2, r3
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	480b      	ldr	r0, [pc, #44]	; (800780c <VL53L0X_write_multi+0x4c>)
 80077e0:	f005 fafc 	bl	800cddc <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	b299      	uxth	r1, r3
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3301      	adds	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	230a      	movs	r3, #10
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	4a04      	ldr	r2, [pc, #16]	; (8007808 <VL53L0X_write_multi+0x48>)
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f001 ff03 	bl	8009604 <HAL_I2C_Master_Transmit>
 80077fe:	4603      	mov	r3, r0

}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000c04 	.word	0x20000c04
 800780c:	20000c05 	.word	0x20000c05

08007810 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	460b      	mov	r3, r1
 800781e:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007820:	2300      	movs	r3, #0
 8007822:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b3f      	cmp	r3, #63	; 0x3f
 800782c:	d901      	bls.n	8007832 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800782e:	23fc      	movs	r3, #252	; 0xfc
 8007830:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007838:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	7afa      	ldrb	r2, [r7, #11]
 8007844:	7df9      	ldrb	r1, [r7, #23]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f7ff ffb9 	bl	80077c0 <VL53L0X_write_multi>
 800784e:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007856:	23ec      	movs	r3, #236	; 0xec
 8007858:	77fb      	strb	r3, [r7, #31]

    return Status;
 800785a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007866:	b580      	push	{r7, lr}
 8007868:	b088      	sub	sp, #32
 800786a:	af02      	add	r7, sp, #8
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	460b      	mov	r3, r1
 8007874:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b3f      	cmp	r3, #63	; 0x3f
 800787e:	d901      	bls.n	8007884 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007880:	23fc      	movs	r3, #252	; 0xfc
 8007882:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800788a:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	7afa      	ldrb	r2, [r7, #11]
 8007896:	7db9      	ldrb	r1, [r7, #22]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f7ff ff60 	bl	8007760 <VL53L0X_read_multi>
 80078a0:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80078a8:	23ec      	movs	r3, #236	; 0xec
 80078aa:	75fb      	strb	r3, [r7, #23]

    return Status;
 80078ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
 80078c4:	4613      	mov	r3, r2
 80078c6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80078d2:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80078da:	78bb      	ldrb	r3, [r7, #2]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	7bb9      	ldrb	r1, [r7, #14]
 80078e0:	f7ff fe4a 	bl	8007578 <VL53L0X_write_byte>
 80078e4:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80078ec:	23ec      	movs	r3, #236	; 0xec
 80078ee:	73fb      	strb	r3, [r7, #15]

    return Status;
 80078f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
 8007908:	4613      	mov	r3, r2
 800790a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007916:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800791e:	883b      	ldrh	r3, [r7, #0]
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	7bb9      	ldrb	r1, [r7, #14]
 8007924:	f7ff feb6 	bl	8007694 <VL53L0X_write_word>
 8007928:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007930:	23ec      	movs	r3, #236	; 0xec
 8007932:	73fb      	strb	r3, [r7, #15]

    return Status;
 8007934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4603      	mov	r3, r0
 8007950:	70fb      	strb	r3, [r7, #3]
 8007952:	460b      	mov	r3, r1
 8007954:	70bb      	strb	r3, [r7, #2]
 8007956:	4613      	mov	r3, r2
 8007958:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007964:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800796c:	f107 030f 	add.w	r3, r7, #15
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	7db9      	ldrb	r1, [r7, #22]
 8007974:	f7ff fe24 	bl	80075c0 <VL53L0X_read_byte>
 8007978:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007980:	23ec      	movs	r3, #236	; 0xec
 8007982:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8007984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d115      	bne.n	80079b8 <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 800798c:	7bfa      	ldrb	r2, [r7, #15]
 800798e:	78bb      	ldrb	r3, [r7, #2]
 8007990:	4013      	ands	r3, r2
 8007992:	b2da      	uxtb	r2, r3
 8007994:	787b      	ldrb	r3, [r7, #1]
 8007996:	4313      	orrs	r3, r2
 8007998:	b2db      	uxtb	r3, r3
 800799a:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	7db9      	ldrb	r1, [r7, #22]
 80079a8:	f7ff fde6 	bl	8007578 <VL53L0X_write_byte>
 80079ac:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80079b4:	23ec      	movs	r3, #236	; 0xec
 80079b6:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 80079b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	460b      	mov	r3, r1
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80079dc:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80079e4:	7afa      	ldrb	r2, [r7, #11]
 80079e6:	7db9      	ldrb	r1, [r7, #22]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f7ff fde9 	bl	80075c0 <VL53L0X_read_byte>
 80079ee:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80079f6:	23ec      	movs	r3, #236	; 0xec
 80079f8:	75fb      	strb	r3, [r7, #23]

    return Status;
 80079fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007a1e:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007a26:	7afa      	ldrb	r2, [r7, #11]
 8007a28:	7db9      	ldrb	r1, [r7, #22]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f7ff fe5c 	bl	80076e8 <VL53L0X_read_word>
 8007a30:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a38:	23ec      	movs	r3, #236	; 0xec
 8007a3a:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	460b      	mov	r3, r1
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007a60:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007a68:	7afa      	ldrb	r2, [r7, #11]
 8007a6a:	7db9      	ldrb	r1, [r7, #22]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f7ff fdd1 	bl	8007614 <VL53L0X_read_dword>
 8007a72:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a7a:	23ec      	movs	r3, #236	; 0xec
 8007a7c:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    vl_api_delay(1);
 8007a96:	2001      	movs	r0, #1
 8007a98:	f000 f806 	bl	8007aa8 <vl_api_delay>

    LOG_FUNCTION_END(status);
    return status;
 8007a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <vl_api_delay>:
 */

#include "vl_api_config.h"

/* Odczekanie czasu w ms */
void vl_api_delay(uint16_t time_ms){
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms); // to można czymś zastąpić
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f9f5 	bl	8007ea4 <HAL_Delay>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <VL_init_sensor_setAddres>:
}
*/

/* Set addres of VL sensor */
uint8_t VL_init_sensor_setAddres(VL53L0X_DEV dev, uint8_t addr)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
	uint8_t status=0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
	vl_api_delay(100);
 8007ad2:	2064      	movs	r0, #100	; 0x64
 8007ad4:	f7ff ffe8 	bl	8007aa8 <vl_api_delay>

	status |= VL53L0X_DataInit(dev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fa ff17 	bl	800290c <VL53L0X_DataInit>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b25b      	sxtb	r3, r3
 8007aea:	73fb      	strb	r3, [r7, #15]
	status |= VL53L0X_SetDeviceAddress(dev, addr);
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fa fef2 	bl	80028da <VL53L0X_SetDeviceAddress>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	73fb      	strb	r3, [r7, #15]

	if(status){return status;}
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <VL_init_sensor_setAddres+0x4c>
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	e004      	b.n	8007b18 <VL_init_sensor_setAddres+0x56>

	dev->I2cDevAddr = addr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	return status;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <VL_set_interrupt>:


/* Set interrupt mode */
uint8_t VL_set_interrupt(VL53L0X_DEV dev, uint8_t state, VL53L0X_InterruptPolarity polarity)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	70bb      	strb	r3, [r7, #2]
	if(state) // if inerrupts ON
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <VL_set_interrupt+0x2c>
	{
		return VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_SINGLE_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, polarity);
 8007b36:	78bb      	ldrb	r3, [r7, #2]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fc f9c9 	bl	8003ed8 <VL53L0X_SetGpioConfig>
 8007b46:	4603      	mov	r3, r0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e009      	b.n	8007b60 <VL_set_interrupt+0x40>
	} else {  // if inerrupts OFF
		return VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_SINGLE_RANGING, VL53L0X_GPIOFUNCTIONALITY_OFF, polarity);
 8007b4c:	78bb      	ldrb	r3, [r7, #2]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fc f9be 	bl	8003ed8 <VL53L0X_SetGpioConfig>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	b2db      	uxtb	r3, r3
	}
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <VL_init_parameters>:



uint8_t VL_init_parameters(VL53L0X_Dev_t *dev, RangingModeConfig rangingConfig, VL53L0X_DeviceModes mode)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
 8007b74:	4613      	mov	r3, r2
 8007b76:	70bb      	strb	r3, [r7, #2]
	int status;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t) (1 * 65536);
 8007b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (50 * 65536);
 8007b7e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007b82:	623b      	str	r3, [r7, #32]
	uint32_t timingBudget = 33000;
 8007b84:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007b88:	61fb      	str	r3, [r7, #28]
	uint8_t preRangeVcselPeriod = 14;
 8007b8a:	230e      	movs	r3, #14
 8007b8c:	76fb      	strb	r3, [r7, #27]
	uint8_t finalRangeVcselPeriod = 10;
 8007b8e:	230a      	movs	r3, #10
 8007b90:	76bb      	strb	r3, [r7, #26]

	status = VL53L0X_StaticInit(dev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fb f81e 	bl	8002bd4 <VL53L0X_StaticInit>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <VL_init_parameters+0x40>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e0cd      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8007ba8:	f107 0212 	add.w	r2, r7, #18
 8007bac:	f107 0313 	add.w	r3, r7, #19
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fb febe 	bl	8003934 <VL53L0X_PerformRefCalibration>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <VL_init_parameters+0x60>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e0bd      	b.n	8007d44 <VL_init_parameters+0x1dc>



	status = VL53L0X_PerformRefSpadManagement(dev, &refSpadCount, &isApertureSpads);
 8007bc8:	f107 020b 	add.w	r2, r7, #11
 8007bcc:	f107 030c 	add.w	r3, r7, #12
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fc fb3c 	bl	8004250 <VL53L0X_PerformRefSpadManagement>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <VL_init_parameters+0x80>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	e0ad      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetDeviceMode(dev, mode);
 8007be8:	78bb      	ldrb	r3, [r7, #2]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7fb fa03 	bl	8002ff8 <VL53L0X_SetDeviceMode>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <VL_init_parameters+0x9a>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	e0a0      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckEnable(dev,
 8007c02:	2201      	movs	r2, #1
 8007c04:	2100      	movs	r1, #0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fb fc8e 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
	if (status){ return status; }
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <VL_init_parameters+0xb4>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	e093      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckEnable(dev,
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fb fc81 	bl	8003528 <VL53L0X_SetLimitCheckEnable>
 8007c26:	4603      	mov	r3, r0
 8007c28:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
	if (status){ return status; }
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <VL_init_parameters+0xce>
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	e086      	b.n	8007d44 <VL_init_parameters+0x1dc>

	/* Ranging configuration */
	switch (rangingConfig)
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d012      	beq.n	8007c62 <VL_init_parameters+0xfa>
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d002      	beq.n	8007c46 <VL_init_parameters+0xde>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01b      	beq.n	8007c7c <VL_init_parameters+0x114>
 8007c44:	e028      	b.n	8007c98 <VL_init_parameters+0x130>
	{
	case LONG_RANGE:
		signalLimit = (FixPoint1616_t) (0.1 * 65536);
 8007c46:	f641 1399 	movw	r3, #6553	; 0x1999
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (60 * 65536);
 8007c4c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8007c50:	623b      	str	r3, [r7, #32]
		timingBudget = 33000;
 8007c52:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007c56:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 18;
 8007c58:	2312      	movs	r3, #18
 8007c5a:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 14;
 8007c5c:	230e      	movs	r3, #14
 8007c5e:	76bb      	strb	r3, [r7, #26]
		break;
 8007c60:	e01d      	b.n	8007c9e <VL_init_parameters+0x136>
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t) (0.25 * 65536);
 8007c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (18 * 65536);
 8007c68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8007c6c:	623b      	str	r3, [r7, #32]
		timingBudget = 200000;
 8007c6e:	4b37      	ldr	r3, [pc, #220]	; (8007d4c <VL_init_parameters+0x1e4>)
 8007c70:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 14;
 8007c72:	230e      	movs	r3, #14
 8007c74:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 10;
 8007c76:	230a      	movs	r3, #10
 8007c78:	76bb      	strb	r3, [r7, #26]
		break;
 8007c7a:	e010      	b.n	8007c9e <VL_init_parameters+0x136>
	case HIGH_SPEED:
		signalLimit = (FixPoint1616_t) (1 * 65536);
 8007c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (50 * 65536);
 8007c82:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007c86:	623b      	str	r3, [r7, #32]
		timingBudget = 20000;
 8007c88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007c8c:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 14;
 8007c8e:	230e      	movs	r3, #14
 8007c90:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 10;
 8007c92:	230a      	movs	r3, #10
 8007c94:	76bb      	strb	r3, [r7, #26]
		break;
 8007c96:	e002      	b.n	8007c9e <VL_init_parameters+0x136>
	default:
		return status;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e052      	b.n	8007d44 <VL_init_parameters+0x1dc>
	}

	status = VL53L0X_SetLimitCheckValue(dev,
 8007c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fb fcf0 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
	if (status){ return status; }
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <VL_init_parameters+0x150>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e045      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckValue(dev,
 8007cb8:	6a3a      	ldr	r2, [r7, #32]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fb fce3 	bl	8003688 <VL53L0X_SetLimitCheckValue>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
	if (status){ return status; }
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <VL_init_parameters+0x16a>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e038      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 8007cd2:	69f9      	ldr	r1, [r7, #28]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7fb fa09 	bl	80030ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <VL_init_parameters+0x182>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	e02c      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetVcselPulsePeriod(dev,
 8007cea:	7efb      	ldrb	r3, [r7, #27]
 8007cec:	461a      	mov	r2, r3
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fb fa21 	bl	8003138 <VL53L0X_SetVcselPulsePeriod>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	617b      	str	r3, [r7, #20]
	VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
	if (status){ return status; }
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <VL_init_parameters+0x19e>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e01e      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_SetVcselPulsePeriod(dev,
 8007d06:	7ebb      	ldrb	r3, [r7, #26]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fb fa13 	bl	8003138 <VL53L0X_SetVcselPulsePeriod>
 8007d12:	4603      	mov	r3, r0
 8007d14:	617b      	str	r3, [r7, #20]
	VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
	if (status){ return status; }
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <VL_init_parameters+0x1ba>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	e010      	b.n	8007d44 <VL_init_parameters+0x1dc>

	status = VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8007d22:	f107 0212 	add.w	r2, r7, #18
 8007d26:	f107 0313 	add.w	r3, r7, #19
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fb fe01 	bl	8003934 <VL53L0X_PerformRefCalibration>
 8007d32:	4603      	mov	r3, r0
 8007d34:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <VL_init_parameters+0x1da>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	e000      	b.n	8007d44 <VL_init_parameters+0x1dc>
	return 0;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3728      	adds	r7, #40	; 0x28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	00030d40 	.word	0x00030d40

08007d50 <VL_start_measurement_non_blocking>:
			return 0;
	}
	return 1;
}

uint8_t VL_start_measurement_non_blocking(VL53L0X_DEV dev){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    return VL53L0X_StartMeasurement(dev);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fb fe67 	bl	8003a2c <VL53L0X_StartMeasurement>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	b2db      	uxtb	r3, r3
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d72:	e003      	b.n	8007d7c <LoopCopyDataInit>

08007d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d7a:	3104      	adds	r1, #4

08007d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007d7c:	480b      	ldr	r0, [pc, #44]	; (8007dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007d84:	d3f6      	bcc.n	8007d74 <CopyDataInit>
  ldr  r2, =_sbss
 8007d86:	4a0b      	ldr	r2, [pc, #44]	; (8007db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007d88:	e002      	b.n	8007d90 <LoopFillZerobss>

08007d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007d8c:	f842 3b04 	str.w	r3, [r2], #4

08007d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007d94:	d3f9      	bcc.n	8007d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d96:	f7fa fd77 	bl	8002888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d9a:	f004 ff97 	bl	800cccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d9e:	f7f9 f935 	bl	800100c <main>
  bx  lr    
 8007da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007da8:	0800dac8 	.word	0x0800dac8
  ldr  r0, =_sdata
 8007dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007db0:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 8007db4:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 8007db8:	20000c4c 	.word	0x20000c4c

08007dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007dbc:	e7fe      	b.n	8007dbc <ADC_IRQHandler>
	...

08007dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <HAL_Init+0x40>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0d      	ldr	r2, [pc, #52]	; (8007e00 <HAL_Init+0x40>)
 8007dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HAL_Init+0x40>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <HAL_Init+0x40>)
 8007dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <HAL_Init+0x40>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a07      	ldr	r2, [pc, #28]	; (8007e00 <HAL_Init+0x40>)
 8007de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007de8:	2003      	movs	r0, #3
 8007dea:	f000 fd33 	bl	8008854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dee:	2000      	movs	r0, #0
 8007df0:	f000 f808 	bl	8007e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007df4:	f7fa f940 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40023c00 	.word	0x40023c00

08007e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e0c:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <HAL_InitTick+0x54>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <HAL_InitTick+0x58>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fd4b 	bl	80088be <HAL_SYSTICK_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e00e      	b.n	8007e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b0f      	cmp	r3, #15
 8007e36:	d80a      	bhi.n	8007e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	f000 fd13 	bl	800886a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e44:	4a06      	ldr	r2, [pc, #24]	; (8007e60 <HAL_InitTick+0x5c>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e000      	b.n	8007e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000000 	.word	0x20000000
 8007e5c:	200002c4 	.word	0x200002c4
 8007e60:	200002c0 	.word	0x200002c0

08007e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <HAL_IncTick+0x20>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_IncTick+0x24>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4413      	add	r3, r2
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_IncTick+0x24>)
 8007e76:	6013      	str	r3, [r2, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	200002c4 	.word	0x200002c4
 8007e88:	20000c44 	.word	0x20000c44

08007e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e90:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <HAL_GetTick+0x14>)
 8007e92:	681b      	ldr	r3, [r3, #0]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000c44 	.word	0x20000c44

08007ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007eac:	f7ff ffee 	bl	8007e8c <HAL_GetTick>
 8007eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebc:	d005      	beq.n	8007eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <HAL_Delay+0x40>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007eca:	bf00      	nop
 8007ecc:	f7ff ffde 	bl	8007e8c <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d8f7      	bhi.n	8007ecc <HAL_Delay+0x28>
  {
  }
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200002c4 	.word	0x200002c4

08007ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e033      	b.n	8007f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fa f8de 	bl	80020c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f003 0310 	and.w	r3, r3, #16
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d118      	bne.n	8007f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f2e:	f023 0302 	bic.w	r3, r3, #2
 8007f32:	f043 0202 	orr.w	r2, r3, #2
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa3c 	bl	80083b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
 8007f56:	e001      	b.n	8007f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_ADC_Start_DMA+0x1e>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e0b1      	b.n	80080f2 <HAL_ADC_Start_DMA+0x182>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d018      	beq.n	8007fd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fb4:	4b51      	ldr	r3, [pc, #324]	; (80080fc <HAL_ADC_Start_DMA+0x18c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a51      	ldr	r2, [pc, #324]	; (8008100 <HAL_ADC_Start_DMA+0x190>)
 8007fba:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbe:	0c9a      	lsrs	r2, r3, #18
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007fc8:	e002      	b.n	8007fd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f9      	bne.n	8007fca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 8085 	bne.w	80080f0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008024:	d106      	bne.n	8008034 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	f023 0206 	bic.w	r2, r3, #6
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	645a      	str	r2, [r3, #68]	; 0x44
 8008032:	e002      	b.n	800803a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008042:	4b30      	ldr	r3, [pc, #192]	; (8008104 <HAL_ADC_Start_DMA+0x194>)
 8008044:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	4a2f      	ldr	r2, [pc, #188]	; (8008108 <HAL_ADC_Start_DMA+0x198>)
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	4a2e      	ldr	r2, [pc, #184]	; (800810c <HAL_ADC_Start_DMA+0x19c>)
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	4a2d      	ldr	r2, [pc, #180]	; (8008110 <HAL_ADC_Start_DMA+0x1a0>)
 800805c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008066:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008076:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008086:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	334c      	adds	r3, #76	; 0x4c
 8008092:	4619      	mov	r1, r3
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f000 fccc 	bl	8008a34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10f      	bne.n	80080c8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d11c      	bne.n	80080f0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	e013      	b.n	80080f0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a11      	ldr	r2, [pc, #68]	; (8008114 <HAL_ADC_Start_DMA+0x1a4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d10e      	bne.n	80080f0 <HAL_ADC_Start_DMA+0x180>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80080ee:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000000 	.word	0x20000000
 8008100:	431bde83 	.word	0x431bde83
 8008104:	40012300 	.word	0x40012300
 8008108:	080085b1 	.word	0x080085b1
 800810c:	0800866b 	.word	0x0800866b
 8008110:	08008687 	.word	0x08008687
 8008114:	40012000 	.word	0x40012000

08008118 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_ADC_ConfigChannel+0x1c>
 800816c:	2302      	movs	r3, #2
 800816e:	e113      	b.n	8008398 <HAL_ADC_ConfigChannel+0x244>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b09      	cmp	r3, #9
 800817e:	d925      	bls.n	80081cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68d9      	ldr	r1, [r3, #12]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	4613      	mov	r3, r2
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	4413      	add	r3, r2
 8008194:	3b1e      	subs	r3, #30
 8008196:	2207      	movs	r2, #7
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43da      	mvns	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	400a      	ands	r2, r1
 80081a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68d9      	ldr	r1, [r3, #12]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	4618      	mov	r0, r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	4403      	add	r3, r0
 80081be:	3b1e      	subs	r3, #30
 80081c0:	409a      	lsls	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	e022      	b.n	8008212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6919      	ldr	r1, [r3, #16]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	4613      	mov	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	4413      	add	r3, r2
 80081e0:	2207      	movs	r2, #7
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	43da      	mvns	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	400a      	ands	r2, r1
 80081ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6919      	ldr	r1, [r3, #16]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	4618      	mov	r0, r3
 8008202:	4603      	mov	r3, r0
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	4403      	add	r3, r0
 8008208:	409a      	lsls	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b06      	cmp	r3, #6
 8008218:	d824      	bhi.n	8008264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	3b05      	subs	r3, #5
 800822c:	221f      	movs	r2, #31
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43da      	mvns	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	400a      	ands	r2, r1
 800823a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	4618      	mov	r0, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	3b05      	subs	r3, #5
 8008256:	fa00 f203 	lsl.w	r2, r0, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	635a      	str	r2, [r3, #52]	; 0x34
 8008262:	e04c      	b.n	80082fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b0c      	cmp	r3, #12
 800826a:	d824      	bhi.n	80082b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	3b23      	subs	r3, #35	; 0x23
 800827e:	221f      	movs	r2, #31
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	43da      	mvns	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	400a      	ands	r2, r1
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	4618      	mov	r0, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	3b23      	subs	r3, #35	; 0x23
 80082a8:	fa00 f203 	lsl.w	r2, r0, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	631a      	str	r2, [r3, #48]	; 0x30
 80082b4:	e023      	b.n	80082fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	3b41      	subs	r3, #65	; 0x41
 80082c8:	221f      	movs	r2, #31
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43da      	mvns	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	400a      	ands	r2, r1
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	4618      	mov	r0, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	3b41      	subs	r3, #65	; 0x41
 80082f2:	fa00 f203 	lsl.w	r2, r0, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80082fe:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <HAL_ADC_ConfigChannel+0x250>)
 8008300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a28      	ldr	r2, [pc, #160]	; (80083a8 <HAL_ADC_ConfigChannel+0x254>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10f      	bne.n	800832c <HAL_ADC_ConfigChannel+0x1d8>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b12      	cmp	r3, #18
 8008312:	d10b      	bne.n	800832c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <HAL_ADC_ConfigChannel+0x254>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d12b      	bne.n	800838e <HAL_ADC_ConfigChannel+0x23a>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <HAL_ADC_ConfigChannel+0x258>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <HAL_ADC_ConfigChannel+0x1f4>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b11      	cmp	r3, #17
 8008346:	d122      	bne.n	800838e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a11      	ldr	r2, [pc, #68]	; (80083ac <HAL_ADC_ConfigChannel+0x258>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d111      	bne.n	800838e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800836a:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <HAL_ADC_ConfigChannel+0x25c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a11      	ldr	r2, [pc, #68]	; (80083b4 <HAL_ADC_ConfigChannel+0x260>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	0c9a      	lsrs	r2, r3, #18
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008380:	e002      	b.n	8008388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3b01      	subs	r3, #1
 8008386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f9      	bne.n	8008382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40012300 	.word	0x40012300
 80083a8:	40012000 	.word	0x40012000
 80083ac:	10000012 	.word	0x10000012
 80083b0:	20000000 	.word	0x20000000
 80083b4:	431bde83 	.word	0x431bde83

080083b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083c0:	4b79      	ldr	r3, [pc, #484]	; (80085a8 <ADC_Init+0x1f0>)
 80083c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	431a      	orrs	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	021a      	lsls	r2, r3, #8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6859      	ldr	r1, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6899      	ldr	r1, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	4a58      	ldr	r2, [pc, #352]	; (80085ac <ADC_Init+0x1f4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d022      	beq.n	8008496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800845e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6899      	ldr	r1, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6899      	ldr	r1, [r3, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	e00f      	b.n	80084b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80084b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0202 	bic.w	r2, r2, #2
 80084c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6899      	ldr	r1, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7e1b      	ldrb	r3, [r3, #24]
 80084d0:	005a      	lsls	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6859      	ldr	r1, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	3b01      	subs	r3, #1
 8008510:	035a      	lsls	r2, r3, #13
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	e007      	b.n	800852c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800852a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800853a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	3b01      	subs	r3, #1
 8008548:	051a      	lsls	r2, r3, #20
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6899      	ldr	r1, [r3, #8]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800856e:	025a      	lsls	r2, r3, #9
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6899      	ldr	r1, [r3, #8]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	029a      	lsls	r2, r3, #10
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	40012300 	.word	0x40012300
 80085ac:	0f000001 	.word	0x0f000001

080085b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d13c      	bne.n	8008644 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d12b      	bne.n	800863c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d127      	bne.n	800863c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008604:	2b00      	cmp	r3, #0
 8008606:	d119      	bne.n	800863c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0220 	bic.w	r2, r2, #32
 8008616:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d105      	bne.n	800863c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f043 0201 	orr.w	r2, r3, #1
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff fd6b 	bl	8008118 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008642:	e00e      	b.n	8008662 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fd75 	bl	8008140 <HAL_ADC_ErrorCallback>
}
 8008656:	e004      	b.n	8008662 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008676:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7ff fd57 	bl	800812c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2240      	movs	r2, #64	; 0x40
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	f043 0204 	orr.w	r2, r3, #4
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fd4a 	bl	8008140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <__NVIC_SetPriorityGrouping+0x44>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086d0:	4013      	ands	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086e6:	4a04      	ldr	r2, [pc, #16]	; (80086f8 <__NVIC_SetPriorityGrouping+0x44>)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	60d3      	str	r3, [r2, #12]
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	e000ed00 	.word	0xe000ed00

080086fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008700:	4b04      	ldr	r3, [pc, #16]	; (8008714 <__NVIC_GetPriorityGrouping+0x18>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	f003 0307 	and.w	r3, r3, #7
}
 800870a:	4618      	mov	r0, r3
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	e000ed00 	.word	0xe000ed00

08008718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	db0b      	blt.n	8008742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f003 021f 	and.w	r2, r3, #31
 8008730:	4907      	ldr	r1, [pc, #28]	; (8008750 <__NVIC_EnableIRQ+0x38>)
 8008732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	2001      	movs	r0, #1
 800873a:	fa00 f202 	lsl.w	r2, r0, r2
 800873e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	e000e100 	.word	0xe000e100

08008754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008764:	2b00      	cmp	r3, #0
 8008766:	db0a      	blt.n	800877e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	490c      	ldr	r1, [pc, #48]	; (80087a0 <__NVIC_SetPriority+0x4c>)
 800876e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008772:	0112      	lsls	r2, r2, #4
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	440b      	add	r3, r1
 8008778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800877c:	e00a      	b.n	8008794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	4908      	ldr	r1, [pc, #32]	; (80087a4 <__NVIC_SetPriority+0x50>)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	3b04      	subs	r3, #4
 800878c:	0112      	lsls	r2, r2, #4
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	440b      	add	r3, r1
 8008792:	761a      	strb	r2, [r3, #24]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	e000e100 	.word	0xe000e100
 80087a4:	e000ed00 	.word	0xe000ed00

080087a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f1c3 0307 	rsb	r3, r3, #7
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	bf28      	it	cs
 80087c6:	2304      	movcs	r3, #4
 80087c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	3304      	adds	r3, #4
 80087ce:	2b06      	cmp	r3, #6
 80087d0:	d902      	bls.n	80087d8 <NVIC_EncodePriority+0x30>
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	3b03      	subs	r3, #3
 80087d6:	e000      	b.n	80087da <NVIC_EncodePriority+0x32>
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43da      	mvns	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	401a      	ands	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087f0:	f04f 31ff 	mov.w	r1, #4294967295
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	fa01 f303 	lsl.w	r3, r1, r3
 80087fa:	43d9      	mvns	r1, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008800:	4313      	orrs	r3, r2
         );
}
 8008802:	4618      	mov	r0, r3
 8008804:	3724      	adds	r7, #36	; 0x24
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3b01      	subs	r3, #1
 800881c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008820:	d301      	bcc.n	8008826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008822:	2301      	movs	r3, #1
 8008824:	e00f      	b.n	8008846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008826:	4a0a      	ldr	r2, [pc, #40]	; (8008850 <SysTick_Config+0x40>)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3b01      	subs	r3, #1
 800882c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800882e:	210f      	movs	r1, #15
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	f7ff ff8e 	bl	8008754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <SysTick_Config+0x40>)
 800883a:	2200      	movs	r2, #0
 800883c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <SysTick_Config+0x40>)
 8008840:	2207      	movs	r2, #7
 8008842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	e000e010 	.word	0xe000e010

08008854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ff29 	bl	80086b4 <__NVIC_SetPriorityGrouping>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	4603      	mov	r3, r0
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800887c:	f7ff ff3e 	bl	80086fc <__NVIC_GetPriorityGrouping>
 8008880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	6978      	ldr	r0, [r7, #20]
 8008888:	f7ff ff8e 	bl	80087a8 <NVIC_EncodePriority>
 800888c:	4602      	mov	r2, r0
 800888e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff ff5d 	bl	8008754 <__NVIC_SetPriority>
}
 800889a:	bf00      	nop
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	4603      	mov	r3, r0
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff ff31 	bl	8008718 <__NVIC_EnableIRQ>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff ffa2 	bl	8008810 <SysTick_Config>
 80088cc:	4603      	mov	r3, r0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80088e4:	f7ff fad2 	bl	8007e8c <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e099      	b.n	8008a28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008914:	e00f      	b.n	8008936 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008916:	f7ff fab9 	bl	8007e8c <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b05      	cmp	r3, #5
 8008922:	d908      	bls.n	8008936 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2203      	movs	r2, #3
 800892e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e078      	b.n	8008a28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e8      	bne.n	8008916 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4b38      	ldr	r3, [pc, #224]	; (8008a30 <HAL_DMA_Init+0x158>)
 8008950:	4013      	ands	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008962:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800896e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800897a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b04      	cmp	r3, #4
 800898e:	d107      	bne.n	80089a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	4313      	orrs	r3, r2
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d117      	bne.n	80089fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa91 	bl	8008f04 <DMA_CheckFifoParam>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80089f6:	2301      	movs	r3, #1
 80089f8:	e016      	b.n	8008a28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa48 	bl	8008e98 <DMA_CalcBaseAndBitshift>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a10:	223f      	movs	r2, #63	; 0x3f
 8008a12:	409a      	lsls	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	f010803f 	.word	0xf010803f

08008a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_DMA_Start_IT+0x26>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e040      	b.n	8008adc <HAL_DMA_Start_IT+0xa8>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d12f      	bne.n	8008ace <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f9da 	bl	8008e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8c:	223f      	movs	r2, #63	; 0x3f
 8008a8e:	409a      	lsls	r2, r3
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0216 	orr.w	r2, r2, #22
 8008aa2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d007      	beq.n	8008abc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e005      	b.n	8008ada <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d004      	beq.n	8008b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2280      	movs	r2, #128	; 0x80
 8008afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e00c      	b.n	8008b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2205      	movs	r2, #5
 8008b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b34:	4b92      	ldr	r3, [pc, #584]	; (8008d80 <HAL_DMA_IRQHandler+0x258>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a92      	ldr	r2, [pc, #584]	; (8008d84 <HAL_DMA_IRQHandler+0x25c>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	0a9b      	lsrs	r3, r3, #10
 8008b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b52:	2208      	movs	r2, #8
 8008b54:	409a      	lsls	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d01a      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d013      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0204 	bic.w	r2, r2, #4
 8008b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b80:	2208      	movs	r2, #8
 8008b82:	409a      	lsls	r2, r3
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8c:	f043 0201 	orr.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b98:	2201      	movs	r2, #1
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d012      	beq.n	8008bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	409a      	lsls	r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	f043 0202 	orr.w	r2, r3, #2
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bce:	2204      	movs	r2, #4
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d012      	beq.n	8008c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bec:	2204      	movs	r2, #4
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	f043 0204 	orr.w	r2, r3, #4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c04:	2210      	movs	r2, #16
 8008c06:	409a      	lsls	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d043      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d03c      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c22:	2210      	movs	r2, #16
 8008c24:	409a      	lsls	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d018      	beq.n	8008c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d108      	bne.n	8008c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d024      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
 8008c56:	e01f      	b.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01b      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
 8008c68:	e016      	b.n	8008c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d107      	bne.n	8008c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0208 	bic.w	r2, r2, #8
 8008c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	409a      	lsls	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 808e 	beq.w	8008dc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8086 	beq.w	8008dc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	409a      	lsls	r2, r3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d136      	bne.n	8008d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0216 	bic.w	r2, r2, #22
 8008ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <HAL_DMA_IRQHandler+0x1da>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0208 	bic.w	r2, r2, #8
 8008d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d16:	223f      	movs	r2, #63	; 0x3f
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d07d      	beq.n	8008e32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
        }
        return;
 8008d3e:	e078      	b.n	8008e32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01c      	beq.n	8008d88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d108      	bne.n	8008d6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d030      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	e02b      	b.n	8008dc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d027      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	4798      	blx	r3
 8008d7e:	e022      	b.n	8008dc6 <HAL_DMA_IRQHandler+0x29e>
 8008d80:	20000000 	.word	0x20000000
 8008d84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10f      	bne.n	8008db6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0210 	bic.w	r2, r2, #16
 8008da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d032      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d022      	beq.n	8008e20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2205      	movs	r2, #5
 8008dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	3301      	adds	r3, #1
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d307      	bcc.n	8008e0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f2      	bne.n	8008df2 <HAL_DMA_IRQHandler+0x2ca>
 8008e0c:	e000      	b.n	8008e10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008e0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
 8008e30:	e000      	b.n	8008e34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008e32:	bf00      	nop
    }
  }
}
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop

08008e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d108      	bne.n	8008e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008e7a:	e007      	b.n	8008e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3b10      	subs	r3, #16
 8008ea8:	4a14      	ldr	r2, [pc, #80]	; (8008efc <DMA_CalcBaseAndBitshift+0x64>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008eb2:	4a13      	ldr	r2, [pc, #76]	; (8008f00 <DMA_CalcBaseAndBitshift+0x68>)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d909      	bls.n	8008eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008ece:	f023 0303 	bic.w	r3, r3, #3
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8008ed8:	e007      	b.n	8008eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	aaaaaaab 	.word	0xaaaaaaab
 8008f00:	0800da18 	.word	0x0800da18

08008f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d11f      	bne.n	8008f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d855      	bhi.n	8008fd0 <DMA_CheckFifoParam+0xcc>
 8008f24:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <DMA_CheckFifoParam+0x28>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f3d 	.word	0x08008f3d
 8008f30:	08008f4f 	.word	0x08008f4f
 8008f34:	08008f3d 	.word	0x08008f3d
 8008f38:	08008fd1 	.word	0x08008fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d045      	beq.n	8008fd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f4c:	e042      	b.n	8008fd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f56:	d13f      	bne.n	8008fd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f5c:	e03c      	b.n	8008fd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f66:	d121      	bne.n	8008fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d836      	bhi.n	8008fdc <DMA_CheckFifoParam+0xd8>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <DMA_CheckFifoParam+0x70>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f85 	.word	0x08008f85
 8008f78:	08008f8b 	.word	0x08008f8b
 8008f7c:	08008f85 	.word	0x08008f85
 8008f80:	08008f9d 	.word	0x08008f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
      break;
 8008f88:	e02f      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d024      	beq.n	8008fe0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f9a:	e021      	b.n	8008fe0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008fa4:	d11e      	bne.n	8008fe4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008faa:	e01b      	b.n	8008fe4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d902      	bls.n	8008fb8 <DMA_CheckFifoParam+0xb4>
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d003      	beq.n	8008fbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008fb6:	e018      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbc:	e015      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e00b      	b.n	8008fe8 <DMA_CheckFifoParam+0xe4>
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e00a      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e008      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e006      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e004      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e002      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;   
 8008fe4:	bf00      	nop
 8008fe6:	e000      	b.n	8008fea <DMA_CheckFifoParam+0xe6>
      break;
 8008fe8:	bf00      	nop
    }
  } 
  
  return status; 
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b089      	sub	sp, #36	; 0x24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800900a:	2300      	movs	r3, #0
 800900c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	e159      	b.n	80092c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009014:	2201      	movs	r2, #1
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4013      	ands	r3, r2
 8009026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	429a      	cmp	r2, r3
 800902e:	f040 8148 	bne.w	80092c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d00b      	beq.n	8009052 <HAL_GPIO_Init+0x5a>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d007      	beq.n	8009052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009046:	2b11      	cmp	r3, #17
 8009048:	d003      	beq.n	8009052 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b12      	cmp	r3, #18
 8009050:	d130      	bne.n	80090b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	2203      	movs	r2, #3
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4013      	ands	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	4313      	orrs	r3, r2
 800907a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009088:	2201      	movs	r2, #1
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	43db      	mvns	r3, r3
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4013      	ands	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	f003 0201 	and.w	r2, r3, #1
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	2203      	movs	r2, #3
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	43db      	mvns	r3, r3
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	4013      	ands	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	4313      	orrs	r3, r2
 80090dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d003      	beq.n	80090f4 <HAL_GPIO_Init+0xfc>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	2b12      	cmp	r3, #18
 80090f2:	d123      	bne.n	800913c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	08da      	lsrs	r2, r3, #3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3208      	adds	r2, #8
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	220f      	movs	r2, #15
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	43db      	mvns	r3, r3
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	4013      	ands	r3, r2
 8009116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	fa02 f303 	lsl.w	r3, r2, r3
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	4313      	orrs	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	08da      	lsrs	r2, r3, #3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3208      	adds	r2, #8
 8009136:	69b9      	ldr	r1, [r7, #24]
 8009138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	2203      	movs	r2, #3
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	4013      	ands	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f003 0203 	and.w	r2, r3, #3
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	4313      	orrs	r3, r2
 8009168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80a2 	beq.w	80092c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	4b56      	ldr	r3, [pc, #344]	; (80092dc <HAL_GPIO_Init+0x2e4>)
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	4a55      	ldr	r2, [pc, #340]	; (80092dc <HAL_GPIO_Init+0x2e4>)
 8009188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800918c:	6453      	str	r3, [r2, #68]	; 0x44
 800918e:	4b53      	ldr	r3, [pc, #332]	; (80092dc <HAL_GPIO_Init+0x2e4>)
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800919a:	4a51      	ldr	r2, [pc, #324]	; (80092e0 <HAL_GPIO_Init+0x2e8>)
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	089b      	lsrs	r3, r3, #2
 80091a0:	3302      	adds	r3, #2
 80091a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	220f      	movs	r2, #15
 80091b2:	fa02 f303 	lsl.w	r3, r2, r3
 80091b6:	43db      	mvns	r3, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4013      	ands	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a48      	ldr	r2, [pc, #288]	; (80092e4 <HAL_GPIO_Init+0x2ec>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d019      	beq.n	80091fa <HAL_GPIO_Init+0x202>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a47      	ldr	r2, [pc, #284]	; (80092e8 <HAL_GPIO_Init+0x2f0>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d013      	beq.n	80091f6 <HAL_GPIO_Init+0x1fe>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a46      	ldr	r2, [pc, #280]	; (80092ec <HAL_GPIO_Init+0x2f4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00d      	beq.n	80091f2 <HAL_GPIO_Init+0x1fa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a45      	ldr	r2, [pc, #276]	; (80092f0 <HAL_GPIO_Init+0x2f8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d007      	beq.n	80091ee <HAL_GPIO_Init+0x1f6>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a44      	ldr	r2, [pc, #272]	; (80092f4 <HAL_GPIO_Init+0x2fc>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d101      	bne.n	80091ea <HAL_GPIO_Init+0x1f2>
 80091e6:	2304      	movs	r3, #4
 80091e8:	e008      	b.n	80091fc <HAL_GPIO_Init+0x204>
 80091ea:	2307      	movs	r3, #7
 80091ec:	e006      	b.n	80091fc <HAL_GPIO_Init+0x204>
 80091ee:	2303      	movs	r3, #3
 80091f0:	e004      	b.n	80091fc <HAL_GPIO_Init+0x204>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e002      	b.n	80091fc <HAL_GPIO_Init+0x204>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <HAL_GPIO_Init+0x204>
 80091fa:	2300      	movs	r3, #0
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	f002 0203 	and.w	r2, r2, #3
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	4093      	lsls	r3, r2
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	4313      	orrs	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800920c:	4934      	ldr	r1, [pc, #208]	; (80092e0 <HAL_GPIO_Init+0x2e8>)
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	089b      	lsrs	r3, r3, #2
 8009212:	3302      	adds	r3, #2
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800921a:	4b37      	ldr	r3, [pc, #220]	; (80092f8 <HAL_GPIO_Init+0x300>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	43db      	mvns	r3, r3
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	4013      	ands	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800923e:	4a2e      	ldr	r2, [pc, #184]	; (80092f8 <HAL_GPIO_Init+0x300>)
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009244:	4b2c      	ldr	r3, [pc, #176]	; (80092f8 <HAL_GPIO_Init+0x300>)
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	43db      	mvns	r3, r3
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	4013      	ands	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009268:	4a23      	ldr	r2, [pc, #140]	; (80092f8 <HAL_GPIO_Init+0x300>)
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800926e:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <HAL_GPIO_Init+0x300>)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	43db      	mvns	r3, r3
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	4013      	ands	r3, r2
 800927c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009292:	4a19      	ldr	r2, [pc, #100]	; (80092f8 <HAL_GPIO_Init+0x300>)
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009298:	4b17      	ldr	r3, [pc, #92]	; (80092f8 <HAL_GPIO_Init+0x300>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80092bc:	4a0e      	ldr	r2, [pc, #56]	; (80092f8 <HAL_GPIO_Init+0x300>)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	3301      	adds	r3, #1
 80092c6:	61fb      	str	r3, [r7, #28]
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b0f      	cmp	r3, #15
 80092cc:	f67f aea2 	bls.w	8009014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80092d0:	bf00      	nop
 80092d2:	3724      	adds	r7, #36	; 0x24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	40023800 	.word	0x40023800
 80092e0:	40013800 	.word	0x40013800
 80092e4:	40020000 	.word	0x40020000
 80092e8:	40020400 	.word	0x40020400
 80092ec:	40020800 	.word	0x40020800
 80092f0:	40020c00 	.word	0x40020c00
 80092f4:	40021000 	.word	0x40021000
 80092f8:	40013c00 	.word	0x40013c00

080092fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	807b      	strh	r3, [r7, #2]
 8009308:	4613      	mov	r3, r2
 800930a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800930c:	787b      	ldrb	r3, [r7, #1]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009312:	887a      	ldrh	r2, [r7, #2]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009318:	e003      	b.n	8009322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800931a:	887b      	ldrh	r3, [r7, #2]
 800931c:	041a      	lsls	r2, r3, #16
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	619a      	str	r2, [r3, #24]
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	887b      	ldrh	r3, [r7, #2]
 8009340:	401a      	ands	r2, r3
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	429a      	cmp	r2, r3
 8009346:	d104      	bne.n	8009352 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009348:	887b      	ldrh	r3, [r7, #2]
 800934a:	041a      	lsls	r2, r3, #16
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009350:	e002      	b.n	8009358 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009352:	887a      	ldrh	r2, [r7, #2]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	619a      	str	r2, [r3, #24]
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800936e:	4b08      	ldr	r3, [pc, #32]	; (8009390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009370:	695a      	ldr	r2, [r3, #20]
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d006      	beq.n	8009388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800937a:	4a05      	ldr	r2, [pc, #20]	; (8009390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	4618      	mov	r0, r3
 8009384:	f7f7 fc12 	bl	8000bac <HAL_GPIO_EXTI_Callback>
  }
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40013c00 	.word	0x40013c00

08009394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e11f      	b.n	80095e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7f8 ff18 	bl	80021f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2224      	movs	r2, #36	; 0x24
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0201 	bic.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093f8:	f001 fb6a 	bl	800aad0 <HAL_RCC_GetPCLK1Freq>
 80093fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	4a7b      	ldr	r2, [pc, #492]	; (80095f0 <HAL_I2C_Init+0x25c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d807      	bhi.n	8009418 <HAL_I2C_Init+0x84>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4a7a      	ldr	r2, [pc, #488]	; (80095f4 <HAL_I2C_Init+0x260>)
 800940c:	4293      	cmp	r3, r2
 800940e:	bf94      	ite	ls
 8009410:	2301      	movls	r3, #1
 8009412:	2300      	movhi	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	e006      	b.n	8009426 <HAL_I2C_Init+0x92>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a77      	ldr	r2, [pc, #476]	; (80095f8 <HAL_I2C_Init+0x264>)
 800941c:	4293      	cmp	r3, r2
 800941e:	bf94      	ite	ls
 8009420:	2301      	movls	r3, #1
 8009422:	2300      	movhi	r3, #0
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e0db      	b.n	80095e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4a72      	ldr	r2, [pc, #456]	; (80095fc <HAL_I2C_Init+0x268>)
 8009432:	fba2 2303 	umull	r2, r3, r2, r3
 8009436:	0c9b      	lsrs	r3, r3, #18
 8009438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	430a      	orrs	r2, r1
 800944c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	4a64      	ldr	r2, [pc, #400]	; (80095f0 <HAL_I2C_Init+0x25c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d802      	bhi.n	8009468 <HAL_I2C_Init+0xd4>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	3301      	adds	r3, #1
 8009466:	e009      	b.n	800947c <HAL_I2C_Init+0xe8>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	4a63      	ldr	r2, [pc, #396]	; (8009600 <HAL_I2C_Init+0x26c>)
 8009474:	fba2 2303 	umull	r2, r3, r2, r3
 8009478:	099b      	lsrs	r3, r3, #6
 800947a:	3301      	adds	r3, #1
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	430b      	orrs	r3, r1
 8009482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800948e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4956      	ldr	r1, [pc, #344]	; (80095f0 <HAL_I2C_Init+0x25c>)
 8009498:	428b      	cmp	r3, r1
 800949a:	d80d      	bhi.n	80094b8 <HAL_I2C_Init+0x124>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	1e59      	subs	r1, r3, #1
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094aa:	3301      	adds	r3, #1
 80094ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	bf38      	it	cc
 80094b4:	2304      	movcc	r3, #4
 80094b6:	e04f      	b.n	8009558 <HAL_I2C_Init+0x1c4>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d111      	bne.n	80094e4 <HAL_I2C_Init+0x150>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	1e58      	subs	r0, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6859      	ldr	r1, [r3, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	440b      	add	r3, r1
 80094ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80094d2:	3301      	adds	r3, #1
 80094d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bf0c      	ite	eq
 80094dc:	2301      	moveq	r3, #1
 80094de:	2300      	movne	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	e012      	b.n	800950a <HAL_I2C_Init+0x176>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	1e58      	subs	r0, r3, #1
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6859      	ldr	r1, [r3, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	0099      	lsls	r1, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094fa:	3301      	adds	r3, #1
 80094fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf0c      	ite	eq
 8009504:	2301      	moveq	r3, #1
 8009506:	2300      	movne	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_I2C_Init+0x17e>
 800950e:	2301      	movs	r3, #1
 8009510:	e022      	b.n	8009558 <HAL_I2C_Init+0x1c4>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10e      	bne.n	8009538 <HAL_I2C_Init+0x1a4>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1e58      	subs	r0, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6859      	ldr	r1, [r3, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	440b      	add	r3, r1
 8009528:	fbb0 f3f3 	udiv	r3, r0, r3
 800952c:	3301      	adds	r3, #1
 800952e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009536:	e00f      	b.n	8009558 <HAL_I2C_Init+0x1c4>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	1e58      	subs	r0, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6859      	ldr	r1, [r3, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	0099      	lsls	r1, r3, #2
 8009548:	440b      	add	r3, r1
 800954a:	fbb0 f3f3 	udiv	r3, r0, r3
 800954e:	3301      	adds	r3, #1
 8009550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	6809      	ldr	r1, [r1, #0]
 800955c:	4313      	orrs	r3, r2
 800955e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6911      	ldr	r1, [r2, #16]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	68d2      	ldr	r2, [r2, #12]
 8009592:	4311      	orrs	r1, r2
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	430b      	orrs	r3, r1
 800959a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695a      	ldr	r2, [r3, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	000186a0 	.word	0x000186a0
 80095f4:	001e847f 	.word	0x001e847f
 80095f8:	003d08ff 	.word	0x003d08ff
 80095fc:	431bde83 	.word	0x431bde83
 8009600:	10624dd3 	.word	0x10624dd3

08009604 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	461a      	mov	r2, r3
 8009610:	460b      	mov	r3, r1
 8009612:	817b      	strh	r3, [r7, #10]
 8009614:	4613      	mov	r3, r2
 8009616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009618:	f7fe fc38 	bl	8007e8c <HAL_GetTick>
 800961c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b20      	cmp	r3, #32
 8009628:	f040 80e0 	bne.w	80097ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	2319      	movs	r3, #25
 8009632:	2201      	movs	r2, #1
 8009634:	4970      	ldr	r1, [pc, #448]	; (80097f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 fc58 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009642:	2302      	movs	r3, #2
 8009644:	e0d3      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_I2C_Master_Transmit+0x50>
 8009650:	2302      	movs	r3, #2
 8009652:	e0cc      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d007      	beq.n	800967a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2221      	movs	r2, #33	; 0x21
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2210      	movs	r2, #16
 8009696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	893a      	ldrh	r2, [r7, #8]
 80096aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4a50      	ldr	r2, [pc, #320]	; (80097fc <HAL_I2C_Master_Transmit+0x1f8>)
 80096ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80096bc:	8979      	ldrh	r1, [r7, #10]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a3a      	ldr	r2, [r7, #32]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fac2 	bl	8009c4c <I2C_MasterRequestWrite>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e08d      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096d2:	2300      	movs	r3, #0
 80096d4:	613b      	str	r3, [r7, #16]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80096e8:	e066      	b.n	80097b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	6a39      	ldr	r1, [r7, #32]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 fcd2 	bl	800a098 <I2C_WaitOnTXEFlagUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00d      	beq.n	8009716 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d107      	bne.n	8009712 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e06b      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	781a      	ldrb	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b04      	cmp	r3, #4
 8009752:	d11b      	bne.n	800978c <HAL_I2C_Master_Transmit+0x188>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009758:	2b00      	cmp	r3, #0
 800975a:	d017      	beq.n	800978c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	781a      	ldrb	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009776:	b29b      	uxth	r3, r3
 8009778:	3b01      	subs	r3, #1
 800977a:	b29a      	uxth	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	6a39      	ldr	r1, [r7, #32]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fcc2 	bl	800a11a <I2C_WaitOnBTFFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00d      	beq.n	80097b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d107      	bne.n	80097b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e01a      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d194      	bne.n	80096ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e000      	b.n	80097ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80097ec:	2302      	movs	r3, #2
  }
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	00100002 	.word	0x00100002
 80097fc:	ffff0000 	.word	0xffff0000

08009800 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08c      	sub	sp, #48	; 0x30
 8009804:	af02      	add	r7, sp, #8
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	607a      	str	r2, [r7, #4]
 800980a:	461a      	mov	r2, r3
 800980c:	460b      	mov	r3, r1
 800980e:	817b      	strh	r3, [r7, #10]
 8009810:	4613      	mov	r3, r2
 8009812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009814:	f7fe fb3a 	bl	8007e8c <HAL_GetTick>
 8009818:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b20      	cmp	r3, #32
 8009824:	f040 820b 	bne.w	8009c3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2319      	movs	r3, #25
 800982e:	2201      	movs	r2, #1
 8009830:	497c      	ldr	r1, [pc, #496]	; (8009a24 <HAL_I2C_Master_Receive+0x224>)
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fb5a 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800983e:	2302      	movs	r3, #2
 8009840:	e1fe      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_I2C_Master_Receive+0x50>
 800984c:	2302      	movs	r3, #2
 800984e:	e1f7      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d007      	beq.n	8009876 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2222      	movs	r2, #34	; 0x22
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2210      	movs	r2, #16
 8009892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	893a      	ldrh	r2, [r7, #8]
 80098a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4a5c      	ldr	r2, [pc, #368]	; (8009a28 <HAL_I2C_Master_Receive+0x228>)
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80098b8:	8979      	ldrh	r1, [r7, #10]
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fa46 	bl	8009d50 <I2C_MasterRequestRead>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e1b8      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d113      	bne.n	80098fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	623b      	str	r3, [r7, #32]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	623b      	str	r3, [r7, #32]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	623b      	str	r3, [r7, #32]
 80098ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e18c      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	2b01      	cmp	r3, #1
 8009904:	d11b      	bne.n	800993e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e16c      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009942:	2b02      	cmp	r3, #2
 8009944:	d11b      	bne.n	800997e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009966:	2300      	movs	r3, #0
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	e14c      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800998c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80099a4:	e138      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	f200 80f1 	bhi.w	8009b92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d123      	bne.n	8009a00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fbed 	bl	800a19c <I2C_WaitOnRXNEFlagUntilTimeout>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e139      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691a      	ldr	r2, [r3, #16]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099fe:	e10b      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d14e      	bne.n	8009aa6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4906      	ldr	r1, [pc, #24]	; (8009a2c <HAL_I2C_Master_Receive+0x22c>)
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fa6a 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d008      	beq.n	8009a30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e10e      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
 8009a22:	bf00      	nop
 8009a24:	00100002 	.word	0x00100002
 8009a28:	ffff0000 	.word	0xffff0000
 8009a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691a      	ldr	r2, [r3, #16]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691a      	ldr	r2, [r3, #16]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	b2d2      	uxtb	r2, r2
 8009a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009aa4:	e0b8      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	4966      	ldr	r1, [pc, #408]	; (8009c48 <HAL_I2C_Master_Receive+0x448>)
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 fa1b 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e0bf      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b01      	subs	r3, #1
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	2200      	movs	r2, #0
 8009b0a:	494f      	ldr	r1, [pc, #316]	; (8009c48 <HAL_I2C_Master_Receive+0x448>)
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f9ed 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e091      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	3b01      	subs	r3, #1
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b90:	e042      	b.n	8009c18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 fb00 	bl	800a19c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e04c      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	691a      	ldr	r2, [r3, #16]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d118      	bne.n	8009c18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	b2d2      	uxtb	r2, r2
 8009bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	3b01      	subs	r3, #1
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f47f aec2 	bne.w	80099a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e000      	b.n	8009c40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009c3e:	2302      	movs	r3, #2
  }
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3728      	adds	r7, #40	; 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	00010004 	.word	0x00010004

08009c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d006      	beq.n	8009c76 <I2C_MasterRequestWrite+0x2a>
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d003      	beq.n	8009c76 <I2C_MasterRequestWrite+0x2a>
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c74:	d108      	bne.n	8009c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e00b      	b.n	8009ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	2b12      	cmp	r3, #18
 8009c8e:	d107      	bne.n	8009ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f91d 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00d      	beq.n	8009cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc6:	d103      	bne.n	8009cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e035      	b.n	8009d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cdc:	d108      	bne.n	8009cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cde:	897b      	ldrh	r3, [r7, #10]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cec:	611a      	str	r2, [r3, #16]
 8009cee:	e01b      	b.n	8009d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009cf0:	897b      	ldrh	r3, [r7, #10]
 8009cf2:	11db      	asrs	r3, r3, #7
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	f003 0306 	and.w	r3, r3, #6
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	f063 030f 	orn	r3, r3, #15
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	490e      	ldr	r1, [pc, #56]	; (8009d48 <I2C_MasterRequestWrite+0xfc>)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f943 	bl	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e010      	b.n	8009d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d1e:	897b      	ldrh	r3, [r7, #10]
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	4907      	ldr	r1, [pc, #28]	; (8009d4c <I2C_MasterRequestWrite+0x100>)
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f933 	bl	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e000      	b.n	8009d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	00010008 	.word	0x00010008
 8009d4c:	00010002 	.word	0x00010002

08009d50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	607a      	str	r2, [r7, #4]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d006      	beq.n	8009d8a <I2C_MasterRequestRead+0x3a>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d003      	beq.n	8009d8a <I2C_MasterRequestRead+0x3a>
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d88:	d108      	bne.n	8009d9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e00b      	b.n	8009db4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	2b11      	cmp	r3, #17
 8009da2:	d107      	bne.n	8009db4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f893 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00d      	beq.n	8009de8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dda:	d103      	bne.n	8009de4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e079      	b.n	8009edc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df0:	d108      	bne.n	8009e04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009df2:	897b      	ldrh	r3, [r7, #10]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	611a      	str	r2, [r3, #16]
 8009e02:	e05f      	b.n	8009ec4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009e04:	897b      	ldrh	r3, [r7, #10]
 8009e06:	11db      	asrs	r3, r3, #7
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 0306 	and.w	r3, r3, #6
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	f063 030f 	orn	r3, r3, #15
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4930      	ldr	r1, [pc, #192]	; (8009ee4 <I2C_MasterRequestRead+0x194>)
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 f8b9 	bl	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e054      	b.n	8009edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e32:	897b      	ldrh	r3, [r7, #10]
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4929      	ldr	r1, [pc, #164]	; (8009ee8 <I2C_MasterRequestRead+0x198>)
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f8a9 	bl	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e044      	b.n	8009edc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e52:	2300      	movs	r3, #0
 8009e54:	613b      	str	r3, [r7, #16]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	613b      	str	r3, [r7, #16]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	613b      	str	r3, [r7, #16]
 8009e66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f831 	bl	8009eec <I2C_WaitOnFlagUntilTimeout>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00d      	beq.n	8009eac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9e:	d103      	bne.n	8009ea8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ea6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e017      	b.n	8009edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009eac:	897b      	ldrh	r3, [r7, #10]
 8009eae:	11db      	asrs	r3, r3, #7
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 0306 	and.w	r3, r3, #6
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f063 030e 	orn	r3, r3, #14
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	4907      	ldr	r1, [pc, #28]	; (8009ee8 <I2C_MasterRequestRead+0x198>)
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f865 	bl	8009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	00010008 	.word	0x00010008
 8009ee8:	00010002 	.word	0x00010002

08009eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	603b      	str	r3, [r7, #0]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009efc:	e025      	b.n	8009f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d021      	beq.n	8009f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f06:	f7fd ffc1 	bl	8007e8c <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d116      	bne.n	8009f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f043 0220 	orr.w	r2, r3, #32
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e023      	b.n	8009f92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	0c1b      	lsrs	r3, r3, #16
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d10d      	bne.n	8009f70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	43da      	mvns	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf0c      	ite	eq
 8009f66:	2301      	moveq	r3, #1
 8009f68:	2300      	movne	r3, #0
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	e00c      	b.n	8009f8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	43da      	mvns	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bf0c      	ite	eq
 8009f82:	2301      	moveq	r3, #1
 8009f84:	2300      	movne	r3, #0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	461a      	mov	r2, r3
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d0b6      	beq.n	8009efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	60f8      	str	r0, [r7, #12]
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fa8:	e051      	b.n	800a04e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb8:	d123      	bne.n	800a002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	f043 0204 	orr.w	r2, r3, #4
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e046      	b.n	800a090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a008:	d021      	beq.n	800a04e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7fd ff3f 	bl	8007e8c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d116      	bne.n	800a04e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f043 0220 	orr.w	r2, r3, #32
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e020      	b.n	800a090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b01      	cmp	r3, #1
 800a056:	d10c      	bne.n	800a072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	43da      	mvns	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4013      	ands	r3, r2
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	bf14      	ite	ne
 800a06a:	2301      	movne	r3, #1
 800a06c:	2300      	moveq	r3, #0
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	e00b      	b.n	800a08a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	43da      	mvns	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	bf14      	ite	ne
 800a084:	2301      	movne	r3, #1
 800a086:	2300      	moveq	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d18d      	bne.n	8009faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a0a4:	e02d      	b.n	800a102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f8ce 	bl	800a248 <I2C_IsAcknowledgeFailed>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e02d      	b.n	800a112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d021      	beq.n	800a102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0be:	f7fd fee5 	bl	8007e8c <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d302      	bcc.n	800a0d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d116      	bne.n	800a102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	f043 0220 	orr.w	r2, r3, #32
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e007      	b.n	800a112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a10c:	2b80      	cmp	r3, #128	; 0x80
 800a10e:	d1ca      	bne.n	800a0a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a126:	e02d      	b.n	800a184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f88d 	bl	800a248 <I2C_IsAcknowledgeFailed>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e02d      	b.n	800a194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d021      	beq.n	800a184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a140:	f7fd fea4 	bl	8007e8c <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d116      	bne.n	800a184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	f043 0220 	orr.w	r2, r3, #32
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e007      	b.n	800a194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d1ca      	bne.n	800a128 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a1a8:	e042      	b.n	800a230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d119      	bne.n	800a1ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f06f 0210 	mvn.w	r2, #16
 800a1c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e029      	b.n	800a240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ec:	f7fd fe4e 	bl	8007e8c <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d116      	bne.n	800a230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21c:	f043 0220 	orr.w	r2, r3, #32
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e007      	b.n	800a240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23a:	2b40      	cmp	r3, #64	; 0x40
 800a23c:	d1b5      	bne.n	800a1aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a25e:	d11b      	bne.n	800a298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	f043 0204 	orr.w	r2, r3, #4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e000      	b.n	800a29a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
	...

0800a2a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e25b      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d075      	beq.n	800a3b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a2c6:	4ba3      	ldr	r3, [pc, #652]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 030c 	and.w	r3, r3, #12
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d00c      	beq.n	800a2ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2d2:	4ba0      	ldr	r3, [pc, #640]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a2da:	2b08      	cmp	r3, #8
 800a2dc:	d112      	bne.n	800a304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2de:	4b9d      	ldr	r3, [pc, #628]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2ea:	d10b      	bne.n	800a304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2ec:	4b99      	ldr	r3, [pc, #612]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d05b      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x108>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d157      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e236      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a30c:	d106      	bne.n	800a31c <HAL_RCC_OscConfig+0x74>
 800a30e:	4b91      	ldr	r3, [pc, #580]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a90      	ldr	r2, [pc, #576]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	e01d      	b.n	800a358 <HAL_RCC_OscConfig+0xb0>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a324:	d10c      	bne.n	800a340 <HAL_RCC_OscConfig+0x98>
 800a326:	4b8b      	ldr	r3, [pc, #556]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a8a      	ldr	r2, [pc, #552]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a32c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	4b88      	ldr	r3, [pc, #544]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a87      	ldr	r2, [pc, #540]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	e00b      	b.n	800a358 <HAL_RCC_OscConfig+0xb0>
 800a340:	4b84      	ldr	r3, [pc, #528]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a83      	ldr	r2, [pc, #524]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4b81      	ldr	r3, [pc, #516]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a80      	ldr	r2, [pc, #512]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d013      	beq.n	800a388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a360:	f7fd fd94 	bl	8007e8c <HAL_GetTick>
 800a364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a368:	f7fd fd90 	bl	8007e8c <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b64      	cmp	r3, #100	; 0x64
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e1fb      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a37a:	4b76      	ldr	r3, [pc, #472]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCC_OscConfig+0xc0>
 800a386:	e014      	b.n	800a3b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a388:	f7fd fd80 	bl	8007e8c <HAL_GetTick>
 800a38c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a390:	f7fd fd7c 	bl	8007e8c <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b64      	cmp	r3, #100	; 0x64
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e1e7      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3a2:	4b6c      	ldr	r3, [pc, #432]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <HAL_RCC_OscConfig+0xe8>
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d063      	beq.n	800a486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a3be:	4b65      	ldr	r3, [pc, #404]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 030c 	and.w	r3, r3, #12
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00b      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3ca:	4b62      	ldr	r3, [pc, #392]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a3d2:	2b08      	cmp	r3, #8
 800a3d4:	d11c      	bne.n	800a410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3d6:	4b5f      	ldr	r3, [pc, #380]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d116      	bne.n	800a410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3e2:	4b5c      	ldr	r3, [pc, #368]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <HAL_RCC_OscConfig+0x152>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d001      	beq.n	800a3fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e1bb      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3fa:	4b56      	ldr	r3, [pc, #344]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	4952      	ldr	r1, [pc, #328]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a40e:	e03a      	b.n	800a486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d020      	beq.n	800a45a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a418:	4b4f      	ldr	r3, [pc, #316]	; (800a558 <HAL_RCC_OscConfig+0x2b0>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41e:	f7fd fd35 	bl	8007e8c <HAL_GetTick>
 800a422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a424:	e008      	b.n	800a438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a426:	f7fd fd31 	bl	8007e8c <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e19c      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a438:	4b46      	ldr	r3, [pc, #280]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a444:	4b43      	ldr	r3, [pc, #268]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4940      	ldr	r1, [pc, #256]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a454:	4313      	orrs	r3, r2
 800a456:	600b      	str	r3, [r1, #0]
 800a458:	e015      	b.n	800a486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a45a:	4b3f      	ldr	r3, [pc, #252]	; (800a558 <HAL_RCC_OscConfig+0x2b0>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a460:	f7fd fd14 	bl	8007e8c <HAL_GetTick>
 800a464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a466:	e008      	b.n	800a47a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a468:	f7fd fd10 	bl	8007e8c <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	2b02      	cmp	r3, #2
 800a474:	d901      	bls.n	800a47a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e17b      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a47a:	4b36      	ldr	r3, [pc, #216]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f0      	bne.n	800a468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d030      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d016      	beq.n	800a4c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a49a:	4b30      	ldr	r3, [pc, #192]	; (800a55c <HAL_RCC_OscConfig+0x2b4>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4a0:	f7fd fcf4 	bl	8007e8c <HAL_GetTick>
 800a4a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4a8:	f7fd fcf0 	bl	8007e8c <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e15b      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4ba:	4b26      	ldr	r3, [pc, #152]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f0      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x200>
 800a4c6:	e015      	b.n	800a4f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4c8:	4b24      	ldr	r3, [pc, #144]	; (800a55c <HAL_RCC_OscConfig+0x2b4>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4ce:	f7fd fcdd 	bl	8007e8c <HAL_GetTick>
 800a4d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4d4:	e008      	b.n	800a4e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4d6:	f7fd fcd9 	bl	8007e8c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e144      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1f0      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 80a0 	beq.w	800a642 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10f      	bne.n	800a532 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a512:	2300      	movs	r3, #0
 800a514:	60bb      	str	r3, [r7, #8]
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	4a0e      	ldr	r2, [pc, #56]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a520:	6413      	str	r3, [r2, #64]	; 0x40
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <HAL_RCC_OscConfig+0x2ac>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a52a:	60bb      	str	r3, [r7, #8]
 800a52c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a52e:	2301      	movs	r3, #1
 800a530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a532:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <HAL_RCC_OscConfig+0x2b8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d121      	bne.n	800a582 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a53e:	4b08      	ldr	r3, [pc, #32]	; (800a560 <HAL_RCC_OscConfig+0x2b8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a07      	ldr	r2, [pc, #28]	; (800a560 <HAL_RCC_OscConfig+0x2b8>)
 800a544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a54a:	f7fd fc9f 	bl	8007e8c <HAL_GetTick>
 800a54e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a550:	e011      	b.n	800a576 <HAL_RCC_OscConfig+0x2ce>
 800a552:	bf00      	nop
 800a554:	40023800 	.word	0x40023800
 800a558:	42470000 	.word	0x42470000
 800a55c:	42470e80 	.word	0x42470e80
 800a560:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a564:	f7fd fc92 	bl	8007e8c <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e0fd      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a576:	4b81      	ldr	r3, [pc, #516]	; (800a77c <HAL_RCC_OscConfig+0x4d4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0f0      	beq.n	800a564 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d106      	bne.n	800a598 <HAL_RCC_OscConfig+0x2f0>
 800a58a:	4b7d      	ldr	r3, [pc, #500]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58e:	4a7c      	ldr	r2, [pc, #496]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	6713      	str	r3, [r2, #112]	; 0x70
 800a596:	e01c      	b.n	800a5d2 <HAL_RCC_OscConfig+0x32a>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d10c      	bne.n	800a5ba <HAL_RCC_OscConfig+0x312>
 800a5a0:	4b77      	ldr	r3, [pc, #476]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a4:	4a76      	ldr	r2, [pc, #472]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5a6:	f043 0304 	orr.w	r3, r3, #4
 800a5aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ac:	4b74      	ldr	r3, [pc, #464]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b0:	4a73      	ldr	r2, [pc, #460]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5b2:	f043 0301 	orr.w	r3, r3, #1
 800a5b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5b8:	e00b      	b.n	800a5d2 <HAL_RCC_OscConfig+0x32a>
 800a5ba:	4b71      	ldr	r3, [pc, #452]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	4a70      	ldr	r2, [pc, #448]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5c0:	f023 0301 	bic.w	r3, r3, #1
 800a5c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a5c6:	4b6e      	ldr	r3, [pc, #440]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ca:	4a6d      	ldr	r2, [pc, #436]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5cc:	f023 0304 	bic.w	r3, r3, #4
 800a5d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d015      	beq.n	800a606 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5da:	f7fd fc57 	bl	8007e8c <HAL_GetTick>
 800a5de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5e0:	e00a      	b.n	800a5f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5e2:	f7fd fc53 	bl	8007e8c <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d901      	bls.n	800a5f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e0bc      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5f8:	4b61      	ldr	r3, [pc, #388]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0ee      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x33a>
 800a604:	e014      	b.n	800a630 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a606:	f7fd fc41 	bl	8007e8c <HAL_GetTick>
 800a60a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a60c:	e00a      	b.n	800a624 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a60e:	f7fd fc3d 	bl	8007e8c <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	f241 3288 	movw	r2, #5000	; 0x1388
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d901      	bls.n	800a624 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e0a6      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a624:	4b56      	ldr	r3, [pc, #344]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1ee      	bne.n	800a60e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d105      	bne.n	800a642 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a636:	4b52      	ldr	r3, [pc, #328]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	4a51      	ldr	r2, [pc, #324]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a63c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 8092 	beq.w	800a770 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a64c:	4b4c      	ldr	r3, [pc, #304]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f003 030c 	and.w	r3, r3, #12
 800a654:	2b08      	cmp	r3, #8
 800a656:	d05c      	beq.n	800a712 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d141      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a660:	4b48      	ldr	r3, [pc, #288]	; (800a784 <HAL_RCC_OscConfig+0x4dc>)
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a666:	f7fd fc11 	bl	8007e8c <HAL_GetTick>
 800a66a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a66c:	e008      	b.n	800a680 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a66e:	f7fd fc0d 	bl	8007e8c <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e078      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a680:	4b3f      	ldr	r3, [pc, #252]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f0      	bne.n	800a66e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69da      	ldr	r2, [r3, #28]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	019b      	lsls	r3, r3, #6
 800a69c:	431a      	orrs	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	4933      	ldr	r1, [pc, #204]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6b6:	4b33      	ldr	r3, [pc, #204]	; (800a784 <HAL_RCC_OscConfig+0x4dc>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6bc:	f7fd fbe6 	bl	8007e8c <HAL_GetTick>
 800a6c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6c4:	f7fd fbe2 	bl	8007e8c <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e04d      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6d6:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0f0      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x41c>
 800a6e2:	e045      	b.n	800a770 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6e4:	4b27      	ldr	r3, [pc, #156]	; (800a784 <HAL_RCC_OscConfig+0x4dc>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ea:	f7fd fbcf 	bl	8007e8c <HAL_GetTick>
 800a6ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6f0:	e008      	b.n	800a704 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6f2:	f7fd fbcb 	bl	8007e8c <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d901      	bls.n	800a704 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e036      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a704:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f0      	bne.n	800a6f2 <HAL_RCC_OscConfig+0x44a>
 800a710:	e02e      	b.n	800a770 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d101      	bne.n	800a71e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e029      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a71e:	4b18      	ldr	r3, [pc, #96]	; (800a780 <HAL_RCC_OscConfig+0x4d8>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d11c      	bne.n	800a76c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d115      	bne.n	800a76c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a746:	4013      	ands	r3, r2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d10d      	bne.n	800a76c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d106      	bne.n	800a76c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a768:	429a      	cmp	r2, r3
 800a76a:	d001      	beq.n	800a770 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e000      	b.n	800a772 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	40007000 	.word	0x40007000
 800a780:	40023800 	.word	0x40023800
 800a784:	42470060 	.word	0x42470060

0800a788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e0cc      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a79c:	4b68      	ldr	r3, [pc, #416]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d90c      	bls.n	800a7c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7aa:	4b65      	ldr	r3, [pc, #404]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	b2d2      	uxtb	r2, r2
 800a7b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b2:	4b63      	ldr	r3, [pc, #396]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d001      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e0b8      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d020      	beq.n	800a812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7dc:	4b59      	ldr	r3, [pc, #356]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	4a58      	ldr	r2, [pc, #352]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a7e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0308 	and.w	r3, r3, #8
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a7f4:	4b53      	ldr	r3, [pc, #332]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	4a52      	ldr	r2, [pc, #328]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a7fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a7fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a800:	4b50      	ldr	r3, [pc, #320]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	494d      	ldr	r1, [pc, #308]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a80e:	4313      	orrs	r3, r2
 800a810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d044      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d107      	bne.n	800a836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a826:	4b47      	ldr	r3, [pc, #284]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d119      	bne.n	800a866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e07f      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d003      	beq.n	800a846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a842:	2b03      	cmp	r3, #3
 800a844:	d107      	bne.n	800a856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a846:	4b3f      	ldr	r3, [pc, #252]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d109      	bne.n	800a866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e06f      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a856:	4b3b      	ldr	r3, [pc, #236]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e067      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a866:	4b37      	ldr	r3, [pc, #220]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f023 0203 	bic.w	r2, r3, #3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	4934      	ldr	r1, [pc, #208]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a874:	4313      	orrs	r3, r2
 800a876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a878:	f7fd fb08 	bl	8007e8c <HAL_GetTick>
 800a87c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a87e:	e00a      	b.n	800a896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a880:	f7fd fb04 	bl	8007e8c <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88e:	4293      	cmp	r3, r2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e04f      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a896:	4b2b      	ldr	r3, [pc, #172]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f003 020c 	and.w	r2, r3, #12
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d1eb      	bne.n	800a880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 030f 	and.w	r3, r3, #15
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d20c      	bcs.n	800a8d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8b6:	4b22      	ldr	r3, [pc, #136]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8be:	4b20      	ldr	r3, [pc, #128]	; (800a940 <HAL_RCC_ClockConfig+0x1b8>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 030f 	and.w	r3, r3, #15
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d001      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e032      	b.n	800a936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d008      	beq.n	800a8ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8dc:	4b19      	ldr	r3, [pc, #100]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	4916      	ldr	r1, [pc, #88]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0308 	and.w	r3, r3, #8
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a8fa:	4b12      	ldr	r3, [pc, #72]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	00db      	lsls	r3, r3, #3
 800a908:	490e      	ldr	r1, [pc, #56]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a90e:	f000 f821 	bl	800a954 <HAL_RCC_GetSysClockFreq>
 800a912:	4601      	mov	r1, r0
 800a914:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <HAL_RCC_ClockConfig+0x1bc>)
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	091b      	lsrs	r3, r3, #4
 800a91a:	f003 030f 	and.w	r3, r3, #15
 800a91e:	4a0a      	ldr	r2, [pc, #40]	; (800a948 <HAL_RCC_ClockConfig+0x1c0>)
 800a920:	5cd3      	ldrb	r3, [r2, r3]
 800a922:	fa21 f303 	lsr.w	r3, r1, r3
 800a926:	4a09      	ldr	r2, [pc, #36]	; (800a94c <HAL_RCC_ClockConfig+0x1c4>)
 800a928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a92a:	4b09      	ldr	r3, [pc, #36]	; (800a950 <HAL_RCC_ClockConfig+0x1c8>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fd fa68 	bl	8007e04 <HAL_InitTick>

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	40023c00 	.word	0x40023c00
 800a944:	40023800 	.word	0x40023800
 800a948:	0800da00 	.word	0x0800da00
 800a94c:	20000000 	.word	0x20000000
 800a950:	200002c0 	.word	0x200002c0

0800a954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
 800a962:	2300      	movs	r3, #0
 800a964:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a96a:	4b50      	ldr	r3, [pc, #320]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f003 030c 	and.w	r3, r3, #12
 800a972:	2b04      	cmp	r3, #4
 800a974:	d007      	beq.n	800a986 <HAL_RCC_GetSysClockFreq+0x32>
 800a976:	2b08      	cmp	r3, #8
 800a978:	d008      	beq.n	800a98c <HAL_RCC_GetSysClockFreq+0x38>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f040 808d 	bne.w	800aa9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a980:	4b4b      	ldr	r3, [pc, #300]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a982:	60bb      	str	r3, [r7, #8]
       break;
 800a984:	e08c      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a986:	4b4b      	ldr	r3, [pc, #300]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a988:	60bb      	str	r3, [r7, #8]
      break;
 800a98a:	e089      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a98c:	4b47      	ldr	r3, [pc, #284]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a994:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a996:	4b45      	ldr	r3, [pc, #276]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d023      	beq.n	800a9ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9a2:	4b42      	ldr	r3, [pc, #264]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	099b      	lsrs	r3, r3, #6
 800a9a8:	f04f 0400 	mov.w	r4, #0
 800a9ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a9b0:	f04f 0200 	mov.w	r2, #0
 800a9b4:	ea03 0501 	and.w	r5, r3, r1
 800a9b8:	ea04 0602 	and.w	r6, r4, r2
 800a9bc:	4a3d      	ldr	r2, [pc, #244]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a9be:	fb02 f106 	mul.w	r1, r2, r6
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	fb02 f205 	mul.w	r2, r2, r5
 800a9c8:	440a      	add	r2, r1
 800a9ca:	493a      	ldr	r1, [pc, #232]	; (800aab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800a9cc:	fba5 0101 	umull	r0, r1, r5, r1
 800a9d0:	1853      	adds	r3, r2, r1
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f04f 0400 	mov.w	r4, #0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4623      	mov	r3, r4
 800a9de:	f7f5 fc4f 	bl	8000280 <__aeabi_uldivmod>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e049      	b.n	800aa7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9ea:	4b30      	ldr	r3, [pc, #192]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	099b      	lsrs	r3, r3, #6
 800a9f0:	f04f 0400 	mov.w	r4, #0
 800a9f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	ea03 0501 	and.w	r5, r3, r1
 800aa00:	ea04 0602 	and.w	r6, r4, r2
 800aa04:	4629      	mov	r1, r5
 800aa06:	4632      	mov	r2, r6
 800aa08:	f04f 0300 	mov.w	r3, #0
 800aa0c:	f04f 0400 	mov.w	r4, #0
 800aa10:	0154      	lsls	r4, r2, #5
 800aa12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aa16:	014b      	lsls	r3, r1, #5
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	1b49      	subs	r1, r1, r5
 800aa1e:	eb62 0206 	sbc.w	r2, r2, r6
 800aa22:	f04f 0300 	mov.w	r3, #0
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	0194      	lsls	r4, r2, #6
 800aa2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800aa30:	018b      	lsls	r3, r1, #6
 800aa32:	1a5b      	subs	r3, r3, r1
 800aa34:	eb64 0402 	sbc.w	r4, r4, r2
 800aa38:	f04f 0100 	mov.w	r1, #0
 800aa3c:	f04f 0200 	mov.w	r2, #0
 800aa40:	00e2      	lsls	r2, r4, #3
 800aa42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800aa46:	00d9      	lsls	r1, r3, #3
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	195b      	adds	r3, r3, r5
 800aa4e:	eb44 0406 	adc.w	r4, r4, r6
 800aa52:	f04f 0100 	mov.w	r1, #0
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	02a2      	lsls	r2, r4, #10
 800aa5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800aa60:	0299      	lsls	r1, r3, #10
 800aa62:	460b      	mov	r3, r1
 800aa64:	4614      	mov	r4, r2
 800aa66:	4618      	mov	r0, r3
 800aa68:	4621      	mov	r1, r4
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f04f 0400 	mov.w	r4, #0
 800aa70:	461a      	mov	r2, r3
 800aa72:	4623      	mov	r3, r4
 800aa74:	f7f5 fc04 	bl	8000280 <__aeabi_uldivmod>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <HAL_RCC_GetSysClockFreq+0x158>)
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	0c1b      	lsrs	r3, r3, #16
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	3301      	adds	r3, #1
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa96:	60bb      	str	r3, [r7, #8]
      break;
 800aa98:	e002      	b.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800aa9c:	60bb      	str	r3, [r7, #8]
      break;
 800aa9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	40023800 	.word	0x40023800
 800aab0:	00f42400 	.word	0x00f42400
 800aab4:	017d7840 	.word	0x017d7840

0800aab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aabc:	4b03      	ldr	r3, [pc, #12]	; (800aacc <HAL_RCC_GetHCLKFreq+0x14>)
 800aabe:	681b      	ldr	r3, [r3, #0]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000000 	.word	0x20000000

0800aad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aad4:	f7ff fff0 	bl	800aab8 <HAL_RCC_GetHCLKFreq>
 800aad8:	4601      	mov	r1, r0
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	0a9b      	lsrs	r3, r3, #10
 800aae0:	f003 0307 	and.w	r3, r3, #7
 800aae4:	4a03      	ldr	r2, [pc, #12]	; (800aaf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aae6:	5cd3      	ldrb	r3, [r2, r3]
 800aae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	0800da10 	.word	0x0800da10

0800aaf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aafc:	f7ff ffdc 	bl	800aab8 <HAL_RCC_GetHCLKFreq>
 800ab00:	4601      	mov	r1, r0
 800ab02:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	0b5b      	lsrs	r3, r3, #13
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	4a03      	ldr	r2, [pc, #12]	; (800ab1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab0e:	5cd3      	ldrb	r3, [r2, r3]
 800ab10:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	40023800 	.word	0x40023800
 800ab1c:	0800da10 	.word	0x0800da10

0800ab20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e056      	b.n	800abe0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d106      	bne.n	800ab52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7f7 fb97 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2202      	movs	r2, #2
 800ab56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	431a      	orrs	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	ea42 0103 	orr.w	r1, r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	0c1b      	lsrs	r3, r3, #16
 800abb0:	f003 0104 	and.w	r1, r3, #4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69da      	ldr	r2, [r3, #28]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e01d      	b.n	800ac36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7f7 fb7e 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f000 fc0c 	bl	800b444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b085      	sub	sp, #20
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68da      	ldr	r2, [r3, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f003 0307 	and.w	r3, r3, #7
 800ac60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	d007      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0201 	orr.w	r2, r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e01d      	b.n	800acd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f815 	bl	800acdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4619      	mov	r1, r3
 800acc4:	4610      	mov	r0, r2
 800acc6:	f000 fbbd 	bl	800b444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2201      	movs	r2, #1
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fe44 	bl	800b990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <HAL_TIM_PWM_Start+0x60>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d107      	bne.n	800ad22 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2b06      	cmp	r3, #6
 800ad32:	d007      	beq.n	800ad44 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f042 0201 	orr.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	40010000 	.word	0x40010000

0800ad54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e083      	b.n	800ae70 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7f7 fb33 	bl	80023e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad98:	f023 0307 	bic.w	r3, r3, #7
 800ad9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3304      	adds	r3, #4
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f000 fb4b 	bl	800b444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	4313      	orrs	r3, r2
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800adf4:	f023 030c 	bic.w	r3, r3, #12
 800adf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	021b      	lsls	r3, r3, #8
 800ae10:	4313      	orrs	r3, r2
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	011a      	lsls	r2, r3, #4
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	031b      	lsls	r3, r3, #12
 800ae24:	4313      	orrs	r3, r2
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	4313      	orrs	r3, r2
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <HAL_TIM_Encoder_Start+0x16>
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d008      	beq.n	800ae9e <HAL_TIM_Encoder_Start+0x26>
 800ae8c:	e00f      	b.n	800aeae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2201      	movs	r2, #1
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fd7a 	bl	800b990 <TIM_CCxChannelCmd>
      break;
 800ae9c:	e016      	b.n	800aecc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2201      	movs	r2, #1
 800aea4:	2104      	movs	r1, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fd72 	bl	800b990 <TIM_CCxChannelCmd>
      break;
 800aeac:	e00e      	b.n	800aecc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fd6a 	bl	800b990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2201      	movs	r2, #1
 800aec2:	2104      	movs	r1, #4
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fd63 	bl	800b990 <TIM_CCxChannelCmd>
      break;
 800aeca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0201 	orr.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d122      	bne.n	800af42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b02      	cmp	r3, #2
 800af08:	d11b      	bne.n	800af42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f06f 0202 	mvn.w	r2, #2
 800af12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f003 0303 	and.w	r3, r3, #3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fa6c 	bl	800b406 <HAL_TIM_IC_CaptureCallback>
 800af2e:	e005      	b.n	800af3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa5e 	bl	800b3f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa6f 	bl	800b41a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d122      	bne.n	800af96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d11b      	bne.n	800af96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f06f 0204 	mvn.w	r2, #4
 800af66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2202      	movs	r2, #2
 800af6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fa42 	bl	800b406 <HAL_TIM_IC_CaptureCallback>
 800af82:	e005      	b.n	800af90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fa34 	bl	800b3f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa45 	bl	800b41a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	f003 0308 	and.w	r3, r3, #8
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d122      	bne.n	800afea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f003 0308 	and.w	r3, r3, #8
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d11b      	bne.n	800afea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f06f 0208 	mvn.w	r2, #8
 800afba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2204      	movs	r2, #4
 800afc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fa18 	bl	800b406 <HAL_TIM_IC_CaptureCallback>
 800afd6:	e005      	b.n	800afe4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa0a 	bl	800b3f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fa1b 	bl	800b41a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d122      	bne.n	800b03e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f003 0310 	and.w	r3, r3, #16
 800b002:	2b10      	cmp	r3, #16
 800b004:	d11b      	bne.n	800b03e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f06f 0210 	mvn.w	r2, #16
 800b00e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2208      	movs	r2, #8
 800b014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9ee 	bl	800b406 <HAL_TIM_IC_CaptureCallback>
 800b02a:	e005      	b.n	800b038 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f9e0 	bl	800b3f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9f1 	bl	800b41a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d10e      	bne.n	800b06a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b01      	cmp	r3, #1
 800b058:	d107      	bne.n	800b06a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f06f 0201 	mvn.w	r2, #1
 800b062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f5 fd6b 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b074:	2b80      	cmp	r3, #128	; 0x80
 800b076:	d10e      	bne.n	800b096 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b082:	2b80      	cmp	r3, #128	; 0x80
 800b084:	d107      	bne.n	800b096 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fd6d 	bl	800bb70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b40      	cmp	r3, #64	; 0x40
 800b0a2:	d10e      	bne.n	800b0c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ae:	2b40      	cmp	r3, #64	; 0x40
 800b0b0:	d107      	bne.n	800b0c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f9b6 	bl	800b42e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b20      	cmp	r3, #32
 800b0ce:	d10e      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d107      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f06f 0220 	mvn.w	r2, #32
 800b0e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fd37 	bl	800bb5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d101      	bne.n	800b112 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b10e:	2302      	movs	r3, #2
 800b110:	e0b4      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x184>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b0c      	cmp	r3, #12
 800b126:	f200 809f 	bhi.w	800b268 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b12a:	a201      	add	r2, pc, #4	; (adr r2, 800b130 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b165 	.word	0x0800b165
 800b134:	0800b269 	.word	0x0800b269
 800b138:	0800b269 	.word	0x0800b269
 800b13c:	0800b269 	.word	0x0800b269
 800b140:	0800b1a5 	.word	0x0800b1a5
 800b144:	0800b269 	.word	0x0800b269
 800b148:	0800b269 	.word	0x0800b269
 800b14c:	0800b269 	.word	0x0800b269
 800b150:	0800b1e7 	.word	0x0800b1e7
 800b154:	0800b269 	.word	0x0800b269
 800b158:	0800b269 	.word	0x0800b269
 800b15c:	0800b269 	.word	0x0800b269
 800b160:	0800b227 	.word	0x0800b227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f9ea 	bl	800b544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	699a      	ldr	r2, [r3, #24]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0208 	orr.w	r2, r2, #8
 800b17e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699a      	ldr	r2, [r3, #24]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 0204 	bic.w	r2, r2, #4
 800b18e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6999      	ldr	r1, [r3, #24]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691a      	ldr	r2, [r3, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	619a      	str	r2, [r3, #24]
      break;
 800b1a2:	e062      	b.n	800b26a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fa30 	bl	800b610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699a      	ldr	r2, [r3, #24]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6999      	ldr	r1, [r3, #24]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	021a      	lsls	r2, r3, #8
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	619a      	str	r2, [r3, #24]
      break;
 800b1e4:	e041      	b.n	800b26a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fa7b 	bl	800b6e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69da      	ldr	r2, [r3, #28]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0208 	orr.w	r2, r2, #8
 800b200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69da      	ldr	r2, [r3, #28]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0204 	bic.w	r2, r2, #4
 800b210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69d9      	ldr	r1, [r3, #28]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	691a      	ldr	r2, [r3, #16]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	61da      	str	r2, [r3, #28]
      break;
 800b224:	e021      	b.n	800b26a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68b9      	ldr	r1, [r7, #8]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fac5 	bl	800b7bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69da      	ldr	r2, [r3, #28]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	69d9      	ldr	r1, [r3, #28]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	021a      	lsls	r2, r3, #8
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	61da      	str	r2, [r3, #28]
      break;
 800b266:	e000      	b.n	800b26a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b268:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b294:	2b01      	cmp	r3, #1
 800b296:	d101      	bne.n	800b29c <HAL_TIM_ConfigClockSource+0x18>
 800b298:	2302      	movs	r3, #2
 800b29a:	e0a6      	b.n	800b3ea <HAL_TIM_ConfigClockSource+0x166>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	d067      	beq.n	800b3a4 <HAL_TIM_ConfigClockSource+0x120>
 800b2d4:	2b40      	cmp	r3, #64	; 0x40
 800b2d6:	d80b      	bhi.n	800b2f0 <HAL_TIM_ConfigClockSource+0x6c>
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	d073      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x140>
 800b2dc:	2b10      	cmp	r3, #16
 800b2de:	d802      	bhi.n	800b2e6 <HAL_TIM_ConfigClockSource+0x62>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d06f      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b2e4:	e078      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d06c      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x140>
 800b2ea:	2b30      	cmp	r3, #48	; 0x30
 800b2ec:	d06a      	beq.n	800b3c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b2ee:	e073      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b2f0:	2b70      	cmp	r3, #112	; 0x70
 800b2f2:	d00d      	beq.n	800b310 <HAL_TIM_ConfigClockSource+0x8c>
 800b2f4:	2b70      	cmp	r3, #112	; 0x70
 800b2f6:	d804      	bhi.n	800b302 <HAL_TIM_ConfigClockSource+0x7e>
 800b2f8:	2b50      	cmp	r3, #80	; 0x50
 800b2fa:	d033      	beq.n	800b364 <HAL_TIM_ConfigClockSource+0xe0>
 800b2fc:	2b60      	cmp	r3, #96	; 0x60
 800b2fe:	d041      	beq.n	800b384 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b300:	e06a      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b306:	d066      	beq.n	800b3d6 <HAL_TIM_ConfigClockSource+0x152>
 800b308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b30c:	d017      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b30e:	e063      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	6899      	ldr	r1, [r3, #8]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f000 fb16 	bl	800b950 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b332:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	609a      	str	r2, [r3, #8]
      break;
 800b33c:	e04c      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6899      	ldr	r1, [r3, #8]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f000 faff 	bl	800b950 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b360:	609a      	str	r2, [r3, #8]
      break;
 800b362:	e039      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	6859      	ldr	r1, [r3, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	461a      	mov	r2, r3
 800b372:	f000 fa73 	bl	800b85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2150      	movs	r1, #80	; 0x50
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 facc 	bl	800b91a <TIM_ITRx_SetConfig>
      break;
 800b382:	e029      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	6859      	ldr	r1, [r3, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	461a      	mov	r2, r3
 800b392:	f000 fa92 	bl	800b8ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2160      	movs	r1, #96	; 0x60
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fabc 	bl	800b91a <TIM_ITRx_SetConfig>
      break;
 800b3a2:	e019      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6859      	ldr	r1, [r3, #4]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f000 fa53 	bl	800b85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2140      	movs	r1, #64	; 0x40
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 faac 	bl	800b91a <TIM_ITRx_SetConfig>
      break;
 800b3c2:	e009      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f000 faa3 	bl	800b91a <TIM_ITRx_SetConfig>
      break;
 800b3d4:	e000      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b3d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b406:	b480      	push	{r7}
 800b408:	b083      	sub	sp, #12
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b40e:	bf00      	nop
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b422:	bf00      	nop
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a34      	ldr	r2, [pc, #208]	; (800b528 <TIM_Base_SetConfig+0xe4>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d00f      	beq.n	800b47c <TIM_Base_SetConfig+0x38>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b462:	d00b      	beq.n	800b47c <TIM_Base_SetConfig+0x38>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a31      	ldr	r2, [pc, #196]	; (800b52c <TIM_Base_SetConfig+0xe8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d007      	beq.n	800b47c <TIM_Base_SetConfig+0x38>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a30      	ldr	r2, [pc, #192]	; (800b530 <TIM_Base_SetConfig+0xec>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <TIM_Base_SetConfig+0x38>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a2f      	ldr	r2, [pc, #188]	; (800b534 <TIM_Base_SetConfig+0xf0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d108      	bne.n	800b48e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a25      	ldr	r2, [pc, #148]	; (800b528 <TIM_Base_SetConfig+0xe4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d01b      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49c:	d017      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a22      	ldr	r2, [pc, #136]	; (800b52c <TIM_Base_SetConfig+0xe8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d013      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a21      	ldr	r2, [pc, #132]	; (800b530 <TIM_Base_SetConfig+0xec>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00f      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a20      	ldr	r2, [pc, #128]	; (800b534 <TIM_Base_SetConfig+0xf0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00b      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a1f      	ldr	r2, [pc, #124]	; (800b538 <TIM_Base_SetConfig+0xf4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d007      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a1e      	ldr	r2, [pc, #120]	; (800b53c <TIM_Base_SetConfig+0xf8>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d003      	beq.n	800b4ce <TIM_Base_SetConfig+0x8a>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <TIM_Base_SetConfig+0xfc>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d108      	bne.n	800b4e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a08      	ldr	r2, [pc, #32]	; (800b528 <TIM_Base_SetConfig+0xe4>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d103      	bne.n	800b514 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	691a      	ldr	r2, [r3, #16]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	615a      	str	r2, [r3, #20]
}
 800b51a:	bf00      	nop
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	40010000 	.word	0x40010000
 800b52c:	40000400 	.word	0x40000400
 800b530:	40000800 	.word	0x40000800
 800b534:	40000c00 	.word	0x40000c00
 800b538:	40014000 	.word	0x40014000
 800b53c:	40014400 	.word	0x40014400
 800b540:	40014800 	.word	0x40014800

0800b544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	f023 0201 	bic.w	r2, r3, #1
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	4313      	orrs	r3, r2
 800b584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f023 0302 	bic.w	r3, r3, #2
 800b58c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a1c      	ldr	r2, [pc, #112]	; (800b60c <TIM_OC1_SetConfig+0xc8>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10c      	bne.n	800b5ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f023 0308 	bic.w	r3, r3, #8
 800b5a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f023 0304 	bic.w	r3, r3, #4
 800b5b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a13      	ldr	r2, [pc, #76]	; (800b60c <TIM_OC1_SetConfig+0xc8>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d111      	bne.n	800b5e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	621a      	str	r2, [r3, #32]
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	40010000 	.word	0x40010000

0800b610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f023 0210 	bic.w	r2, r3, #16
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	4313      	orrs	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f023 0320 	bic.w	r3, r3, #32
 800b65a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a1e      	ldr	r2, [pc, #120]	; (800b6e4 <TIM_OC2_SetConfig+0xd4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d10d      	bne.n	800b68c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b68a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a15      	ldr	r2, [pc, #84]	; (800b6e4 <TIM_OC2_SetConfig+0xd4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d113      	bne.n	800b6bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b69a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	621a      	str	r2, [r3, #32]
}
 800b6d6:	bf00      	nop
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	40010000 	.word	0x40010000

0800b6e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	021b      	lsls	r3, r3, #8
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a1d      	ldr	r2, [pc, #116]	; (800b7b8 <TIM_OC3_SetConfig+0xd0>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d10d      	bne.n	800b762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b74c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	4313      	orrs	r3, r2
 800b758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a14      	ldr	r2, [pc, #80]	; (800b7b8 <TIM_OC3_SetConfig+0xd0>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d113      	bne.n	800b792 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	4313      	orrs	r3, r2
 800b784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	4313      	orrs	r3, r2
 800b790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	621a      	str	r2, [r3, #32]
}
 800b7ac:	bf00      	nop
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	40010000 	.word	0x40010000

0800b7bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	021b      	lsls	r3, r3, #8
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	031b      	lsls	r3, r3, #12
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a10      	ldr	r2, [pc, #64]	; (800b858 <TIM_OC4_SetConfig+0x9c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d109      	bne.n	800b830 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	019b      	lsls	r3, r3, #6
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	621a      	str	r2, [r3, #32]
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	40010000 	.word	0x40010000

0800b85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	f023 0201 	bic.w	r2, r3, #1
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4313      	orrs	r3, r2
 800b890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f023 030a 	bic.w	r3, r3, #10
 800b898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	621a      	str	r2, [r3, #32]
}
 800b8ae:	bf00      	nop
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b087      	sub	sp, #28
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	f023 0210 	bic.w	r2, r3, #16
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6a1b      	ldr	r3, [r3, #32]
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	031b      	lsls	r3, r3, #12
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	011b      	lsls	r3, r3, #4
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	621a      	str	r2, [r3, #32]
}
 800b90e:	bf00      	nop
 800b910:	371c      	adds	r7, #28
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4313      	orrs	r3, r2
 800b938:	f043 0307 	orr.w	r3, r3, #7
 800b93c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	609a      	str	r2, [r3, #8]
}
 800b944:	bf00      	nop
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
 800b95c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b96a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	021a      	lsls	r2, r3, #8
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	431a      	orrs	r2, r3
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	4313      	orrs	r3, r2
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	609a      	str	r2, [r3, #8]
}
 800b984:	bf00      	nop
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b990:	b480      	push	{r7}
 800b992:	b087      	sub	sp, #28
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f003 031f 	and.w	r3, r3, #31
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1a      	ldr	r2, [r3, #32]
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	43db      	mvns	r3, r3
 800b9b2:	401a      	ands	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6a1a      	ldr	r2, [r3, #32]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 031f 	and.w	r3, r3, #31
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	621a      	str	r2, [r3, #32]
}
 800b9ce:	bf00      	nop
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
	...

0800b9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d101      	bne.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	e050      	b.n	800ba96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a1c      	ldr	r2, [pc, #112]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d018      	beq.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba40:	d013      	beq.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a18      	ldr	r2, [pc, #96]	; (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d00e      	beq.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a16      	ldr	r2, [pc, #88]	; (800baac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d009      	beq.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d004      	beq.n	800ba6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d10c      	bne.n	800ba84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	40010000 	.word	0x40010000
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800
 800bab0:	40000c00 	.word	0x40000c00
 800bab4:	40014000 	.word	0x40014000

0800bab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e03d      	b.n	800bb50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e03f      	b.n	800bc16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7f6 fcd8 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2224      	movs	r2, #36	; 0x24
 800bbb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68da      	ldr	r2, [r3, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fb83 	bl	800c2d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	691a      	ldr	r2, [r3, #16]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	695a      	ldr	r2, [r3, #20]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68da      	ldr	r2, [r3, #12]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b088      	sub	sp, #32
 800bc22:	af02      	add	r7, sp, #8
 800bc24:	60f8      	str	r0, [r7, #12]
 800bc26:	60b9      	str	r1, [r7, #8]
 800bc28:	603b      	str	r3, [r7, #0]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	f040 8083 	bne.w	800bd46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <HAL_UART_Transmit+0x2e>
 800bc46:	88fb      	ldrh	r3, [r7, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e07b      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d101      	bne.n	800bc5e <HAL_UART_Transmit+0x40>
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e074      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2221      	movs	r2, #33	; 0x21
 800bc70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800bc74:	f7fc f90a 	bl	8007e8c <HAL_GetTick>
 800bc78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800bc8e:	e042      	b.n	800bd16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bca6:	d122      	bne.n	800bcee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f000 f9a2 	bl	800bffc <UART_WaitOnFlagUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e042      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d103      	bne.n	800bce6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	3302      	adds	r3, #2
 800bce2:	60bb      	str	r3, [r7, #8]
 800bce4:	e017      	b.n	800bd16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3301      	adds	r3, #1
 800bcea:	60bb      	str	r3, [r7, #8]
 800bcec:	e013      	b.n	800bd16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2180      	movs	r1, #128	; 0x80
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f97f 	bl	800bffc <UART_WaitOnFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e01f      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	60ba      	str	r2, [r7, #8]
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1b7      	bne.n	800bc90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2200      	movs	r2, #0
 800bd28:	2140      	movs	r1, #64	; 0x40
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 f966 	bl	800bffc <UART_WaitOnFlagUntilTimeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e006      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e000      	b.n	800bd48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800bd46:	2302      	movs	r3, #2
  }
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b20      	cmp	r3, #32
 800bd68:	d140      	bne.n	800bdec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <HAL_UART_Receive_IT+0x26>
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e039      	b.n	800bdee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_UART_Receive_IT+0x38>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e032      	b.n	800bdee <HAL_UART_Receive_IT+0x9e>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	88fa      	ldrh	r2, [r7, #6]
 800bd9a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2222      	movs	r2, #34	; 0x22
 800bdac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdc6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695a      	ldr	r2, [r3, #20]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f042 0201 	orr.w	r2, r2, #1
 800bdd6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0220 	orr.w	r2, r2, #32
 800bde6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	e000      	b.n	800bdee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bdec:	2302      	movs	r3, #2
  }
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
	...

0800bdfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10d      	bne.n	800be4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	f003 0320 	and.w	r3, r3, #32
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d008      	beq.n	800be4e <HAL_UART_IRQHandler+0x52>
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	f003 0320 	and.w	r3, r3, #32
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9c2 	bl	800c1d0 <UART_Receive_IT>
      return;
 800be4c:	e0d1      	b.n	800bff2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 80b0 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x1ba>
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d105      	bne.n	800be6c <HAL_UART_IRQHandler+0x70>
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 80a5 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00a      	beq.n	800be8c <HAL_UART_IRQHandler+0x90>
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d005      	beq.n	800be8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be84:	f043 0201 	orr.w	r2, r3, #1
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <HAL_UART_IRQHandler+0xb0>
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea4:	f043 0202 	orr.w	r2, r3, #2
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	f003 0302 	and.w	r3, r3, #2
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <HAL_UART_IRQHandler+0xd0>
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec4:	f043 0204 	orr.w	r2, r3, #4
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f003 0308 	and.w	r3, r3, #8
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00f      	beq.n	800bef6 <HAL_UART_IRQHandler+0xfa>
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f003 0320 	and.w	r3, r3, #32
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d104      	bne.n	800beea <HAL_UART_IRQHandler+0xee>
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beee:	f043 0208 	orr.w	r2, r3, #8
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d078      	beq.n	800bff0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <HAL_UART_IRQHandler+0x11c>
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	f003 0320 	and.w	r3, r3, #32
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f95c 	bl	800c1d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf22:	2b40      	cmp	r3, #64	; 0x40
 800bf24:	bf0c      	ite	eq
 800bf26:	2301      	moveq	r3, #1
 800bf28:	2300      	movne	r3, #0
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf32:	f003 0308 	and.w	r3, r3, #8
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <HAL_UART_IRQHandler+0x144>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d031      	beq.n	800bfa4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f8a5 	bl	800c090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf50:	2b40      	cmp	r3, #64	; 0x40
 800bf52:	d123      	bne.n	800bf9c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695a      	ldr	r2, [r3, #20]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf62:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d013      	beq.n	800bf94 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf70:	4a21      	ldr	r2, [pc, #132]	; (800bff8 <HAL_UART_IRQHandler+0x1fc>)
 800bf72:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fc fdb3 	bl	8008ae4 <HAL_DMA_Abort_IT>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d016      	beq.n	800bfb2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bf8e:	4610      	mov	r0, r2
 800bf90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf92:	e00e      	b.n	800bfb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7f4 fcb1 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf9a:	e00a      	b.n	800bfb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7f4 fcad 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa2:	e006      	b.n	800bfb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7f4 fca9 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bfb0:	e01e      	b.n	800bff0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb2:	bf00      	nop
    return;
 800bfb4:	e01c      	b.n	800bff0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d008      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x1d6>
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d003      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f892 	bl	800c0f4 <UART_Transmit_IT>
    return;
 800bfd0:	e00f      	b.n	800bff2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <HAL_UART_IRQHandler+0x1f6>
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d005      	beq.n	800bff2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f8da 	bl	800c1a0 <UART_EndTransmit_IT>
    return;
 800bfec:	bf00      	nop
 800bfee:	e000      	b.n	800bff2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800bff0:	bf00      	nop
  }
}
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	0800c0cd 	.word	0x0800c0cd

0800bffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	603b      	str	r3, [r7, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c00c:	e02c      	b.n	800c068 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d028      	beq.n	800c068 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <UART_WaitOnFlagUntilTimeout+0x30>
 800c01c:	f7fb ff36 	bl	8007e8c <HAL_GetTick>
 800c020:	4602      	mov	r2, r0
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	69ba      	ldr	r2, [r7, #24]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d21d      	bcs.n	800c068 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c03a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	695a      	ldr	r2, [r3, #20]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0201 	bic.w	r2, r2, #1
 800c04a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2220      	movs	r2, #32
 800c050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2220      	movs	r2, #32
 800c058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e00f      	b.n	800c088 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	4013      	ands	r3, r2
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	429a      	cmp	r2, r3
 800c076:	bf0c      	ite	eq
 800c078:	2301      	moveq	r3, #1
 800c07a:	2300      	movne	r3, #0
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	461a      	mov	r2, r3
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	429a      	cmp	r2, r3
 800c084:	d0c3      	beq.n	800c00e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c0a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	695a      	ldr	r2, [r3, #20]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f022 0201 	bic.w	r2, r2, #1
 800c0b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7f4 fc08 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ec:	bf00      	nop
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b21      	cmp	r3, #33	; 0x21
 800c106:	d144      	bne.n	800c192 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c110:	d11a      	bne.n	800c148 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c126:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d105      	bne.n	800c13c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	1c9a      	adds	r2, r3, #2
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	621a      	str	r2, [r3, #32]
 800c13a:	e00e      	b.n	800c15a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	621a      	str	r2, [r3, #32]
 800c146:	e008      	b.n	800c15a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	1c59      	adds	r1, r3, #1
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6211      	str	r1, [r2, #32]
 800c152:	781a      	ldrb	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c15e:	b29b      	uxth	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b29b      	uxth	r3, r3
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4619      	mov	r1, r3
 800c168:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10f      	bne.n	800c18e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c17c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68da      	ldr	r2, [r3, #12]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c18c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	e000      	b.n	800c194 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c192:	2302      	movs	r3, #2
  }
}
 800c194:	4618      	mov	r0, r3
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2220      	movs	r2, #32
 800c1bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7f4 fb87 	bl	80008d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b22      	cmp	r3, #34	; 0x22
 800c1e2:	d171      	bne.n	800c2c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ec:	d123      	bne.n	800c236 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10e      	bne.n	800c21a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	b29b      	uxth	r3, r3
 800c204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c208:	b29a      	uxth	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c212:	1c9a      	adds	r2, r3, #2
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	629a      	str	r2, [r3, #40]	; 0x28
 800c218:	e029      	b.n	800c26e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	b29b      	uxth	r3, r3
 800c222:	b2db      	uxtb	r3, r3
 800c224:	b29a      	uxth	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	629a      	str	r2, [r3, #40]	; 0x28
 800c234:	e01b      	b.n	800c26e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10a      	bne.n	800c254 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6858      	ldr	r0, [r3, #4]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c248:	1c59      	adds	r1, r3, #1
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	6291      	str	r1, [r2, #40]	; 0x28
 800c24e:	b2c2      	uxtb	r2, r0
 800c250:	701a      	strb	r2, [r3, #0]
 800c252:	e00c      	b.n	800c26e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	1c58      	adds	r0, r3, #1
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	6288      	str	r0, [r1, #40]	; 0x28
 800c266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c272:	b29b      	uxth	r3, r3
 800c274:	3b01      	subs	r3, #1
 800c276:	b29b      	uxth	r3, r3
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	4619      	mov	r1, r3
 800c27c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d120      	bne.n	800c2c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f022 0220 	bic.w	r2, r2, #32
 800c290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	695a      	ldr	r2, [r3, #20]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f022 0201 	bic.w	r2, r2, #1
 800c2b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2220      	movs	r2, #32
 800c2b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f4 fb2a 	bl	8000914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e002      	b.n	800c2ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e000      	b.n	800c2ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c2c8:	2302      	movs	r3, #2
  }
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68da      	ldr	r2, [r3, #12]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	431a      	orrs	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	4313      	orrs	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c316:	f023 030c 	bic.w	r3, r3, #12
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	430b      	orrs	r3, r1
 800c322:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	699a      	ldr	r2, [r3, #24]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c342:	f040 818b 	bne.w	800c65c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4ac1      	ldr	r2, [pc, #772]	; (800c650 <UART_SetConfig+0x37c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d005      	beq.n	800c35c <UART_SetConfig+0x88>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4abf      	ldr	r2, [pc, #764]	; (800c654 <UART_SetConfig+0x380>)
 800c356:	4293      	cmp	r3, r2
 800c358:	f040 80bd 	bne.w	800c4d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c35c:	f7fe fbcc 	bl	800aaf8 <HAL_RCC_GetPCLK2Freq>
 800c360:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	461d      	mov	r5, r3
 800c366:	f04f 0600 	mov.w	r6, #0
 800c36a:	46a8      	mov	r8, r5
 800c36c:	46b1      	mov	r9, r6
 800c36e:	eb18 0308 	adds.w	r3, r8, r8
 800c372:	eb49 0409 	adc.w	r4, r9, r9
 800c376:	4698      	mov	r8, r3
 800c378:	46a1      	mov	r9, r4
 800c37a:	eb18 0805 	adds.w	r8, r8, r5
 800c37e:	eb49 0906 	adc.w	r9, r9, r6
 800c382:	f04f 0100 	mov.w	r1, #0
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c38e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c392:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c396:	4688      	mov	r8, r1
 800c398:	4691      	mov	r9, r2
 800c39a:	eb18 0005 	adds.w	r0, r8, r5
 800c39e:	eb49 0106 	adc.w	r1, r9, r6
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	461d      	mov	r5, r3
 800c3a8:	f04f 0600 	mov.w	r6, #0
 800c3ac:	196b      	adds	r3, r5, r5
 800c3ae:	eb46 0406 	adc.w	r4, r6, r6
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	f7f3 ff63 	bl	8000280 <__aeabi_uldivmod>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	460c      	mov	r4, r1
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4ba5      	ldr	r3, [pc, #660]	; (800c658 <UART_SetConfig+0x384>)
 800c3c2:	fba3 2302 	umull	r2, r3, r3, r2
 800c3c6:	095b      	lsrs	r3, r3, #5
 800c3c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	461d      	mov	r5, r3
 800c3d0:	f04f 0600 	mov.w	r6, #0
 800c3d4:	46a9      	mov	r9, r5
 800c3d6:	46b2      	mov	sl, r6
 800c3d8:	eb19 0309 	adds.w	r3, r9, r9
 800c3dc:	eb4a 040a 	adc.w	r4, sl, sl
 800c3e0:	4699      	mov	r9, r3
 800c3e2:	46a2      	mov	sl, r4
 800c3e4:	eb19 0905 	adds.w	r9, r9, r5
 800c3e8:	eb4a 0a06 	adc.w	sl, sl, r6
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	f04f 0200 	mov.w	r2, #0
 800c3f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c3fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c400:	4689      	mov	r9, r1
 800c402:	4692      	mov	sl, r2
 800c404:	eb19 0005 	adds.w	r0, r9, r5
 800c408:	eb4a 0106 	adc.w	r1, sl, r6
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	461d      	mov	r5, r3
 800c412:	f04f 0600 	mov.w	r6, #0
 800c416:	196b      	adds	r3, r5, r5
 800c418:	eb46 0406 	adc.w	r4, r6, r6
 800c41c:	461a      	mov	r2, r3
 800c41e:	4623      	mov	r3, r4
 800c420:	f7f3 ff2e 	bl	8000280 <__aeabi_uldivmod>
 800c424:	4603      	mov	r3, r0
 800c426:	460c      	mov	r4, r1
 800c428:	461a      	mov	r2, r3
 800c42a:	4b8b      	ldr	r3, [pc, #556]	; (800c658 <UART_SetConfig+0x384>)
 800c42c:	fba3 1302 	umull	r1, r3, r3, r2
 800c430:	095b      	lsrs	r3, r3, #5
 800c432:	2164      	movs	r1, #100	; 0x64
 800c434:	fb01 f303 	mul.w	r3, r1, r3
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	3332      	adds	r3, #50	; 0x32
 800c43e:	4a86      	ldr	r2, [pc, #536]	; (800c658 <UART_SetConfig+0x384>)
 800c440:	fba2 2303 	umull	r2, r3, r2, r3
 800c444:	095b      	lsrs	r3, r3, #5
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c44c:	4498      	add	r8, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	461d      	mov	r5, r3
 800c452:	f04f 0600 	mov.w	r6, #0
 800c456:	46a9      	mov	r9, r5
 800c458:	46b2      	mov	sl, r6
 800c45a:	eb19 0309 	adds.w	r3, r9, r9
 800c45e:	eb4a 040a 	adc.w	r4, sl, sl
 800c462:	4699      	mov	r9, r3
 800c464:	46a2      	mov	sl, r4
 800c466:	eb19 0905 	adds.w	r9, r9, r5
 800c46a:	eb4a 0a06 	adc.w	sl, sl, r6
 800c46e:	f04f 0100 	mov.w	r1, #0
 800c472:	f04f 0200 	mov.w	r2, #0
 800c476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c47a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c47e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c482:	4689      	mov	r9, r1
 800c484:	4692      	mov	sl, r2
 800c486:	eb19 0005 	adds.w	r0, r9, r5
 800c48a:	eb4a 0106 	adc.w	r1, sl, r6
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	461d      	mov	r5, r3
 800c494:	f04f 0600 	mov.w	r6, #0
 800c498:	196b      	adds	r3, r5, r5
 800c49a:	eb46 0406 	adc.w	r4, r6, r6
 800c49e:	461a      	mov	r2, r3
 800c4a0:	4623      	mov	r3, r4
 800c4a2:	f7f3 feed 	bl	8000280 <__aeabi_uldivmod>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	4b6a      	ldr	r3, [pc, #424]	; (800c658 <UART_SetConfig+0x384>)
 800c4ae:	fba3 1302 	umull	r1, r3, r3, r2
 800c4b2:	095b      	lsrs	r3, r3, #5
 800c4b4:	2164      	movs	r1, #100	; 0x64
 800c4b6:	fb01 f303 	mul.w	r3, r1, r3
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	3332      	adds	r3, #50	; 0x32
 800c4c0:	4a65      	ldr	r2, [pc, #404]	; (800c658 <UART_SetConfig+0x384>)
 800c4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c6:	095b      	lsrs	r3, r3, #5
 800c4c8:	f003 0207 	and.w	r2, r3, #7
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4442      	add	r2, r8
 800c4d2:	609a      	str	r2, [r3, #8]
 800c4d4:	e26f      	b.n	800c9b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c4d6:	f7fe fafb 	bl	800aad0 <HAL_RCC_GetPCLK1Freq>
 800c4da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	461d      	mov	r5, r3
 800c4e0:	f04f 0600 	mov.w	r6, #0
 800c4e4:	46a8      	mov	r8, r5
 800c4e6:	46b1      	mov	r9, r6
 800c4e8:	eb18 0308 	adds.w	r3, r8, r8
 800c4ec:	eb49 0409 	adc.w	r4, r9, r9
 800c4f0:	4698      	mov	r8, r3
 800c4f2:	46a1      	mov	r9, r4
 800c4f4:	eb18 0805 	adds.w	r8, r8, r5
 800c4f8:	eb49 0906 	adc.w	r9, r9, r6
 800c4fc:	f04f 0100 	mov.w	r1, #0
 800c500:	f04f 0200 	mov.w	r2, #0
 800c504:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c508:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c50c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c510:	4688      	mov	r8, r1
 800c512:	4691      	mov	r9, r2
 800c514:	eb18 0005 	adds.w	r0, r8, r5
 800c518:	eb49 0106 	adc.w	r1, r9, r6
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	461d      	mov	r5, r3
 800c522:	f04f 0600 	mov.w	r6, #0
 800c526:	196b      	adds	r3, r5, r5
 800c528:	eb46 0406 	adc.w	r4, r6, r6
 800c52c:	461a      	mov	r2, r3
 800c52e:	4623      	mov	r3, r4
 800c530:	f7f3 fea6 	bl	8000280 <__aeabi_uldivmod>
 800c534:	4603      	mov	r3, r0
 800c536:	460c      	mov	r4, r1
 800c538:	461a      	mov	r2, r3
 800c53a:	4b47      	ldr	r3, [pc, #284]	; (800c658 <UART_SetConfig+0x384>)
 800c53c:	fba3 2302 	umull	r2, r3, r3, r2
 800c540:	095b      	lsrs	r3, r3, #5
 800c542:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	461d      	mov	r5, r3
 800c54a:	f04f 0600 	mov.w	r6, #0
 800c54e:	46a9      	mov	r9, r5
 800c550:	46b2      	mov	sl, r6
 800c552:	eb19 0309 	adds.w	r3, r9, r9
 800c556:	eb4a 040a 	adc.w	r4, sl, sl
 800c55a:	4699      	mov	r9, r3
 800c55c:	46a2      	mov	sl, r4
 800c55e:	eb19 0905 	adds.w	r9, r9, r5
 800c562:	eb4a 0a06 	adc.w	sl, sl, r6
 800c566:	f04f 0100 	mov.w	r1, #0
 800c56a:	f04f 0200 	mov.w	r2, #0
 800c56e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c57a:	4689      	mov	r9, r1
 800c57c:	4692      	mov	sl, r2
 800c57e:	eb19 0005 	adds.w	r0, r9, r5
 800c582:	eb4a 0106 	adc.w	r1, sl, r6
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	461d      	mov	r5, r3
 800c58c:	f04f 0600 	mov.w	r6, #0
 800c590:	196b      	adds	r3, r5, r5
 800c592:	eb46 0406 	adc.w	r4, r6, r6
 800c596:	461a      	mov	r2, r3
 800c598:	4623      	mov	r3, r4
 800c59a:	f7f3 fe71 	bl	8000280 <__aeabi_uldivmod>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	4b2c      	ldr	r3, [pc, #176]	; (800c658 <UART_SetConfig+0x384>)
 800c5a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c5aa:	095b      	lsrs	r3, r3, #5
 800c5ac:	2164      	movs	r1, #100	; 0x64
 800c5ae:	fb01 f303 	mul.w	r3, r1, r3
 800c5b2:	1ad3      	subs	r3, r2, r3
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	3332      	adds	r3, #50	; 0x32
 800c5b8:	4a27      	ldr	r2, [pc, #156]	; (800c658 <UART_SetConfig+0x384>)
 800c5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c5be:	095b      	lsrs	r3, r3, #5
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c5c6:	4498      	add	r8, r3
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	461d      	mov	r5, r3
 800c5cc:	f04f 0600 	mov.w	r6, #0
 800c5d0:	46a9      	mov	r9, r5
 800c5d2:	46b2      	mov	sl, r6
 800c5d4:	eb19 0309 	adds.w	r3, r9, r9
 800c5d8:	eb4a 040a 	adc.w	r4, sl, sl
 800c5dc:	4699      	mov	r9, r3
 800c5de:	46a2      	mov	sl, r4
 800c5e0:	eb19 0905 	adds.w	r9, r9, r5
 800c5e4:	eb4a 0a06 	adc.w	sl, sl, r6
 800c5e8:	f04f 0100 	mov.w	r1, #0
 800c5ec:	f04f 0200 	mov.w	r2, #0
 800c5f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c5f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c5fc:	4689      	mov	r9, r1
 800c5fe:	4692      	mov	sl, r2
 800c600:	eb19 0005 	adds.w	r0, r9, r5
 800c604:	eb4a 0106 	adc.w	r1, sl, r6
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	461d      	mov	r5, r3
 800c60e:	f04f 0600 	mov.w	r6, #0
 800c612:	196b      	adds	r3, r5, r5
 800c614:	eb46 0406 	adc.w	r4, r6, r6
 800c618:	461a      	mov	r2, r3
 800c61a:	4623      	mov	r3, r4
 800c61c:	f7f3 fe30 	bl	8000280 <__aeabi_uldivmod>
 800c620:	4603      	mov	r3, r0
 800c622:	460c      	mov	r4, r1
 800c624:	461a      	mov	r2, r3
 800c626:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <UART_SetConfig+0x384>)
 800c628:	fba3 1302 	umull	r1, r3, r3, r2
 800c62c:	095b      	lsrs	r3, r3, #5
 800c62e:	2164      	movs	r1, #100	; 0x64
 800c630:	fb01 f303 	mul.w	r3, r1, r3
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	3332      	adds	r3, #50	; 0x32
 800c63a:	4a07      	ldr	r2, [pc, #28]	; (800c658 <UART_SetConfig+0x384>)
 800c63c:	fba2 2303 	umull	r2, r3, r2, r3
 800c640:	095b      	lsrs	r3, r3, #5
 800c642:	f003 0207 	and.w	r2, r3, #7
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4442      	add	r2, r8
 800c64c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c64e:	e1b2      	b.n	800c9b6 <UART_SetConfig+0x6e2>
 800c650:	40011000 	.word	0x40011000
 800c654:	40011400 	.word	0x40011400
 800c658:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4ad7      	ldr	r2, [pc, #860]	; (800c9c0 <UART_SetConfig+0x6ec>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d005      	beq.n	800c672 <UART_SetConfig+0x39e>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4ad6      	ldr	r2, [pc, #856]	; (800c9c4 <UART_SetConfig+0x6f0>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	f040 80d1 	bne.w	800c814 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c672:	f7fe fa41 	bl	800aaf8 <HAL_RCC_GetPCLK2Freq>
 800c676:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	469a      	mov	sl, r3
 800c67c:	f04f 0b00 	mov.w	fp, #0
 800c680:	46d0      	mov	r8, sl
 800c682:	46d9      	mov	r9, fp
 800c684:	eb18 0308 	adds.w	r3, r8, r8
 800c688:	eb49 0409 	adc.w	r4, r9, r9
 800c68c:	4698      	mov	r8, r3
 800c68e:	46a1      	mov	r9, r4
 800c690:	eb18 080a 	adds.w	r8, r8, sl
 800c694:	eb49 090b 	adc.w	r9, r9, fp
 800c698:	f04f 0100 	mov.w	r1, #0
 800c69c:	f04f 0200 	mov.w	r2, #0
 800c6a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c6a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c6a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c6ac:	4688      	mov	r8, r1
 800c6ae:	4691      	mov	r9, r2
 800c6b0:	eb1a 0508 	adds.w	r5, sl, r8
 800c6b4:	eb4b 0609 	adc.w	r6, fp, r9
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	f04f 0200 	mov.w	r2, #0
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	f04f 0400 	mov.w	r4, #0
 800c6ca:	0094      	lsls	r4, r2, #2
 800c6cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c6d0:	008b      	lsls	r3, r1, #2
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	4631      	mov	r1, r6
 800c6da:	f7f3 fdd1 	bl	8000280 <__aeabi_uldivmod>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4bb8      	ldr	r3, [pc, #736]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c6e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c6ea:	095b      	lsrs	r3, r3, #5
 800c6ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	469b      	mov	fp, r3
 800c6f4:	f04f 0c00 	mov.w	ip, #0
 800c6f8:	46d9      	mov	r9, fp
 800c6fa:	46e2      	mov	sl, ip
 800c6fc:	eb19 0309 	adds.w	r3, r9, r9
 800c700:	eb4a 040a 	adc.w	r4, sl, sl
 800c704:	4699      	mov	r9, r3
 800c706:	46a2      	mov	sl, r4
 800c708:	eb19 090b 	adds.w	r9, r9, fp
 800c70c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c710:	f04f 0100 	mov.w	r1, #0
 800c714:	f04f 0200 	mov.w	r2, #0
 800c718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c71c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c724:	4689      	mov	r9, r1
 800c726:	4692      	mov	sl, r2
 800c728:	eb1b 0509 	adds.w	r5, fp, r9
 800c72c:	eb4c 060a 	adc.w	r6, ip, sl
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4619      	mov	r1, r3
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	f04f 0300 	mov.w	r3, #0
 800c73e:	f04f 0400 	mov.w	r4, #0
 800c742:	0094      	lsls	r4, r2, #2
 800c744:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c748:	008b      	lsls	r3, r1, #2
 800c74a:	461a      	mov	r2, r3
 800c74c:	4623      	mov	r3, r4
 800c74e:	4628      	mov	r0, r5
 800c750:	4631      	mov	r1, r6
 800c752:	f7f3 fd95 	bl	8000280 <__aeabi_uldivmod>
 800c756:	4603      	mov	r3, r0
 800c758:	460c      	mov	r4, r1
 800c75a:	461a      	mov	r2, r3
 800c75c:	4b9a      	ldr	r3, [pc, #616]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c75e:	fba3 1302 	umull	r1, r3, r3, r2
 800c762:	095b      	lsrs	r3, r3, #5
 800c764:	2164      	movs	r1, #100	; 0x64
 800c766:	fb01 f303 	mul.w	r3, r1, r3
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	011b      	lsls	r3, r3, #4
 800c76e:	3332      	adds	r3, #50	; 0x32
 800c770:	4a95      	ldr	r2, [pc, #596]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	095b      	lsrs	r3, r3, #5
 800c778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c77c:	4498      	add	r8, r3
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	469b      	mov	fp, r3
 800c782:	f04f 0c00 	mov.w	ip, #0
 800c786:	46d9      	mov	r9, fp
 800c788:	46e2      	mov	sl, ip
 800c78a:	eb19 0309 	adds.w	r3, r9, r9
 800c78e:	eb4a 040a 	adc.w	r4, sl, sl
 800c792:	4699      	mov	r9, r3
 800c794:	46a2      	mov	sl, r4
 800c796:	eb19 090b 	adds.w	r9, r9, fp
 800c79a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c79e:	f04f 0100 	mov.w	r1, #0
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7b2:	4689      	mov	r9, r1
 800c7b4:	4692      	mov	sl, r2
 800c7b6:	eb1b 0509 	adds.w	r5, fp, r9
 800c7ba:	eb4c 060a 	adc.w	r6, ip, sl
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f04f 0200 	mov.w	r2, #0
 800c7c8:	f04f 0300 	mov.w	r3, #0
 800c7cc:	f04f 0400 	mov.w	r4, #0
 800c7d0:	0094      	lsls	r4, r2, #2
 800c7d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c7d6:	008b      	lsls	r3, r1, #2
 800c7d8:	461a      	mov	r2, r3
 800c7da:	4623      	mov	r3, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	4631      	mov	r1, r6
 800c7e0:	f7f3 fd4e 	bl	8000280 <__aeabi_uldivmod>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4b77      	ldr	r3, [pc, #476]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c7ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c7f0:	095b      	lsrs	r3, r3, #5
 800c7f2:	2164      	movs	r1, #100	; 0x64
 800c7f4:	fb01 f303 	mul.w	r3, r1, r3
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	3332      	adds	r3, #50	; 0x32
 800c7fe:	4a72      	ldr	r2, [pc, #456]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c800:	fba2 2303 	umull	r2, r3, r2, r3
 800c804:	095b      	lsrs	r3, r3, #5
 800c806:	f003 020f 	and.w	r2, r3, #15
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4442      	add	r2, r8
 800c810:	609a      	str	r2, [r3, #8]
 800c812:	e0d0      	b.n	800c9b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c814:	f7fe f95c 	bl	800aad0 <HAL_RCC_GetPCLK1Freq>
 800c818:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	469a      	mov	sl, r3
 800c81e:	f04f 0b00 	mov.w	fp, #0
 800c822:	46d0      	mov	r8, sl
 800c824:	46d9      	mov	r9, fp
 800c826:	eb18 0308 	adds.w	r3, r8, r8
 800c82a:	eb49 0409 	adc.w	r4, r9, r9
 800c82e:	4698      	mov	r8, r3
 800c830:	46a1      	mov	r9, r4
 800c832:	eb18 080a 	adds.w	r8, r8, sl
 800c836:	eb49 090b 	adc.w	r9, r9, fp
 800c83a:	f04f 0100 	mov.w	r1, #0
 800c83e:	f04f 0200 	mov.w	r2, #0
 800c842:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c846:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c84a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c84e:	4688      	mov	r8, r1
 800c850:	4691      	mov	r9, r2
 800c852:	eb1a 0508 	adds.w	r5, sl, r8
 800c856:	eb4b 0609 	adc.w	r6, fp, r9
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	4619      	mov	r1, r3
 800c860:	f04f 0200 	mov.w	r2, #0
 800c864:	f04f 0300 	mov.w	r3, #0
 800c868:	f04f 0400 	mov.w	r4, #0
 800c86c:	0094      	lsls	r4, r2, #2
 800c86e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c872:	008b      	lsls	r3, r1, #2
 800c874:	461a      	mov	r2, r3
 800c876:	4623      	mov	r3, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	4631      	mov	r1, r6
 800c87c:	f7f3 fd00 	bl	8000280 <__aeabi_uldivmod>
 800c880:	4603      	mov	r3, r0
 800c882:	460c      	mov	r4, r1
 800c884:	461a      	mov	r2, r3
 800c886:	4b50      	ldr	r3, [pc, #320]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c888:	fba3 2302 	umull	r2, r3, r3, r2
 800c88c:	095b      	lsrs	r3, r3, #5
 800c88e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	469b      	mov	fp, r3
 800c896:	f04f 0c00 	mov.w	ip, #0
 800c89a:	46d9      	mov	r9, fp
 800c89c:	46e2      	mov	sl, ip
 800c89e:	eb19 0309 	adds.w	r3, r9, r9
 800c8a2:	eb4a 040a 	adc.w	r4, sl, sl
 800c8a6:	4699      	mov	r9, r3
 800c8a8:	46a2      	mov	sl, r4
 800c8aa:	eb19 090b 	adds.w	r9, r9, fp
 800c8ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c8b2:	f04f 0100 	mov.w	r1, #0
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	4692      	mov	sl, r2
 800c8ca:	eb1b 0509 	adds.w	r5, fp, r9
 800c8ce:	eb4c 060a 	adc.w	r6, ip, sl
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	f04f 0200 	mov.w	r2, #0
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	f04f 0400 	mov.w	r4, #0
 800c8e4:	0094      	lsls	r4, r2, #2
 800c8e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c8ea:	008b      	lsls	r3, r1, #2
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	f7f3 fcc4 	bl	8000280 <__aeabi_uldivmod>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4b32      	ldr	r3, [pc, #200]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c900:	fba3 1302 	umull	r1, r3, r3, r2
 800c904:	095b      	lsrs	r3, r3, #5
 800c906:	2164      	movs	r1, #100	; 0x64
 800c908:	fb01 f303 	mul.w	r3, r1, r3
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	011b      	lsls	r3, r3, #4
 800c910:	3332      	adds	r3, #50	; 0x32
 800c912:	4a2d      	ldr	r2, [pc, #180]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c914:	fba2 2303 	umull	r2, r3, r2, r3
 800c918:	095b      	lsrs	r3, r3, #5
 800c91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c91e:	4498      	add	r8, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	469b      	mov	fp, r3
 800c924:	f04f 0c00 	mov.w	ip, #0
 800c928:	46d9      	mov	r9, fp
 800c92a:	46e2      	mov	sl, ip
 800c92c:	eb19 0309 	adds.w	r3, r9, r9
 800c930:	eb4a 040a 	adc.w	r4, sl, sl
 800c934:	4699      	mov	r9, r3
 800c936:	46a2      	mov	sl, r4
 800c938:	eb19 090b 	adds.w	r9, r9, fp
 800c93c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c940:	f04f 0100 	mov.w	r1, #0
 800c944:	f04f 0200 	mov.w	r2, #0
 800c948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c94c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c954:	4689      	mov	r9, r1
 800c956:	4692      	mov	sl, r2
 800c958:	eb1b 0509 	adds.w	r5, fp, r9
 800c95c:	eb4c 060a 	adc.w	r6, ip, sl
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	4619      	mov	r1, r3
 800c966:	f04f 0200 	mov.w	r2, #0
 800c96a:	f04f 0300 	mov.w	r3, #0
 800c96e:	f04f 0400 	mov.w	r4, #0
 800c972:	0094      	lsls	r4, r2, #2
 800c974:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c978:	008b      	lsls	r3, r1, #2
 800c97a:	461a      	mov	r2, r3
 800c97c:	4623      	mov	r3, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	4631      	mov	r1, r6
 800c982:	f7f3 fc7d 	bl	8000280 <__aeabi_uldivmod>
 800c986:	4603      	mov	r3, r0
 800c988:	460c      	mov	r4, r1
 800c98a:	461a      	mov	r2, r3
 800c98c:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c98e:	fba3 1302 	umull	r1, r3, r3, r2
 800c992:	095b      	lsrs	r3, r3, #5
 800c994:	2164      	movs	r1, #100	; 0x64
 800c996:	fb01 f303 	mul.w	r3, r1, r3
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	011b      	lsls	r3, r3, #4
 800c99e:	3332      	adds	r3, #50	; 0x32
 800c9a0:	4a09      	ldr	r2, [pc, #36]	; (800c9c8 <UART_SetConfig+0x6f4>)
 800c9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a6:	095b      	lsrs	r3, r3, #5
 800c9a8:	f003 020f 	and.w	r2, r3, #15
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4442      	add	r2, r8
 800c9b2:	609a      	str	r2, [r3, #8]
}
 800c9b4:	e7ff      	b.n	800c9b6 <UART_SetConfig+0x6e2>
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	40011000 	.word	0x40011000
 800c9c4:	40011400 	.word	0x40011400
 800c9c8:	51eb851f 	.word	0x51eb851f

0800c9cc <__errno>:
 800c9cc:	4b01      	ldr	r3, [pc, #4]	; (800c9d4 <__errno+0x8>)
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	200002c8 	.word	0x200002c8

0800c9d8 <__sflush_r>:
 800c9d8:	898a      	ldrh	r2, [r1, #12]
 800c9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9de:	4605      	mov	r5, r0
 800c9e0:	0710      	lsls	r0, r2, #28
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	d458      	bmi.n	800ca98 <__sflush_r+0xc0>
 800c9e6:	684b      	ldr	r3, [r1, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	dc05      	bgt.n	800c9f8 <__sflush_r+0x20>
 800c9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	dc02      	bgt.n	800c9f8 <__sflush_r+0x20>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	d0f9      	beq.n	800c9f2 <__sflush_r+0x1a>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca04:	682f      	ldr	r7, [r5, #0]
 800ca06:	6a21      	ldr	r1, [r4, #32]
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	d032      	beq.n	800ca72 <__sflush_r+0x9a>
 800ca0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	075a      	lsls	r2, r3, #29
 800ca12:	d505      	bpl.n	800ca20 <__sflush_r+0x48>
 800ca14:	6863      	ldr	r3, [r4, #4]
 800ca16:	1ac0      	subs	r0, r0, r3
 800ca18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca1a:	b10b      	cbz	r3, 800ca20 <__sflush_r+0x48>
 800ca1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca1e:	1ac0      	subs	r0, r0, r3
 800ca20:	2300      	movs	r3, #0
 800ca22:	4602      	mov	r2, r0
 800ca24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca26:	6a21      	ldr	r1, [r4, #32]
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b0      	blx	r6
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	d106      	bne.n	800ca40 <__sflush_r+0x68>
 800ca32:	6829      	ldr	r1, [r5, #0]
 800ca34:	291d      	cmp	r1, #29
 800ca36:	d848      	bhi.n	800caca <__sflush_r+0xf2>
 800ca38:	4a29      	ldr	r2, [pc, #164]	; (800cae0 <__sflush_r+0x108>)
 800ca3a:	40ca      	lsrs	r2, r1
 800ca3c:	07d6      	lsls	r6, r2, #31
 800ca3e:	d544      	bpl.n	800caca <__sflush_r+0xf2>
 800ca40:	2200      	movs	r2, #0
 800ca42:	6062      	str	r2, [r4, #4]
 800ca44:	04d9      	lsls	r1, r3, #19
 800ca46:	6922      	ldr	r2, [r4, #16]
 800ca48:	6022      	str	r2, [r4, #0]
 800ca4a:	d504      	bpl.n	800ca56 <__sflush_r+0x7e>
 800ca4c:	1c42      	adds	r2, r0, #1
 800ca4e:	d101      	bne.n	800ca54 <__sflush_r+0x7c>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	b903      	cbnz	r3, 800ca56 <__sflush_r+0x7e>
 800ca54:	6560      	str	r0, [r4, #84]	; 0x54
 800ca56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca58:	602f      	str	r7, [r5, #0]
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	d0c9      	beq.n	800c9f2 <__sflush_r+0x1a>
 800ca5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca62:	4299      	cmp	r1, r3
 800ca64:	d002      	beq.n	800ca6c <__sflush_r+0x94>
 800ca66:	4628      	mov	r0, r5
 800ca68:	f000 f9cc 	bl	800ce04 <_free_r>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	6360      	str	r0, [r4, #52]	; 0x34
 800ca70:	e7c0      	b.n	800c9f4 <__sflush_r+0x1c>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4628      	mov	r0, r5
 800ca76:	47b0      	blx	r6
 800ca78:	1c41      	adds	r1, r0, #1
 800ca7a:	d1c8      	bne.n	800ca0e <__sflush_r+0x36>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0c5      	beq.n	800ca0e <__sflush_r+0x36>
 800ca82:	2b1d      	cmp	r3, #29
 800ca84:	d001      	beq.n	800ca8a <__sflush_r+0xb2>
 800ca86:	2b16      	cmp	r3, #22
 800ca88:	d101      	bne.n	800ca8e <__sflush_r+0xb6>
 800ca8a:	602f      	str	r7, [r5, #0]
 800ca8c:	e7b1      	b.n	800c9f2 <__sflush_r+0x1a>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	e7ad      	b.n	800c9f4 <__sflush_r+0x1c>
 800ca98:	690f      	ldr	r7, [r1, #16]
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d0a9      	beq.n	800c9f2 <__sflush_r+0x1a>
 800ca9e:	0793      	lsls	r3, r2, #30
 800caa0:	680e      	ldr	r6, [r1, #0]
 800caa2:	bf08      	it	eq
 800caa4:	694b      	ldreq	r3, [r1, #20]
 800caa6:	600f      	str	r7, [r1, #0]
 800caa8:	bf18      	it	ne
 800caaa:	2300      	movne	r3, #0
 800caac:	eba6 0807 	sub.w	r8, r6, r7
 800cab0:	608b      	str	r3, [r1, #8]
 800cab2:	f1b8 0f00 	cmp.w	r8, #0
 800cab6:	dd9c      	ble.n	800c9f2 <__sflush_r+0x1a>
 800cab8:	4643      	mov	r3, r8
 800caba:	463a      	mov	r2, r7
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cac0:	4628      	mov	r0, r5
 800cac2:	47b0      	blx	r6
 800cac4:	2800      	cmp	r0, #0
 800cac6:	dc06      	bgt.n	800cad6 <__sflush_r+0xfe>
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	e78e      	b.n	800c9f4 <__sflush_r+0x1c>
 800cad6:	4407      	add	r7, r0
 800cad8:	eba8 0800 	sub.w	r8, r8, r0
 800cadc:	e7e9      	b.n	800cab2 <__sflush_r+0xda>
 800cade:	bf00      	nop
 800cae0:	20400001 	.word	0x20400001

0800cae4 <_fflush_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	690b      	ldr	r3, [r1, #16]
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b1db      	cbz	r3, 800cb26 <_fflush_r+0x42>
 800caee:	b118      	cbz	r0, 800caf8 <_fflush_r+0x14>
 800caf0:	6983      	ldr	r3, [r0, #24]
 800caf2:	b90b      	cbnz	r3, 800caf8 <_fflush_r+0x14>
 800caf4:	f000 f860 	bl	800cbb8 <__sinit>
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <_fflush_r+0x48>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d109      	bne.n	800cb12 <_fflush_r+0x2e>
 800cafe:	686c      	ldr	r4, [r5, #4]
 800cb00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb04:	b17b      	cbz	r3, 800cb26 <_fflush_r+0x42>
 800cb06:	4621      	mov	r1, r4
 800cb08:	4628      	mov	r0, r5
 800cb0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb0e:	f7ff bf63 	b.w	800c9d8 <__sflush_r>
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <_fflush_r+0x4c>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	d101      	bne.n	800cb1c <_fflush_r+0x38>
 800cb18:	68ac      	ldr	r4, [r5, #8]
 800cb1a:	e7f1      	b.n	800cb00 <_fflush_r+0x1c>
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <_fflush_r+0x50>)
 800cb1e:	429c      	cmp	r4, r3
 800cb20:	bf08      	it	eq
 800cb22:	68ec      	ldreq	r4, [r5, #12]
 800cb24:	e7ec      	b.n	800cb00 <_fflush_r+0x1c>
 800cb26:	2000      	movs	r0, #0
 800cb28:	bd38      	pop	{r3, r4, r5, pc}
 800cb2a:	bf00      	nop
 800cb2c:	0800da40 	.word	0x0800da40
 800cb30:	0800da60 	.word	0x0800da60
 800cb34:	0800da20 	.word	0x0800da20

0800cb38 <std>:
 800cb38:	2300      	movs	r3, #0
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb42:	6083      	str	r3, [r0, #8]
 800cb44:	8181      	strh	r1, [r0, #12]
 800cb46:	6643      	str	r3, [r0, #100]	; 0x64
 800cb48:	81c2      	strh	r2, [r0, #14]
 800cb4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb4e:	6183      	str	r3, [r0, #24]
 800cb50:	4619      	mov	r1, r3
 800cb52:	2208      	movs	r2, #8
 800cb54:	305c      	adds	r0, #92	; 0x5c
 800cb56:	f000 f94c 	bl	800cdf2 <memset>
 800cb5a:	4b05      	ldr	r3, [pc, #20]	; (800cb70 <std+0x38>)
 800cb5c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb5e:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <std+0x3c>)
 800cb60:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <std+0x40>)
 800cb64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb66:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <std+0x44>)
 800cb68:	6224      	str	r4, [r4, #32]
 800cb6a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb6c:	bd10      	pop	{r4, pc}
 800cb6e:	bf00      	nop
 800cb70:	0800d5fd 	.word	0x0800d5fd
 800cb74:	0800d61f 	.word	0x0800d61f
 800cb78:	0800d657 	.word	0x0800d657
 800cb7c:	0800d67b 	.word	0x0800d67b

0800cb80 <_cleanup_r>:
 800cb80:	4901      	ldr	r1, [pc, #4]	; (800cb88 <_cleanup_r+0x8>)
 800cb82:	f000 b885 	b.w	800cc90 <_fwalk_reent>
 800cb86:	bf00      	nop
 800cb88:	0800cae5 	.word	0x0800cae5

0800cb8c <__sfmoreglue>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	1e4a      	subs	r2, r1, #1
 800cb90:	2568      	movs	r5, #104	; 0x68
 800cb92:	4355      	muls	r5, r2
 800cb94:	460e      	mov	r6, r1
 800cb96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb9a:	f000 f981 	bl	800cea0 <_malloc_r>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	b140      	cbz	r0, 800cbb4 <__sfmoreglue+0x28>
 800cba2:	2100      	movs	r1, #0
 800cba4:	e9c0 1600 	strd	r1, r6, [r0]
 800cba8:	300c      	adds	r0, #12
 800cbaa:	60a0      	str	r0, [r4, #8]
 800cbac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbb0:	f000 f91f 	bl	800cdf2 <memset>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}

0800cbb8 <__sinit>:
 800cbb8:	6983      	ldr	r3, [r0, #24]
 800cbba:	b510      	push	{r4, lr}
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	bb33      	cbnz	r3, 800cc0e <__sinit+0x56>
 800cbc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cbc4:	6503      	str	r3, [r0, #80]	; 0x50
 800cbc6:	4b12      	ldr	r3, [pc, #72]	; (800cc10 <__sinit+0x58>)
 800cbc8:	4a12      	ldr	r2, [pc, #72]	; (800cc14 <__sinit+0x5c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6282      	str	r2, [r0, #40]	; 0x28
 800cbce:	4298      	cmp	r0, r3
 800cbd0:	bf04      	itt	eq
 800cbd2:	2301      	moveq	r3, #1
 800cbd4:	6183      	streq	r3, [r0, #24]
 800cbd6:	f000 f81f 	bl	800cc18 <__sfp>
 800cbda:	6060      	str	r0, [r4, #4]
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 f81b 	bl	800cc18 <__sfp>
 800cbe2:	60a0      	str	r0, [r4, #8]
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f000 f817 	bl	800cc18 <__sfp>
 800cbea:	2200      	movs	r2, #0
 800cbec:	60e0      	str	r0, [r4, #12]
 800cbee:	2104      	movs	r1, #4
 800cbf0:	6860      	ldr	r0, [r4, #4]
 800cbf2:	f7ff ffa1 	bl	800cb38 <std>
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	2109      	movs	r1, #9
 800cbfa:	68a0      	ldr	r0, [r4, #8]
 800cbfc:	f7ff ff9c 	bl	800cb38 <std>
 800cc00:	2202      	movs	r2, #2
 800cc02:	2112      	movs	r1, #18
 800cc04:	68e0      	ldr	r0, [r4, #12]
 800cc06:	f7ff ff97 	bl	800cb38 <std>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	61a3      	str	r3, [r4, #24]
 800cc0e:	bd10      	pop	{r4, pc}
 800cc10:	0800da80 	.word	0x0800da80
 800cc14:	0800cb81 	.word	0x0800cb81

0800cc18 <__sfp>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <__sfp+0x70>)
 800cc1c:	681e      	ldr	r6, [r3, #0]
 800cc1e:	69b3      	ldr	r3, [r6, #24]
 800cc20:	4607      	mov	r7, r0
 800cc22:	b913      	cbnz	r3, 800cc2a <__sfp+0x12>
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7ff ffc7 	bl	800cbb8 <__sinit>
 800cc2a:	3648      	adds	r6, #72	; 0x48
 800cc2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	d503      	bpl.n	800cc3c <__sfp+0x24>
 800cc34:	6833      	ldr	r3, [r6, #0]
 800cc36:	b133      	cbz	r3, 800cc46 <__sfp+0x2e>
 800cc38:	6836      	ldr	r6, [r6, #0]
 800cc3a:	e7f7      	b.n	800cc2c <__sfp+0x14>
 800cc3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc40:	b16d      	cbz	r5, 800cc5e <__sfp+0x46>
 800cc42:	3468      	adds	r4, #104	; 0x68
 800cc44:	e7f4      	b.n	800cc30 <__sfp+0x18>
 800cc46:	2104      	movs	r1, #4
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ff9f 	bl	800cb8c <__sfmoreglue>
 800cc4e:	6030      	str	r0, [r6, #0]
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1f1      	bne.n	800cc38 <__sfp+0x20>
 800cc54:	230c      	movs	r3, #12
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <__sfp+0x74>)
 800cc60:	6665      	str	r5, [r4, #100]	; 0x64
 800cc62:	e9c4 5500 	strd	r5, r5, [r4]
 800cc66:	60a5      	str	r5, [r4, #8]
 800cc68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cc6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cc70:	2208      	movs	r2, #8
 800cc72:	4629      	mov	r1, r5
 800cc74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc78:	f000 f8bb 	bl	800cdf2 <memset>
 800cc7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc84:	e7e9      	b.n	800cc5a <__sfp+0x42>
 800cc86:	bf00      	nop
 800cc88:	0800da80 	.word	0x0800da80
 800cc8c:	ffff0001 	.word	0xffff0001

0800cc90 <_fwalk_reent>:
 800cc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc94:	4680      	mov	r8, r0
 800cc96:	4689      	mov	r9, r1
 800cc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc9c:	2600      	movs	r6, #0
 800cc9e:	b914      	cbnz	r4, 800cca6 <_fwalk_reent+0x16>
 800cca0:	4630      	mov	r0, r6
 800cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ccaa:	3f01      	subs	r7, #1
 800ccac:	d501      	bpl.n	800ccb2 <_fwalk_reent+0x22>
 800ccae:	6824      	ldr	r4, [r4, #0]
 800ccb0:	e7f5      	b.n	800cc9e <_fwalk_reent+0xe>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d907      	bls.n	800ccc8 <_fwalk_reent+0x38>
 800ccb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	d003      	beq.n	800ccc8 <_fwalk_reent+0x38>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4640      	mov	r0, r8
 800ccc4:	47c8      	blx	r9
 800ccc6:	4306      	orrs	r6, r0
 800ccc8:	3568      	adds	r5, #104	; 0x68
 800ccca:	e7ee      	b.n	800ccaa <_fwalk_reent+0x1a>

0800cccc <__libc_init_array>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	4e0d      	ldr	r6, [pc, #52]	; (800cd04 <__libc_init_array+0x38>)
 800ccd0:	4c0d      	ldr	r4, [pc, #52]	; (800cd08 <__libc_init_array+0x3c>)
 800ccd2:	1ba4      	subs	r4, r4, r6
 800ccd4:	10a4      	asrs	r4, r4, #2
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	42a5      	cmp	r5, r4
 800ccda:	d109      	bne.n	800ccf0 <__libc_init_array+0x24>
 800ccdc:	4e0b      	ldr	r6, [pc, #44]	; (800cd0c <__libc_init_array+0x40>)
 800ccde:	4c0c      	ldr	r4, [pc, #48]	; (800cd10 <__libc_init_array+0x44>)
 800cce0:	f000 fe02 	bl	800d8e8 <_init>
 800cce4:	1ba4      	subs	r4, r4, r6
 800cce6:	10a4      	asrs	r4, r4, #2
 800cce8:	2500      	movs	r5, #0
 800ccea:	42a5      	cmp	r5, r4
 800ccec:	d105      	bne.n	800ccfa <__libc_init_array+0x2e>
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ccf4:	4798      	blx	r3
 800ccf6:	3501      	adds	r5, #1
 800ccf8:	e7ee      	b.n	800ccd8 <__libc_init_array+0xc>
 800ccfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ccfe:	4798      	blx	r3
 800cd00:	3501      	adds	r5, #1
 800cd02:	e7f2      	b.n	800ccea <__libc_init_array+0x1e>
 800cd04:	0800dac0 	.word	0x0800dac0
 800cd08:	0800dac0 	.word	0x0800dac0
 800cd0c:	0800dac0 	.word	0x0800dac0
 800cd10:	0800dac4 	.word	0x0800dac4

0800cd14 <__swhatbuf_r>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	460e      	mov	r6, r1
 800cd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd1c:	2900      	cmp	r1, #0
 800cd1e:	b096      	sub	sp, #88	; 0x58
 800cd20:	4614      	mov	r4, r2
 800cd22:	461d      	mov	r5, r3
 800cd24:	da07      	bge.n	800cd36 <__swhatbuf_r+0x22>
 800cd26:	2300      	movs	r3, #0
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	89b3      	ldrh	r3, [r6, #12]
 800cd2c:	061a      	lsls	r2, r3, #24
 800cd2e:	d410      	bmi.n	800cd52 <__swhatbuf_r+0x3e>
 800cd30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd34:	e00e      	b.n	800cd54 <__swhatbuf_r+0x40>
 800cd36:	466a      	mov	r2, sp
 800cd38:	f000 fd8e 	bl	800d858 <_fstat_r>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	dbf2      	blt.n	800cd26 <__swhatbuf_r+0x12>
 800cd40:	9a01      	ldr	r2, [sp, #4]
 800cd42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd4a:	425a      	negs	r2, r3
 800cd4c:	415a      	adcs	r2, r3
 800cd4e:	602a      	str	r2, [r5, #0]
 800cd50:	e7ee      	b.n	800cd30 <__swhatbuf_r+0x1c>
 800cd52:	2340      	movs	r3, #64	; 0x40
 800cd54:	2000      	movs	r0, #0
 800cd56:	6023      	str	r3, [r4, #0]
 800cd58:	b016      	add	sp, #88	; 0x58
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}

0800cd5c <__smakebuf_r>:
 800cd5c:	898b      	ldrh	r3, [r1, #12]
 800cd5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd60:	079d      	lsls	r5, r3, #30
 800cd62:	4606      	mov	r6, r0
 800cd64:	460c      	mov	r4, r1
 800cd66:	d507      	bpl.n	800cd78 <__smakebuf_r+0x1c>
 800cd68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	2301      	movs	r3, #1
 800cd72:	6163      	str	r3, [r4, #20]
 800cd74:	b002      	add	sp, #8
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	ab01      	add	r3, sp, #4
 800cd7a:	466a      	mov	r2, sp
 800cd7c:	f7ff ffca 	bl	800cd14 <__swhatbuf_r>
 800cd80:	9900      	ldr	r1, [sp, #0]
 800cd82:	4605      	mov	r5, r0
 800cd84:	4630      	mov	r0, r6
 800cd86:	f000 f88b 	bl	800cea0 <_malloc_r>
 800cd8a:	b948      	cbnz	r0, 800cda0 <__smakebuf_r+0x44>
 800cd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd90:	059a      	lsls	r2, r3, #22
 800cd92:	d4ef      	bmi.n	800cd74 <__smakebuf_r+0x18>
 800cd94:	f023 0303 	bic.w	r3, r3, #3
 800cd98:	f043 0302 	orr.w	r3, r3, #2
 800cd9c:	81a3      	strh	r3, [r4, #12]
 800cd9e:	e7e3      	b.n	800cd68 <__smakebuf_r+0xc>
 800cda0:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <__smakebuf_r+0x7c>)
 800cda2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	6020      	str	r0, [r4, #0]
 800cda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdac:	81a3      	strh	r3, [r4, #12]
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	6163      	str	r3, [r4, #20]
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	6120      	str	r0, [r4, #16]
 800cdb6:	b15b      	cbz	r3, 800cdd0 <__smakebuf_r+0x74>
 800cdb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	f000 fd5d 	bl	800d87c <_isatty_r>
 800cdc2:	b128      	cbz	r0, 800cdd0 <__smakebuf_r+0x74>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	f023 0303 	bic.w	r3, r3, #3
 800cdca:	f043 0301 	orr.w	r3, r3, #1
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	431d      	orrs	r5, r3
 800cdd4:	81a5      	strh	r5, [r4, #12]
 800cdd6:	e7cd      	b.n	800cd74 <__smakebuf_r+0x18>
 800cdd8:	0800cb81 	.word	0x0800cb81

0800cddc <memcpy>:
 800cddc:	b510      	push	{r4, lr}
 800cdde:	1e43      	subs	r3, r0, #1
 800cde0:	440a      	add	r2, r1
 800cde2:	4291      	cmp	r1, r2
 800cde4:	d100      	bne.n	800cde8 <memcpy+0xc>
 800cde6:	bd10      	pop	{r4, pc}
 800cde8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf0:	e7f7      	b.n	800cde2 <memcpy+0x6>

0800cdf2 <memset>:
 800cdf2:	4402      	add	r2, r0
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d100      	bne.n	800cdfc <memset+0xa>
 800cdfa:	4770      	bx	lr
 800cdfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ce00:	e7f9      	b.n	800cdf6 <memset+0x4>
	...

0800ce04 <_free_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4605      	mov	r5, r0
 800ce08:	2900      	cmp	r1, #0
 800ce0a:	d045      	beq.n	800ce98 <_free_r+0x94>
 800ce0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce10:	1f0c      	subs	r4, r1, #4
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	bfb8      	it	lt
 800ce16:	18e4      	addlt	r4, r4, r3
 800ce18:	f000 fd52 	bl	800d8c0 <__malloc_lock>
 800ce1c:	4a1f      	ldr	r2, [pc, #124]	; (800ce9c <_free_r+0x98>)
 800ce1e:	6813      	ldr	r3, [r2, #0]
 800ce20:	4610      	mov	r0, r2
 800ce22:	b933      	cbnz	r3, 800ce32 <_free_r+0x2e>
 800ce24:	6063      	str	r3, [r4, #4]
 800ce26:	6014      	str	r4, [r2, #0]
 800ce28:	4628      	mov	r0, r5
 800ce2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce2e:	f000 bd48 	b.w	800d8c2 <__malloc_unlock>
 800ce32:	42a3      	cmp	r3, r4
 800ce34:	d90c      	bls.n	800ce50 <_free_r+0x4c>
 800ce36:	6821      	ldr	r1, [r4, #0]
 800ce38:	1862      	adds	r2, r4, r1
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	bf04      	itt	eq
 800ce3e:	681a      	ldreq	r2, [r3, #0]
 800ce40:	685b      	ldreq	r3, [r3, #4]
 800ce42:	6063      	str	r3, [r4, #4]
 800ce44:	bf04      	itt	eq
 800ce46:	1852      	addeq	r2, r2, r1
 800ce48:	6022      	streq	r2, [r4, #0]
 800ce4a:	6004      	str	r4, [r0, #0]
 800ce4c:	e7ec      	b.n	800ce28 <_free_r+0x24>
 800ce4e:	4613      	mov	r3, r2
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	b10a      	cbz	r2, 800ce58 <_free_r+0x54>
 800ce54:	42a2      	cmp	r2, r4
 800ce56:	d9fa      	bls.n	800ce4e <_free_r+0x4a>
 800ce58:	6819      	ldr	r1, [r3, #0]
 800ce5a:	1858      	adds	r0, r3, r1
 800ce5c:	42a0      	cmp	r0, r4
 800ce5e:	d10b      	bne.n	800ce78 <_free_r+0x74>
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	4401      	add	r1, r0
 800ce64:	1858      	adds	r0, r3, r1
 800ce66:	4282      	cmp	r2, r0
 800ce68:	6019      	str	r1, [r3, #0]
 800ce6a:	d1dd      	bne.n	800ce28 <_free_r+0x24>
 800ce6c:	6810      	ldr	r0, [r2, #0]
 800ce6e:	6852      	ldr	r2, [r2, #4]
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	4401      	add	r1, r0
 800ce74:	6019      	str	r1, [r3, #0]
 800ce76:	e7d7      	b.n	800ce28 <_free_r+0x24>
 800ce78:	d902      	bls.n	800ce80 <_free_r+0x7c>
 800ce7a:	230c      	movs	r3, #12
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	e7d3      	b.n	800ce28 <_free_r+0x24>
 800ce80:	6820      	ldr	r0, [r4, #0]
 800ce82:	1821      	adds	r1, r4, r0
 800ce84:	428a      	cmp	r2, r1
 800ce86:	bf04      	itt	eq
 800ce88:	6811      	ldreq	r1, [r2, #0]
 800ce8a:	6852      	ldreq	r2, [r2, #4]
 800ce8c:	6062      	str	r2, [r4, #4]
 800ce8e:	bf04      	itt	eq
 800ce90:	1809      	addeq	r1, r1, r0
 800ce92:	6021      	streq	r1, [r4, #0]
 800ce94:	605c      	str	r4, [r3, #4]
 800ce96:	e7c7      	b.n	800ce28 <_free_r+0x24>
 800ce98:	bd38      	pop	{r3, r4, r5, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000036c 	.word	0x2000036c

0800cea0 <_malloc_r>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	1ccd      	adds	r5, r1, #3
 800cea4:	f025 0503 	bic.w	r5, r5, #3
 800cea8:	3508      	adds	r5, #8
 800ceaa:	2d0c      	cmp	r5, #12
 800ceac:	bf38      	it	cc
 800ceae:	250c      	movcc	r5, #12
 800ceb0:	2d00      	cmp	r5, #0
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	db01      	blt.n	800ceba <_malloc_r+0x1a>
 800ceb6:	42a9      	cmp	r1, r5
 800ceb8:	d903      	bls.n	800cec2 <_malloc_r+0x22>
 800ceba:	230c      	movs	r3, #12
 800cebc:	6033      	str	r3, [r6, #0]
 800cebe:	2000      	movs	r0, #0
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
 800cec2:	f000 fcfd 	bl	800d8c0 <__malloc_lock>
 800cec6:	4a21      	ldr	r2, [pc, #132]	; (800cf4c <_malloc_r+0xac>)
 800cec8:	6814      	ldr	r4, [r2, #0]
 800ceca:	4621      	mov	r1, r4
 800cecc:	b991      	cbnz	r1, 800cef4 <_malloc_r+0x54>
 800cece:	4c20      	ldr	r4, [pc, #128]	; (800cf50 <_malloc_r+0xb0>)
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	b91b      	cbnz	r3, 800cedc <_malloc_r+0x3c>
 800ced4:	4630      	mov	r0, r6
 800ced6:	f000 fb81 	bl	800d5dc <_sbrk_r>
 800ceda:	6020      	str	r0, [r4, #0]
 800cedc:	4629      	mov	r1, r5
 800cede:	4630      	mov	r0, r6
 800cee0:	f000 fb7c 	bl	800d5dc <_sbrk_r>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d124      	bne.n	800cf32 <_malloc_r+0x92>
 800cee8:	230c      	movs	r3, #12
 800ceea:	6033      	str	r3, [r6, #0]
 800ceec:	4630      	mov	r0, r6
 800ceee:	f000 fce8 	bl	800d8c2 <__malloc_unlock>
 800cef2:	e7e4      	b.n	800cebe <_malloc_r+0x1e>
 800cef4:	680b      	ldr	r3, [r1, #0]
 800cef6:	1b5b      	subs	r3, r3, r5
 800cef8:	d418      	bmi.n	800cf2c <_malloc_r+0x8c>
 800cefa:	2b0b      	cmp	r3, #11
 800cefc:	d90f      	bls.n	800cf1e <_malloc_r+0x7e>
 800cefe:	600b      	str	r3, [r1, #0]
 800cf00:	50cd      	str	r5, [r1, r3]
 800cf02:	18cc      	adds	r4, r1, r3
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 fcdc 	bl	800d8c2 <__malloc_unlock>
 800cf0a:	f104 000b 	add.w	r0, r4, #11
 800cf0e:	1d23      	adds	r3, r4, #4
 800cf10:	f020 0007 	bic.w	r0, r0, #7
 800cf14:	1ac3      	subs	r3, r0, r3
 800cf16:	d0d3      	beq.n	800cec0 <_malloc_r+0x20>
 800cf18:	425a      	negs	r2, r3
 800cf1a:	50e2      	str	r2, [r4, r3]
 800cf1c:	e7d0      	b.n	800cec0 <_malloc_r+0x20>
 800cf1e:	428c      	cmp	r4, r1
 800cf20:	684b      	ldr	r3, [r1, #4]
 800cf22:	bf16      	itet	ne
 800cf24:	6063      	strne	r3, [r4, #4]
 800cf26:	6013      	streq	r3, [r2, #0]
 800cf28:	460c      	movne	r4, r1
 800cf2a:	e7eb      	b.n	800cf04 <_malloc_r+0x64>
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	6849      	ldr	r1, [r1, #4]
 800cf30:	e7cc      	b.n	800cecc <_malloc_r+0x2c>
 800cf32:	1cc4      	adds	r4, r0, #3
 800cf34:	f024 0403 	bic.w	r4, r4, #3
 800cf38:	42a0      	cmp	r0, r4
 800cf3a:	d005      	beq.n	800cf48 <_malloc_r+0xa8>
 800cf3c:	1a21      	subs	r1, r4, r0
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f000 fb4c 	bl	800d5dc <_sbrk_r>
 800cf44:	3001      	adds	r0, #1
 800cf46:	d0cf      	beq.n	800cee8 <_malloc_r+0x48>
 800cf48:	6025      	str	r5, [r4, #0]
 800cf4a:	e7db      	b.n	800cf04 <_malloc_r+0x64>
 800cf4c:	2000036c 	.word	0x2000036c
 800cf50:	20000370 	.word	0x20000370

0800cf54 <__sfputc_r>:
 800cf54:	6893      	ldr	r3, [r2, #8]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	b410      	push	{r4}
 800cf5c:	6093      	str	r3, [r2, #8]
 800cf5e:	da08      	bge.n	800cf72 <__sfputc_r+0x1e>
 800cf60:	6994      	ldr	r4, [r2, #24]
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	db01      	blt.n	800cf6a <__sfputc_r+0x16>
 800cf66:	290a      	cmp	r1, #10
 800cf68:	d103      	bne.n	800cf72 <__sfputc_r+0x1e>
 800cf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf6e:	f000 bb91 	b.w	800d694 <__swbuf_r>
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	1c58      	adds	r0, r3, #1
 800cf76:	6010      	str	r0, [r2, #0]
 800cf78:	7019      	strb	r1, [r3, #0]
 800cf7a:	4608      	mov	r0, r1
 800cf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <__sfputs_r>:
 800cf82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	4614      	mov	r4, r2
 800cf8a:	18d5      	adds	r5, r2, r3
 800cf8c:	42ac      	cmp	r4, r5
 800cf8e:	d101      	bne.n	800cf94 <__sfputs_r+0x12>
 800cf90:	2000      	movs	r0, #0
 800cf92:	e007      	b.n	800cfa4 <__sfputs_r+0x22>
 800cf94:	463a      	mov	r2, r7
 800cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f7ff ffda 	bl	800cf54 <__sfputc_r>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d1f3      	bne.n	800cf8c <__sfputs_r+0xa>
 800cfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfa8 <_vfiprintf_r>:
 800cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	460c      	mov	r4, r1
 800cfae:	b09d      	sub	sp, #116	; 0x74
 800cfb0:	4617      	mov	r7, r2
 800cfb2:	461d      	mov	r5, r3
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	b118      	cbz	r0, 800cfc0 <_vfiprintf_r+0x18>
 800cfb8:	6983      	ldr	r3, [r0, #24]
 800cfba:	b90b      	cbnz	r3, 800cfc0 <_vfiprintf_r+0x18>
 800cfbc:	f7ff fdfc 	bl	800cbb8 <__sinit>
 800cfc0:	4b7c      	ldr	r3, [pc, #496]	; (800d1b4 <_vfiprintf_r+0x20c>)
 800cfc2:	429c      	cmp	r4, r3
 800cfc4:	d158      	bne.n	800d078 <_vfiprintf_r+0xd0>
 800cfc6:	6874      	ldr	r4, [r6, #4]
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	0718      	lsls	r0, r3, #28
 800cfcc:	d55e      	bpl.n	800d08c <_vfiprintf_r+0xe4>
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d05b      	beq.n	800d08c <_vfiprintf_r+0xe4>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd8:	2320      	movs	r3, #32
 800cfda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfde:	2330      	movs	r3, #48	; 0x30
 800cfe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfe4:	9503      	str	r5, [sp, #12]
 800cfe6:	f04f 0b01 	mov.w	fp, #1
 800cfea:	46b8      	mov	r8, r7
 800cfec:	4645      	mov	r5, r8
 800cfee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cff2:	b10b      	cbz	r3, 800cff8 <_vfiprintf_r+0x50>
 800cff4:	2b25      	cmp	r3, #37	; 0x25
 800cff6:	d154      	bne.n	800d0a2 <_vfiprintf_r+0xfa>
 800cff8:	ebb8 0a07 	subs.w	sl, r8, r7
 800cffc:	d00b      	beq.n	800d016 <_vfiprintf_r+0x6e>
 800cffe:	4653      	mov	r3, sl
 800d000:	463a      	mov	r2, r7
 800d002:	4621      	mov	r1, r4
 800d004:	4630      	mov	r0, r6
 800d006:	f7ff ffbc 	bl	800cf82 <__sfputs_r>
 800d00a:	3001      	adds	r0, #1
 800d00c:	f000 80c2 	beq.w	800d194 <_vfiprintf_r+0x1ec>
 800d010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d012:	4453      	add	r3, sl
 800d014:	9309      	str	r3, [sp, #36]	; 0x24
 800d016:	f898 3000 	ldrb.w	r3, [r8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 80ba 	beq.w	800d194 <_vfiprintf_r+0x1ec>
 800d020:	2300      	movs	r3, #0
 800d022:	f04f 32ff 	mov.w	r2, #4294967295
 800d026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	9307      	str	r3, [sp, #28]
 800d02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d032:	931a      	str	r3, [sp, #104]	; 0x68
 800d034:	46a8      	mov	r8, r5
 800d036:	2205      	movs	r2, #5
 800d038:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d03c:	485e      	ldr	r0, [pc, #376]	; (800d1b8 <_vfiprintf_r+0x210>)
 800d03e:	f7f3 f8cf 	bl	80001e0 <memchr>
 800d042:	9b04      	ldr	r3, [sp, #16]
 800d044:	bb78      	cbnz	r0, 800d0a6 <_vfiprintf_r+0xfe>
 800d046:	06d9      	lsls	r1, r3, #27
 800d048:	bf44      	itt	mi
 800d04a:	2220      	movmi	r2, #32
 800d04c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d050:	071a      	lsls	r2, r3, #28
 800d052:	bf44      	itt	mi
 800d054:	222b      	movmi	r2, #43	; 0x2b
 800d056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d05a:	782a      	ldrb	r2, [r5, #0]
 800d05c:	2a2a      	cmp	r2, #42	; 0x2a
 800d05e:	d02a      	beq.n	800d0b6 <_vfiprintf_r+0x10e>
 800d060:	9a07      	ldr	r2, [sp, #28]
 800d062:	46a8      	mov	r8, r5
 800d064:	2000      	movs	r0, #0
 800d066:	250a      	movs	r5, #10
 800d068:	4641      	mov	r1, r8
 800d06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d06e:	3b30      	subs	r3, #48	; 0x30
 800d070:	2b09      	cmp	r3, #9
 800d072:	d969      	bls.n	800d148 <_vfiprintf_r+0x1a0>
 800d074:	b360      	cbz	r0, 800d0d0 <_vfiprintf_r+0x128>
 800d076:	e024      	b.n	800d0c2 <_vfiprintf_r+0x11a>
 800d078:	4b50      	ldr	r3, [pc, #320]	; (800d1bc <_vfiprintf_r+0x214>)
 800d07a:	429c      	cmp	r4, r3
 800d07c:	d101      	bne.n	800d082 <_vfiprintf_r+0xda>
 800d07e:	68b4      	ldr	r4, [r6, #8]
 800d080:	e7a2      	b.n	800cfc8 <_vfiprintf_r+0x20>
 800d082:	4b4f      	ldr	r3, [pc, #316]	; (800d1c0 <_vfiprintf_r+0x218>)
 800d084:	429c      	cmp	r4, r3
 800d086:	bf08      	it	eq
 800d088:	68f4      	ldreq	r4, [r6, #12]
 800d08a:	e79d      	b.n	800cfc8 <_vfiprintf_r+0x20>
 800d08c:	4621      	mov	r1, r4
 800d08e:	4630      	mov	r0, r6
 800d090:	f000 fb64 	bl	800d75c <__swsetup_r>
 800d094:	2800      	cmp	r0, #0
 800d096:	d09d      	beq.n	800cfd4 <_vfiprintf_r+0x2c>
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	b01d      	add	sp, #116	; 0x74
 800d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a2:	46a8      	mov	r8, r5
 800d0a4:	e7a2      	b.n	800cfec <_vfiprintf_r+0x44>
 800d0a6:	4a44      	ldr	r2, [pc, #272]	; (800d1b8 <_vfiprintf_r+0x210>)
 800d0a8:	1a80      	subs	r0, r0, r2
 800d0aa:	fa0b f000 	lsl.w	r0, fp, r0
 800d0ae:	4318      	orrs	r0, r3
 800d0b0:	9004      	str	r0, [sp, #16]
 800d0b2:	4645      	mov	r5, r8
 800d0b4:	e7be      	b.n	800d034 <_vfiprintf_r+0x8c>
 800d0b6:	9a03      	ldr	r2, [sp, #12]
 800d0b8:	1d11      	adds	r1, r2, #4
 800d0ba:	6812      	ldr	r2, [r2, #0]
 800d0bc:	9103      	str	r1, [sp, #12]
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	db01      	blt.n	800d0c6 <_vfiprintf_r+0x11e>
 800d0c2:	9207      	str	r2, [sp, #28]
 800d0c4:	e004      	b.n	800d0d0 <_vfiprintf_r+0x128>
 800d0c6:	4252      	negs	r2, r2
 800d0c8:	f043 0302 	orr.w	r3, r3, #2
 800d0cc:	9207      	str	r2, [sp, #28]
 800d0ce:	9304      	str	r3, [sp, #16]
 800d0d0:	f898 3000 	ldrb.w	r3, [r8]
 800d0d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d0d6:	d10e      	bne.n	800d0f6 <_vfiprintf_r+0x14e>
 800d0d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d138      	bne.n	800d152 <_vfiprintf_r+0x1aa>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d1a      	adds	r2, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9203      	str	r2, [sp, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfb8      	it	lt
 800d0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f0:	f108 0802 	add.w	r8, r8, #2
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	4d33      	ldr	r5, [pc, #204]	; (800d1c4 <_vfiprintf_r+0x21c>)
 800d0f8:	f898 1000 	ldrb.w	r1, [r8]
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	4628      	mov	r0, r5
 800d100:	f7f3 f86e 	bl	80001e0 <memchr>
 800d104:	b140      	cbz	r0, 800d118 <_vfiprintf_r+0x170>
 800d106:	2340      	movs	r3, #64	; 0x40
 800d108:	1b40      	subs	r0, r0, r5
 800d10a:	fa03 f000 	lsl.w	r0, r3, r0
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	4303      	orrs	r3, r0
 800d112:	f108 0801 	add.w	r8, r8, #1
 800d116:	9304      	str	r3, [sp, #16]
 800d118:	f898 1000 	ldrb.w	r1, [r8]
 800d11c:	482a      	ldr	r0, [pc, #168]	; (800d1c8 <_vfiprintf_r+0x220>)
 800d11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d122:	2206      	movs	r2, #6
 800d124:	f108 0701 	add.w	r7, r8, #1
 800d128:	f7f3 f85a 	bl	80001e0 <memchr>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d037      	beq.n	800d1a0 <_vfiprintf_r+0x1f8>
 800d130:	4b26      	ldr	r3, [pc, #152]	; (800d1cc <_vfiprintf_r+0x224>)
 800d132:	bb1b      	cbnz	r3, 800d17c <_vfiprintf_r+0x1d4>
 800d134:	9b03      	ldr	r3, [sp, #12]
 800d136:	3307      	adds	r3, #7
 800d138:	f023 0307 	bic.w	r3, r3, #7
 800d13c:	3308      	adds	r3, #8
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d142:	444b      	add	r3, r9
 800d144:	9309      	str	r3, [sp, #36]	; 0x24
 800d146:	e750      	b.n	800cfea <_vfiprintf_r+0x42>
 800d148:	fb05 3202 	mla	r2, r5, r2, r3
 800d14c:	2001      	movs	r0, #1
 800d14e:	4688      	mov	r8, r1
 800d150:	e78a      	b.n	800d068 <_vfiprintf_r+0xc0>
 800d152:	2300      	movs	r3, #0
 800d154:	f108 0801 	add.w	r8, r8, #1
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	4619      	mov	r1, r3
 800d15c:	250a      	movs	r5, #10
 800d15e:	4640      	mov	r0, r8
 800d160:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d164:	3a30      	subs	r2, #48	; 0x30
 800d166:	2a09      	cmp	r2, #9
 800d168:	d903      	bls.n	800d172 <_vfiprintf_r+0x1ca>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0c3      	beq.n	800d0f6 <_vfiprintf_r+0x14e>
 800d16e:	9105      	str	r1, [sp, #20]
 800d170:	e7c1      	b.n	800d0f6 <_vfiprintf_r+0x14e>
 800d172:	fb05 2101 	mla	r1, r5, r1, r2
 800d176:	2301      	movs	r3, #1
 800d178:	4680      	mov	r8, r0
 800d17a:	e7f0      	b.n	800d15e <_vfiprintf_r+0x1b6>
 800d17c:	ab03      	add	r3, sp, #12
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	4622      	mov	r2, r4
 800d182:	4b13      	ldr	r3, [pc, #76]	; (800d1d0 <_vfiprintf_r+0x228>)
 800d184:	a904      	add	r1, sp, #16
 800d186:	4630      	mov	r0, r6
 800d188:	f3af 8000 	nop.w
 800d18c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d190:	4681      	mov	r9, r0
 800d192:	d1d5      	bne.n	800d140 <_vfiprintf_r+0x198>
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	065b      	lsls	r3, r3, #25
 800d198:	f53f af7e 	bmi.w	800d098 <_vfiprintf_r+0xf0>
 800d19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d19e:	e77d      	b.n	800d09c <_vfiprintf_r+0xf4>
 800d1a0:	ab03      	add	r3, sp, #12
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <_vfiprintf_r+0x228>)
 800d1a8:	a904      	add	r1, sp, #16
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f000 f888 	bl	800d2c0 <_printf_i>
 800d1b0:	e7ec      	b.n	800d18c <_vfiprintf_r+0x1e4>
 800d1b2:	bf00      	nop
 800d1b4:	0800da40 	.word	0x0800da40
 800d1b8:	0800da84 	.word	0x0800da84
 800d1bc:	0800da60 	.word	0x0800da60
 800d1c0:	0800da20 	.word	0x0800da20
 800d1c4:	0800da8a 	.word	0x0800da8a
 800d1c8:	0800da8e 	.word	0x0800da8e
 800d1cc:	00000000 	.word	0x00000000
 800d1d0:	0800cf83 	.word	0x0800cf83

0800d1d4 <_printf_common>:
 800d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d8:	4691      	mov	r9, r2
 800d1da:	461f      	mov	r7, r3
 800d1dc:	688a      	ldr	r2, [r1, #8]
 800d1de:	690b      	ldr	r3, [r1, #16]
 800d1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	bfb8      	it	lt
 800d1e8:	4613      	movlt	r3, r2
 800d1ea:	f8c9 3000 	str.w	r3, [r9]
 800d1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	b112      	cbz	r2, 800d1fe <_printf_common+0x2a>
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f8c9 3000 	str.w	r3, [r9]
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	0699      	lsls	r1, r3, #26
 800d202:	bf42      	ittt	mi
 800d204:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d208:	3302      	addmi	r3, #2
 800d20a:	f8c9 3000 	strmi.w	r3, [r9]
 800d20e:	6825      	ldr	r5, [r4, #0]
 800d210:	f015 0506 	ands.w	r5, r5, #6
 800d214:	d107      	bne.n	800d226 <_printf_common+0x52>
 800d216:	f104 0a19 	add.w	sl, r4, #25
 800d21a:	68e3      	ldr	r3, [r4, #12]
 800d21c:	f8d9 2000 	ldr.w	r2, [r9]
 800d220:	1a9b      	subs	r3, r3, r2
 800d222:	42ab      	cmp	r3, r5
 800d224:	dc28      	bgt.n	800d278 <_printf_common+0xa4>
 800d226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d22a:	6822      	ldr	r2, [r4, #0]
 800d22c:	3300      	adds	r3, #0
 800d22e:	bf18      	it	ne
 800d230:	2301      	movne	r3, #1
 800d232:	0692      	lsls	r2, r2, #26
 800d234:	d42d      	bmi.n	800d292 <_printf_common+0xbe>
 800d236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d23a:	4639      	mov	r1, r7
 800d23c:	4630      	mov	r0, r6
 800d23e:	47c0      	blx	r8
 800d240:	3001      	adds	r0, #1
 800d242:	d020      	beq.n	800d286 <_printf_common+0xb2>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	68e5      	ldr	r5, [r4, #12]
 800d248:	f8d9 2000 	ldr.w	r2, [r9]
 800d24c:	f003 0306 	and.w	r3, r3, #6
 800d250:	2b04      	cmp	r3, #4
 800d252:	bf08      	it	eq
 800d254:	1aad      	subeq	r5, r5, r2
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	6922      	ldr	r2, [r4, #16]
 800d25a:	bf0c      	ite	eq
 800d25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d260:	2500      	movne	r5, #0
 800d262:	4293      	cmp	r3, r2
 800d264:	bfc4      	itt	gt
 800d266:	1a9b      	subgt	r3, r3, r2
 800d268:	18ed      	addgt	r5, r5, r3
 800d26a:	f04f 0900 	mov.w	r9, #0
 800d26e:	341a      	adds	r4, #26
 800d270:	454d      	cmp	r5, r9
 800d272:	d11a      	bne.n	800d2aa <_printf_common+0xd6>
 800d274:	2000      	movs	r0, #0
 800d276:	e008      	b.n	800d28a <_printf_common+0xb6>
 800d278:	2301      	movs	r3, #1
 800d27a:	4652      	mov	r2, sl
 800d27c:	4639      	mov	r1, r7
 800d27e:	4630      	mov	r0, r6
 800d280:	47c0      	blx	r8
 800d282:	3001      	adds	r0, #1
 800d284:	d103      	bne.n	800d28e <_printf_common+0xba>
 800d286:	f04f 30ff 	mov.w	r0, #4294967295
 800d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28e:	3501      	adds	r5, #1
 800d290:	e7c3      	b.n	800d21a <_printf_common+0x46>
 800d292:	18e1      	adds	r1, r4, r3
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	2030      	movs	r0, #48	; 0x30
 800d298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d29c:	4422      	add	r2, r4
 800d29e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2a6:	3302      	adds	r3, #2
 800d2a8:	e7c5      	b.n	800d236 <_printf_common+0x62>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	4622      	mov	r2, r4
 800d2ae:	4639      	mov	r1, r7
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	47c0      	blx	r8
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	d0e6      	beq.n	800d286 <_printf_common+0xb2>
 800d2b8:	f109 0901 	add.w	r9, r9, #1
 800d2bc:	e7d8      	b.n	800d270 <_printf_common+0x9c>
	...

0800d2c0 <_printf_i>:
 800d2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	7e09      	ldrb	r1, [r1, #24]
 800d2cc:	b085      	sub	sp, #20
 800d2ce:	296e      	cmp	r1, #110	; 0x6e
 800d2d0:	4617      	mov	r7, r2
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	4698      	mov	r8, r3
 800d2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2d8:	f000 80b3 	beq.w	800d442 <_printf_i+0x182>
 800d2dc:	d822      	bhi.n	800d324 <_printf_i+0x64>
 800d2de:	2963      	cmp	r1, #99	; 0x63
 800d2e0:	d036      	beq.n	800d350 <_printf_i+0x90>
 800d2e2:	d80a      	bhi.n	800d2fa <_printf_i+0x3a>
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	f000 80b9 	beq.w	800d45c <_printf_i+0x19c>
 800d2ea:	2958      	cmp	r1, #88	; 0x58
 800d2ec:	f000 8083 	beq.w	800d3f6 <_printf_i+0x136>
 800d2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d2f8:	e032      	b.n	800d360 <_printf_i+0xa0>
 800d2fa:	2964      	cmp	r1, #100	; 0x64
 800d2fc:	d001      	beq.n	800d302 <_printf_i+0x42>
 800d2fe:	2969      	cmp	r1, #105	; 0x69
 800d300:	d1f6      	bne.n	800d2f0 <_printf_i+0x30>
 800d302:	6820      	ldr	r0, [r4, #0]
 800d304:	6813      	ldr	r3, [r2, #0]
 800d306:	0605      	lsls	r5, r0, #24
 800d308:	f103 0104 	add.w	r1, r3, #4
 800d30c:	d52a      	bpl.n	800d364 <_printf_i+0xa4>
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6011      	str	r1, [r2, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	da03      	bge.n	800d31e <_printf_i+0x5e>
 800d316:	222d      	movs	r2, #45	; 0x2d
 800d318:	425b      	negs	r3, r3
 800d31a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d31e:	486f      	ldr	r0, [pc, #444]	; (800d4dc <_printf_i+0x21c>)
 800d320:	220a      	movs	r2, #10
 800d322:	e039      	b.n	800d398 <_printf_i+0xd8>
 800d324:	2973      	cmp	r1, #115	; 0x73
 800d326:	f000 809d 	beq.w	800d464 <_printf_i+0x1a4>
 800d32a:	d808      	bhi.n	800d33e <_printf_i+0x7e>
 800d32c:	296f      	cmp	r1, #111	; 0x6f
 800d32e:	d020      	beq.n	800d372 <_printf_i+0xb2>
 800d330:	2970      	cmp	r1, #112	; 0x70
 800d332:	d1dd      	bne.n	800d2f0 <_printf_i+0x30>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	f043 0320 	orr.w	r3, r3, #32
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	e003      	b.n	800d346 <_printf_i+0x86>
 800d33e:	2975      	cmp	r1, #117	; 0x75
 800d340:	d017      	beq.n	800d372 <_printf_i+0xb2>
 800d342:	2978      	cmp	r1, #120	; 0x78
 800d344:	d1d4      	bne.n	800d2f0 <_printf_i+0x30>
 800d346:	2378      	movs	r3, #120	; 0x78
 800d348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d34c:	4864      	ldr	r0, [pc, #400]	; (800d4e0 <_printf_i+0x220>)
 800d34e:	e055      	b.n	800d3fc <_printf_i+0x13c>
 800d350:	6813      	ldr	r3, [r2, #0]
 800d352:	1d19      	adds	r1, r3, #4
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6011      	str	r1, [r2, #0]
 800d358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d360:	2301      	movs	r3, #1
 800d362:	e08c      	b.n	800d47e <_printf_i+0x1be>
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6011      	str	r1, [r2, #0]
 800d368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d36c:	bf18      	it	ne
 800d36e:	b21b      	sxthne	r3, r3
 800d370:	e7cf      	b.n	800d312 <_printf_i+0x52>
 800d372:	6813      	ldr	r3, [r2, #0]
 800d374:	6825      	ldr	r5, [r4, #0]
 800d376:	1d18      	adds	r0, r3, #4
 800d378:	6010      	str	r0, [r2, #0]
 800d37a:	0628      	lsls	r0, r5, #24
 800d37c:	d501      	bpl.n	800d382 <_printf_i+0xc2>
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	e002      	b.n	800d388 <_printf_i+0xc8>
 800d382:	0668      	lsls	r0, r5, #25
 800d384:	d5fb      	bpl.n	800d37e <_printf_i+0xbe>
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	4854      	ldr	r0, [pc, #336]	; (800d4dc <_printf_i+0x21c>)
 800d38a:	296f      	cmp	r1, #111	; 0x6f
 800d38c:	bf14      	ite	ne
 800d38e:	220a      	movne	r2, #10
 800d390:	2208      	moveq	r2, #8
 800d392:	2100      	movs	r1, #0
 800d394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d398:	6865      	ldr	r5, [r4, #4]
 800d39a:	60a5      	str	r5, [r4, #8]
 800d39c:	2d00      	cmp	r5, #0
 800d39e:	f2c0 8095 	blt.w	800d4cc <_printf_i+0x20c>
 800d3a2:	6821      	ldr	r1, [r4, #0]
 800d3a4:	f021 0104 	bic.w	r1, r1, #4
 800d3a8:	6021      	str	r1, [r4, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d13d      	bne.n	800d42a <_printf_i+0x16a>
 800d3ae:	2d00      	cmp	r5, #0
 800d3b0:	f040 808e 	bne.w	800d4d0 <_printf_i+0x210>
 800d3b4:	4665      	mov	r5, ip
 800d3b6:	2a08      	cmp	r2, #8
 800d3b8:	d10b      	bne.n	800d3d2 <_printf_i+0x112>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	07db      	lsls	r3, r3, #31
 800d3be:	d508      	bpl.n	800d3d2 <_printf_i+0x112>
 800d3c0:	6923      	ldr	r3, [r4, #16]
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	bfde      	ittt	le
 800d3c8:	2330      	movle	r3, #48	; 0x30
 800d3ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3d2:	ebac 0305 	sub.w	r3, ip, r5
 800d3d6:	6123      	str	r3, [r4, #16]
 800d3d8:	f8cd 8000 	str.w	r8, [sp]
 800d3dc:	463b      	mov	r3, r7
 800d3de:	aa03      	add	r2, sp, #12
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f7ff fef6 	bl	800d1d4 <_printf_common>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d14d      	bne.n	800d488 <_printf_i+0x1c8>
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b005      	add	sp, #20
 800d3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3f6:	4839      	ldr	r0, [pc, #228]	; (800d4dc <_printf_i+0x21c>)
 800d3f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d3fc:	6813      	ldr	r3, [r2, #0]
 800d3fe:	6821      	ldr	r1, [r4, #0]
 800d400:	1d1d      	adds	r5, r3, #4
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6015      	str	r5, [r2, #0]
 800d406:	060a      	lsls	r2, r1, #24
 800d408:	d50b      	bpl.n	800d422 <_printf_i+0x162>
 800d40a:	07ca      	lsls	r2, r1, #31
 800d40c:	bf44      	itt	mi
 800d40e:	f041 0120 	orrmi.w	r1, r1, #32
 800d412:	6021      	strmi	r1, [r4, #0]
 800d414:	b91b      	cbnz	r3, 800d41e <_printf_i+0x15e>
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	f022 0220 	bic.w	r2, r2, #32
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	2210      	movs	r2, #16
 800d420:	e7b7      	b.n	800d392 <_printf_i+0xd2>
 800d422:	064d      	lsls	r5, r1, #25
 800d424:	bf48      	it	mi
 800d426:	b29b      	uxthmi	r3, r3
 800d428:	e7ef      	b.n	800d40a <_printf_i+0x14a>
 800d42a:	4665      	mov	r5, ip
 800d42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d430:	fb02 3311 	mls	r3, r2, r1, r3
 800d434:	5cc3      	ldrb	r3, [r0, r3]
 800d436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d43a:	460b      	mov	r3, r1
 800d43c:	2900      	cmp	r1, #0
 800d43e:	d1f5      	bne.n	800d42c <_printf_i+0x16c>
 800d440:	e7b9      	b.n	800d3b6 <_printf_i+0xf6>
 800d442:	6813      	ldr	r3, [r2, #0]
 800d444:	6825      	ldr	r5, [r4, #0]
 800d446:	6961      	ldr	r1, [r4, #20]
 800d448:	1d18      	adds	r0, r3, #4
 800d44a:	6010      	str	r0, [r2, #0]
 800d44c:	0628      	lsls	r0, r5, #24
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	d501      	bpl.n	800d456 <_printf_i+0x196>
 800d452:	6019      	str	r1, [r3, #0]
 800d454:	e002      	b.n	800d45c <_printf_i+0x19c>
 800d456:	066a      	lsls	r2, r5, #25
 800d458:	d5fb      	bpl.n	800d452 <_printf_i+0x192>
 800d45a:	8019      	strh	r1, [r3, #0]
 800d45c:	2300      	movs	r3, #0
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	4665      	mov	r5, ip
 800d462:	e7b9      	b.n	800d3d8 <_printf_i+0x118>
 800d464:	6813      	ldr	r3, [r2, #0]
 800d466:	1d19      	adds	r1, r3, #4
 800d468:	6011      	str	r1, [r2, #0]
 800d46a:	681d      	ldr	r5, [r3, #0]
 800d46c:	6862      	ldr	r2, [r4, #4]
 800d46e:	2100      	movs	r1, #0
 800d470:	4628      	mov	r0, r5
 800d472:	f7f2 feb5 	bl	80001e0 <memchr>
 800d476:	b108      	cbz	r0, 800d47c <_printf_i+0x1bc>
 800d478:	1b40      	subs	r0, r0, r5
 800d47a:	6060      	str	r0, [r4, #4]
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	6123      	str	r3, [r4, #16]
 800d480:	2300      	movs	r3, #0
 800d482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d486:	e7a7      	b.n	800d3d8 <_printf_i+0x118>
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	462a      	mov	r2, r5
 800d48c:	4639      	mov	r1, r7
 800d48e:	4630      	mov	r0, r6
 800d490:	47c0      	blx	r8
 800d492:	3001      	adds	r0, #1
 800d494:	d0aa      	beq.n	800d3ec <_printf_i+0x12c>
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	079b      	lsls	r3, r3, #30
 800d49a:	d413      	bmi.n	800d4c4 <_printf_i+0x204>
 800d49c:	68e0      	ldr	r0, [r4, #12]
 800d49e:	9b03      	ldr	r3, [sp, #12]
 800d4a0:	4298      	cmp	r0, r3
 800d4a2:	bfb8      	it	lt
 800d4a4:	4618      	movlt	r0, r3
 800d4a6:	e7a3      	b.n	800d3f0 <_printf_i+0x130>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	464a      	mov	r2, r9
 800d4ac:	4639      	mov	r1, r7
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	47c0      	blx	r8
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	d09a      	beq.n	800d3ec <_printf_i+0x12c>
 800d4b6:	3501      	adds	r5, #1
 800d4b8:	68e3      	ldr	r3, [r4, #12]
 800d4ba:	9a03      	ldr	r2, [sp, #12]
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	42ab      	cmp	r3, r5
 800d4c0:	dcf2      	bgt.n	800d4a8 <_printf_i+0x1e8>
 800d4c2:	e7eb      	b.n	800d49c <_printf_i+0x1dc>
 800d4c4:	2500      	movs	r5, #0
 800d4c6:	f104 0919 	add.w	r9, r4, #25
 800d4ca:	e7f5      	b.n	800d4b8 <_printf_i+0x1f8>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1ac      	bne.n	800d42a <_printf_i+0x16a>
 800d4d0:	7803      	ldrb	r3, [r0, #0]
 800d4d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4da:	e76c      	b.n	800d3b6 <_printf_i+0xf6>
 800d4dc:	0800da95 	.word	0x0800da95
 800d4e0:	0800daa6 	.word	0x0800daa6

0800d4e4 <iprintf>:
 800d4e4:	b40f      	push	{r0, r1, r2, r3}
 800d4e6:	4b0a      	ldr	r3, [pc, #40]	; (800d510 <iprintf+0x2c>)
 800d4e8:	b513      	push	{r0, r1, r4, lr}
 800d4ea:	681c      	ldr	r4, [r3, #0]
 800d4ec:	b124      	cbz	r4, 800d4f8 <iprintf+0x14>
 800d4ee:	69a3      	ldr	r3, [r4, #24]
 800d4f0:	b913      	cbnz	r3, 800d4f8 <iprintf+0x14>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f7ff fb60 	bl	800cbb8 <__sinit>
 800d4f8:	ab05      	add	r3, sp, #20
 800d4fa:	9a04      	ldr	r2, [sp, #16]
 800d4fc:	68a1      	ldr	r1, [r4, #8]
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	4620      	mov	r0, r4
 800d502:	f7ff fd51 	bl	800cfa8 <_vfiprintf_r>
 800d506:	b002      	add	sp, #8
 800d508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d50c:	b004      	add	sp, #16
 800d50e:	4770      	bx	lr
 800d510:	200002c8 	.word	0x200002c8

0800d514 <_puts_r>:
 800d514:	b570      	push	{r4, r5, r6, lr}
 800d516:	460e      	mov	r6, r1
 800d518:	4605      	mov	r5, r0
 800d51a:	b118      	cbz	r0, 800d524 <_puts_r+0x10>
 800d51c:	6983      	ldr	r3, [r0, #24]
 800d51e:	b90b      	cbnz	r3, 800d524 <_puts_r+0x10>
 800d520:	f7ff fb4a 	bl	800cbb8 <__sinit>
 800d524:	69ab      	ldr	r3, [r5, #24]
 800d526:	68ac      	ldr	r4, [r5, #8]
 800d528:	b913      	cbnz	r3, 800d530 <_puts_r+0x1c>
 800d52a:	4628      	mov	r0, r5
 800d52c:	f7ff fb44 	bl	800cbb8 <__sinit>
 800d530:	4b23      	ldr	r3, [pc, #140]	; (800d5c0 <_puts_r+0xac>)
 800d532:	429c      	cmp	r4, r3
 800d534:	d117      	bne.n	800d566 <_puts_r+0x52>
 800d536:	686c      	ldr	r4, [r5, #4]
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	071b      	lsls	r3, r3, #28
 800d53c:	d51d      	bpl.n	800d57a <_puts_r+0x66>
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	b1db      	cbz	r3, 800d57a <_puts_r+0x66>
 800d542:	3e01      	subs	r6, #1
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d54a:	3b01      	subs	r3, #1
 800d54c:	60a3      	str	r3, [r4, #8]
 800d54e:	b9e9      	cbnz	r1, 800d58c <_puts_r+0x78>
 800d550:	2b00      	cmp	r3, #0
 800d552:	da2e      	bge.n	800d5b2 <_puts_r+0x9e>
 800d554:	4622      	mov	r2, r4
 800d556:	210a      	movs	r1, #10
 800d558:	4628      	mov	r0, r5
 800d55a:	f000 f89b 	bl	800d694 <__swbuf_r>
 800d55e:	3001      	adds	r0, #1
 800d560:	d011      	beq.n	800d586 <_puts_r+0x72>
 800d562:	200a      	movs	r0, #10
 800d564:	e011      	b.n	800d58a <_puts_r+0x76>
 800d566:	4b17      	ldr	r3, [pc, #92]	; (800d5c4 <_puts_r+0xb0>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	d101      	bne.n	800d570 <_puts_r+0x5c>
 800d56c:	68ac      	ldr	r4, [r5, #8]
 800d56e:	e7e3      	b.n	800d538 <_puts_r+0x24>
 800d570:	4b15      	ldr	r3, [pc, #84]	; (800d5c8 <_puts_r+0xb4>)
 800d572:	429c      	cmp	r4, r3
 800d574:	bf08      	it	eq
 800d576:	68ec      	ldreq	r4, [r5, #12]
 800d578:	e7de      	b.n	800d538 <_puts_r+0x24>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4628      	mov	r0, r5
 800d57e:	f000 f8ed 	bl	800d75c <__swsetup_r>
 800d582:	2800      	cmp	r0, #0
 800d584:	d0dd      	beq.n	800d542 <_puts_r+0x2e>
 800d586:	f04f 30ff 	mov.w	r0, #4294967295
 800d58a:	bd70      	pop	{r4, r5, r6, pc}
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	da04      	bge.n	800d59a <_puts_r+0x86>
 800d590:	69a2      	ldr	r2, [r4, #24]
 800d592:	429a      	cmp	r2, r3
 800d594:	dc06      	bgt.n	800d5a4 <_puts_r+0x90>
 800d596:	290a      	cmp	r1, #10
 800d598:	d004      	beq.n	800d5a4 <_puts_r+0x90>
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	6022      	str	r2, [r4, #0]
 800d5a0:	7019      	strb	r1, [r3, #0]
 800d5a2:	e7cf      	b.n	800d544 <_puts_r+0x30>
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f000 f874 	bl	800d694 <__swbuf_r>
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d1c9      	bne.n	800d544 <_puts_r+0x30>
 800d5b0:	e7e9      	b.n	800d586 <_puts_r+0x72>
 800d5b2:	6823      	ldr	r3, [r4, #0]
 800d5b4:	200a      	movs	r0, #10
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	6022      	str	r2, [r4, #0]
 800d5ba:	7018      	strb	r0, [r3, #0]
 800d5bc:	e7e5      	b.n	800d58a <_puts_r+0x76>
 800d5be:	bf00      	nop
 800d5c0:	0800da40 	.word	0x0800da40
 800d5c4:	0800da60 	.word	0x0800da60
 800d5c8:	0800da20 	.word	0x0800da20

0800d5cc <puts>:
 800d5cc:	4b02      	ldr	r3, [pc, #8]	; (800d5d8 <puts+0xc>)
 800d5ce:	4601      	mov	r1, r0
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f7ff bf9f 	b.w	800d514 <_puts_r>
 800d5d6:	bf00      	nop
 800d5d8:	200002c8 	.word	0x200002c8

0800d5dc <_sbrk_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4c06      	ldr	r4, [pc, #24]	; (800d5f8 <_sbrk_r+0x1c>)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	f7f5 f918 	bl	800281c <_sbrk>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	d102      	bne.n	800d5f6 <_sbrk_r+0x1a>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	b103      	cbz	r3, 800d5f6 <_sbrk_r+0x1a>
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	20000c48 	.word	0x20000c48

0800d5fc <__sread>:
 800d5fc:	b510      	push	{r4, lr}
 800d5fe:	460c      	mov	r4, r1
 800d600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d604:	f000 f95e 	bl	800d8c4 <_read_r>
 800d608:	2800      	cmp	r0, #0
 800d60a:	bfab      	itete	ge
 800d60c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d60e:	89a3      	ldrhlt	r3, [r4, #12]
 800d610:	181b      	addge	r3, r3, r0
 800d612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d616:	bfac      	ite	ge
 800d618:	6563      	strge	r3, [r4, #84]	; 0x54
 800d61a:	81a3      	strhlt	r3, [r4, #12]
 800d61c:	bd10      	pop	{r4, pc}

0800d61e <__swrite>:
 800d61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d622:	461f      	mov	r7, r3
 800d624:	898b      	ldrh	r3, [r1, #12]
 800d626:	05db      	lsls	r3, r3, #23
 800d628:	4605      	mov	r5, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	4616      	mov	r6, r2
 800d62e:	d505      	bpl.n	800d63c <__swrite+0x1e>
 800d630:	2302      	movs	r3, #2
 800d632:	2200      	movs	r2, #0
 800d634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d638:	f000 f930 	bl	800d89c <_lseek_r>
 800d63c:	89a3      	ldrh	r3, [r4, #12]
 800d63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d646:	81a3      	strh	r3, [r4, #12]
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	4628      	mov	r0, r5
 800d64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d652:	f000 b871 	b.w	800d738 <_write_r>

0800d656 <__sseek>:
 800d656:	b510      	push	{r4, lr}
 800d658:	460c      	mov	r4, r1
 800d65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65e:	f000 f91d 	bl	800d89c <_lseek_r>
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	bf15      	itete	ne
 800d668:	6560      	strne	r0, [r4, #84]	; 0x54
 800d66a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d66e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d672:	81a3      	strheq	r3, [r4, #12]
 800d674:	bf18      	it	ne
 800d676:	81a3      	strhne	r3, [r4, #12]
 800d678:	bd10      	pop	{r4, pc}

0800d67a <__sclose>:
 800d67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67e:	f000 b8db 	b.w	800d838 <_close_r>

0800d682 <strcpy>:
 800d682:	4603      	mov	r3, r0
 800d684:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d688:	f803 2b01 	strb.w	r2, [r3], #1
 800d68c:	2a00      	cmp	r2, #0
 800d68e:	d1f9      	bne.n	800d684 <strcpy+0x2>
 800d690:	4770      	bx	lr
	...

0800d694 <__swbuf_r>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	460e      	mov	r6, r1
 800d698:	4614      	mov	r4, r2
 800d69a:	4605      	mov	r5, r0
 800d69c:	b118      	cbz	r0, 800d6a6 <__swbuf_r+0x12>
 800d69e:	6983      	ldr	r3, [r0, #24]
 800d6a0:	b90b      	cbnz	r3, 800d6a6 <__swbuf_r+0x12>
 800d6a2:	f7ff fa89 	bl	800cbb8 <__sinit>
 800d6a6:	4b21      	ldr	r3, [pc, #132]	; (800d72c <__swbuf_r+0x98>)
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	d12a      	bne.n	800d702 <__swbuf_r+0x6e>
 800d6ac:	686c      	ldr	r4, [r5, #4]
 800d6ae:	69a3      	ldr	r3, [r4, #24]
 800d6b0:	60a3      	str	r3, [r4, #8]
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	071a      	lsls	r2, r3, #28
 800d6b6:	d52e      	bpl.n	800d716 <__swbuf_r+0x82>
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	b363      	cbz	r3, 800d716 <__swbuf_r+0x82>
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	6820      	ldr	r0, [r4, #0]
 800d6c0:	1ac0      	subs	r0, r0, r3
 800d6c2:	6963      	ldr	r3, [r4, #20]
 800d6c4:	b2f6      	uxtb	r6, r6
 800d6c6:	4283      	cmp	r3, r0
 800d6c8:	4637      	mov	r7, r6
 800d6ca:	dc04      	bgt.n	800d6d6 <__swbuf_r+0x42>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7ff fa08 	bl	800cae4 <_fflush_r>
 800d6d4:	bb28      	cbnz	r0, 800d722 <__swbuf_r+0x8e>
 800d6d6:	68a3      	ldr	r3, [r4, #8]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	60a3      	str	r3, [r4, #8]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	701e      	strb	r6, [r3, #0]
 800d6e4:	6963      	ldr	r3, [r4, #20]
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	4283      	cmp	r3, r0
 800d6ea:	d004      	beq.n	800d6f6 <__swbuf_r+0x62>
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	07db      	lsls	r3, r3, #31
 800d6f0:	d519      	bpl.n	800d726 <__swbuf_r+0x92>
 800d6f2:	2e0a      	cmp	r6, #10
 800d6f4:	d117      	bne.n	800d726 <__swbuf_r+0x92>
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f7ff f9f3 	bl	800cae4 <_fflush_r>
 800d6fe:	b190      	cbz	r0, 800d726 <__swbuf_r+0x92>
 800d700:	e00f      	b.n	800d722 <__swbuf_r+0x8e>
 800d702:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <__swbuf_r+0x9c>)
 800d704:	429c      	cmp	r4, r3
 800d706:	d101      	bne.n	800d70c <__swbuf_r+0x78>
 800d708:	68ac      	ldr	r4, [r5, #8]
 800d70a:	e7d0      	b.n	800d6ae <__swbuf_r+0x1a>
 800d70c:	4b09      	ldr	r3, [pc, #36]	; (800d734 <__swbuf_r+0xa0>)
 800d70e:	429c      	cmp	r4, r3
 800d710:	bf08      	it	eq
 800d712:	68ec      	ldreq	r4, [r5, #12]
 800d714:	e7cb      	b.n	800d6ae <__swbuf_r+0x1a>
 800d716:	4621      	mov	r1, r4
 800d718:	4628      	mov	r0, r5
 800d71a:	f000 f81f 	bl	800d75c <__swsetup_r>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d0cc      	beq.n	800d6bc <__swbuf_r+0x28>
 800d722:	f04f 37ff 	mov.w	r7, #4294967295
 800d726:	4638      	mov	r0, r7
 800d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0800da40 	.word	0x0800da40
 800d730:	0800da60 	.word	0x0800da60
 800d734:	0800da20 	.word	0x0800da20

0800d738 <_write_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4c07      	ldr	r4, [pc, #28]	; (800d758 <_write_r+0x20>)
 800d73c:	4605      	mov	r5, r0
 800d73e:	4608      	mov	r0, r1
 800d740:	4611      	mov	r1, r2
 800d742:	2200      	movs	r2, #0
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	f7f3 f806 	bl	8000758 <_write>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_write_r+0x1e>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	b103      	cbz	r3, 800d756 <_write_r+0x1e>
 800d754:	602b      	str	r3, [r5, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	20000c48 	.word	0x20000c48

0800d75c <__swsetup_r>:
 800d75c:	4b32      	ldr	r3, [pc, #200]	; (800d828 <__swsetup_r+0xcc>)
 800d75e:	b570      	push	{r4, r5, r6, lr}
 800d760:	681d      	ldr	r5, [r3, #0]
 800d762:	4606      	mov	r6, r0
 800d764:	460c      	mov	r4, r1
 800d766:	b125      	cbz	r5, 800d772 <__swsetup_r+0x16>
 800d768:	69ab      	ldr	r3, [r5, #24]
 800d76a:	b913      	cbnz	r3, 800d772 <__swsetup_r+0x16>
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7ff fa23 	bl	800cbb8 <__sinit>
 800d772:	4b2e      	ldr	r3, [pc, #184]	; (800d82c <__swsetup_r+0xd0>)
 800d774:	429c      	cmp	r4, r3
 800d776:	d10f      	bne.n	800d798 <__swsetup_r+0x3c>
 800d778:	686c      	ldr	r4, [r5, #4]
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	b29a      	uxth	r2, r3
 800d780:	0715      	lsls	r5, r2, #28
 800d782:	d42c      	bmi.n	800d7de <__swsetup_r+0x82>
 800d784:	06d0      	lsls	r0, r2, #27
 800d786:	d411      	bmi.n	800d7ac <__swsetup_r+0x50>
 800d788:	2209      	movs	r2, #9
 800d78a:	6032      	str	r2, [r6, #0]
 800d78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d790:	81a3      	strh	r3, [r4, #12]
 800d792:	f04f 30ff 	mov.w	r0, #4294967295
 800d796:	e03e      	b.n	800d816 <__swsetup_r+0xba>
 800d798:	4b25      	ldr	r3, [pc, #148]	; (800d830 <__swsetup_r+0xd4>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d101      	bne.n	800d7a2 <__swsetup_r+0x46>
 800d79e:	68ac      	ldr	r4, [r5, #8]
 800d7a0:	e7eb      	b.n	800d77a <__swsetup_r+0x1e>
 800d7a2:	4b24      	ldr	r3, [pc, #144]	; (800d834 <__swsetup_r+0xd8>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	bf08      	it	eq
 800d7a8:	68ec      	ldreq	r4, [r5, #12]
 800d7aa:	e7e6      	b.n	800d77a <__swsetup_r+0x1e>
 800d7ac:	0751      	lsls	r1, r2, #29
 800d7ae:	d512      	bpl.n	800d7d6 <__swsetup_r+0x7a>
 800d7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7b2:	b141      	cbz	r1, 800d7c6 <__swsetup_r+0x6a>
 800d7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7b8:	4299      	cmp	r1, r3
 800d7ba:	d002      	beq.n	800d7c2 <__swsetup_r+0x66>
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7ff fb21 	bl	800ce04 <_free_r>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7cc:	81a3      	strh	r3, [r4, #12]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	6063      	str	r3, [r4, #4]
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	f043 0308 	orr.w	r3, r3, #8
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	b94b      	cbnz	r3, 800d7f6 <__swsetup_r+0x9a>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7ec:	d003      	beq.n	800d7f6 <__swsetup_r+0x9a>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff fab3 	bl	800cd5c <__smakebuf_r>
 800d7f6:	89a2      	ldrh	r2, [r4, #12]
 800d7f8:	f012 0301 	ands.w	r3, r2, #1
 800d7fc:	d00c      	beq.n	800d818 <__swsetup_r+0xbc>
 800d7fe:	2300      	movs	r3, #0
 800d800:	60a3      	str	r3, [r4, #8]
 800d802:	6963      	ldr	r3, [r4, #20]
 800d804:	425b      	negs	r3, r3
 800d806:	61a3      	str	r3, [r4, #24]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	b953      	cbnz	r3, 800d822 <__swsetup_r+0xc6>
 800d80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d814:	d1ba      	bne.n	800d78c <__swsetup_r+0x30>
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	0792      	lsls	r2, r2, #30
 800d81a:	bf58      	it	pl
 800d81c:	6963      	ldrpl	r3, [r4, #20]
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	e7f2      	b.n	800d808 <__swsetup_r+0xac>
 800d822:	2000      	movs	r0, #0
 800d824:	e7f7      	b.n	800d816 <__swsetup_r+0xba>
 800d826:	bf00      	nop
 800d828:	200002c8 	.word	0x200002c8
 800d82c:	0800da40 	.word	0x0800da40
 800d830:	0800da60 	.word	0x0800da60
 800d834:	0800da20 	.word	0x0800da20

0800d838 <_close_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4c06      	ldr	r4, [pc, #24]	; (800d854 <_close_r+0x1c>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4605      	mov	r5, r0
 800d840:	4608      	mov	r0, r1
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	f7f4 ffb5 	bl	80027b2 <_close>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_close_r+0x1a>
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_close_r+0x1a>
 800d850:	602b      	str	r3, [r5, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	20000c48 	.word	0x20000c48

0800d858 <_fstat_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4c07      	ldr	r4, [pc, #28]	; (800d878 <_fstat_r+0x20>)
 800d85c:	2300      	movs	r3, #0
 800d85e:	4605      	mov	r5, r0
 800d860:	4608      	mov	r0, r1
 800d862:	4611      	mov	r1, r2
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	f7f4 ffb0 	bl	80027ca <_fstat>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	d102      	bne.n	800d874 <_fstat_r+0x1c>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	b103      	cbz	r3, 800d874 <_fstat_r+0x1c>
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	20000c48 	.word	0x20000c48

0800d87c <_isatty_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4c06      	ldr	r4, [pc, #24]	; (800d898 <_isatty_r+0x1c>)
 800d880:	2300      	movs	r3, #0
 800d882:	4605      	mov	r5, r0
 800d884:	4608      	mov	r0, r1
 800d886:	6023      	str	r3, [r4, #0]
 800d888:	f7f4 ffaf 	bl	80027ea <_isatty>
 800d88c:	1c43      	adds	r3, r0, #1
 800d88e:	d102      	bne.n	800d896 <_isatty_r+0x1a>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	b103      	cbz	r3, 800d896 <_isatty_r+0x1a>
 800d894:	602b      	str	r3, [r5, #0]
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	20000c48 	.word	0x20000c48

0800d89c <_lseek_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	4c07      	ldr	r4, [pc, #28]	; (800d8bc <_lseek_r+0x20>)
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	4608      	mov	r0, r1
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	6022      	str	r2, [r4, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	f7f4 ffa8 	bl	8002800 <_lseek>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_lseek_r+0x1e>
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_lseek_r+0x1e>
 800d8b8:	602b      	str	r3, [r5, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	20000c48 	.word	0x20000c48

0800d8c0 <__malloc_lock>:
 800d8c0:	4770      	bx	lr

0800d8c2 <__malloc_unlock>:
 800d8c2:	4770      	bx	lr

0800d8c4 <_read_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4c07      	ldr	r4, [pc, #28]	; (800d8e4 <_read_r+0x20>)
 800d8c8:	4605      	mov	r5, r0
 800d8ca:	4608      	mov	r0, r1
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	6022      	str	r2, [r4, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f7f4 ff50 	bl	8002778 <_read>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d102      	bne.n	800d8e2 <_read_r+0x1e>
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	b103      	cbz	r3, 800d8e2 <_read_r+0x1e>
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	20000c48 	.word	0x20000c48

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
