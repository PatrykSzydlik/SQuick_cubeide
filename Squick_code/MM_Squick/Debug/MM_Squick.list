
MM_Squick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006738  08006738  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006740  08006740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000070  080067b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080067b8  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b34  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002596  00000000  00000000  00032bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003277  00000000  00000000  000376b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d72c  00000000  00000000  0003a927  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000976a9  00000000  00000000  00048053  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df6fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005920  00000000  00000000  000df778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065c0 	.word	0x080065c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080065c0 	.word	0x080065c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_write>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, uint8_t *ptr, int len){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 100);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b29a      	uxth	r2, r3
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	68b9      	ldr	r1, [r7, #8]
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <_write+0x24>)
 8000596:	f004 f9c2 	bl	800491e <HAL_UART_Transmit>
	return  len;
 800059a:	687b      	ldr	r3, [r7, #4]
};
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001b8 	.word	0x200001b8

080005a8 <HAL_UART_TxCpltCallback>:
	bt_settings[12]=zasilanie%256;
	bt_settings[13]=zasilanie/256;

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	transmission_request=0;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_UART_TxCpltCallback+0x20>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
	bt_data=0;
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_UART_TxCpltCallback+0x24>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart1, &bt_data, 1);

}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000090 	.word	0x20000090
 80005cc:	20000258 	.word	0x20000258

080005d0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	__NOP();
 80005d8:	bf00      	nop
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]


	if(huart->Instance==USART1){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <HAL_UART_RxCpltCallback+0x70>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d129      	bne.n	800064e <HAL_UART_RxCpltCallback+0x66>
//				HAL_UART_Transmit_IT(&huart1, bt_settings, 14);
//			}else{
//				HAL_UART_Receive_IT(&huart1, &bt_data, 1);
//			};
//		};
		rx_flag=1;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_UART_RxCpltCallback+0x74>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		if(bt_data=='w'){
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b77      	cmp	r3, #119	; 0x77
 8000606:	d102      	bne.n	800060e <HAL_UART_RxCpltCallback+0x26>
			direction='w';
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <HAL_UART_RxCpltCallback+0x7c>)
 800060a:	2277      	movs	r2, #119	; 0x77
 800060c:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='s'){
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b73      	cmp	r3, #115	; 0x73
 8000614:	d102      	bne.n	800061c <HAL_UART_RxCpltCallback+0x34>
			direction='s';
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <HAL_UART_RxCpltCallback+0x7c>)
 8000618:	2273      	movs	r2, #115	; 0x73
 800061a:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='a'){
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b61      	cmp	r3, #97	; 0x61
 8000622:	d102      	bne.n	800062a <HAL_UART_RxCpltCallback+0x42>
			direction='a';
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_UART_RxCpltCallback+0x7c>)
 8000626:	2261      	movs	r2, #97	; 0x61
 8000628:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='d'){
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b64      	cmp	r3, #100	; 0x64
 8000630:	d102      	bne.n	8000638 <HAL_UART_RxCpltCallback+0x50>
			direction='d';
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_UART_RxCpltCallback+0x7c>)
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	701a      	strb	r2, [r3, #0]
		}
		printf("Received : %d \r\n", bt_data);
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <HAL_UART_RxCpltCallback+0x80>)
 8000640:	f005 fdc4 	bl	80061cc <iprintf>
		HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4906      	ldr	r1, [pc, #24]	; (8000660 <HAL_UART_RxCpltCallback+0x78>)
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <HAL_UART_RxCpltCallback+0x84>)
 800064a:	f004 fa01 	bl	8004a50 <HAL_UART_Receive_IT>
	};

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40011000 	.word	0x40011000
 800065c:	20000095 	.word	0x20000095
 8000660:	20000258 	.word	0x20000258
 8000664:	20000094 	.word	0x20000094
 8000668:	080065d8 	.word	0x080065d8
 800066c:	200001b8 	.word	0x200001b8

08000670 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUT_2_Pin){
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000680:	d10e      	bne.n	80006a0 <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000682:	2104      	movs	r1, #4
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000686:	f002 fb76 	bl	8002d76 <HAL_GPIO_TogglePin>
		pwm_value-=50;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3b32      	subs	r3, #50	; 0x32
 8000690:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000692:	6013      	str	r3, [r2, #0]
		printf("Kliknieto BUT_2  PWM = %d \r\n", pwm_value);
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x68>)
 800069c:	f005 fd96 	bl	80061cc <iprintf>
	}

	if(GPIO_Pin==BUT_1_Pin){
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d10f      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x56>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80006ac:	f002 fb63 	bl	8002d76 <HAL_GPIO_TogglePin>
		pwm_value+=50;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3332      	adds	r3, #50	; 0x32
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80006b8:	6013      	str	r3, [r2, #0]
		printf("Kliknieto BUT_1  PWM = %d \r\n", pwm_value);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80006c2:	f005 fd83 	bl	80061cc <iprintf>
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	080065ec 	.word	0x080065ec
 80006dc:	0800660c 	.word	0x0800660c

080006e0 <PWM>:
		zmienna = -zmienna;
	};
	return zmienna;
}

void PWM(int lewy, int prawy) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	if (lewy >= 0) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db13      	blt.n	8000718 <PWM+0x38>
		if (lewy > 999) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f6:	db02      	blt.n	80006fe <PWM+0x1e>
			lewy = 999;
 80006f8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80006fc:	607b      	str	r3, [r7, #4]
		};
		HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4831      	ldr	r0, [pc, #196]	; (80007cc <PWM+0xec>)
 8000706:	f002 fb1d 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	482e      	ldr	r0, [pc, #184]	; (80007cc <PWM+0xec>)
 8000712:	f002 fb17 	bl	8002d44 <HAL_GPIO_WritePin>
 8000716:	e014      	b.n	8000742 <PWM+0x62>
	} else if (lewy < 0) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da11      	bge.n	8000742 <PWM+0x62>
		if (lewy < -999) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000724:	dc01      	bgt.n	800072a <PWM+0x4a>
			lewy = -999;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <PWM+0xf0>)
 8000728:	607b      	str	r3, [r7, #4]
		};
		HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4826      	ldr	r0, [pc, #152]	; (80007cc <PWM+0xec>)
 8000732:	f002 fb07 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <PWM+0xec>)
 800073e:	f002 fb01 	bl	8002d44 <HAL_GPIO_WritePin>
	};

	if (prawy >= 0) {
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db13      	blt.n	8000770 <PWM+0x90>
		if (prawy > 999) {
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800074e:	db02      	blt.n	8000756 <PWM+0x76>
			prawy = 999;
 8000750:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000754:	603b      	str	r3, [r7, #0]
		};
		HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <PWM+0xf4>)
 800075e:	f002 faf1 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000768:	481a      	ldr	r0, [pc, #104]	; (80007d4 <PWM+0xf4>)
 800076a:	f002 faeb 	bl	8002d44 <HAL_GPIO_WritePin>
 800076e:	e014      	b.n	800079a <PWM+0xba>
	} else if (prawy < 0) {
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da11      	bge.n	800079a <PWM+0xba>
		if (prawy < -999) {
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800077c:	dc01      	bgt.n	8000782 <PWM+0xa2>
			prawy = -999;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <PWM+0xf0>)
 8000780:	603b      	str	r3, [r7, #0]
		};
		HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <PWM+0xf4>)
 800078a:	f002 fadb 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <PWM+0xf4>)
 8000796:	f002 fad5 	bl	8002d44 <HAL_GPIO_WritePin>
	};

	printf("Speeding left: %d  right: %d \r\n", lewy, prawy);
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <PWM+0xf8>)
 80007a0:	f005 fd14 	bl	80061cc <iprintf>
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, abs(lewy));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <PWM+0xfc>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, abs(prawy));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <PWM+0xfc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020800 	.word	0x40020800
 80007d0:	fffffc19 	.word	0xfffffc19
 80007d4:	40020000 	.word	0x40020000
 80007d8:	0800662c 	.word	0x0800662c
 80007dc:	2000025c 	.word	0x2000025c

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f001 f8a2 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f8dc 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 fbc0 	bl	8000f70 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f0:	f000 fb9e 	bl	8000f30 <MX_DMA_Init>
  MX_I2C1_Init();
 80007f4:	f000 f990 	bl	8000b18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007f8:	f000 fb46 	bl	8000e88 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80007fc:	f000 fb6e 	bl	8000edc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000800:	f000 f9ee 	bl	8000be0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000804:	f000 f936 	bl	8000a74 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000808:	f000 f9b4 	bl	8000b74 <MX_SPI1_Init>
  MX_TIM2_Init();
 800080c:	f000 fa94 	bl	8000d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000810:	f000 fae6 	bl	8000de0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, 0 );
 8000814:	4b55      	ldr	r3, [pc, #340]	; (800096c <main+0x18c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, 0 );
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <main+0x18c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_1);
 8000824:	2100      	movs	r1, #0
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <main+0x18c>)
 8000828:	f003 f910 	bl	8003a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_2);
 800082c:	2104      	movs	r1, #4
 800082e:	484f      	ldr	r0, [pc, #316]	; (800096c <main+0x18c>)
 8000830:	f003 f90c 	bl	8003a4c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	484d      	ldr	r0, [pc, #308]	; (8000970 <main+0x190>)
 800083c:	f002 fa82 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	484a      	ldr	r0, [pc, #296]	; (8000970 <main+0x190>)
 8000848:	f002 fa7c 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000852:	4848      	ldr	r0, [pc, #288]	; (8000974 <main+0x194>)
 8000854:	f002 fa76 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4845      	ldr	r0, [pc, #276]	; (8000974 <main+0x194>)
 8000860:	f002 fa70 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	4843      	ldr	r0, [pc, #268]	; (8000978 <main+0x198>)
 800086c:	f002 fa6a 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2104      	movs	r1, #4
 8000874:	4840      	ldr	r0, [pc, #256]	; (8000978 <main+0x198>)
 8000876:	f002 fa65 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2102      	movs	r1, #2
 800087e:	483e      	ldr	r0, [pc, #248]	; (8000978 <main+0x198>)
 8000880:	f002 fa60 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	493d      	ldr	r1, [pc, #244]	; (800097c <main+0x19c>)
 8000888:	483d      	ldr	r0, [pc, #244]	; (8000980 <main+0x1a0>)
 800088a:	f004 f8e1 	bl	8004a50 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rx_flag==1){
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <main+0x1a4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d1fa      	bne.n	800088e <main+0xae>
		  switch(direction){
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <main+0x1a8>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3b61      	subs	r3, #97	; 0x61
 800089e:	2b16      	cmp	r3, #22
 80008a0:	d854      	bhi.n	800094c <main+0x16c>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <main+0xc8>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	08000919 	.word	0x08000919
 80008ac:	0800094d 	.word	0x0800094d
 80008b0:	0800094d 	.word	0x0800094d
 80008b4:	0800093b 	.word	0x0800093b
 80008b8:	0800094d 	.word	0x0800094d
 80008bc:	0800094d 	.word	0x0800094d
 80008c0:	0800094d 	.word	0x0800094d
 80008c4:	0800094d 	.word	0x0800094d
 80008c8:	0800094d 	.word	0x0800094d
 80008cc:	0800094d 	.word	0x0800094d
 80008d0:	0800094d 	.word	0x0800094d
 80008d4:	0800094d 	.word	0x0800094d
 80008d8:	0800094d 	.word	0x0800094d
 80008dc:	0800094d 	.word	0x0800094d
 80008e0:	0800094d 	.word	0x0800094d
 80008e4:	0800094d 	.word	0x0800094d
 80008e8:	0800094d 	.word	0x0800094d
 80008ec:	0800094d 	.word	0x0800094d
 80008f0:	0800092b 	.word	0x0800092b
 80008f4:	0800094d 	.word	0x0800094d
 80008f8:	0800094d 	.word	0x0800094d
 80008fc:	0800094d 	.word	0x0800094d
 8000900:	08000905 	.word	0x08000905
		  case 'w':
			  printf("WHY??\r\n");
 8000904:	4821      	ldr	r0, [pc, #132]	; (800098c <main+0x1ac>)
 8000906:	f005 fcd5 	bl	80062b4 <puts>
			  PWM(600,600);
 800090a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800090e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000912:	f7ff fee5 	bl	80006e0 <PWM>
			  break;
 8000916:	e019      	b.n	800094c <main+0x16c>
		  case 'a':
			  printf("WHY THO???\r\n");
 8000918:	481d      	ldr	r0, [pc, #116]	; (8000990 <main+0x1b0>)
 800091a:	f005 fccb 	bl	80062b4 <puts>
			  PWM(-600,600);
 800091e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000922:	481c      	ldr	r0, [pc, #112]	; (8000994 <main+0x1b4>)
 8000924:	f7ff fedc 	bl	80006e0 <PWM>
			  break;
 8000928:	e010      	b.n	800094c <main+0x16c>
		  case 's':
			  printf("WUT?!\r\n");
 800092a:	481b      	ldr	r0, [pc, #108]	; (8000998 <main+0x1b8>)
 800092c:	f005 fcc2 	bl	80062b4 <puts>
			  PWM(-600,-600);
 8000930:	4918      	ldr	r1, [pc, #96]	; (8000994 <main+0x1b4>)
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <main+0x1b4>)
 8000934:	f7ff fed4 	bl	80006e0 <PWM>
			  break;
 8000938:	e008      	b.n	800094c <main+0x16c>
		  case 'd':
			  printf("JUST WHY?\r\n");
 800093a:	4818      	ldr	r0, [pc, #96]	; (800099c <main+0x1bc>)
 800093c:	f005 fcba 	bl	80062b4 <puts>
			  PWM(600,-600);
 8000940:	4914      	ldr	r1, [pc, #80]	; (8000994 <main+0x1b4>)
 8000942:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000946:	f7ff fecb 	bl	80006e0 <PWM>
			  break;
 800094a:	bf00      	nop
		  }
		  HAL_Delay(300);
 800094c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000950:	f001 f85e 	bl	8001a10 <HAL_Delay>
		  printf("Stopping\r\n");
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <main+0x1c0>)
 8000956:	f005 fcad 	bl	80062b4 <puts>
		  PWM(0,0);
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff febf 	bl	80006e0 <PWM>
		  rx_flag=0;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <main+0x1a4>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
	  if(rx_flag==1){
 8000968:	e791      	b.n	800088e <main+0xae>
 800096a:	bf00      	nop
 800096c:	2000025c 	.word	0x2000025c
 8000970:	40020800 	.word	0x40020800
 8000974:	40020000 	.word	0x40020000
 8000978:	40020400 	.word	0x40020400
 800097c:	20000258 	.word	0x20000258
 8000980:	200001b8 	.word	0x200001b8
 8000984:	20000095 	.word	0x20000095
 8000988:	20000094 	.word	0x20000094
 800098c:	0800664c 	.word	0x0800664c
 8000990:	08006654 	.word	0x08006654
 8000994:	fffffda8 	.word	0xfffffda8
 8000998:	08006660 	.word	0x08006660
 800099c:	08006668 	.word	0x08006668
 80009a0:	08006674 	.word	0x08006674

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 f892 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <SystemClock_Config+0xc8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <SystemClock_Config+0xc8>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <SystemClock_Config+0xc8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <SystemClock_Config+0xcc>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <SystemClock_Config+0xcc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a18:	2360      	movs	r3, #96	; 0x60
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fb0f 	bl	800304c <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a34:	f000 fb8c 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fd6a 	bl	800352c <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a5e:	f000 fb77 	bl	8001150 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	; 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <MX_ADC1_Init+0x9c>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <MX_ADC1_Init+0xa0>)
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000ad6:	f000 ffbd 	bl	8001a54 <HAL_ADC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 fb36 	bl	8001150 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_ADC1_Init+0x98>)
 8000af6:	f001 f94f 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b00:	f000 fb26 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000148 	.word	0x20000148
 8000b10:	40012000 	.word	0x40012000
 8000b14:	0f000001 	.word	0x0f000001

08000b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_I2C1_Init+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x58>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C1_Init+0x50>)
 8000b56:	f002 f941 	bl	8002ddc <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 faf6 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000a4 	.word	0x200000a4
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_SPI1_Init+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba8:	2218      	movs	r2, #24
 8000baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc6:	f002 fe7d 	bl	80038c4 <HAL_SPI_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bd0:	f000 fabe 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002dc 	.word	0x200002dc
 8000bdc:	40013000 	.word	0x40013000

08000be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b096      	sub	sp, #88	; 0x58
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2220      	movs	r2, #32
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f004 ff5f 	bl	8005adc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c20:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <MX_TIM1_Init+0x154>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c30:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c4a:	4839      	ldr	r0, [pc, #228]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c4c:	f002 fe9e 	bl	800398c <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c56:	f000 fa7b 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c64:	4619      	mov	r1, r3
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c68:	f003 f982 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c72:	f000 fa6d 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c76:	482e      	ldr	r0, [pc, #184]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c78:	f002 feb3 	bl	80039e2 <HAL_TIM_PWM_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c82:	f000 fa65 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c92:	4619      	mov	r1, r3
 8000c94:	4826      	ldr	r0, [pc, #152]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000c96:	f003 fd21 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ca0:	f000 fa56 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4819      	ldr	r0, [pc, #100]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000cca:	f003 f88b 	bl	8003de4 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cd4:	f000 fa3c 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000ce2:	f003 f87f 	bl	8003de4 <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000cec:	f000 fa30 	bl	8001150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000d14:	f003 fd50 	bl	80047b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d1e:	f000 fa17 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d22:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM1_Init+0x150>)
 8000d24:	f000 fc14 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000d28:	bf00      	nop
 8000d2a:	3758      	adds	r7, #88	; 0x58
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000025c 	.word	0x2000025c
 8000d34:	40010000 	.word	0x40010000

08000d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2224      	movs	r2, #36	; 0x24
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fec8 	bl	8005adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000da8:	f002 fe82 	bl	8003ab0 <HAL_TIM_Encoder_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000db2:	f000 f9cd 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM2_Init+0xa4>)
 8000dc4:	f003 fc8a 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000dce:	f000 f9bf 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	; 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000334 	.word	0x20000334

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fe74 	bl	8005adc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <MX_TIM3_Init+0xa4>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e4e:	f002 fe2f 	bl	8003ab0 <HAL_TIM_Encoder_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 f97a 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_TIM3_Init+0xa0>)
 8000e6a:	f003 fc37 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 f96c 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000108 	.word	0x20000108
 8000e84:	40000400 	.word	0x40000400

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART1_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	f003 fce0 	bl	8004884 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f941 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001b8 	.word	0x200001b8
 8000ed8:	40011000 	.word	0x40011000

08000edc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_USART6_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART6_UART_Init+0x4c>)
 8000f14:	f003 fcb6 	bl	8004884 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f917 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000029c 	.word	0x2000029c
 8000f2c:	40011400 	.word	0x40011400

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_DMA_Init+0x3c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <MX_DMA_Init+0x3c>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_DMA_Init+0x3c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2038      	movs	r0, #56	; 0x38
 8000f58:	f001 fa31 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f5c:	2038      	movs	r0, #56	; 0x38
 8000f5e:	f001 fa4a 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a69      	ldr	r2, [pc, #420]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b67      	ldr	r3, [pc, #412]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a62      	ldr	r2, [pc, #392]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b60      	ldr	r3, [pc, #384]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a5b      	ldr	r2, [pc, #364]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a54      	ldr	r2, [pc, #336]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <MX_GPIO_Init+0x1c4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PT_A_Pin|PT_B_Pin|PT_C_Pin|VL_XSHUT_Pin
 8001012:	2200      	movs	r2, #0
 8001014:	f24f 3108 	movw	r1, #62216	; 0xf308
 8001018:	4847      	ldr	r0, [pc, #284]	; (8001138 <MX_GPIO_Init+0x1c8>)
 800101a:	f001 fe93 	bl	8002d44 <HAL_GPIO_WritePin>
                          |L_IN1_Pin|L_IN2_Pin|IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|IR_C_Pin
 800101e:	2200      	movs	r2, #0
 8001020:	f24e 4106 	movw	r1, #58374	; 0xe406
 8001024:	4845      	ldr	r0, [pc, #276]	; (800113c <MX_GPIO_Init+0x1cc>)
 8001026:	f001 fe8d 	bl	8002d44 <HAL_GPIO_WritePin>
                          |IR_B_Pin|IR_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_IN2_Pin|R_IN1_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001030:	4843      	ldr	r0, [pc, #268]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8001032:	f001 fe87 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PT_A_Pin PT_B_Pin PT_C_Pin VL_XSHUT_Pin
                           L_IN1_Pin L_IN2_Pin IMU_CS_Pin */
  GPIO_InitStruct.Pin = PT_A_Pin|PT_B_Pin|PT_C_Pin|VL_XSHUT_Pin
 8001036:	f24f 3308 	movw	r3, #62216	; 0xf308
 800103a:	617b      	str	r3, [r7, #20]
                          |L_IN1_Pin|L_IN2_Pin|IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	483a      	ldr	r0, [pc, #232]	; (8001138 <MX_GPIO_Init+0x1c8>)
 8001050:	f001 fcf6 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_1_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MX_GPIO_Init+0x1d4>)
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4838      	ldr	r0, [pc, #224]	; (8001148 <MX_GPIO_Init+0x1d8>)
 8001068:	f001 fcea 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL_INT_R_Pin */
  GPIO_InitStruct.Pin = VL_INT_R_Pin;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_GPIO_Init+0x1d4>)
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL_INT_R_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	482e      	ldr	r0, [pc, #184]	; (8001138 <MX_GPIO_Init+0x1c8>)
 8001080:	f001 fcde 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL_INT_L_Pin */
  GPIO_InitStruct.Pin = VL_INT_L_Pin;
 8001084:	2304      	movs	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL_INT_L_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4828      	ldr	r0, [pc, #160]	; (8001138 <MX_GPIO_Init+0x1c8>)
 8001098:	f001 fcd2 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin IR_C_Pin
                           IR_B_Pin IR_A_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|IR_C_Pin
 800109c:	f24e 4306 	movw	r3, #58374	; 0xe406
 80010a0:	617b      	str	r3, [r7, #20]
                          |IR_B_Pin|IR_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <MX_GPIO_Init+0x1cc>)
 80010b6:	f001 fcc3 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_IN2_Pin R_IN1_Pin */
  GPIO_InitStruct.Pin = R_IN2_Pin|R_IN1_Pin;
 80010ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <MX_GPIO_Init+0x1d0>)
 80010d4:	f001 fcb4 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_2_Pin */
  GPIO_InitStruct.Pin = BUT_2_Pin;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_GPIO_Init+0x1d4>)
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_2_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_GPIO_Init+0x1d0>)
 80010ee:	f001 fca7 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_GPIO_Init+0x1dc>)
 8001106:	f001 fc9b 	bl	8002a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2007      	movs	r0, #7
 8001110:	f001 f955 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001114:	2007      	movs	r0, #7
 8001116:	f001 f96e 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2028      	movs	r0, #40	; 0x28
 8001120:	f001 f94d 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001124:	2028      	movs	r0, #40	; 0x28
 8001126:	f001 f966 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020400 	.word	0x40020400
 8001140:	40020000 	.word	0x40020000
 8001144:	10110000 	.word	0x10110000
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40020c00 	.word	0x40020c00

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_MspInit+0x4c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x4c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <HAL_ADC_MspInit+0x120>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d179      	bne.n	80012c6 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_ADC_MspInit+0x124>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_batt_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin
 8001226:	233d      	movs	r3, #61	; 0x3d
 8001228:	617b      	str	r3, [r7, #20]
                          |PT_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4827      	ldr	r0, [pc, #156]	; (80012d8 <HAL_ADC_MspInit+0x128>)
 800123a:	f001 fc01 	bl	8002a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KTIR_1_Pin;
 800123e:	2320      	movs	r3, #32
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KTIR_1_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <HAL_ADC_MspInit+0x12c>)
 8001252:	f001 fbf5 	bl	8002a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001258:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_ADC_MspInit+0x134>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001274:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001284:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 800129c:	f001 f8c6 	bl	800242c <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80012a6:	f7ff ff53 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_ADC_MspInit+0x130>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2012      	movs	r0, #18
 80012bc:	f001 f87f 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012c0:	2012      	movs	r0, #18
 80012c2:	f001 f898 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020800 	.word	0x40020800
 80012e0:	200001f8 	.word	0x200001f8
 80012e4:	40026410 	.word	0x40026410

080012e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_I2C_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12c      	bne.n	8001364 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001326:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132c:	2312      	movs	r3, #18
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001338:	2304      	movs	r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_I2C_MspInit+0x8c>)
 8001344:	f001 fb7c 	bl	8002a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_I2C_MspInit+0x88>)
 8001352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_I2C_MspInit+0x88>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12b      	bne.n	80013f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_SPI_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80013d2:	2338      	movs	r3, #56	; 0x38
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e2:	2305      	movs	r3, #5
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013ee:	f001 fb27 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40013000 	.word	0x40013000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400

08001408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_TIM_Base_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d135      	bne.n	80014da <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC_L_B_Pin|ENC_L_A_Pin;
 80014a6:	f248 0302 	movw	r3, #32770	; 0x8002
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4821      	ldr	r0, [pc, #132]	; (8001548 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014c4:	f001 fabc 	bl	8002a40 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	201c      	movs	r0, #28
 80014ce:	f000 ff76 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d2:	201c      	movs	r0, #28
 80014d4:	f000 ff8f 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014d8:	e030      	b.n	800153c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM3)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_TIM_Encoder_MspInit+0x100>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d12b      	bne.n	800153c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a15      	ldr	r2, [pc, #84]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800152c:	2302      	movs	r3, #2
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001538:	f001 fa82 	bl	8002a40 <HAL_GPIO_Init>
}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40000400 	.word	0x40000400

08001550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_TIM_MspPostInit+0x68>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d11e      	bne.n	80015b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_TIM_MspPostInit+0x6c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_TIM_MspPostInit+0x6c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_TIM_MspPostInit+0x70>)
 80015ac:	f001 fa48 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010000 	.word	0x40010000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a36      	ldr	r2, [pc, #216]	; (80016bc <HAL_UART_MspInit+0xf8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_TO_BT_Pin|RX_FROM_BT_Pin;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800162e:	2307      	movs	r3, #7
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4822      	ldr	r0, [pc, #136]	; (80016c4 <HAL_UART_MspInit+0x100>)
 800163a:	f001 fa01 	bl	8002a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2025      	movs	r0, #37	; 0x25
 8001644:	f000 febb 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001648:	2025      	movs	r0, #37	; 0x25
 800164a:	f000 fed4 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800164e:	e030      	b.n	80016b2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_UART_MspInit+0x104>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12b      	bne.n	80016b2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_UART_MspInit+0xfc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_TO_DEBUG_Pin|RX_FROM_DEBUG_Pin;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016a2:	2308      	movs	r3, #8
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <HAL_UART_MspInit+0x108>)
 80016ae:	f001 f9c7 	bl	8002a40 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	; 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40011400 	.word	0x40011400
 80016cc:	40020800 	.word	0x40020800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f954 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001730:	2002      	movs	r0, #2
 8001732:	f001 fb3b 	bl	8002dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <ADC_IRQHandler+0x10>)
 8001742:	f000 f9ca 	bl	8001ada <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000148 	.word	0x20000148

08001750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM2_IRQHandler+0x10>)
 8001756:	f002 fa3d 	bl	8003bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000334 	.word	0x20000334

08001764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART1_IRQHandler+0x10>)
 800176a:	f003 f9c7 	bl	8004afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200001b8 	.word	0x200001b8

08001778 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800177c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001780:	f001 fb14 	bl	8002dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream0_IRQHandler+0x10>)
 800178e:	f000 ff1d 	bl	80025cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001f8 	.word	0x200001f8

0800179c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
	}

return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f003 ff2c 	bl	80056cc <__errno>
 8001874:	4602      	mov	r2, r0
 8001876:	230c      	movs	r3, #12
 8001878:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000098 	.word	0x20000098
 80018a8:	20000380 	.word	0x20000380

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SystemInit+0x28>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <SystemInit+0x28>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SystemInit+0x28>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018de:	e003      	b.n	80018e8 <LoopCopyDataInit>

080018e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018e6:	3104      	adds	r1, #4

080018e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f0:	d3f6      	bcc.n	80018e0 <CopyDataInit>
  ldr  r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f4:	e002      	b.n	80018fc <LoopFillZerobss>

080018f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f8:	f842 3b04 	str.w	r3, [r2], #4

080018fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001900:	d3f9      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd3 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f004 f861 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7fe ff69 	bl	80007e0 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001914:	08006748 	.word	0x08006748
  ldr  r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800191c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001920:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001924:	2000037c 	.word	0x2000037c

08001928 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <DMA1_Stream0_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fd27 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fbfe 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fd3f 	bl	8002412 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fd07 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000374 	.word	0x20000374

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000374 	.word	0x20000374

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_Delay+0x40>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e033      	b.n	8001ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fb9c 	bl	80011b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 faa8 	bl	8001ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d049      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0xd6>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d046      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d12b      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d127      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d119      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0220 	bic.w	r2, r2, #32
 8001b7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8db 	bl	8001d5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f06f 0212 	mvn.w	r2, #18
 8001bae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b80      	cmp	r3, #128	; 0x80
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d057      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x1b8>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d054      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d139      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12b      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d124      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d11d      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fab6 	bl	80021f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 020c 	mvn.w	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d017      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x21a>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d014      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f843 	bl	8001d70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0201 	mvn.w	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x27a>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0220 	mvn.w	r2, #32
 8001d42:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f81d 	bl	8001d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0220 	mvn.w	r2, #32
 8001d52:	601a      	str	r2, [r3, #0]
  }
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1c>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e113      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x244>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d925      	bls.n	8001e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68d9      	ldr	r1, [r3, #12]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b1e      	subs	r3, #30
 8001dda:	2207      	movs	r2, #7
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68d9      	ldr	r1, [r3, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4403      	add	r3, r0
 8001e02:	3b1e      	subs	r3, #30
 8001e04:	409a      	lsls	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	e022      	b.n	8001e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	2207      	movs	r2, #7
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	400a      	ands	r2, r1
 8001e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4403      	add	r3, r0
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d824      	bhi.n	8001ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b05      	subs	r3, #5
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b05      	subs	r3, #5
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	e04c      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b23      	subs	r3, #35	; 0x23
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b23      	subs	r3, #35	; 0x23
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef8:	e023      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b41      	subs	r3, #65	; 0x41
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b41      	subs	r3, #65	; 0x41
 8001f36:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_ADC_ConfigChannel+0x250>)
 8001f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_ADC_ConfigChannel+0x254>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10f      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1d8>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_ADC_ConfigChannel+0x254>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_ADC_ConfigChannel+0x258>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x1f4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d122      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_ADC_ConfigChannel+0x258>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_ADC_ConfigChannel+0x260>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9a      	lsrs	r2, r3, #18
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	40012000 	.word	0x40012000
 8001ff0:	10000012 	.word	0x10000012
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002004:	4b79      	ldr	r3, [pc, #484]	; (80021ec <ADC_Init+0x1f0>)
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	021a      	lsls	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <ADC_Init+0x1f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	e00f      	b.n	80020fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0202 	bic.w	r2, r2, #2
 8002108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
 8002114:	005a      	lsls	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	3b01      	subs	r3, #1
 8002154:	035a      	lsls	r2, r3, #13
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e007      	b.n	8002170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	3b01      	subs	r3, #1
 800218c:	051a      	lsls	r2, r3, #20
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b2:	025a      	lsls	r2, r3, #9
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	029a      	lsls	r2, r3, #10
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40012300 	.word	0x40012300
 80021f0:	0f000001 	.word	0x0f000001

080021f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fade 	bl	80019f8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e099      	b.n	800257c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e00f      	b.n	800248a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff fac5 	bl	80019f8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d908      	bls.n	800248a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e078      	b.n	800257c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e8      	bne.n	800246a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_DMA_Init+0x158>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4313      	orrs	r3, r2
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b04      	cmp	r3, #4
 800251c:	d117      	bne.n	800254e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa0b 	bl	800294c <DMA_CheckFifoParam>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254a:	2301      	movs	r3, #1
 800254c:	e016      	b.n	800257c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f9c2 	bl	80028e0 <DMA_CalcBaseAndBitshift>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	223f      	movs	r2, #63	; 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	f010803f 	.word	0xf010803f

08002588 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d004      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00c      	b.n	80025c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2205      	movs	r2, #5
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d8:	4b92      	ldr	r3, [pc, #584]	; (8002824 <HAL_DMA_IRQHandler+0x258>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a92      	ldr	r2, [pc, #584]	; (8002828 <HAL_DMA_IRQHandler+0x25c>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0a9b      	lsrs	r3, r3, #10
 80025e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2208      	movs	r2, #8
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01a      	beq.n	8002638 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2208      	movs	r2, #8
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2201      	movs	r2, #1
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2201      	movs	r2, #1
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0202 	orr.w	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2204      	movs	r2, #4
 8002674:	409a      	lsls	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00b      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2204      	movs	r2, #4
 8002692:	409a      	lsls	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2210      	movs	r2, #16
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d043      	beq.n	800273c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d03c      	beq.n	800273c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	2210      	movs	r2, #16
 80026c8:	409a      	lsls	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d018      	beq.n	800270e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d024      	beq.n	800273c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
 80026fa:	e01f      	b.n	800273c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
 800270c:	e016      	b.n	800273c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0208 	bic.w	r2, r2, #8
 800272a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2220      	movs	r2, #32
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 808e 	beq.w	800286a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8086 	beq.w	800286a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2220      	movs	r2, #32
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b05      	cmp	r3, #5
 8002774:	d136      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0216 	bic.w	r2, r2, #22
 8002784:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002794:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_DMA_IRQHandler+0x1da>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0208 	bic.w	r2, r2, #8
 80027b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	223f      	movs	r2, #63	; 0x3f
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d07d      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
        }
        return;
 80027e2:	e078      	b.n	80028d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01c      	beq.n	800282c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d108      	bne.n	8002812 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	2b00      	cmp	r3, #0
 8002806:	d030      	beq.n	800286a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
 8002810:	e02b      	b.n	800286a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d027      	beq.n	800286a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e022      	b.n	800286a <HAL_DMA_IRQHandler+0x29e>
 8002824:	20000000 	.word	0x20000000
 8002828:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0210 	bic.w	r2, r2, #16
 8002848:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d032      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d022      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3301      	adds	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d307      	bcc.n	80028b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f2      	bne.n	8002896 <HAL_DMA_IRQHandler+0x2ca>
 80028b0:	e000      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028d6:	bf00      	nop
    }
  }
}
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop

080028e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3b10      	subs	r3, #16
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <DMA_CalcBaseAndBitshift+0x64>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <DMA_CalcBaseAndBitshift+0x68>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d909      	bls.n	8002922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	1d1a      	adds	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58
 8002920:	e007      	b.n	8002932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	aaaaaaab 	.word	0xaaaaaaab
 8002948:	08006698 	.word	0x08006698

0800294c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11f      	bne.n	80029a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d855      	bhi.n	8002a18 <DMA_CheckFifoParam+0xcc>
 800296c:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <DMA_CheckFifoParam+0x28>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	08002985 	.word	0x08002985
 8002978:	08002997 	.word	0x08002997
 800297c:	08002985 	.word	0x08002985
 8002980:	08002a19 	.word	0x08002a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d045      	beq.n	8002a1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e042      	b.n	8002a1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800299e:	d13f      	bne.n	8002a20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e03c      	b.n	8002a20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d121      	bne.n	80029f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d836      	bhi.n	8002a24 <DMA_CheckFifoParam+0xd8>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x70>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d3 	.word	0x080029d3
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	080029e5 	.word	0x080029e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e02f      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d024      	beq.n	8002a28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e2:	e021      	b.n	8002a28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ec:	d11e      	bne.n	8002a2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029f2:	e01b      	b.n	8002a2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <DMA_CheckFifoParam+0xb4>
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d003      	beq.n	8002a06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029fe:	e018      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e015      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      break;
 8002a16:	e00b      	b.n	8002a30 <DMA_CheckFifoParam+0xe4>
      break;
 8002a18:	bf00      	nop
 8002a1a:	e00a      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a1c:	bf00      	nop
 8002a1e:	e008      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a20:	bf00      	nop
 8002a22:	e006      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a24:	bf00      	nop
 8002a26:	e004      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a28:	bf00      	nop
 8002a2a:	e002      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <DMA_CheckFifoParam+0xe6>
      break;
 8002a30:	bf00      	nop
    }
  } 
  
  return status; 
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e159      	b.n	8002d10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8148 	bne.w	8002d0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d00b      	beq.n	8002a9a <HAL_GPIO_Init+0x5a>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a8e:	2b11      	cmp	r3, #17
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	d130      	bne.n	8002afc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0201 	and.w	r2, r3, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0xfc>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d123      	bne.n	8002b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	220f      	movs	r2, #15
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	69b9      	ldr	r1, [r7, #24]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0203 	and.w	r2, r3, #3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a2 	beq.w	8002d0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_GPIO_Init+0x2e4>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_GPIO_Init+0x2e4>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_GPIO_Init+0x2e4>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be2:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_GPIO_Init+0x2e8>)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a48      	ldr	r2, [pc, #288]	; (8002d2c <HAL_GPIO_Init+0x2ec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x202>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a47      	ldr	r2, [pc, #284]	; (8002d30 <HAL_GPIO_Init+0x2f0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x1fe>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <HAL_GPIO_Init+0x2f4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x1fa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a45      	ldr	r2, [pc, #276]	; (8002d38 <HAL_GPIO_Init+0x2f8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x1f6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <HAL_GPIO_Init+0x2fc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x1f2>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e008      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e004      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x204>
 8002c42:	2300      	movs	r3, #0
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f002 0203 	and.w	r2, r2, #3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4093      	lsls	r3, r2
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c54:	4934      	ldr	r1, [pc, #208]	; (8002d28 <HAL_GPIO_Init+0x2e8>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c62:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c86:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cda:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	f67f aea2 	bls.w	8002a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3724      	adds	r7, #36	; 0x24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	401a      	ands	r2, r3
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d104      	bne.n	8002d9a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fc50 	bl	8000670 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e11f      	b.n	800302e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fa70 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e40:	f000 fd18 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a7b      	ldr	r2, [pc, #492]	; (8003038 <HAL_I2C_Init+0x25c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d807      	bhi.n	8002e60 <HAL_I2C_Init+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_I2C_Init+0x260>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e006      	b.n	8002e6e <HAL_I2C_Init+0x92>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a77      	ldr	r2, [pc, #476]	; (8003040 <HAL_I2C_Init+0x264>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0db      	b.n	800302e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a72      	ldr	r2, [pc, #456]	; (8003044 <HAL_I2C_Init+0x268>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a64      	ldr	r2, [pc, #400]	; (8003038 <HAL_I2C_Init+0x25c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_I2C_Init+0xd4>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	e009      	b.n	8002ec4 <HAL_I2C_Init+0xe8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_I2C_Init+0x26c>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4956      	ldr	r1, [pc, #344]	; (8003038 <HAL_I2C_Init+0x25c>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d80d      	bhi.n	8002f00 <HAL_I2C_Init+0x124>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e59      	subs	r1, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	bf38      	it	cc
 8002efc:	2304      	movcc	r3, #4
 8002efe:	e04f      	b.n	8002fa0 <HAL_I2C_Init+0x1c4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <HAL_I2C_Init+0x150>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e012      	b.n	8002f52 <HAL_I2C_Init+0x176>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	0099      	lsls	r1, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x17e>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e022      	b.n	8002fa0 <HAL_I2C_Init+0x1c4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_I2C_Init+0x1a4>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e58      	subs	r0, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	440b      	add	r3, r1
 8002f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7e:	e00f      	b.n	8002fa0 <HAL_I2C_Init+0x1c4>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	6809      	ldr	r1, [r1, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6911      	ldr	r1, [r2, #16]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	000186a0 	.word	0x000186a0
 800303c:	001e847f 	.word	0x001e847f
 8003040:	003d08ff 	.word	0x003d08ff
 8003044:	431bde83 	.word	0x431bde83
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e25b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d075      	beq.n	8003156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	4ba3      	ldr	r3, [pc, #652]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00c      	beq.n	8003090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	2b08      	cmp	r3, #8
 8003080:	d112      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4b9d      	ldr	r3, [pc, #628]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308e:	d10b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	4b99      	ldr	r3, [pc, #612]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05b      	beq.n	8003154 <HAL_RCC_OscConfig+0x108>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d157      	bne.n	8003154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e236      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d106      	bne.n	80030c0 <HAL_RCC_OscConfig+0x74>
 80030b2:	4b91      	ldr	r3, [pc, #580]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a90      	ldr	r2, [pc, #576]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e01d      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030ca:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8a      	ldr	r2, [pc, #552]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a87      	ldr	r2, [pc, #540]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0xb0>
 80030e4:	4b84      	ldr	r3, [pc, #528]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fc78 	bl	80019f8 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fc74 	bl	80019f8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1fb      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0xc0>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fc64 	bl	80019f8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fc60 	bl	80019f8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1e7      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0xe8>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d11c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1bb      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4952      	ldr	r1, [pc, #328]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	e03a      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_OscConfig+0x2b0>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe fc19 	bl	80019f8 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fe fc15 	bl	80019f8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e19c      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4940      	ldr	r1, [pc, #256]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_OscConfig+0x2b0>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fbf8 	bl	80019f8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7fe fbf4 	bl	80019f8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e17b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d030      	beq.n	8003298 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x2b4>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fbd8 	bl	80019f8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe fbd4 	bl	80019f8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e15b      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x200>
 800326a:	e015      	b.n	8003298 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x2b4>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe fbc1 	bl	80019f8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327a:	f7fe fbbd 	bl	80019f8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e144      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a0 	beq.w	80033e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_RCC_OscConfig+0x2b8>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fb83 	bl	80019f8 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e011      	b.n	800331a <HAL_RCC_OscConfig+0x2ce>
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470000 	.word	0x42470000
 8003300:	42470e80 	.word	0x42470e80
 8003304:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003308:	f7fe fb76 	bl	80019f8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0fd      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d106      	bne.n	800333c <HAL_RCC_OscConfig+0x2f0>
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
 800333a:	e01c      	b.n	8003376 <HAL_RCC_OscConfig+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d10c      	bne.n	800335e <HAL_RCC_OscConfig+0x312>
 8003344:	4b77      	ldr	r3, [pc, #476]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a76      	ldr	r2, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	e00b      	b.n	8003376 <HAL_RCC_OscConfig+0x32a>
 800335e:	4b71      	ldr	r3, [pc, #452]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a70      	ldr	r2, [pc, #448]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b6e      	ldr	r3, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d015      	beq.n	80033aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe fb3b 	bl	80019f8 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe fb37 	bl	80019f8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0bc      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ee      	beq.n	8003386 <HAL_RCC_OscConfig+0x33a>
 80033a8:	e014      	b.n	80033d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fe fb25 	bl	80019f8 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe fb21 	bl	80019f8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0a6      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ee      	bne.n	80033b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8092 	beq.w	8003514 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d05c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d141      	bne.n	8003488 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003404:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe faf5 	bl	80019f8 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe faf1 	bl	80019f8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e078      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	019b      	lsls	r3, r3, #6
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	4933      	ldr	r1, [pc, #204]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe faca 	bl	80019f8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe fac6 	bl	80019f8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04d      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x41c>
 8003486:	e045      	b.n	8003514 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x4dc>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe fab3 	bl	80019f8 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe faaf 	bl	80019f8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x44a>
 80034b4:	e02e      	b.n	8003514 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e029      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d115      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	40023800 	.word	0x40023800
 8003528:	42470060 	.word	0x42470060

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cc      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d90c      	bls.n	8003568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d044      	beq.n	800364c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d119      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e067      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4934      	ldr	r1, [pc, #208]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fe f9ec 	bl	80019f8 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fe f9e8 	bl	80019f8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d20c      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f821 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4601      	mov	r1, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f94c 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08006680 	.word	0x08006680
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370e:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b04      	cmp	r3, #4
 8003718:	d007      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x32>
 800371a:	2b08      	cmp	r3, #8
 800371c:	d008      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x38>
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 808d 	bne.w	800383e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003726:	60bb      	str	r3, [r7, #8]
       break;
 8003728:	e08c      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372a:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCC_GetSysClockFreq+0x160>)
 800372c:	60bb      	str	r3, [r7, #8]
      break;
 800372e:	e089      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d023      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4b42      	ldr	r3, [pc, #264]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	f04f 0400 	mov.w	r4, #0
 8003750:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea03 0501 	and.w	r5, r3, r1
 800375c:	ea04 0602 	and.w	r6, r4, r2
 8003760:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <HAL_RCC_GetSysClockFreq+0x160>)
 8003762:	fb02 f106 	mul.w	r1, r2, r6
 8003766:	2200      	movs	r2, #0
 8003768:	fb02 f205 	mul.w	r2, r2, r5
 800376c:	440a      	add	r2, r1
 800376e:	493a      	ldr	r1, [pc, #232]	; (8003858 <HAL_RCC_GetSysClockFreq+0x160>)
 8003770:	fba5 0101 	umull	r0, r1, r5, r1
 8003774:	1853      	adds	r3, r2, r1
 8003776:	4619      	mov	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	461a      	mov	r2, r3
 8003780:	4623      	mov	r3, r4
 8003782:	f7fc fd7d 	bl	8000280 <__aeabi_uldivmod>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e049      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b30      	ldr	r3, [pc, #192]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	f240 11ff 	movw	r1, #511	; 0x1ff
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	ea03 0501 	and.w	r5, r3, r1
 80037a4:	ea04 0602 	and.w	r6, r4, r2
 80037a8:	4629      	mov	r1, r5
 80037aa:	4632      	mov	r2, r6
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	0154      	lsls	r4, r2, #5
 80037b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ba:	014b      	lsls	r3, r1, #5
 80037bc:	4619      	mov	r1, r3
 80037be:	4622      	mov	r2, r4
 80037c0:	1b49      	subs	r1, r1, r5
 80037c2:	eb62 0206 	sbc.w	r2, r2, r6
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	0194      	lsls	r4, r2, #6
 80037d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037d4:	018b      	lsls	r3, r1, #6
 80037d6:	1a5b      	subs	r3, r3, r1
 80037d8:	eb64 0402 	sbc.w	r4, r4, r2
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	00e2      	lsls	r2, r4, #3
 80037e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ea:	00d9      	lsls	r1, r3, #3
 80037ec:	460b      	mov	r3, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	195b      	adds	r3, r3, r5
 80037f2:	eb44 0406 	adc.w	r4, r4, r6
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	02a2      	lsls	r2, r4, #10
 8003800:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003804:	0299      	lsls	r1, r3, #10
 8003806:	460b      	mov	r3, r1
 8003808:	4614      	mov	r4, r2
 800380a:	4618      	mov	r0, r3
 800380c:	4621      	mov	r1, r4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f04f 0400 	mov.w	r4, #0
 8003814:	461a      	mov	r2, r3
 8003816:	4623      	mov	r3, r4
 8003818:	f7fc fd32 	bl	8000280 <__aeabi_uldivmod>
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_GetSysClockFreq+0x158>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	3301      	adds	r3, #1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	60bb      	str	r3, [r7, #8]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003840:	60bb      	str	r3, [r7, #8]
      break;
 8003842:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003844:	68bb      	ldr	r3, [r7, #8]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	00f42400 	.word	0x00f42400
 8003858:	017d7840 	.word	0x017d7840

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4601      	mov	r1, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4a03      	ldr	r2, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5cd3      	ldrb	r3, [r2, r3]
 800388c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	08006690 	.word	0x08006690

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038a0:	f7ff ffdc 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08006690 	.word	0x08006690

080038c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e056      	b.n	8003984 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd fd41 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	ea42 0103 	orr.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	0c1b      	lsrs	r3, r3, #16
 8003954:	f003 0104 	and.w	r1, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01d      	b.n	80039da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fd28 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 fbba 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e01d      	b.n	8003a30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f815 	bl	8003a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f000 fb8f 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fe16 	bl	8004690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIM_PWM_Start+0x60>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d007      	beq.n	8003aa0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000

08003ab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e083      	b.n	8003bcc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fd fcb7 	bl	800144c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af4:	f023 0307 	bic.w	r3, r3, #7
 8003af8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f000 fb1d 	bl	8004144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4313      	orrs	r3, r2
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b50:	f023 030c 	bic.w	r3, r3, #12
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	011a      	lsls	r2, r3, #4
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	031b      	lsls	r3, r3, #12
 8003b80:	4313      	orrs	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0202 	mvn.w	r2, #2
 8003c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa75 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa67 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa78 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d122      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0204 	mvn.w	r2, #4
 8003c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa4b 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa3d 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fa4e 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0208 	mvn.w	r2, #8
 8003ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2204      	movs	r2, #4
 8003cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa21 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa13 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fa24 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0210 	mvn.w	r2, #16
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2208      	movs	r2, #8
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9f7 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9e9 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9fa 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0201 	mvn.w	r2, #1
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9c3 	bl	80040de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fd76 	bl	8004870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9bf 	bl	800412e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0220 	mvn.w	r2, #32
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fd40 	bl	800485c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0b4      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	f200 809f 	bhi.w	8003f54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003f55 	.word	0x08003f55
 8003e24:	08003f55 	.word	0x08003f55
 8003e28:	08003f55 	.word	0x08003f55
 8003e2c:	08003e91 	.word	0x08003e91
 8003e30:	08003f55 	.word	0x08003f55
 8003e34:	08003f55 	.word	0x08003f55
 8003e38:	08003f55 	.word	0x08003f55
 8003e3c:	08003ed3 	.word	0x08003ed3
 8003e40:	08003f55 	.word	0x08003f55
 8003e44:	08003f55 	.word	0x08003f55
 8003e48:	08003f55 	.word	0x08003f55
 8003e4c:	08003f13 	.word	0x08003f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f9f4 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	619a      	str	r2, [r3, #24]
      break;
 8003e8e:	e062      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa3a 	bl	8004310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	021a      	lsls	r2, r3, #8
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
      break;
 8003ed0:	e041      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fa85 	bl	80043e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0208 	orr.w	r2, r2, #8
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      break;
 8003f10:	e021      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 facf 	bl	80044bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
      break;
 8003f52:	e000      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003f54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_ConfigClockSource+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0a6      	b.n	80040d6 <HAL_TIM_ConfigClockSource+0x166>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d067      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x120>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d80b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x6c>
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d073      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d802      	bhi.n	8003fd2 <HAL_TIM_ConfigClockSource+0x62>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06f      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003fd0:	e078      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d06c      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
 8003fd6:	2b30      	cmp	r3, #48	; 0x30
 8003fd8:	d06a      	beq.n	80040b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fda:	e073      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d00d      	beq.n	8003ffc <HAL_TIM_ConfigClockSource+0x8c>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d804      	bhi.n	8003fee <HAL_TIM_ConfigClockSource+0x7e>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d033      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0xe0>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d041      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fec:	e06a      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d066      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x152>
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d017      	beq.n	800402a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ffa:	e063      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6899      	ldr	r1, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f000 fb20 	bl	8004650 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800401e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]
      break;
 8004028:	e04c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f000 fb09 	bl	8004650 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404c:	609a      	str	r2, [r3, #8]
      break;
 800404e:	e039      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	461a      	mov	r2, r3
 800405e:	f000 fa7d 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2150      	movs	r1, #80	; 0x50
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fad6 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800406e:	e029      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	461a      	mov	r2, r3
 800407e:	f000 fa9c 	bl	80045ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2160      	movs	r1, #96	; 0x60
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fac6 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800408e:	e019      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	461a      	mov	r2, r3
 800409e:	f000 fa5d 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2140      	movs	r1, #64	; 0x40
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fab6 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80040ae:	e009      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 faad 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00f      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00b      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a31      	ldr	r2, [pc, #196]	; (800422c <TIM_Base_SetConfig+0xe8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a30      	ldr	r2, [pc, #192]	; (8004230 <TIM_Base_SetConfig+0xec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <TIM_Base_SetConfig+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01b      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d017      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <TIM_Base_SetConfig+0xe8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_Base_SetConfig+0xec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00f      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_Base_SetConfig+0xf0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_Base_SetConfig+0xf4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <TIM_Base_SetConfig+0xf8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <TIM_Base_SetConfig+0xfc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <TIM_Base_SetConfig+0xe4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f023 0302 	bic.w	r3, r3, #2
 800428c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <TIM_OC1_SetConfig+0xc8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10c      	bne.n	80042ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0308 	bic.w	r3, r3, #8
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a13      	ldr	r2, [pc, #76]	; (800430c <TIM_OC1_SetConfig+0xc8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d111      	bne.n	80042e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	621a      	str	r2, [r3, #32]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40010000 	.word	0x40010000

08004310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0210 	bic.w	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <TIM_OC2_SetConfig+0xd4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10d      	bne.n	800438c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <TIM_OC2_SetConfig+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d113      	bne.n	80043bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000

080043e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <TIM_OC3_SetConfig+0xd0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10d      	bne.n	8004462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800444c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <TIM_OC3_SetConfig+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000

080044bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	031b      	lsls	r3, r3, #12
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <TIM_OC4_SetConfig+0x9c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d109      	bne.n	8004530 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0210 	bic.w	r2, r3, #16
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e050      	b.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d013      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10c      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4313      	orrs	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000

080047b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e03d      	b.n	8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e03f      	b.n	8004916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fe8a 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb83 	bl	8004fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af02      	add	r7, sp, #8
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b20      	cmp	r3, #32
 800493c:	f040 8083 	bne.w	8004a46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Transmit+0x2e>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e07b      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_UART_Transmit+0x40>
 800495a:	2302      	movs	r3, #2
 800495c:	e074      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2221      	movs	r2, #33	; 0x21
 8004970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004974:	f7fd f840 	bl	80019f8 <HAL_GetTick>
 8004978:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	88fa      	ldrh	r2, [r7, #6]
 800497e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800498e:	e042      	b.n	8004a16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d122      	bne.n	80049ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f9a2 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e042      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3302      	adds	r3, #2
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	e017      	b.n	8004a16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	e013      	b.n	8004a16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f97f 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e01f      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	60ba      	str	r2, [r7, #8]
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1b7      	bne.n	8004990 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f966 	bl	8004cfc <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e006      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d140      	bne.n	8004aec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <HAL_UART_Receive_IT+0x26>
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e039      	b.n	8004aee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Receive_IT+0x38>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e032      	b.n	8004aee <HAL_UART_Receive_IT+0x9e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0220 	orr.w	r2, r2, #32
 8004ae6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10d      	bne.n	8004b4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_UART_IRQHandler+0x52>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9c2 	bl	8004ed0 <UART_Receive_IT>
      return;
 8004b4c:	e0d1      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80b0 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x1ba>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_UART_IRQHandler+0x70>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 80a5 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_UART_IRQHandler+0x90>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_UART_IRQHandler+0xb0>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	f043 0202 	orr.w	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_UART_IRQHandler+0xd0>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00f      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xfa>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_UART_IRQHandler+0xee>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	f043 0208 	orr.w	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d078      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_UART_IRQHandler+0x11c>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f95c 	bl	8004ed0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <HAL_UART_IRQHandler+0x144>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d031      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8a5 	bl	8004d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d123      	bne.n	8004c9c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_UART_IRQHandler+0x1fc>)
 8004c72:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fc85 	bl	8002588 <HAL_DMA_Abort_IT>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c92:	e00e      	b.n	8004cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fb fc9b 	bl	80005d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fb fc97 	bl	80005d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca2:	e006      	b.n	8004cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fb fc93 	bl	80005d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004cb0:	e01e      	b.n	8004cf0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb2:	bf00      	nop
    return;
 8004cb4:	e01c      	b.n	8004cf0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1d6>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f892 	bl	8004df4 <UART_Transmit_IT>
    return;
 8004cd0:	e00f      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8da 	bl	8004ea0 <UART_EndTransmit_IT>
    return;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004cf0:	bf00      	nop
  }
}
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08004dcd 	.word	0x08004dcd

08004cfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	e02c      	b.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d028      	beq.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1c:	f7fc fe6c 	bl	80019f8 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d21d      	bcs.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e00f      	b.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d0c3      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004da6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fb fbf2 	bl	80005d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b21      	cmp	r3, #33	; 0x21
 8004e06:	d144      	bne.n	8004e92 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d11a      	bne.n	8004e48 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e26:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	1c9a      	adds	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]
 8004e3a:	e00e      	b.n	8004e5a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]
 8004e46:	e008      	b.n	8004e5a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6211      	str	r1, [r2, #32]
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4619      	mov	r1, r3
 8004e68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fb fb71 	bl	80005a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b22      	cmp	r3, #34	; 0x22
 8004ee2:	d171      	bne.n	8004fc8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	d123      	bne.n	8004f36 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10e      	bne.n	8004f1a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
 8004f18:	e029      	b.n	8004f6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
 8004f34:	e01b      	b.n	8004f6e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6858      	ldr	r0, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6291      	str	r1, [r2, #40]	; 0x28
 8004f4e:	b2c2      	uxtb	r2, r0
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e00c      	b.n	8004f6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	1c58      	adds	r0, r3, #1
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	6288      	str	r0, [r1, #40]	; 0x28
 8004f66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d120      	bne.n	8004fc4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0220 	bic.w	r2, r2, #32
 8004f90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fb fb14 	bl	80005e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e002      	b.n	8004fca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005016:	f023 030c 	bic.w	r3, r3, #12
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	430b      	orrs	r3, r1
 8005022:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005042:	f040 818b 	bne.w	800535c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4ac1      	ldr	r2, [pc, #772]	; (8005350 <UART_SetConfig+0x37c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d005      	beq.n	800505c <UART_SetConfig+0x88>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4abf      	ldr	r2, [pc, #764]	; (8005354 <UART_SetConfig+0x380>)
 8005056:	4293      	cmp	r3, r2
 8005058:	f040 80bd 	bne.w	80051d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800505c:	f7fe fc1e 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8005060:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	461d      	mov	r5, r3
 8005066:	f04f 0600 	mov.w	r6, #0
 800506a:	46a8      	mov	r8, r5
 800506c:	46b1      	mov	r9, r6
 800506e:	eb18 0308 	adds.w	r3, r8, r8
 8005072:	eb49 0409 	adc.w	r4, r9, r9
 8005076:	4698      	mov	r8, r3
 8005078:	46a1      	mov	r9, r4
 800507a:	eb18 0805 	adds.w	r8, r8, r5
 800507e:	eb49 0906 	adc.w	r9, r9, r6
 8005082:	f04f 0100 	mov.w	r1, #0
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800508e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005092:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005096:	4688      	mov	r8, r1
 8005098:	4691      	mov	r9, r2
 800509a:	eb18 0005 	adds.w	r0, r8, r5
 800509e:	eb49 0106 	adc.w	r1, r9, r6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	461d      	mov	r5, r3
 80050a8:	f04f 0600 	mov.w	r6, #0
 80050ac:	196b      	adds	r3, r5, r5
 80050ae:	eb46 0406 	adc.w	r4, r6, r6
 80050b2:	461a      	mov	r2, r3
 80050b4:	4623      	mov	r3, r4
 80050b6:	f7fb f8e3 	bl	8000280 <__aeabi_uldivmod>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	461a      	mov	r2, r3
 80050c0:	4ba5      	ldr	r3, [pc, #660]	; (8005358 <UART_SetConfig+0x384>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	461d      	mov	r5, r3
 80050d0:	f04f 0600 	mov.w	r6, #0
 80050d4:	46a9      	mov	r9, r5
 80050d6:	46b2      	mov	sl, r6
 80050d8:	eb19 0309 	adds.w	r3, r9, r9
 80050dc:	eb4a 040a 	adc.w	r4, sl, sl
 80050e0:	4699      	mov	r9, r3
 80050e2:	46a2      	mov	sl, r4
 80050e4:	eb19 0905 	adds.w	r9, r9, r5
 80050e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80050ec:	f04f 0100 	mov.w	r1, #0
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005100:	4689      	mov	r9, r1
 8005102:	4692      	mov	sl, r2
 8005104:	eb19 0005 	adds.w	r0, r9, r5
 8005108:	eb4a 0106 	adc.w	r1, sl, r6
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	461d      	mov	r5, r3
 8005112:	f04f 0600 	mov.w	r6, #0
 8005116:	196b      	adds	r3, r5, r5
 8005118:	eb46 0406 	adc.w	r4, r6, r6
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f7fb f8ae 	bl	8000280 <__aeabi_uldivmod>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	461a      	mov	r2, r3
 800512a:	4b8b      	ldr	r3, [pc, #556]	; (8005358 <UART_SetConfig+0x384>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a86      	ldr	r2, [pc, #536]	; (8005358 <UART_SetConfig+0x384>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800514c:	4498      	add	r8, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	461d      	mov	r5, r3
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	46a9      	mov	r9, r5
 8005158:	46b2      	mov	sl, r6
 800515a:	eb19 0309 	adds.w	r3, r9, r9
 800515e:	eb4a 040a 	adc.w	r4, sl, sl
 8005162:	4699      	mov	r9, r3
 8005164:	46a2      	mov	sl, r4
 8005166:	eb19 0905 	adds.w	r9, r9, r5
 800516a:	eb4a 0a06 	adc.w	sl, sl, r6
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005182:	4689      	mov	r9, r1
 8005184:	4692      	mov	sl, r2
 8005186:	eb19 0005 	adds.w	r0, r9, r5
 800518a:	eb4a 0106 	adc.w	r1, sl, r6
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	461d      	mov	r5, r3
 8005194:	f04f 0600 	mov.w	r6, #0
 8005198:	196b      	adds	r3, r5, r5
 800519a:	eb46 0406 	adc.w	r4, r6, r6
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	f7fb f86d 	bl	8000280 <__aeabi_uldivmod>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <UART_SetConfig+0x384>)
 80051ae:	fba3 1302 	umull	r1, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2164      	movs	r1, #100	; 0x64
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	3332      	adds	r3, #50	; 0x32
 80051c0:	4a65      	ldr	r2, [pc, #404]	; (8005358 <UART_SetConfig+0x384>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 0207 	and.w	r2, r3, #7
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4442      	add	r2, r8
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	e26f      	b.n	80056b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7fe fb4d 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 80051da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	461d      	mov	r5, r3
 80051e0:	f04f 0600 	mov.w	r6, #0
 80051e4:	46a8      	mov	r8, r5
 80051e6:	46b1      	mov	r9, r6
 80051e8:	eb18 0308 	adds.w	r3, r8, r8
 80051ec:	eb49 0409 	adc.w	r4, r9, r9
 80051f0:	4698      	mov	r8, r3
 80051f2:	46a1      	mov	r9, r4
 80051f4:	eb18 0805 	adds.w	r8, r8, r5
 80051f8:	eb49 0906 	adc.w	r9, r9, r6
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005208:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800520c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005210:	4688      	mov	r8, r1
 8005212:	4691      	mov	r9, r2
 8005214:	eb18 0005 	adds.w	r0, r8, r5
 8005218:	eb49 0106 	adc.w	r1, r9, r6
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	461d      	mov	r5, r3
 8005222:	f04f 0600 	mov.w	r6, #0
 8005226:	196b      	adds	r3, r5, r5
 8005228:	eb46 0406 	adc.w	r4, r6, r6
 800522c:	461a      	mov	r2, r3
 800522e:	4623      	mov	r3, r4
 8005230:	f7fb f826 	bl	8000280 <__aeabi_uldivmod>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	461a      	mov	r2, r3
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <UART_SetConfig+0x384>)
 800523c:	fba3 2302 	umull	r2, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	461d      	mov	r5, r3
 800524a:	f04f 0600 	mov.w	r6, #0
 800524e:	46a9      	mov	r9, r5
 8005250:	46b2      	mov	sl, r6
 8005252:	eb19 0309 	adds.w	r3, r9, r9
 8005256:	eb4a 040a 	adc.w	r4, sl, sl
 800525a:	4699      	mov	r9, r3
 800525c:	46a2      	mov	sl, r4
 800525e:	eb19 0905 	adds.w	r9, r9, r5
 8005262:	eb4a 0a06 	adc.w	sl, sl, r6
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800527a:	4689      	mov	r9, r1
 800527c:	4692      	mov	sl, r2
 800527e:	eb19 0005 	adds.w	r0, r9, r5
 8005282:	eb4a 0106 	adc.w	r1, sl, r6
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	461d      	mov	r5, r3
 800528c:	f04f 0600 	mov.w	r6, #0
 8005290:	196b      	adds	r3, r5, r5
 8005292:	eb46 0406 	adc.w	r4, r6, r6
 8005296:	461a      	mov	r2, r3
 8005298:	4623      	mov	r3, r4
 800529a:	f7fa fff1 	bl	8000280 <__aeabi_uldivmod>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <UART_SetConfig+0x384>)
 80052a6:	fba3 1302 	umull	r1, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2164      	movs	r1, #100	; 0x64
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	3332      	adds	r3, #50	; 0x32
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <UART_SetConfig+0x384>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052c6:	4498      	add	r8, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	461d      	mov	r5, r3
 80052cc:	f04f 0600 	mov.w	r6, #0
 80052d0:	46a9      	mov	r9, r5
 80052d2:	46b2      	mov	sl, r6
 80052d4:	eb19 0309 	adds.w	r3, r9, r9
 80052d8:	eb4a 040a 	adc.w	r4, sl, sl
 80052dc:	4699      	mov	r9, r3
 80052de:	46a2      	mov	sl, r4
 80052e0:	eb19 0905 	adds.w	r9, r9, r5
 80052e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052fc:	4689      	mov	r9, r1
 80052fe:	4692      	mov	sl, r2
 8005300:	eb19 0005 	adds.w	r0, r9, r5
 8005304:	eb4a 0106 	adc.w	r1, sl, r6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	461d      	mov	r5, r3
 800530e:	f04f 0600 	mov.w	r6, #0
 8005312:	196b      	adds	r3, r5, r5
 8005314:	eb46 0406 	adc.w	r4, r6, r6
 8005318:	461a      	mov	r2, r3
 800531a:	4623      	mov	r3, r4
 800531c:	f7fa ffb0 	bl	8000280 <__aeabi_uldivmod>
 8005320:	4603      	mov	r3, r0
 8005322:	460c      	mov	r4, r1
 8005324:	461a      	mov	r2, r3
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <UART_SetConfig+0x384>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	; 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	3332      	adds	r3, #50	; 0x32
 800533a:	4a07      	ldr	r2, [pc, #28]	; (8005358 <UART_SetConfig+0x384>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 0207 	and.w	r2, r3, #7
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4442      	add	r2, r8
 800534c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800534e:	e1b2      	b.n	80056b6 <UART_SetConfig+0x6e2>
 8005350:	40011000 	.word	0x40011000
 8005354:	40011400 	.word	0x40011400
 8005358:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4ad7      	ldr	r2, [pc, #860]	; (80056c0 <UART_SetConfig+0x6ec>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d005      	beq.n	8005372 <UART_SetConfig+0x39e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4ad6      	ldr	r2, [pc, #856]	; (80056c4 <UART_SetConfig+0x6f0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	f040 80d1 	bne.w	8005514 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005372:	f7fe fa93 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8005376:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	469a      	mov	sl, r3
 800537c:	f04f 0b00 	mov.w	fp, #0
 8005380:	46d0      	mov	r8, sl
 8005382:	46d9      	mov	r9, fp
 8005384:	eb18 0308 	adds.w	r3, r8, r8
 8005388:	eb49 0409 	adc.w	r4, r9, r9
 800538c:	4698      	mov	r8, r3
 800538e:	46a1      	mov	r9, r4
 8005390:	eb18 080a 	adds.w	r8, r8, sl
 8005394:	eb49 090b 	adc.w	r9, r9, fp
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053ac:	4688      	mov	r8, r1
 80053ae:	4691      	mov	r9, r2
 80053b0:	eb1a 0508 	adds.w	r5, sl, r8
 80053b4:	eb4b 0609 	adc.w	r6, fp, r9
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4619      	mov	r1, r3
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	f04f 0400 	mov.w	r4, #0
 80053ca:	0094      	lsls	r4, r2, #2
 80053cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	461a      	mov	r2, r3
 80053d4:	4623      	mov	r3, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	4631      	mov	r1, r6
 80053da:	f7fa ff51 	bl	8000280 <__aeabi_uldivmod>
 80053de:	4603      	mov	r3, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	461a      	mov	r2, r3
 80053e4:	4bb8      	ldr	r3, [pc, #736]	; (80056c8 <UART_SetConfig+0x6f4>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	469b      	mov	fp, r3
 80053f4:	f04f 0c00 	mov.w	ip, #0
 80053f8:	46d9      	mov	r9, fp
 80053fa:	46e2      	mov	sl, ip
 80053fc:	eb19 0309 	adds.w	r3, r9, r9
 8005400:	eb4a 040a 	adc.w	r4, sl, sl
 8005404:	4699      	mov	r9, r3
 8005406:	46a2      	mov	sl, r4
 8005408:	eb19 090b 	adds.w	r9, r9, fp
 800540c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005424:	4689      	mov	r9, r1
 8005426:	4692      	mov	sl, r2
 8005428:	eb1b 0509 	adds.w	r5, fp, r9
 800542c:	eb4c 060a 	adc.w	r6, ip, sl
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4619      	mov	r1, r3
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	0094      	lsls	r4, r2, #2
 8005444:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005448:	008b      	lsls	r3, r1, #2
 800544a:	461a      	mov	r2, r3
 800544c:	4623      	mov	r3, r4
 800544e:	4628      	mov	r0, r5
 8005450:	4631      	mov	r1, r6
 8005452:	f7fa ff15 	bl	8000280 <__aeabi_uldivmod>
 8005456:	4603      	mov	r3, r0
 8005458:	460c      	mov	r4, r1
 800545a:	461a      	mov	r2, r3
 800545c:	4b9a      	ldr	r3, [pc, #616]	; (80056c8 <UART_SetConfig+0x6f4>)
 800545e:	fba3 1302 	umull	r1, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2164      	movs	r1, #100	; 0x64
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	3332      	adds	r3, #50	; 0x32
 8005470:	4a95      	ldr	r2, [pc, #596]	; (80056c8 <UART_SetConfig+0x6f4>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547c:	4498      	add	r8, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	469b      	mov	fp, r3
 8005482:	f04f 0c00 	mov.w	ip, #0
 8005486:	46d9      	mov	r9, fp
 8005488:	46e2      	mov	sl, ip
 800548a:	eb19 0309 	adds.w	r3, r9, r9
 800548e:	eb4a 040a 	adc.w	r4, sl, sl
 8005492:	4699      	mov	r9, r3
 8005494:	46a2      	mov	sl, r4
 8005496:	eb19 090b 	adds.w	r9, r9, fp
 800549a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054b2:	4689      	mov	r9, r1
 80054b4:	4692      	mov	sl, r2
 80054b6:	eb1b 0509 	adds.w	r5, fp, r9
 80054ba:	eb4c 060a 	adc.w	r6, ip, sl
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	f04f 0400 	mov.w	r4, #0
 80054d0:	0094      	lsls	r4, r2, #2
 80054d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054d6:	008b      	lsls	r3, r1, #2
 80054d8:	461a      	mov	r2, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	4628      	mov	r0, r5
 80054de:	4631      	mov	r1, r6
 80054e0:	f7fa fece 	bl	8000280 <__aeabi_uldivmod>
 80054e4:	4603      	mov	r3, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <UART_SetConfig+0x6f4>)
 80054ec:	fba3 1302 	umull	r1, r3, r3, r2
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	2164      	movs	r1, #100	; 0x64
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	3332      	adds	r3, #50	; 0x32
 80054fe:	4a72      	ldr	r2, [pc, #456]	; (80056c8 <UART_SetConfig+0x6f4>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4442      	add	r2, r8
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	e0d0      	b.n	80056b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fe f9ae 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8005518:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	469a      	mov	sl, r3
 800551e:	f04f 0b00 	mov.w	fp, #0
 8005522:	46d0      	mov	r8, sl
 8005524:	46d9      	mov	r9, fp
 8005526:	eb18 0308 	adds.w	r3, r8, r8
 800552a:	eb49 0409 	adc.w	r4, r9, r9
 800552e:	4698      	mov	r8, r3
 8005530:	46a1      	mov	r9, r4
 8005532:	eb18 080a 	adds.w	r8, r8, sl
 8005536:	eb49 090b 	adc.w	r9, r9, fp
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005546:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800554a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800554e:	4688      	mov	r8, r1
 8005550:	4691      	mov	r9, r2
 8005552:	eb1a 0508 	adds.w	r5, sl, r8
 8005556:	eb4b 0609 	adc.w	r6, fp, r9
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4619      	mov	r1, r3
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	f04f 0400 	mov.w	r4, #0
 800556c:	0094      	lsls	r4, r2, #2
 800556e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005572:	008b      	lsls	r3, r1, #2
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	4628      	mov	r0, r5
 800557a:	4631      	mov	r1, r6
 800557c:	f7fa fe80 	bl	8000280 <__aeabi_uldivmod>
 8005580:	4603      	mov	r3, r0
 8005582:	460c      	mov	r4, r1
 8005584:	461a      	mov	r2, r3
 8005586:	4b50      	ldr	r3, [pc, #320]	; (80056c8 <UART_SetConfig+0x6f4>)
 8005588:	fba3 2302 	umull	r2, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	469b      	mov	fp, r3
 8005596:	f04f 0c00 	mov.w	ip, #0
 800559a:	46d9      	mov	r9, fp
 800559c:	46e2      	mov	sl, ip
 800559e:	eb19 0309 	adds.w	r3, r9, r9
 80055a2:	eb4a 040a 	adc.w	r4, sl, sl
 80055a6:	4699      	mov	r9, r3
 80055a8:	46a2      	mov	sl, r4
 80055aa:	eb19 090b 	adds.w	r9, r9, fp
 80055ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055c6:	4689      	mov	r9, r1
 80055c8:	4692      	mov	sl, r2
 80055ca:	eb1b 0509 	adds.w	r5, fp, r9
 80055ce:	eb4c 060a 	adc.w	r6, ip, sl
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4619      	mov	r1, r3
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	f04f 0400 	mov.w	r4, #0
 80055e4:	0094      	lsls	r4, r2, #2
 80055e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ea:	008b      	lsls	r3, r1, #2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4623      	mov	r3, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	4631      	mov	r1, r6
 80055f4:	f7fa fe44 	bl	8000280 <__aeabi_uldivmod>
 80055f8:	4603      	mov	r3, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <UART_SetConfig+0x6f4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a2d      	ldr	r2, [pc, #180]	; (80056c8 <UART_SetConfig+0x6f4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561e:	4498      	add	r8, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	469b      	mov	fp, r3
 8005624:	f04f 0c00 	mov.w	ip, #0
 8005628:	46d9      	mov	r9, fp
 800562a:	46e2      	mov	sl, ip
 800562c:	eb19 0309 	adds.w	r3, r9, r9
 8005630:	eb4a 040a 	adc.w	r4, sl, sl
 8005634:	4699      	mov	r9, r3
 8005636:	46a2      	mov	sl, r4
 8005638:	eb19 090b 	adds.w	r9, r9, fp
 800563c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005640:	f04f 0100 	mov.w	r1, #0
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005654:	4689      	mov	r9, r1
 8005656:	4692      	mov	sl, r2
 8005658:	eb1b 0509 	adds.w	r5, fp, r9
 800565c:	eb4c 060a 	adc.w	r6, ip, sl
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4619      	mov	r1, r3
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	f04f 0400 	mov.w	r4, #0
 8005672:	0094      	lsls	r4, r2, #2
 8005674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005678:	008b      	lsls	r3, r1, #2
 800567a:	461a      	mov	r2, r3
 800567c:	4623      	mov	r3, r4
 800567e:	4628      	mov	r0, r5
 8005680:	4631      	mov	r1, r6
 8005682:	f7fa fdfd 	bl	8000280 <__aeabi_uldivmod>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	461a      	mov	r2, r3
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <UART_SetConfig+0x6f4>)
 800568e:	fba3 1302 	umull	r1, r3, r3, r2
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	2164      	movs	r1, #100	; 0x64
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	3332      	adds	r3, #50	; 0x32
 80056a0:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <UART_SetConfig+0x6f4>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	f003 020f 	and.w	r2, r3, #15
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4442      	add	r2, r8
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	e7ff      	b.n	80056b6 <UART_SetConfig+0x6e2>
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c0:	40011000 	.word	0x40011000
 80056c4:	40011400 	.word	0x40011400
 80056c8:	51eb851f 	.word	0x51eb851f

080056cc <__errno>:
 80056cc:	4b01      	ldr	r3, [pc, #4]	; (80056d4 <__errno+0x8>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c

080056d8 <__sflush_r>:
 80056d8:	898a      	ldrh	r2, [r1, #12]
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	0710      	lsls	r0, r2, #28
 80056e2:	460c      	mov	r4, r1
 80056e4:	d458      	bmi.n	8005798 <__sflush_r+0xc0>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc05      	bgt.n	80056f8 <__sflush_r+0x20>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc02      	bgt.n	80056f8 <__sflush_r+0x20>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0f9      	beq.n	80056f2 <__sflush_r+0x1a>
 80056fe:	2300      	movs	r3, #0
 8005700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005704:	682f      	ldr	r7, [r5, #0]
 8005706:	6a21      	ldr	r1, [r4, #32]
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	d032      	beq.n	8005772 <__sflush_r+0x9a>
 800570c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	075a      	lsls	r2, r3, #29
 8005712:	d505      	bpl.n	8005720 <__sflush_r+0x48>
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	1ac0      	subs	r0, r0, r3
 8005718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571a:	b10b      	cbz	r3, 8005720 <__sflush_r+0x48>
 800571c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571e:	1ac0      	subs	r0, r0, r3
 8005720:	2300      	movs	r3, #0
 8005722:	4602      	mov	r2, r0
 8005724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005726:	6a21      	ldr	r1, [r4, #32]
 8005728:	4628      	mov	r0, r5
 800572a:	47b0      	blx	r6
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	d106      	bne.n	8005740 <__sflush_r+0x68>
 8005732:	6829      	ldr	r1, [r5, #0]
 8005734:	291d      	cmp	r1, #29
 8005736:	d848      	bhi.n	80057ca <__sflush_r+0xf2>
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <__sflush_r+0x108>)
 800573a:	40ca      	lsrs	r2, r1
 800573c:	07d6      	lsls	r6, r2, #31
 800573e:	d544      	bpl.n	80057ca <__sflush_r+0xf2>
 8005740:	2200      	movs	r2, #0
 8005742:	6062      	str	r2, [r4, #4]
 8005744:	04d9      	lsls	r1, r3, #19
 8005746:	6922      	ldr	r2, [r4, #16]
 8005748:	6022      	str	r2, [r4, #0]
 800574a:	d504      	bpl.n	8005756 <__sflush_r+0x7e>
 800574c:	1c42      	adds	r2, r0, #1
 800574e:	d101      	bne.n	8005754 <__sflush_r+0x7c>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b903      	cbnz	r3, 8005756 <__sflush_r+0x7e>
 8005754:	6560      	str	r0, [r4, #84]	; 0x54
 8005756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005758:	602f      	str	r7, [r5, #0]
 800575a:	2900      	cmp	r1, #0
 800575c:	d0c9      	beq.n	80056f2 <__sflush_r+0x1a>
 800575e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005762:	4299      	cmp	r1, r3
 8005764:	d002      	beq.n	800576c <__sflush_r+0x94>
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f9c0 	bl	8005aec <_free_r>
 800576c:	2000      	movs	r0, #0
 800576e:	6360      	str	r0, [r4, #52]	; 0x34
 8005770:	e7c0      	b.n	80056f4 <__sflush_r+0x1c>
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c41      	adds	r1, r0, #1
 800577a:	d1c8      	bne.n	800570e <__sflush_r+0x36>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c5      	beq.n	800570e <__sflush_r+0x36>
 8005782:	2b1d      	cmp	r3, #29
 8005784:	d001      	beq.n	800578a <__sflush_r+0xb2>
 8005786:	2b16      	cmp	r3, #22
 8005788:	d101      	bne.n	800578e <__sflush_r+0xb6>
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	e7b1      	b.n	80056f2 <__sflush_r+0x1a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x1c>
 8005798:	690f      	ldr	r7, [r1, #16]
 800579a:	2f00      	cmp	r7, #0
 800579c:	d0a9      	beq.n	80056f2 <__sflush_r+0x1a>
 800579e:	0793      	lsls	r3, r2, #30
 80057a0:	680e      	ldr	r6, [r1, #0]
 80057a2:	bf08      	it	eq
 80057a4:	694b      	ldreq	r3, [r1, #20]
 80057a6:	600f      	str	r7, [r1, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2300      	movne	r3, #0
 80057ac:	eba6 0807 	sub.w	r8, r6, r7
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	dd9c      	ble.n	80056f2 <__sflush_r+0x1a>
 80057b8:	4643      	mov	r3, r8
 80057ba:	463a      	mov	r2, r7
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b0      	blx	r6
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dc06      	bgt.n	80057d6 <__sflush_r+0xfe>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e78e      	b.n	80056f4 <__sflush_r+0x1c>
 80057d6:	4407      	add	r7, r0
 80057d8:	eba8 0800 	sub.w	r8, r8, r0
 80057dc:	e7e9      	b.n	80057b2 <__sflush_r+0xda>
 80057de:	bf00      	nop
 80057e0:	20400001 	.word	0x20400001

080057e4 <_fflush_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b1db      	cbz	r3, 8005826 <_fflush_r+0x42>
 80057ee:	b118      	cbz	r0, 80057f8 <_fflush_r+0x14>
 80057f0:	6983      	ldr	r3, [r0, #24]
 80057f2:	b90b      	cbnz	r3, 80057f8 <_fflush_r+0x14>
 80057f4:	f000 f860 	bl	80058b8 <__sinit>
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <_fflush_r+0x48>)
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d109      	bne.n	8005812 <_fflush_r+0x2e>
 80057fe:	686c      	ldr	r4, [r5, #4]
 8005800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005804:	b17b      	cbz	r3, 8005826 <_fflush_r+0x42>
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800580e:	f7ff bf63 	b.w	80056d8 <__sflush_r>
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <_fflush_r+0x4c>)
 8005814:	429c      	cmp	r4, r3
 8005816:	d101      	bne.n	800581c <_fflush_r+0x38>
 8005818:	68ac      	ldr	r4, [r5, #8]
 800581a:	e7f1      	b.n	8005800 <_fflush_r+0x1c>
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <_fflush_r+0x50>)
 800581e:	429c      	cmp	r4, r3
 8005820:	bf08      	it	eq
 8005822:	68ec      	ldreq	r4, [r5, #12]
 8005824:	e7ec      	b.n	8005800 <_fflush_r+0x1c>
 8005826:	2000      	movs	r0, #0
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	080066c0 	.word	0x080066c0
 8005830:	080066e0 	.word	0x080066e0
 8005834:	080066a0 	.word	0x080066a0

08005838 <std>:
 8005838:	2300      	movs	r3, #0
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	e9c0 3300 	strd	r3, r3, [r0]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	; 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800584e:	6183      	str	r3, [r0, #24]
 8005850:	4619      	mov	r1, r3
 8005852:	2208      	movs	r2, #8
 8005854:	305c      	adds	r0, #92	; 0x5c
 8005856:	f000 f941 	bl	8005adc <memset>
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x38>)
 800585c:	6263      	str	r3, [r4, #36]	; 0x24
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <std+0x3c>)
 8005860:	62a3      	str	r3, [r4, #40]	; 0x28
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <std+0x40>)
 8005864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <std+0x44>)
 8005868:	6224      	str	r4, [r4, #32]
 800586a:	6323      	str	r3, [r4, #48]	; 0x30
 800586c:	bd10      	pop	{r4, pc}
 800586e:	bf00      	nop
 8005870:	080062e5 	.word	0x080062e5
 8005874:	08006307 	.word	0x08006307
 8005878:	0800633f 	.word	0x0800633f
 800587c:	08006363 	.word	0x08006363

08005880 <_cleanup_r>:
 8005880:	4901      	ldr	r1, [pc, #4]	; (8005888 <_cleanup_r+0x8>)
 8005882:	f000 b885 	b.w	8005990 <_fwalk_reent>
 8005886:	bf00      	nop
 8005888:	080057e5 	.word	0x080057e5

0800588c <__sfmoreglue>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	1e4a      	subs	r2, r1, #1
 8005890:	2568      	movs	r5, #104	; 0x68
 8005892:	4355      	muls	r5, r2
 8005894:	460e      	mov	r6, r1
 8005896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800589a:	f000 f975 	bl	8005b88 <_malloc_r>
 800589e:	4604      	mov	r4, r0
 80058a0:	b140      	cbz	r0, 80058b4 <__sfmoreglue+0x28>
 80058a2:	2100      	movs	r1, #0
 80058a4:	e9c0 1600 	strd	r1, r6, [r0]
 80058a8:	300c      	adds	r0, #12
 80058aa:	60a0      	str	r0, [r4, #8]
 80058ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058b0:	f000 f914 	bl	8005adc <memset>
 80058b4:	4620      	mov	r0, r4
 80058b6:	bd70      	pop	{r4, r5, r6, pc}

080058b8 <__sinit>:
 80058b8:	6983      	ldr	r3, [r0, #24]
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	bb33      	cbnz	r3, 800590e <__sinit+0x56>
 80058c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058c4:	6503      	str	r3, [r0, #80]	; 0x50
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <__sinit+0x58>)
 80058c8:	4a12      	ldr	r2, [pc, #72]	; (8005914 <__sinit+0x5c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6282      	str	r2, [r0, #40]	; 0x28
 80058ce:	4298      	cmp	r0, r3
 80058d0:	bf04      	itt	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	6183      	streq	r3, [r0, #24]
 80058d6:	f000 f81f 	bl	8005918 <__sfp>
 80058da:	6060      	str	r0, [r4, #4]
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f81b 	bl	8005918 <__sfp>
 80058e2:	60a0      	str	r0, [r4, #8]
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 f817 	bl	8005918 <__sfp>
 80058ea:	2200      	movs	r2, #0
 80058ec:	60e0      	str	r0, [r4, #12]
 80058ee:	2104      	movs	r1, #4
 80058f0:	6860      	ldr	r0, [r4, #4]
 80058f2:	f7ff ffa1 	bl	8005838 <std>
 80058f6:	2201      	movs	r2, #1
 80058f8:	2109      	movs	r1, #9
 80058fa:	68a0      	ldr	r0, [r4, #8]
 80058fc:	f7ff ff9c 	bl	8005838 <std>
 8005900:	2202      	movs	r2, #2
 8005902:	2112      	movs	r1, #18
 8005904:	68e0      	ldr	r0, [r4, #12]
 8005906:	f7ff ff97 	bl	8005838 <std>
 800590a:	2301      	movs	r3, #1
 800590c:	61a3      	str	r3, [r4, #24]
 800590e:	bd10      	pop	{r4, pc}
 8005910:	08006700 	.word	0x08006700
 8005914:	08005881 	.word	0x08005881

08005918 <__sfp>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <__sfp+0x70>)
 800591c:	681e      	ldr	r6, [r3, #0]
 800591e:	69b3      	ldr	r3, [r6, #24]
 8005920:	4607      	mov	r7, r0
 8005922:	b913      	cbnz	r3, 800592a <__sfp+0x12>
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff ffc7 	bl	80058b8 <__sinit>
 800592a:	3648      	adds	r6, #72	; 0x48
 800592c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	d503      	bpl.n	800593c <__sfp+0x24>
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	b133      	cbz	r3, 8005946 <__sfp+0x2e>
 8005938:	6836      	ldr	r6, [r6, #0]
 800593a:	e7f7      	b.n	800592c <__sfp+0x14>
 800593c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005940:	b16d      	cbz	r5, 800595e <__sfp+0x46>
 8005942:	3468      	adds	r4, #104	; 0x68
 8005944:	e7f4      	b.n	8005930 <__sfp+0x18>
 8005946:	2104      	movs	r1, #4
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ff9f 	bl	800588c <__sfmoreglue>
 800594e:	6030      	str	r0, [r6, #0]
 8005950:	2800      	cmp	r0, #0
 8005952:	d1f1      	bne.n	8005938 <__sfp+0x20>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4604      	mov	r4, r0
 800595a:	4620      	mov	r0, r4
 800595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <__sfp+0x74>)
 8005960:	6665      	str	r5, [r4, #100]	; 0x64
 8005962:	e9c4 5500 	strd	r5, r5, [r4]
 8005966:	60a5      	str	r5, [r4, #8]
 8005968:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800596c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005970:	2208      	movs	r2, #8
 8005972:	4629      	mov	r1, r5
 8005974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005978:	f000 f8b0 	bl	8005adc <memset>
 800597c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005984:	e7e9      	b.n	800595a <__sfp+0x42>
 8005986:	bf00      	nop
 8005988:	08006700 	.word	0x08006700
 800598c:	ffff0001 	.word	0xffff0001

08005990 <_fwalk_reent>:
 8005990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005994:	4680      	mov	r8, r0
 8005996:	4689      	mov	r9, r1
 8005998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800599c:	2600      	movs	r6, #0
 800599e:	b914      	cbnz	r4, 80059a6 <_fwalk_reent+0x16>
 80059a0:	4630      	mov	r0, r6
 80059a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059aa:	3f01      	subs	r7, #1
 80059ac:	d501      	bpl.n	80059b2 <_fwalk_reent+0x22>
 80059ae:	6824      	ldr	r4, [r4, #0]
 80059b0:	e7f5      	b.n	800599e <_fwalk_reent+0xe>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d907      	bls.n	80059c8 <_fwalk_reent+0x38>
 80059b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059bc:	3301      	adds	r3, #1
 80059be:	d003      	beq.n	80059c8 <_fwalk_reent+0x38>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4640      	mov	r0, r8
 80059c4:	47c8      	blx	r9
 80059c6:	4306      	orrs	r6, r0
 80059c8:	3568      	adds	r5, #104	; 0x68
 80059ca:	e7ee      	b.n	80059aa <_fwalk_reent+0x1a>

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4e0d      	ldr	r6, [pc, #52]	; (8005a04 <__libc_init_array+0x38>)
 80059d0:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d2:	1ba4      	subs	r4, r4, r6
 80059d4:	10a4      	asrs	r4, r4, #2
 80059d6:	2500      	movs	r5, #0
 80059d8:	42a5      	cmp	r5, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	4e0b      	ldr	r6, [pc, #44]	; (8005a0c <__libc_init_array+0x40>)
 80059de:	4c0c      	ldr	r4, [pc, #48]	; (8005a10 <__libc_init_array+0x44>)
 80059e0:	f000 fdee 	bl	80065c0 <_init>
 80059e4:	1ba4      	subs	r4, r4, r6
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	2500      	movs	r5, #0
 80059ea:	42a5      	cmp	r5, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f4:	4798      	blx	r3
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059fe:	4798      	blx	r3
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08006740 	.word	0x08006740
 8005a08:	08006740 	.word	0x08006740
 8005a0c:	08006740 	.word	0x08006740
 8005a10:	08006744 	.word	0x08006744

08005a14 <__swhatbuf_r>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	460e      	mov	r6, r1
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	b096      	sub	sp, #88	; 0x58
 8005a20:	4614      	mov	r4, r2
 8005a22:	461d      	mov	r5, r3
 8005a24:	da07      	bge.n	8005a36 <__swhatbuf_r+0x22>
 8005a26:	2300      	movs	r3, #0
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	89b3      	ldrh	r3, [r6, #12]
 8005a2c:	061a      	lsls	r2, r3, #24
 8005a2e:	d410      	bmi.n	8005a52 <__swhatbuf_r+0x3e>
 8005a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a34:	e00e      	b.n	8005a54 <__swhatbuf_r+0x40>
 8005a36:	466a      	mov	r2, sp
 8005a38:	f000 fd7a 	bl	8006530 <_fstat_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	dbf2      	blt.n	8005a26 <__swhatbuf_r+0x12>
 8005a40:	9a01      	ldr	r2, [sp, #4]
 8005a42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a4a:	425a      	negs	r2, r3
 8005a4c:	415a      	adcs	r2, r3
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	e7ee      	b.n	8005a30 <__swhatbuf_r+0x1c>
 8005a52:	2340      	movs	r3, #64	; 0x40
 8005a54:	2000      	movs	r0, #0
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	b016      	add	sp, #88	; 0x58
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}

08005a5c <__smakebuf_r>:
 8005a5c:	898b      	ldrh	r3, [r1, #12]
 8005a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a60:	079d      	lsls	r5, r3, #30
 8005a62:	4606      	mov	r6, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	d507      	bpl.n	8005a78 <__smakebuf_r+0x1c>
 8005a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	6123      	str	r3, [r4, #16]
 8005a70:	2301      	movs	r3, #1
 8005a72:	6163      	str	r3, [r4, #20]
 8005a74:	b002      	add	sp, #8
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	ab01      	add	r3, sp, #4
 8005a7a:	466a      	mov	r2, sp
 8005a7c:	f7ff ffca 	bl	8005a14 <__swhatbuf_r>
 8005a80:	9900      	ldr	r1, [sp, #0]
 8005a82:	4605      	mov	r5, r0
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 f87f 	bl	8005b88 <_malloc_r>
 8005a8a:	b948      	cbnz	r0, 8005aa0 <__smakebuf_r+0x44>
 8005a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a90:	059a      	lsls	r2, r3, #22
 8005a92:	d4ef      	bmi.n	8005a74 <__smakebuf_r+0x18>
 8005a94:	f023 0303 	bic.w	r3, r3, #3
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	e7e3      	b.n	8005a68 <__smakebuf_r+0xc>
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <__smakebuf_r+0x7c>)
 8005aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	6020      	str	r0, [r4, #0]
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	6163      	str	r3, [r4, #20]
 8005ab2:	9b01      	ldr	r3, [sp, #4]
 8005ab4:	6120      	str	r0, [r4, #16]
 8005ab6:	b15b      	cbz	r3, 8005ad0 <__smakebuf_r+0x74>
 8005ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005abc:	4630      	mov	r0, r6
 8005abe:	f000 fd49 	bl	8006554 <_isatty_r>
 8005ac2:	b128      	cbz	r0, 8005ad0 <__smakebuf_r+0x74>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	431d      	orrs	r5, r3
 8005ad4:	81a5      	strh	r5, [r4, #12]
 8005ad6:	e7cd      	b.n	8005a74 <__smakebuf_r+0x18>
 8005ad8:	08005881 	.word	0x08005881

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <_free_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4605      	mov	r5, r0
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d045      	beq.n	8005b80 <_free_r+0x94>
 8005af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af8:	1f0c      	subs	r4, r1, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfb8      	it	lt
 8005afe:	18e4      	addlt	r4, r4, r3
 8005b00:	f000 fd4a 	bl	8006598 <__malloc_lock>
 8005b04:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <_free_r+0x98>)
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	4610      	mov	r0, r2
 8005b0a:	b933      	cbnz	r3, 8005b1a <_free_r+0x2e>
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	6014      	str	r4, [r2, #0]
 8005b10:	4628      	mov	r0, r5
 8005b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b16:	f000 bd40 	b.w	800659a <__malloc_unlock>
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	d90c      	bls.n	8005b38 <_free_r+0x4c>
 8005b1e:	6821      	ldr	r1, [r4, #0]
 8005b20:	1862      	adds	r2, r4, r1
 8005b22:	4293      	cmp	r3, r2
 8005b24:	bf04      	itt	eq
 8005b26:	681a      	ldreq	r2, [r3, #0]
 8005b28:	685b      	ldreq	r3, [r3, #4]
 8005b2a:	6063      	str	r3, [r4, #4]
 8005b2c:	bf04      	itt	eq
 8005b2e:	1852      	addeq	r2, r2, r1
 8005b30:	6022      	streq	r2, [r4, #0]
 8005b32:	6004      	str	r4, [r0, #0]
 8005b34:	e7ec      	b.n	8005b10 <_free_r+0x24>
 8005b36:	4613      	mov	r3, r2
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	b10a      	cbz	r2, 8005b40 <_free_r+0x54>
 8005b3c:	42a2      	cmp	r2, r4
 8005b3e:	d9fa      	bls.n	8005b36 <_free_r+0x4a>
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	1858      	adds	r0, r3, r1
 8005b44:	42a0      	cmp	r0, r4
 8005b46:	d10b      	bne.n	8005b60 <_free_r+0x74>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	4401      	add	r1, r0
 8005b4c:	1858      	adds	r0, r3, r1
 8005b4e:	4282      	cmp	r2, r0
 8005b50:	6019      	str	r1, [r3, #0]
 8005b52:	d1dd      	bne.n	8005b10 <_free_r+0x24>
 8005b54:	6810      	ldr	r0, [r2, #0]
 8005b56:	6852      	ldr	r2, [r2, #4]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	6019      	str	r1, [r3, #0]
 8005b5e:	e7d7      	b.n	8005b10 <_free_r+0x24>
 8005b60:	d902      	bls.n	8005b68 <_free_r+0x7c>
 8005b62:	230c      	movs	r3, #12
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	e7d3      	b.n	8005b10 <_free_r+0x24>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	1821      	adds	r1, r4, r0
 8005b6c:	428a      	cmp	r2, r1
 8005b6e:	bf04      	itt	eq
 8005b70:	6811      	ldreq	r1, [r2, #0]
 8005b72:	6852      	ldreq	r2, [r2, #4]
 8005b74:	6062      	str	r2, [r4, #4]
 8005b76:	bf04      	itt	eq
 8005b78:	1809      	addeq	r1, r1, r0
 8005b7a:	6021      	streq	r1, [r4, #0]
 8005b7c:	605c      	str	r4, [r3, #4]
 8005b7e:	e7c7      	b.n	8005b10 <_free_r+0x24>
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	bf00      	nop
 8005b84:	2000009c 	.word	0x2000009c

08005b88 <_malloc_r>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	1ccd      	adds	r5, r1, #3
 8005b8c:	f025 0503 	bic.w	r5, r5, #3
 8005b90:	3508      	adds	r5, #8
 8005b92:	2d0c      	cmp	r5, #12
 8005b94:	bf38      	it	cc
 8005b96:	250c      	movcc	r5, #12
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	db01      	blt.n	8005ba2 <_malloc_r+0x1a>
 8005b9e:	42a9      	cmp	r1, r5
 8005ba0:	d903      	bls.n	8005baa <_malloc_r+0x22>
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
 8005baa:	f000 fcf5 	bl	8006598 <__malloc_lock>
 8005bae:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <_malloc_r+0xac>)
 8005bb0:	6814      	ldr	r4, [r2, #0]
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	b991      	cbnz	r1, 8005bdc <_malloc_r+0x54>
 8005bb6:	4c20      	ldr	r4, [pc, #128]	; (8005c38 <_malloc_r+0xb0>)
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	b91b      	cbnz	r3, 8005bc4 <_malloc_r+0x3c>
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f000 fb81 	bl	80062c4 <_sbrk_r>
 8005bc2:	6020      	str	r0, [r4, #0]
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f000 fb7c 	bl	80062c4 <_sbrk_r>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d124      	bne.n	8005c1a <_malloc_r+0x92>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f000 fce0 	bl	800659a <__malloc_unlock>
 8005bda:	e7e4      	b.n	8005ba6 <_malloc_r+0x1e>
 8005bdc:	680b      	ldr	r3, [r1, #0]
 8005bde:	1b5b      	subs	r3, r3, r5
 8005be0:	d418      	bmi.n	8005c14 <_malloc_r+0x8c>
 8005be2:	2b0b      	cmp	r3, #11
 8005be4:	d90f      	bls.n	8005c06 <_malloc_r+0x7e>
 8005be6:	600b      	str	r3, [r1, #0]
 8005be8:	50cd      	str	r5, [r1, r3]
 8005bea:	18cc      	adds	r4, r1, r3
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 fcd4 	bl	800659a <__malloc_unlock>
 8005bf2:	f104 000b 	add.w	r0, r4, #11
 8005bf6:	1d23      	adds	r3, r4, #4
 8005bf8:	f020 0007 	bic.w	r0, r0, #7
 8005bfc:	1ac3      	subs	r3, r0, r3
 8005bfe:	d0d3      	beq.n	8005ba8 <_malloc_r+0x20>
 8005c00:	425a      	negs	r2, r3
 8005c02:	50e2      	str	r2, [r4, r3]
 8005c04:	e7d0      	b.n	8005ba8 <_malloc_r+0x20>
 8005c06:	428c      	cmp	r4, r1
 8005c08:	684b      	ldr	r3, [r1, #4]
 8005c0a:	bf16      	itet	ne
 8005c0c:	6063      	strne	r3, [r4, #4]
 8005c0e:	6013      	streq	r3, [r2, #0]
 8005c10:	460c      	movne	r4, r1
 8005c12:	e7eb      	b.n	8005bec <_malloc_r+0x64>
 8005c14:	460c      	mov	r4, r1
 8005c16:	6849      	ldr	r1, [r1, #4]
 8005c18:	e7cc      	b.n	8005bb4 <_malloc_r+0x2c>
 8005c1a:	1cc4      	adds	r4, r0, #3
 8005c1c:	f024 0403 	bic.w	r4, r4, #3
 8005c20:	42a0      	cmp	r0, r4
 8005c22:	d005      	beq.n	8005c30 <_malloc_r+0xa8>
 8005c24:	1a21      	subs	r1, r4, r0
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fb4c 	bl	80062c4 <_sbrk_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d0cf      	beq.n	8005bd0 <_malloc_r+0x48>
 8005c30:	6025      	str	r5, [r4, #0]
 8005c32:	e7db      	b.n	8005bec <_malloc_r+0x64>
 8005c34:	2000009c 	.word	0x2000009c
 8005c38:	200000a0 	.word	0x200000a0

08005c3c <__sfputc_r>:
 8005c3c:	6893      	ldr	r3, [r2, #8]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	b410      	push	{r4}
 8005c44:	6093      	str	r3, [r2, #8]
 8005c46:	da08      	bge.n	8005c5a <__sfputc_r+0x1e>
 8005c48:	6994      	ldr	r4, [r2, #24]
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	db01      	blt.n	8005c52 <__sfputc_r+0x16>
 8005c4e:	290a      	cmp	r1, #10
 8005c50:	d103      	bne.n	8005c5a <__sfputc_r+0x1e>
 8005c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c56:	f000 bb89 	b.w	800636c <__swbuf_r>
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	1c58      	adds	r0, r3, #1
 8005c5e:	6010      	str	r0, [r2, #0]
 8005c60:	7019      	strb	r1, [r3, #0]
 8005c62:	4608      	mov	r0, r1
 8005c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <__sfputs_r>:
 8005c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	460f      	mov	r7, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	18d5      	adds	r5, r2, r3
 8005c74:	42ac      	cmp	r4, r5
 8005c76:	d101      	bne.n	8005c7c <__sfputs_r+0x12>
 8005c78:	2000      	movs	r0, #0
 8005c7a:	e007      	b.n	8005c8c <__sfputs_r+0x22>
 8005c7c:	463a      	mov	r2, r7
 8005c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7ff ffda 	bl	8005c3c <__sfputc_r>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d1f3      	bne.n	8005c74 <__sfputs_r+0xa>
 8005c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c90 <_vfiprintf_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	b09d      	sub	sp, #116	; 0x74
 8005c98:	4617      	mov	r7, r2
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	b118      	cbz	r0, 8005ca8 <_vfiprintf_r+0x18>
 8005ca0:	6983      	ldr	r3, [r0, #24]
 8005ca2:	b90b      	cbnz	r3, 8005ca8 <_vfiprintf_r+0x18>
 8005ca4:	f7ff fe08 	bl	80058b8 <__sinit>
 8005ca8:	4b7c      	ldr	r3, [pc, #496]	; (8005e9c <_vfiprintf_r+0x20c>)
 8005caa:	429c      	cmp	r4, r3
 8005cac:	d158      	bne.n	8005d60 <_vfiprintf_r+0xd0>
 8005cae:	6874      	ldr	r4, [r6, #4]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	0718      	lsls	r0, r3, #28
 8005cb4:	d55e      	bpl.n	8005d74 <_vfiprintf_r+0xe4>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d05b      	beq.n	8005d74 <_vfiprintf_r+0xe4>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc6:	2330      	movs	r3, #48	; 0x30
 8005cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ccc:	9503      	str	r5, [sp, #12]
 8005cce:	f04f 0b01 	mov.w	fp, #1
 8005cd2:	46b8      	mov	r8, r7
 8005cd4:	4645      	mov	r5, r8
 8005cd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cda:	b10b      	cbz	r3, 8005ce0 <_vfiprintf_r+0x50>
 8005cdc:	2b25      	cmp	r3, #37	; 0x25
 8005cde:	d154      	bne.n	8005d8a <_vfiprintf_r+0xfa>
 8005ce0:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ce4:	d00b      	beq.n	8005cfe <_vfiprintf_r+0x6e>
 8005ce6:	4653      	mov	r3, sl
 8005ce8:	463a      	mov	r2, r7
 8005cea:	4621      	mov	r1, r4
 8005cec:	4630      	mov	r0, r6
 8005cee:	f7ff ffbc 	bl	8005c6a <__sfputs_r>
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	f000 80c2 	beq.w	8005e7c <_vfiprintf_r+0x1ec>
 8005cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfa:	4453      	add	r3, sl
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	f898 3000 	ldrb.w	r3, [r8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80ba 	beq.w	8005e7c <_vfiprintf_r+0x1ec>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	9307      	str	r3, [sp, #28]
 8005d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1c:	46a8      	mov	r8, r5
 8005d1e:	2205      	movs	r2, #5
 8005d20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005d24:	485e      	ldr	r0, [pc, #376]	; (8005ea0 <_vfiprintf_r+0x210>)
 8005d26:	f7fa fa5b 	bl	80001e0 <memchr>
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	bb78      	cbnz	r0, 8005d8e <_vfiprintf_r+0xfe>
 8005d2e:	06d9      	lsls	r1, r3, #27
 8005d30:	bf44      	itt	mi
 8005d32:	2220      	movmi	r2, #32
 8005d34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d38:	071a      	lsls	r2, r3, #28
 8005d3a:	bf44      	itt	mi
 8005d3c:	222b      	movmi	r2, #43	; 0x2b
 8005d3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d42:	782a      	ldrb	r2, [r5, #0]
 8005d44:	2a2a      	cmp	r2, #42	; 0x2a
 8005d46:	d02a      	beq.n	8005d9e <_vfiprintf_r+0x10e>
 8005d48:	9a07      	ldr	r2, [sp, #28]
 8005d4a:	46a8      	mov	r8, r5
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	250a      	movs	r5, #10
 8005d50:	4641      	mov	r1, r8
 8005d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d56:	3b30      	subs	r3, #48	; 0x30
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d969      	bls.n	8005e30 <_vfiprintf_r+0x1a0>
 8005d5c:	b360      	cbz	r0, 8005db8 <_vfiprintf_r+0x128>
 8005d5e:	e024      	b.n	8005daa <_vfiprintf_r+0x11a>
 8005d60:	4b50      	ldr	r3, [pc, #320]	; (8005ea4 <_vfiprintf_r+0x214>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <_vfiprintf_r+0xda>
 8005d66:	68b4      	ldr	r4, [r6, #8]
 8005d68:	e7a2      	b.n	8005cb0 <_vfiprintf_r+0x20>
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <_vfiprintf_r+0x218>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68f4      	ldreq	r4, [r6, #12]
 8005d72:	e79d      	b.n	8005cb0 <_vfiprintf_r+0x20>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 fb5c 	bl	8006434 <__swsetup_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d09d      	beq.n	8005cbc <_vfiprintf_r+0x2c>
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	b01d      	add	sp, #116	; 0x74
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	46a8      	mov	r8, r5
 8005d8c:	e7a2      	b.n	8005cd4 <_vfiprintf_r+0x44>
 8005d8e:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <_vfiprintf_r+0x210>)
 8005d90:	1a80      	subs	r0, r0, r2
 8005d92:	fa0b f000 	lsl.w	r0, fp, r0
 8005d96:	4318      	orrs	r0, r3
 8005d98:	9004      	str	r0, [sp, #16]
 8005d9a:	4645      	mov	r5, r8
 8005d9c:	e7be      	b.n	8005d1c <_vfiprintf_r+0x8c>
 8005d9e:	9a03      	ldr	r2, [sp, #12]
 8005da0:	1d11      	adds	r1, r2, #4
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	9103      	str	r1, [sp, #12]
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	db01      	blt.n	8005dae <_vfiprintf_r+0x11e>
 8005daa:	9207      	str	r2, [sp, #28]
 8005dac:	e004      	b.n	8005db8 <_vfiprintf_r+0x128>
 8005dae:	4252      	negs	r2, r2
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	9207      	str	r2, [sp, #28]
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	f898 3000 	ldrb.w	r3, [r8]
 8005dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dbe:	d10e      	bne.n	8005dde <_vfiprintf_r+0x14e>
 8005dc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc6:	d138      	bne.n	8005e3a <_vfiprintf_r+0x1aa>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	1d1a      	adds	r2, r3, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	9203      	str	r2, [sp, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfb8      	it	lt
 8005dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dd8:	f108 0802 	add.w	r8, r8, #2
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	4d33      	ldr	r5, [pc, #204]	; (8005eac <_vfiprintf_r+0x21c>)
 8005de0:	f898 1000 	ldrb.w	r1, [r8]
 8005de4:	2203      	movs	r2, #3
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fa f9fa 	bl	80001e0 <memchr>
 8005dec:	b140      	cbz	r0, 8005e00 <_vfiprintf_r+0x170>
 8005dee:	2340      	movs	r3, #64	; 0x40
 8005df0:	1b40      	subs	r0, r0, r5
 8005df2:	fa03 f000 	lsl.w	r0, r3, r0
 8005df6:	9b04      	ldr	r3, [sp, #16]
 8005df8:	4303      	orrs	r3, r0
 8005dfa:	f108 0801 	add.w	r8, r8, #1
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	f898 1000 	ldrb.w	r1, [r8]
 8005e04:	482a      	ldr	r0, [pc, #168]	; (8005eb0 <_vfiprintf_r+0x220>)
 8005e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e0a:	2206      	movs	r2, #6
 8005e0c:	f108 0701 	add.w	r7, r8, #1
 8005e10:	f7fa f9e6 	bl	80001e0 <memchr>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d037      	beq.n	8005e88 <_vfiprintf_r+0x1f8>
 8005e18:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <_vfiprintf_r+0x224>)
 8005e1a:	bb1b      	cbnz	r3, 8005e64 <_vfiprintf_r+0x1d4>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	3307      	adds	r3, #7
 8005e20:	f023 0307 	bic.w	r3, r3, #7
 8005e24:	3308      	adds	r3, #8
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2a:	444b      	add	r3, r9
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2e:	e750      	b.n	8005cd2 <_vfiprintf_r+0x42>
 8005e30:	fb05 3202 	mla	r2, r5, r2, r3
 8005e34:	2001      	movs	r0, #1
 8005e36:	4688      	mov	r8, r1
 8005e38:	e78a      	b.n	8005d50 <_vfiprintf_r+0xc0>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f108 0801 	add.w	r8, r8, #1
 8005e40:	9305      	str	r3, [sp, #20]
 8005e42:	4619      	mov	r1, r3
 8005e44:	250a      	movs	r5, #10
 8005e46:	4640      	mov	r0, r8
 8005e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e4c:	3a30      	subs	r2, #48	; 0x30
 8005e4e:	2a09      	cmp	r2, #9
 8005e50:	d903      	bls.n	8005e5a <_vfiprintf_r+0x1ca>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0c3      	beq.n	8005dde <_vfiprintf_r+0x14e>
 8005e56:	9105      	str	r1, [sp, #20]
 8005e58:	e7c1      	b.n	8005dde <_vfiprintf_r+0x14e>
 8005e5a:	fb05 2101 	mla	r1, r5, r1, r2
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4680      	mov	r8, r0
 8005e62:	e7f0      	b.n	8005e46 <_vfiprintf_r+0x1b6>
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <_vfiprintf_r+0x228>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f3af 8000 	nop.w
 8005e74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e78:	4681      	mov	r9, r0
 8005e7a:	d1d5      	bne.n	8005e28 <_vfiprintf_r+0x198>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	065b      	lsls	r3, r3, #25
 8005e80:	f53f af7e 	bmi.w	8005d80 <_vfiprintf_r+0xf0>
 8005e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e86:	e77d      	b.n	8005d84 <_vfiprintf_r+0xf4>
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <_vfiprintf_r+0x228>)
 8005e90:	a904      	add	r1, sp, #16
 8005e92:	4630      	mov	r0, r6
 8005e94:	f000 f888 	bl	8005fa8 <_printf_i>
 8005e98:	e7ec      	b.n	8005e74 <_vfiprintf_r+0x1e4>
 8005e9a:	bf00      	nop
 8005e9c:	080066c0 	.word	0x080066c0
 8005ea0:	08006704 	.word	0x08006704
 8005ea4:	080066e0 	.word	0x080066e0
 8005ea8:	080066a0 	.word	0x080066a0
 8005eac:	0800670a 	.word	0x0800670a
 8005eb0:	0800670e 	.word	0x0800670e
 8005eb4:	00000000 	.word	0x00000000
 8005eb8:	08005c6b 	.word	0x08005c6b

08005ebc <_printf_common>:
 8005ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	4691      	mov	r9, r2
 8005ec2:	461f      	mov	r7, r3
 8005ec4:	688a      	ldr	r2, [r1, #8]
 8005ec6:	690b      	ldr	r3, [r1, #16]
 8005ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	bfb8      	it	lt
 8005ed0:	4613      	movlt	r3, r2
 8005ed2:	f8c9 3000 	str.w	r3, [r9]
 8005ed6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eda:	4606      	mov	r6, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	b112      	cbz	r2, 8005ee6 <_printf_common+0x2a>
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	f8c9 3000 	str.w	r3, [r9]
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	0699      	lsls	r1, r3, #26
 8005eea:	bf42      	ittt	mi
 8005eec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ef0:	3302      	addmi	r3, #2
 8005ef2:	f8c9 3000 	strmi.w	r3, [r9]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	f015 0506 	ands.w	r5, r5, #6
 8005efc:	d107      	bne.n	8005f0e <_printf_common+0x52>
 8005efe:	f104 0a19 	add.w	sl, r4, #25
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	f8d9 2000 	ldr.w	r2, [r9]
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	42ab      	cmp	r3, r5
 8005f0c:	dc28      	bgt.n	8005f60 <_printf_common+0xa4>
 8005f0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	3300      	adds	r3, #0
 8005f16:	bf18      	it	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	0692      	lsls	r2, r2, #26
 8005f1c:	d42d      	bmi.n	8005f7a <_printf_common+0xbe>
 8005f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f22:	4639      	mov	r1, r7
 8005f24:	4630      	mov	r0, r6
 8005f26:	47c0      	blx	r8
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d020      	beq.n	8005f6e <_printf_common+0xb2>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	68e5      	ldr	r5, [r4, #12]
 8005f30:	f8d9 2000 	ldr.w	r2, [r9]
 8005f34:	f003 0306 	and.w	r3, r3, #6
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	bf08      	it	eq
 8005f3c:	1aad      	subeq	r5, r5, r2
 8005f3e:	68a3      	ldr	r3, [r4, #8]
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	bf0c      	ite	eq
 8005f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f48:	2500      	movne	r5, #0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bfc4      	itt	gt
 8005f4e:	1a9b      	subgt	r3, r3, r2
 8005f50:	18ed      	addgt	r5, r5, r3
 8005f52:	f04f 0900 	mov.w	r9, #0
 8005f56:	341a      	adds	r4, #26
 8005f58:	454d      	cmp	r5, r9
 8005f5a:	d11a      	bne.n	8005f92 <_printf_common+0xd6>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e008      	b.n	8005f72 <_printf_common+0xb6>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4652      	mov	r2, sl
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d103      	bne.n	8005f76 <_printf_common+0xba>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	3501      	adds	r5, #1
 8005f78:	e7c3      	b.n	8005f02 <_printf_common+0x46>
 8005f7a:	18e1      	adds	r1, r4, r3
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	2030      	movs	r0, #48	; 0x30
 8005f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f84:	4422      	add	r2, r4
 8005f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f8e:	3302      	adds	r3, #2
 8005f90:	e7c5      	b.n	8005f1e <_printf_common+0x62>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4622      	mov	r2, r4
 8005f96:	4639      	mov	r1, r7
 8005f98:	4630      	mov	r0, r6
 8005f9a:	47c0      	blx	r8
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d0e6      	beq.n	8005f6e <_printf_common+0xb2>
 8005fa0:	f109 0901 	add.w	r9, r9, #1
 8005fa4:	e7d8      	b.n	8005f58 <_printf_common+0x9c>
	...

08005fa8 <_printf_i>:
 8005fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	7e09      	ldrb	r1, [r1, #24]
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	296e      	cmp	r1, #110	; 0x6e
 8005fb8:	4617      	mov	r7, r2
 8005fba:	4606      	mov	r6, r0
 8005fbc:	4698      	mov	r8, r3
 8005fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fc0:	f000 80b3 	beq.w	800612a <_printf_i+0x182>
 8005fc4:	d822      	bhi.n	800600c <_printf_i+0x64>
 8005fc6:	2963      	cmp	r1, #99	; 0x63
 8005fc8:	d036      	beq.n	8006038 <_printf_i+0x90>
 8005fca:	d80a      	bhi.n	8005fe2 <_printf_i+0x3a>
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	f000 80b9 	beq.w	8006144 <_printf_i+0x19c>
 8005fd2:	2958      	cmp	r1, #88	; 0x58
 8005fd4:	f000 8083 	beq.w	80060de <_printf_i+0x136>
 8005fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fe0:	e032      	b.n	8006048 <_printf_i+0xa0>
 8005fe2:	2964      	cmp	r1, #100	; 0x64
 8005fe4:	d001      	beq.n	8005fea <_printf_i+0x42>
 8005fe6:	2969      	cmp	r1, #105	; 0x69
 8005fe8:	d1f6      	bne.n	8005fd8 <_printf_i+0x30>
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	0605      	lsls	r5, r0, #24
 8005ff0:	f103 0104 	add.w	r1, r3, #4
 8005ff4:	d52a      	bpl.n	800604c <_printf_i+0xa4>
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6011      	str	r1, [r2, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da03      	bge.n	8006006 <_printf_i+0x5e>
 8005ffe:	222d      	movs	r2, #45	; 0x2d
 8006000:	425b      	negs	r3, r3
 8006002:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006006:	486f      	ldr	r0, [pc, #444]	; (80061c4 <_printf_i+0x21c>)
 8006008:	220a      	movs	r2, #10
 800600a:	e039      	b.n	8006080 <_printf_i+0xd8>
 800600c:	2973      	cmp	r1, #115	; 0x73
 800600e:	f000 809d 	beq.w	800614c <_printf_i+0x1a4>
 8006012:	d808      	bhi.n	8006026 <_printf_i+0x7e>
 8006014:	296f      	cmp	r1, #111	; 0x6f
 8006016:	d020      	beq.n	800605a <_printf_i+0xb2>
 8006018:	2970      	cmp	r1, #112	; 0x70
 800601a:	d1dd      	bne.n	8005fd8 <_printf_i+0x30>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	f043 0320 	orr.w	r3, r3, #32
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	e003      	b.n	800602e <_printf_i+0x86>
 8006026:	2975      	cmp	r1, #117	; 0x75
 8006028:	d017      	beq.n	800605a <_printf_i+0xb2>
 800602a:	2978      	cmp	r1, #120	; 0x78
 800602c:	d1d4      	bne.n	8005fd8 <_printf_i+0x30>
 800602e:	2378      	movs	r3, #120	; 0x78
 8006030:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006034:	4864      	ldr	r0, [pc, #400]	; (80061c8 <_printf_i+0x220>)
 8006036:	e055      	b.n	80060e4 <_printf_i+0x13c>
 8006038:	6813      	ldr	r3, [r2, #0]
 800603a:	1d19      	adds	r1, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6011      	str	r1, [r2, #0]
 8006040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006048:	2301      	movs	r3, #1
 800604a:	e08c      	b.n	8006166 <_printf_i+0x1be>
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6011      	str	r1, [r2, #0]
 8006050:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006054:	bf18      	it	ne
 8006056:	b21b      	sxthne	r3, r3
 8006058:	e7cf      	b.n	8005ffa <_printf_i+0x52>
 800605a:	6813      	ldr	r3, [r2, #0]
 800605c:	6825      	ldr	r5, [r4, #0]
 800605e:	1d18      	adds	r0, r3, #4
 8006060:	6010      	str	r0, [r2, #0]
 8006062:	0628      	lsls	r0, r5, #24
 8006064:	d501      	bpl.n	800606a <_printf_i+0xc2>
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	e002      	b.n	8006070 <_printf_i+0xc8>
 800606a:	0668      	lsls	r0, r5, #25
 800606c:	d5fb      	bpl.n	8006066 <_printf_i+0xbe>
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	4854      	ldr	r0, [pc, #336]	; (80061c4 <_printf_i+0x21c>)
 8006072:	296f      	cmp	r1, #111	; 0x6f
 8006074:	bf14      	ite	ne
 8006076:	220a      	movne	r2, #10
 8006078:	2208      	moveq	r2, #8
 800607a:	2100      	movs	r1, #0
 800607c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006080:	6865      	ldr	r5, [r4, #4]
 8006082:	60a5      	str	r5, [r4, #8]
 8006084:	2d00      	cmp	r5, #0
 8006086:	f2c0 8095 	blt.w	80061b4 <_printf_i+0x20c>
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	f021 0104 	bic.w	r1, r1, #4
 8006090:	6021      	str	r1, [r4, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d13d      	bne.n	8006112 <_printf_i+0x16a>
 8006096:	2d00      	cmp	r5, #0
 8006098:	f040 808e 	bne.w	80061b8 <_printf_i+0x210>
 800609c:	4665      	mov	r5, ip
 800609e:	2a08      	cmp	r2, #8
 80060a0:	d10b      	bne.n	80060ba <_printf_i+0x112>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	07db      	lsls	r3, r3, #31
 80060a6:	d508      	bpl.n	80060ba <_printf_i+0x112>
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	bfde      	ittt	le
 80060b0:	2330      	movle	r3, #48	; 0x30
 80060b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060ba:	ebac 0305 	sub.w	r3, ip, r5
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	f8cd 8000 	str.w	r8, [sp]
 80060c4:	463b      	mov	r3, r7
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	4621      	mov	r1, r4
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff fef6 	bl	8005ebc <_printf_common>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d14d      	bne.n	8006170 <_printf_i+0x1c8>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	b005      	add	sp, #20
 80060da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060de:	4839      	ldr	r0, [pc, #228]	; (80061c4 <_printf_i+0x21c>)
 80060e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060e4:	6813      	ldr	r3, [r2, #0]
 80060e6:	6821      	ldr	r1, [r4, #0]
 80060e8:	1d1d      	adds	r5, r3, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6015      	str	r5, [r2, #0]
 80060ee:	060a      	lsls	r2, r1, #24
 80060f0:	d50b      	bpl.n	800610a <_printf_i+0x162>
 80060f2:	07ca      	lsls	r2, r1, #31
 80060f4:	bf44      	itt	mi
 80060f6:	f041 0120 	orrmi.w	r1, r1, #32
 80060fa:	6021      	strmi	r1, [r4, #0]
 80060fc:	b91b      	cbnz	r3, 8006106 <_printf_i+0x15e>
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	f022 0220 	bic.w	r2, r2, #32
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	2210      	movs	r2, #16
 8006108:	e7b7      	b.n	800607a <_printf_i+0xd2>
 800610a:	064d      	lsls	r5, r1, #25
 800610c:	bf48      	it	mi
 800610e:	b29b      	uxthmi	r3, r3
 8006110:	e7ef      	b.n	80060f2 <_printf_i+0x14a>
 8006112:	4665      	mov	r5, ip
 8006114:	fbb3 f1f2 	udiv	r1, r3, r2
 8006118:	fb02 3311 	mls	r3, r2, r1, r3
 800611c:	5cc3      	ldrb	r3, [r0, r3]
 800611e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006122:	460b      	mov	r3, r1
 8006124:	2900      	cmp	r1, #0
 8006126:	d1f5      	bne.n	8006114 <_printf_i+0x16c>
 8006128:	e7b9      	b.n	800609e <_printf_i+0xf6>
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	6825      	ldr	r5, [r4, #0]
 800612e:	6961      	ldr	r1, [r4, #20]
 8006130:	1d18      	adds	r0, r3, #4
 8006132:	6010      	str	r0, [r2, #0]
 8006134:	0628      	lsls	r0, r5, #24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	d501      	bpl.n	800613e <_printf_i+0x196>
 800613a:	6019      	str	r1, [r3, #0]
 800613c:	e002      	b.n	8006144 <_printf_i+0x19c>
 800613e:	066a      	lsls	r2, r5, #25
 8006140:	d5fb      	bpl.n	800613a <_printf_i+0x192>
 8006142:	8019      	strh	r1, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	6123      	str	r3, [r4, #16]
 8006148:	4665      	mov	r5, ip
 800614a:	e7b9      	b.n	80060c0 <_printf_i+0x118>
 800614c:	6813      	ldr	r3, [r2, #0]
 800614e:	1d19      	adds	r1, r3, #4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	681d      	ldr	r5, [r3, #0]
 8006154:	6862      	ldr	r2, [r4, #4]
 8006156:	2100      	movs	r1, #0
 8006158:	4628      	mov	r0, r5
 800615a:	f7fa f841 	bl	80001e0 <memchr>
 800615e:	b108      	cbz	r0, 8006164 <_printf_i+0x1bc>
 8006160:	1b40      	subs	r0, r0, r5
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616e:	e7a7      	b.n	80060c0 <_printf_i+0x118>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	462a      	mov	r2, r5
 8006174:	4639      	mov	r1, r7
 8006176:	4630      	mov	r0, r6
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0aa      	beq.n	80060d4 <_printf_i+0x12c>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	079b      	lsls	r3, r3, #30
 8006182:	d413      	bmi.n	80061ac <_printf_i+0x204>
 8006184:	68e0      	ldr	r0, [r4, #12]
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	4298      	cmp	r0, r3
 800618a:	bfb8      	it	lt
 800618c:	4618      	movlt	r0, r3
 800618e:	e7a3      	b.n	80060d8 <_printf_i+0x130>
 8006190:	2301      	movs	r3, #1
 8006192:	464a      	mov	r2, r9
 8006194:	4639      	mov	r1, r7
 8006196:	4630      	mov	r0, r6
 8006198:	47c0      	blx	r8
 800619a:	3001      	adds	r0, #1
 800619c:	d09a      	beq.n	80060d4 <_printf_i+0x12c>
 800619e:	3501      	adds	r5, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	9a03      	ldr	r2, [sp, #12]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	42ab      	cmp	r3, r5
 80061a8:	dcf2      	bgt.n	8006190 <_printf_i+0x1e8>
 80061aa:	e7eb      	b.n	8006184 <_printf_i+0x1dc>
 80061ac:	2500      	movs	r5, #0
 80061ae:	f104 0919 	add.w	r9, r4, #25
 80061b2:	e7f5      	b.n	80061a0 <_printf_i+0x1f8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ac      	bne.n	8006112 <_printf_i+0x16a>
 80061b8:	7803      	ldrb	r3, [r0, #0]
 80061ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c2:	e76c      	b.n	800609e <_printf_i+0xf6>
 80061c4:	08006715 	.word	0x08006715
 80061c8:	08006726 	.word	0x08006726

080061cc <iprintf>:
 80061cc:	b40f      	push	{r0, r1, r2, r3}
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <iprintf+0x2c>)
 80061d0:	b513      	push	{r0, r1, r4, lr}
 80061d2:	681c      	ldr	r4, [r3, #0]
 80061d4:	b124      	cbz	r4, 80061e0 <iprintf+0x14>
 80061d6:	69a3      	ldr	r3, [r4, #24]
 80061d8:	b913      	cbnz	r3, 80061e0 <iprintf+0x14>
 80061da:	4620      	mov	r0, r4
 80061dc:	f7ff fb6c 	bl	80058b8 <__sinit>
 80061e0:	ab05      	add	r3, sp, #20
 80061e2:	9a04      	ldr	r2, [sp, #16]
 80061e4:	68a1      	ldr	r1, [r4, #8]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff fd51 	bl	8005c90 <_vfiprintf_r>
 80061ee:	b002      	add	sp, #8
 80061f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f4:	b004      	add	sp, #16
 80061f6:	4770      	bx	lr
 80061f8:	2000000c 	.word	0x2000000c

080061fc <_puts_r>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	460e      	mov	r6, r1
 8006200:	4605      	mov	r5, r0
 8006202:	b118      	cbz	r0, 800620c <_puts_r+0x10>
 8006204:	6983      	ldr	r3, [r0, #24]
 8006206:	b90b      	cbnz	r3, 800620c <_puts_r+0x10>
 8006208:	f7ff fb56 	bl	80058b8 <__sinit>
 800620c:	69ab      	ldr	r3, [r5, #24]
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	b913      	cbnz	r3, 8006218 <_puts_r+0x1c>
 8006212:	4628      	mov	r0, r5
 8006214:	f7ff fb50 	bl	80058b8 <__sinit>
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <_puts_r+0xac>)
 800621a:	429c      	cmp	r4, r3
 800621c:	d117      	bne.n	800624e <_puts_r+0x52>
 800621e:	686c      	ldr	r4, [r5, #4]
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	071b      	lsls	r3, r3, #28
 8006224:	d51d      	bpl.n	8006262 <_puts_r+0x66>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b1db      	cbz	r3, 8006262 <_puts_r+0x66>
 800622a:	3e01      	subs	r6, #1
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006232:	3b01      	subs	r3, #1
 8006234:	60a3      	str	r3, [r4, #8]
 8006236:	b9e9      	cbnz	r1, 8006274 <_puts_r+0x78>
 8006238:	2b00      	cmp	r3, #0
 800623a:	da2e      	bge.n	800629a <_puts_r+0x9e>
 800623c:	4622      	mov	r2, r4
 800623e:	210a      	movs	r1, #10
 8006240:	4628      	mov	r0, r5
 8006242:	f000 f893 	bl	800636c <__swbuf_r>
 8006246:	3001      	adds	r0, #1
 8006248:	d011      	beq.n	800626e <_puts_r+0x72>
 800624a:	200a      	movs	r0, #10
 800624c:	e011      	b.n	8006272 <_puts_r+0x76>
 800624e:	4b17      	ldr	r3, [pc, #92]	; (80062ac <_puts_r+0xb0>)
 8006250:	429c      	cmp	r4, r3
 8006252:	d101      	bne.n	8006258 <_puts_r+0x5c>
 8006254:	68ac      	ldr	r4, [r5, #8]
 8006256:	e7e3      	b.n	8006220 <_puts_r+0x24>
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <_puts_r+0xb4>)
 800625a:	429c      	cmp	r4, r3
 800625c:	bf08      	it	eq
 800625e:	68ec      	ldreq	r4, [r5, #12]
 8006260:	e7de      	b.n	8006220 <_puts_r+0x24>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f000 f8e5 	bl	8006434 <__swsetup_r>
 800626a:	2800      	cmp	r0, #0
 800626c:	d0dd      	beq.n	800622a <_puts_r+0x2e>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	2b00      	cmp	r3, #0
 8006276:	da04      	bge.n	8006282 <_puts_r+0x86>
 8006278:	69a2      	ldr	r2, [r4, #24]
 800627a:	429a      	cmp	r2, r3
 800627c:	dc06      	bgt.n	800628c <_puts_r+0x90>
 800627e:	290a      	cmp	r1, #10
 8006280:	d004      	beq.n	800628c <_puts_r+0x90>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	7019      	strb	r1, [r3, #0]
 800628a:	e7cf      	b.n	800622c <_puts_r+0x30>
 800628c:	4622      	mov	r2, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f86c 	bl	800636c <__swbuf_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d1c9      	bne.n	800622c <_puts_r+0x30>
 8006298:	e7e9      	b.n	800626e <_puts_r+0x72>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	200a      	movs	r0, #10
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	6022      	str	r2, [r4, #0]
 80062a2:	7018      	strb	r0, [r3, #0]
 80062a4:	e7e5      	b.n	8006272 <_puts_r+0x76>
 80062a6:	bf00      	nop
 80062a8:	080066c0 	.word	0x080066c0
 80062ac:	080066e0 	.word	0x080066e0
 80062b0:	080066a0 	.word	0x080066a0

080062b4 <puts>:
 80062b4:	4b02      	ldr	r3, [pc, #8]	; (80062c0 <puts+0xc>)
 80062b6:	4601      	mov	r1, r0
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	f7ff bf9f 	b.w	80061fc <_puts_r>
 80062be:	bf00      	nop
 80062c0:	2000000c 	.word	0x2000000c

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4c06      	ldr	r4, [pc, #24]	; (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4605      	mov	r5, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	f7fb fab6 	bl	8001840 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20000378 	.word	0x20000378

080062e4 <__sread>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ec:	f000 f956 	bl	800659c <_read_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	bfab      	itete	ge
 80062f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062f6:	89a3      	ldrhlt	r3, [r4, #12]
 80062f8:	181b      	addge	r3, r3, r0
 80062fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062fe:	bfac      	ite	ge
 8006300:	6563      	strge	r3, [r4, #84]	; 0x54
 8006302:	81a3      	strhlt	r3, [r4, #12]
 8006304:	bd10      	pop	{r4, pc}

08006306 <__swrite>:
 8006306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	461f      	mov	r7, r3
 800630c:	898b      	ldrh	r3, [r1, #12]
 800630e:	05db      	lsls	r3, r3, #23
 8006310:	4605      	mov	r5, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4616      	mov	r6, r2
 8006316:	d505      	bpl.n	8006324 <__swrite+0x1e>
 8006318:	2302      	movs	r3, #2
 800631a:	2200      	movs	r2, #0
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 f928 	bl	8006574 <_lseek_r>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800632a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800633a:	f000 b869 	b.w	8006410 <_write_r>

0800633e <__sseek>:
 800633e:	b510      	push	{r4, lr}
 8006340:	460c      	mov	r4, r1
 8006342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006346:	f000 f915 	bl	8006574 <_lseek_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	bf15      	itete	ne
 8006350:	6560      	strne	r0, [r4, #84]	; 0x54
 8006352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800635a:	81a3      	strheq	r3, [r4, #12]
 800635c:	bf18      	it	ne
 800635e:	81a3      	strhne	r3, [r4, #12]
 8006360:	bd10      	pop	{r4, pc}

08006362 <__sclose>:
 8006362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006366:	f000 b8d3 	b.w	8006510 <_close_r>
	...

0800636c <__swbuf_r>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	460e      	mov	r6, r1
 8006370:	4614      	mov	r4, r2
 8006372:	4605      	mov	r5, r0
 8006374:	b118      	cbz	r0, 800637e <__swbuf_r+0x12>
 8006376:	6983      	ldr	r3, [r0, #24]
 8006378:	b90b      	cbnz	r3, 800637e <__swbuf_r+0x12>
 800637a:	f7ff fa9d 	bl	80058b8 <__sinit>
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <__swbuf_r+0x98>)
 8006380:	429c      	cmp	r4, r3
 8006382:	d12a      	bne.n	80063da <__swbuf_r+0x6e>
 8006384:	686c      	ldr	r4, [r5, #4]
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	071a      	lsls	r2, r3, #28
 800638e:	d52e      	bpl.n	80063ee <__swbuf_r+0x82>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b363      	cbz	r3, 80063ee <__swbuf_r+0x82>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6963      	ldr	r3, [r4, #20]
 800639c:	b2f6      	uxtb	r6, r6
 800639e:	4283      	cmp	r3, r0
 80063a0:	4637      	mov	r7, r6
 80063a2:	dc04      	bgt.n	80063ae <__swbuf_r+0x42>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f7ff fa1c 	bl	80057e4 <_fflush_r>
 80063ac:	bb28      	cbnz	r0, 80063fa <__swbuf_r+0x8e>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	701e      	strb	r6, [r3, #0]
 80063bc:	6963      	ldr	r3, [r4, #20]
 80063be:	3001      	adds	r0, #1
 80063c0:	4283      	cmp	r3, r0
 80063c2:	d004      	beq.n	80063ce <__swbuf_r+0x62>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d519      	bpl.n	80063fe <__swbuf_r+0x92>
 80063ca:	2e0a      	cmp	r6, #10
 80063cc:	d117      	bne.n	80063fe <__swbuf_r+0x92>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f7ff fa07 	bl	80057e4 <_fflush_r>
 80063d6:	b190      	cbz	r0, 80063fe <__swbuf_r+0x92>
 80063d8:	e00f      	b.n	80063fa <__swbuf_r+0x8e>
 80063da:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <__swbuf_r+0x9c>)
 80063dc:	429c      	cmp	r4, r3
 80063de:	d101      	bne.n	80063e4 <__swbuf_r+0x78>
 80063e0:	68ac      	ldr	r4, [r5, #8]
 80063e2:	e7d0      	b.n	8006386 <__swbuf_r+0x1a>
 80063e4:	4b09      	ldr	r3, [pc, #36]	; (800640c <__swbuf_r+0xa0>)
 80063e6:	429c      	cmp	r4, r3
 80063e8:	bf08      	it	eq
 80063ea:	68ec      	ldreq	r4, [r5, #12]
 80063ec:	e7cb      	b.n	8006386 <__swbuf_r+0x1a>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f81f 	bl	8006434 <__swsetup_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d0cc      	beq.n	8006394 <__swbuf_r+0x28>
 80063fa:	f04f 37ff 	mov.w	r7, #4294967295
 80063fe:	4638      	mov	r0, r7
 8006400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006402:	bf00      	nop
 8006404:	080066c0 	.word	0x080066c0
 8006408:	080066e0 	.word	0x080066e0
 800640c:	080066a0 	.word	0x080066a0

08006410 <_write_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4c07      	ldr	r4, [pc, #28]	; (8006430 <_write_r+0x20>)
 8006414:	4605      	mov	r5, r0
 8006416:	4608      	mov	r0, r1
 8006418:	4611      	mov	r1, r2
 800641a:	2200      	movs	r2, #0
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f7fa f8ae 	bl	8000580 <_write>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_write_r+0x1e>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	b103      	cbz	r3, 800642e <_write_r+0x1e>
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000378 	.word	0x20000378

08006434 <__swsetup_r>:
 8006434:	4b32      	ldr	r3, [pc, #200]	; (8006500 <__swsetup_r+0xcc>)
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	4606      	mov	r6, r0
 800643c:	460c      	mov	r4, r1
 800643e:	b125      	cbz	r5, 800644a <__swsetup_r+0x16>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	b913      	cbnz	r3, 800644a <__swsetup_r+0x16>
 8006444:	4628      	mov	r0, r5
 8006446:	f7ff fa37 	bl	80058b8 <__sinit>
 800644a:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <__swsetup_r+0xd0>)
 800644c:	429c      	cmp	r4, r3
 800644e:	d10f      	bne.n	8006470 <__swsetup_r+0x3c>
 8006450:	686c      	ldr	r4, [r5, #4]
 8006452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006456:	b29a      	uxth	r2, r3
 8006458:	0715      	lsls	r5, r2, #28
 800645a:	d42c      	bmi.n	80064b6 <__swsetup_r+0x82>
 800645c:	06d0      	lsls	r0, r2, #27
 800645e:	d411      	bmi.n	8006484 <__swsetup_r+0x50>
 8006460:	2209      	movs	r2, #9
 8006462:	6032      	str	r2, [r6, #0]
 8006464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e03e      	b.n	80064ee <__swsetup_r+0xba>
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <__swsetup_r+0xd4>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d101      	bne.n	800647a <__swsetup_r+0x46>
 8006476:	68ac      	ldr	r4, [r5, #8]
 8006478:	e7eb      	b.n	8006452 <__swsetup_r+0x1e>
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <__swsetup_r+0xd8>)
 800647c:	429c      	cmp	r4, r3
 800647e:	bf08      	it	eq
 8006480:	68ec      	ldreq	r4, [r5, #12]
 8006482:	e7e6      	b.n	8006452 <__swsetup_r+0x1e>
 8006484:	0751      	lsls	r1, r2, #29
 8006486:	d512      	bpl.n	80064ae <__swsetup_r+0x7a>
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	b141      	cbz	r1, 800649e <__swsetup_r+0x6a>
 800648c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006490:	4299      	cmp	r1, r3
 8006492:	d002      	beq.n	800649a <__swsetup_r+0x66>
 8006494:	4630      	mov	r0, r6
 8006496:	f7ff fb29 	bl	8005aec <_free_r>
 800649a:	2300      	movs	r3, #0
 800649c:	6363      	str	r3, [r4, #52]	; 0x34
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	2300      	movs	r3, #0
 80064a8:	6063      	str	r3, [r4, #4]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	b94b      	cbnz	r3, 80064ce <__swsetup_r+0x9a>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d003      	beq.n	80064ce <__swsetup_r+0x9a>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff fac7 	bl	8005a5c <__smakebuf_r>
 80064ce:	89a2      	ldrh	r2, [r4, #12]
 80064d0:	f012 0301 	ands.w	r3, r2, #1
 80064d4:	d00c      	beq.n	80064f0 <__swsetup_r+0xbc>
 80064d6:	2300      	movs	r3, #0
 80064d8:	60a3      	str	r3, [r4, #8]
 80064da:	6963      	ldr	r3, [r4, #20]
 80064dc:	425b      	negs	r3, r3
 80064de:	61a3      	str	r3, [r4, #24]
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	b953      	cbnz	r3, 80064fa <__swsetup_r+0xc6>
 80064e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80064ec:	d1ba      	bne.n	8006464 <__swsetup_r+0x30>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	0792      	lsls	r2, r2, #30
 80064f2:	bf58      	it	pl
 80064f4:	6963      	ldrpl	r3, [r4, #20]
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	e7f2      	b.n	80064e0 <__swsetup_r+0xac>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7f7      	b.n	80064ee <__swsetup_r+0xba>
 80064fe:	bf00      	nop
 8006500:	2000000c 	.word	0x2000000c
 8006504:	080066c0 	.word	0x080066c0
 8006508:	080066e0 	.word	0x080066e0
 800650c:	080066a0 	.word	0x080066a0

08006510 <_close_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4c06      	ldr	r4, [pc, #24]	; (800652c <_close_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4605      	mov	r5, r0
 8006518:	4608      	mov	r0, r1
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	f7fb f95b 	bl	80017d6 <_close>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_close_r+0x1a>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	b103      	cbz	r3, 800652a <_close_r+0x1a>
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000378 	.word	0x20000378

08006530 <_fstat_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4c07      	ldr	r4, [pc, #28]	; (8006550 <_fstat_r+0x20>)
 8006534:	2300      	movs	r3, #0
 8006536:	4605      	mov	r5, r0
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	f7fb f956 	bl	80017ee <_fstat>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d102      	bne.n	800654c <_fstat_r+0x1c>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	b103      	cbz	r3, 800654c <_fstat_r+0x1c>
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	bd38      	pop	{r3, r4, r5, pc}
 800654e:	bf00      	nop
 8006550:	20000378 	.word	0x20000378

08006554 <_isatty_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4c06      	ldr	r4, [pc, #24]	; (8006570 <_isatty_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4605      	mov	r5, r0
 800655c:	4608      	mov	r0, r1
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	f7fb f955 	bl	800180e <_isatty>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_isatty_r+0x1a>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	b103      	cbz	r3, 800656e <_isatty_r+0x1a>
 800656c:	602b      	str	r3, [r5, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000378 	.word	0x20000378

08006574 <_lseek_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4c07      	ldr	r4, [pc, #28]	; (8006594 <_lseek_r+0x20>)
 8006578:	4605      	mov	r5, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fb f94e 	bl	8001824 <_lseek>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_lseek_r+0x1e>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	b103      	cbz	r3, 8006592 <_lseek_r+0x1e>
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000378 	.word	0x20000378

08006598 <__malloc_lock>:
 8006598:	4770      	bx	lr

0800659a <__malloc_unlock>:
 800659a:	4770      	bx	lr

0800659c <_read_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4c07      	ldr	r4, [pc, #28]	; (80065bc <_read_r+0x20>)
 80065a0:	4605      	mov	r5, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fb f8f6 	bl	800179c <_read>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_read_r+0x1e>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_read_r+0x1e>
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000378 	.word	0x20000378

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
