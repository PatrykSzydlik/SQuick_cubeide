
MM_Squick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df50  0800df50  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df50  0800df50  0001df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df58  0800df58  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df58  0800df58  0001df58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800df60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  2000032c  0800e28c  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800e28c  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cf3  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003723  00000000  00000000  0004104f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  00044778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001830  00000000  00000000  00046128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2ea  00000000  00000000  00047958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013cdf  00000000  00000000  00062c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e7db  00000000  00000000  00076921  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001150fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ec  00000000  00000000  00115178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000032c 	.word	0x2000032c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dce0 	.word	0x0800dce0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000330 	.word	0x20000330
 80001dc:	0800dce0 	.word	0x0800dce0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <VL_Init_All>:
vl_struct VLS;
VL53L0X_DEV vldev;
uint8_t VL_Data_Updated[3] = {0,0,0};
uint8_t VL_Data_Ready[3] = {0,0,0};

uint8_t VL_Init_All(I2C_HandleTypeDef * hi2c){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

	//HAL_Delay(1000);

	for(j=0; j<VL_DEV_NUMBER; j++)  // 3
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e064      	b.n	800065c <VL_Init_All+0xdc>
	{
		VL_List[j].Device = &devs[j];
 8000592:	7bfa      	ldrb	r2, [r7, #15]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800059a:	fb01 f202 	mul.w	r2, r1, r2
 800059e:	4938      	ldr	r1, [pc, #224]	; (8000680 <VL_Init_All+0x100>)
 80005a0:	440a      	add	r2, r1
 80005a2:	4938      	ldr	r1, [pc, #224]	; (8000684 <VL_Init_All+0x104>)
 80005a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		VL_List[j].Device->I2cDevAddr = VL_DEFAULT_ADDRESS;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	4a36      	ldr	r2, [pc, #216]	; (8000684 <VL_Init_All+0x104>)
 80005ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005b0:	2252      	movs	r2, #82	; 0x52
 80005b2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		VL_List[j].Device->i2c_handle = hi2c;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	4a32      	ldr	r2, [pc, #200]	; (8000684 <VL_Init_All+0x104>)
 80005ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		VL_List[j].ID = j;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <VL_Init_All+0x104>)
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	711a      	strb	r2, [r3, #4]

		VLS.MEMORY[j] = -1;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <VL_Init_All+0x108>)
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005dc:	80da      	strh	r2, [r3, #6]
		VLS.STATE[j] = -1;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <VL_Init_All+0x108>)
 80005e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		VL_Enable(j);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f84f 	bl	8000690 <VL_Enable>
		VL_init_sensor_setAddres(VL_List[j].Device, (VL_DEFAULT_ADDRESS + j*2 + 2));
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4a23      	ldr	r2, [pc, #140]	; (8000684 <VL_Init_All+0x104>)
 80005f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	332a      	adds	r3, #42	; 0x2a
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f007 fc57 	bl	8007eba <VL_init_sensor_setAddres>
		HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f007 fe45 	bl	800829c <HAL_Delay>
		VL_init_parameters(VL_List[j].Device, LONG_RANGE, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <VL_Init_All+0x104>)
 8000616:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800061a:	2201      	movs	r2, #1
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fc9e 	bl	8007f60 <VL_init_parameters>
		HAL_Delay(50);
 8000624:	2032      	movs	r0, #50	; 0x32
 8000626:	f007 fe39 	bl	800829c <HAL_Delay>
		VL_set_interrupt(VL_List[j].Device, 1, VL53L0X_INTERRUPTPOLARITY_LOW);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <VL_Init_All+0x104>)
 800062e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fc6e 	bl	8007f18 <VL_set_interrupt>
		HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f007 fe2d 	bl	800829c <HAL_Delay>
		VL_start_measurement_non_blocking(VL_List[j].Device);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <VL_Init_All+0x104>)
 8000646:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800064a:	4618      	mov	r0, r3
 800064c:	f007 fd7c 	bl	8008148 <VL_start_measurement_non_blocking>
		HAL_Delay(50);
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f007 fe23 	bl	800829c <HAL_Delay>
	for(j=0; j<VL_DEV_NUMBER; j++)  // 3
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d997      	bls.n	8000592 <VL_Init_All+0x12>
	}

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <VL_Init_All+0x10c>)
 800066a:	f009 f843 	bl	80096f4 <HAL_GPIO_WritePin>
	VL_Enable(42);
 800066e:	202a      	movs	r0, #42	; 0x2a
 8000670:	f000 f80e 	bl	8000690 <VL_Enable>
	return 1;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003a0 	.word	0x200003a0
 8000684:	20000374 	.word	0x20000374
 8000688:	2000038c 	.word	0x2000038c
 800068c:	40020400 	.word	0x40020400

08000690 <VL_Enable>:



void VL_Enable(uint8_t VL_Index){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    switch(VL_Index){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d01b      	beq.n	80006d8 <VL_Enable+0x48>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	dc02      	bgt.n	80006aa <VL_Enable+0x1a>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <VL_Enable+0x24>
 80006a8:	e04c      	b.n	8000744 <VL_Enable+0xb4>
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d026      	beq.n	80006fc <VL_Enable+0x6c>
 80006ae:	2b2a      	cmp	r3, #42	; 0x2a
 80006b0:	d036      	beq.n	8000720 <VL_Enable+0x90>
 80006b2:	e047      	b.n	8000744 <VL_Enable+0xb4>
		case 0:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	4826      	ldr	r0, [pc, #152]	; (8000754 <VL_Enable+0xc4>)
 80006bc:	f009 f81a 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4823      	ldr	r0, [pc, #140]	; (8000754 <VL_Enable+0xc4>)
 80006c8:	f009 f814 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4820      	ldr	r0, [pc, #128]	; (8000754 <VL_Enable+0xc4>)
 80006d2:	f009 f80f 	bl	80096f4 <HAL_GPIO_WritePin>
				break;
 80006d6:	e035      	b.n	8000744 <VL_Enable+0xb4>
		case 1:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	481d      	ldr	r0, [pc, #116]	; (8000754 <VL_Enable+0xc4>)
 80006e0:	f009 f808 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	481a      	ldr	r0, [pc, #104]	; (8000754 <VL_Enable+0xc4>)
 80006ec:	f009 f802 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4817      	ldr	r0, [pc, #92]	; (8000754 <VL_Enable+0xc4>)
 80006f6:	f008 fffd 	bl	80096f4 <HAL_GPIO_WritePin>
		    	break;
 80006fa:	e023      	b.n	8000744 <VL_Enable+0xb4>
		case 2:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <VL_Enable+0xc4>)
 8000704:	f008 fff6 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <VL_Enable+0xc4>)
 8000710:	f008 fff0 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480e      	ldr	r0, [pc, #56]	; (8000754 <VL_Enable+0xc4>)
 800071a:	f008 ffeb 	bl	80096f4 <HAL_GPIO_WritePin>
		    	break;
 800071e:	e011      	b.n	8000744 <VL_Enable+0xb4>
		case 42:
			HAL_GPIO_WritePin(VL_XSHUT_L_GPIO_Port, VL_XSHUT_L_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <VL_Enable+0xc4>)
 8000728:	f008 ffe4 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_F_GPIO_Port, VL_XSHUT_F_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <VL_Enable+0xc4>)
 8000734:	f008 ffde 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VL_XSHUT_R_GPIO_Port, VL_XSHUT_R_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2108      	movs	r1, #8
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <VL_Enable+0xc4>)
 800073e:	f008 ffd9 	bl	80096f4 <HAL_GPIO_WritePin>
			break;
 8000742:	bf00      	nop
    }
    HAL_Delay(3);
 8000744:	2003      	movs	r0, #3
 8000746:	f007 fda9 	bl	800829c <HAL_Delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020800 	.word	0x40020800

08000758 <_write>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, uint8_t *ptr, int len){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 100);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	b29a      	uxth	r2, r3
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <_write+0x24>)
 800076e:	f00b fc52 	bl	800c016 <HAL_UART_Transmit>
	return  len;
 8000772:	687b      	ldr	r3, [r7, #4]
};
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200009a8 	.word	0x200009a8

08000780 <read_encoders>:
	};
	return zmienna;
}


void read_encoders(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	printf("LEFT  :  POS[mm] : %d     VEL[mm/s] : %d  \r\n", ENC_L.absolute_pos/10, ENC_L.curr_speed/10);
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <read_encoders+0x58>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <read_encoders+0x5c>)
 800078a:	fb82 1203 	smull	r1, r2, r2, r3
 800078e:	1092      	asrs	r2, r2, #2
 8000790:	17db      	asrs	r3, r3, #31
 8000792:	1ad1      	subs	r1, r2, r3
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <read_encoders+0x58>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <read_encoders+0x5c>)
 800079a:	fb82 0203 	smull	r0, r2, r2, r3
 800079e:	1092      	asrs	r2, r2, #2
 80007a0:	17db      	asrs	r3, r3, #31
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <read_encoders+0x60>)
 80007a8:	f00d f898 	bl	800d8dc <iprintf>
	printf("RIGHT :  POS[mm] : %d     VEL[mm/s] : %d  \r\n", ENC_P.absolute_pos/10, ENC_P.curr_speed/10);
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <read_encoders+0x64>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <read_encoders+0x5c>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad1      	subs	r1, r2, r3
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <read_encoders+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <read_encoders+0x5c>)
 80007c2:	fb82 0203 	smull	r0, r2, r2, r3
 80007c6:	1092      	asrs	r2, r2, #2
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <read_encoders+0x68>)
 80007d0:	f00d f884 	bl	800d8dc <iprintf>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000a88 	.word	0x20000a88
 80007dc:	66666667 	.word	0x66666667
 80007e0:	0800dcf8 	.word	0x0800dcf8
 80007e4:	20000920 	.word	0x20000920
 80007e8:	0800dd28 	.word	0x0800dd28

080007ec <get_encoder_pos>:



void get_encoder_pos(){
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
	int diff=0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	int pos_L=0, pos_P=0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
	pos_L = htim2.Instance->CNT;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <get_encoder_pos+0xd0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	60bb      	str	r3, [r7, #8]
	pos_P = htim3.Instance->CNT;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <get_encoder_pos+0xd4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080c:	607b      	str	r3, [r7, #4]
	htim2.Instance->CNT = ENC_ZERO;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <get_encoder_pos+0xd0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = ENC_ZERO;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <get_encoder_pos+0xd4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000820:	625a      	str	r2, [r3, #36]	; 0x24


	diff = pos_L - ENC_ZERO;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000828:	60fb      	str	r3, [r7, #12]
	diff = diff*170/51;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	22aa      	movs	r2, #170	; 0xaa
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <get_encoder_pos+0xd8>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	441a      	add	r2, r3
 800083a:	1152      	asrs	r2, r2, #5
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	60fb      	str	r3, [r7, #12]
	ENC_L.absolute_pos -= diff;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <get_encoder_pos+0xdc>)
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <get_encoder_pos+0xdc>)
 800084c:	6053      	str	r3, [r2, #4]
	ENC_L.curr_speed = - diff*463/10;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f46f 72e7 	mvn.w	r2, #462	; 0x1ce
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <get_encoder_pos+0xe0>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	1092      	asrs	r2, r2, #2
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <get_encoder_pos+0xdc>)
 8000866:	6013      	str	r3, [r2, #0]

	diff = pos_P - ENC_ZERO;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800086e:	60fb      	str	r3, [r7, #12]
	diff = diff*170/51;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	22aa      	movs	r2, #170	; 0xaa
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <get_encoder_pos+0xd8>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	441a      	add	r2, r3
 8000880:	1152      	asrs	r2, r2, #5
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	60fb      	str	r3, [r7, #12]
	ENC_P.absolute_pos += diff;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <get_encoder_pos+0xe4>)
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <get_encoder_pos+0xe4>)
 8000892:	6053      	str	r3, [r2, #4]
	ENC_P.curr_speed = diff*463/10;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f240 12cf 	movw	r2, #463	; 0x1cf
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <get_encoder_pos+0xe0>)
 80008a0:	fb82 1203 	smull	r1, r2, r2, r3
 80008a4:	1092      	asrs	r2, r2, #2
 80008a6:	17db      	asrs	r3, r3, #31
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <get_encoder_pos+0xe4>)
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000bc4 	.word	0x20000bc4
 80008c0:	20000898 	.word	0x20000898
 80008c4:	a0a0a0a1 	.word	0xa0a0a0a1
 80008c8:	20000a88 	.word	0x20000a88
 80008cc:	66666667 	.word	0x66666667
 80008d0:	20000920 	.word	0x20000920

080008d4 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

	transmission_request=0;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_UART_TxCpltCallback+0x20>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
	bt_data=0;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_UART_TxCpltCallback+0x24>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart1, &bt_data, 1);

}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000350 	.word	0x20000350
 80008f8:	20000a90 	.word	0x20000a90

080008fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	__NOP();
 8000904:	bf00      	nop
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]


	if(huart->Instance==USART1){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a81      	ldr	r2, [pc, #516]	; (8000b28 <HAL_UART_RxCpltCallback+0x214>)
 8000922:	4293      	cmp	r3, r2
 8000924:	f040 80fb 	bne.w	8000b1e <HAL_UART_RxCpltCallback+0x20a>
//				HAL_UART_Transmit_IT(&huart1, bt_settings, 14);
//			}else{
//				HAL_UART_Receive_IT(&huart1, &bt_data, 1);
//			};
//		};
		rx_flag=1;
 8000928:	4b80      	ldr	r3, [pc, #512]	; (8000b2c <HAL_UART_RxCpltCallback+0x218>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
		if(bt_data=='w'){
 800092e:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b77      	cmp	r3, #119	; 0x77
 8000934:	d102      	bne.n	800093c <HAL_UART_RxCpltCallback+0x28>
			direction='w';
 8000936:	4b7f      	ldr	r3, [pc, #508]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000938:	2277      	movs	r2, #119	; 0x77
 800093a:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='s'){
 800093c:	4b7c      	ldr	r3, [pc, #496]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d102      	bne.n	800094a <HAL_UART_RxCpltCallback+0x36>
			direction='s';
 8000944:	4b7b      	ldr	r3, [pc, #492]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000946:	2273      	movs	r2, #115	; 0x73
 8000948:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='a'){
 800094a:	4b79      	ldr	r3, [pc, #484]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b61      	cmp	r3, #97	; 0x61
 8000950:	d102      	bne.n	8000958 <HAL_UART_RxCpltCallback+0x44>
			direction='a';
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000954:	2261      	movs	r2, #97	; 0x61
 8000956:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='d'){
 8000958:	4b75      	ldr	r3, [pc, #468]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b64      	cmp	r3, #100	; 0x64
 800095e:	d102      	bne.n	8000966 <HAL_UART_RxCpltCallback+0x52>
			direction='d';
 8000960:	4b74      	ldr	r3, [pc, #464]	; (8000b34 <HAL_UART_RxCpltCallback+0x220>)
 8000962:	2264      	movs	r2, #100	; 0x64
 8000964:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='p'){
 8000966:	4b72      	ldr	r3, [pc, #456]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b70      	cmp	r3, #112	; 0x70
 800096c:	d102      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x60>
			option='p';
 800096e:	4b72      	ldr	r3, [pc, #456]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000970:	2270      	movs	r2, #112	; 0x70
 8000972:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data==']'){
 8000974:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b5d      	cmp	r3, #93	; 0x5d
 800097a:	d102      	bne.n	8000982 <HAL_UART_RxCpltCallback+0x6e>
			option=']';
 800097c:	4b6e      	ldr	r3, [pc, #440]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 800097e:	225d      	movs	r2, #93	; 0x5d
 8000980:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='r'){
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b72      	cmp	r3, #114	; 0x72
 8000988:	d102      	bne.n	8000990 <HAL_UART_RxCpltCallback+0x7c>
			option='r';
 800098a:	4b6b      	ldr	r3, [pc, #428]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 800098c:	2272      	movs	r2, #114	; 0x72
 800098e:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='z'){
 8000990:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b7a      	cmp	r3, #122	; 0x7a
 8000996:	d102      	bne.n	800099e <HAL_UART_RxCpltCallback+0x8a>
			option='z';
 8000998:	4b67      	ldr	r3, [pc, #412]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 800099a:	227a      	movs	r2, #122	; 0x7a
 800099c:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='g'){
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b67      	cmp	r3, #103	; 0x67
 80009a4:	d102      	bne.n	80009ac <HAL_UART_RxCpltCallback+0x98>
			option='g';
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 80009a8:	2267      	movs	r2, #103	; 0x67
 80009aa:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='k'){
 80009ac:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b6b      	cmp	r3, #107	; 0x6b
 80009b2:	d102      	bne.n	80009ba <HAL_UART_RxCpltCallback+0xa6>
			option='k';
 80009b4:	4b60      	ldr	r3, [pc, #384]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 80009b6:	226b      	movs	r2, #107	; 0x6b
 80009b8:	701a      	strb	r2, [r3, #0]
		}
		if(bt_data=='0'){
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b30      	cmp	r3, #48	; 0x30
 80009c0:	d102      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0xb4>
			speed_mm=0;
 80009c2:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='1'){
 80009c8:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b31      	cmp	r3, #49	; 0x31
 80009ce:	d102      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0xc2>
			speed_mm=100;
 80009d0:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='2'){
 80009d6:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b32      	cmp	r3, #50	; 0x32
 80009dc:	d102      	bne.n	80009e4 <HAL_UART_RxCpltCallback+0xd0>
			speed_mm=200;
 80009de:	4b57      	ldr	r3, [pc, #348]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 80009e0:	22c8      	movs	r2, #200	; 0xc8
 80009e2:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='3'){
 80009e4:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b33      	cmp	r3, #51	; 0x33
 80009ea:	d103      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0xe0>
			speed_mm=300;
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 80009ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009f2:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='4'){
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b34      	cmp	r3, #52	; 0x34
 80009fa:	d103      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0xf0>
			speed_mm=400;
 80009fc:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 80009fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a02:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='5'){
 8000a04:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b35      	cmp	r3, #53	; 0x35
 8000a0a:	d103      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0x100>
			speed_mm=500;
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000a0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a12:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='6'){
 8000a14:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b36      	cmp	r3, #54	; 0x36
 8000a1a:	d103      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x110>
			speed_mm=600;
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000a1e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000a22:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='7'){
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b37      	cmp	r3, #55	; 0x37
 8000a2a:	d103      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0x120>
			speed_mm=700;
 8000a2c:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000a2e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000a32:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='8'){
 8000a34:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b38      	cmp	r3, #56	; 0x38
 8000a3a:	d103      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x130>
			speed_mm=800;
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000a3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a42:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='9'){
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b39      	cmp	r3, #57	; 0x39
 8000a4a:	d103      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x140>
			speed_mm=900;
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <HAL_UART_RxCpltCallback+0x228>)
 8000a4e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000a52:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='c'){
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b63      	cmp	r3, #99	; 0x63
 8000a5a:	d10b      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x160>
			option='Q';
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000a5e:	2251      	movs	r2, #81	; 0x51
 8000a60:	701a      	strb	r2, [r3, #0]
			kp++;
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_UART_RxCpltCallback+0x22c>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b21a      	sxth	r2, r3
 8000a70:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <HAL_UART_RxCpltCallback+0x22c>)
 8000a72:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='v'){
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b76      	cmp	r3, #118	; 0x76
 8000a7a:	d10b      	bne.n	8000a94 <HAL_UART_RxCpltCallback+0x180>
			option='Q';
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000a7e:	2251      	movs	r2, #81	; 0x51
 8000a80:	701a      	strb	r2, [r3, #0]
			kp--;
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_UART_RxCpltCallback+0x22c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_UART_RxCpltCallback+0x22c>)
 8000a92:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='b'){
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b62      	cmp	r3, #98	; 0x62
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x1a0>
			option='Q';
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000a9e:	2251      	movs	r2, #81	; 0x51
 8000aa0:	701a      	strb	r2, [r3, #0]
			ki++;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_UART_RxCpltCallback+0x230>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_UART_RxCpltCallback+0x230>)
 8000ab2:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='n'){
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b6e      	cmp	r3, #110	; 0x6e
 8000aba:	d10b      	bne.n	8000ad4 <HAL_UART_RxCpltCallback+0x1c0>
			option='Q';
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000abe:	2251      	movs	r2, #81	; 0x51
 8000ac0:	701a      	strb	r2, [r3, #0]
			ki--;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_UART_RxCpltCallback+0x230>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3b01      	subs	r3, #1
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_UART_RxCpltCallback+0x230>)
 8000ad2:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data=='m'){
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b6d      	cmp	r3, #109	; 0x6d
 8000ada:	d10b      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x1e0>
			option='Q';
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000ade:	2251      	movs	r2, #81	; 0x51
 8000ae0:	701a      	strb	r2, [r3, #0]
			kd++;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x234>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_RxCpltCallback+0x234>)
 8000af2:	801a      	strh	r2, [r3, #0]
		}
		if(bt_data==','){
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b2c      	cmp	r3, #44	; 0x2c
 8000afa:	d10b      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x200>
			option='Q';
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_RxCpltCallback+0x224>)
 8000afe:	2251      	movs	r2, #81	; 0x51
 8000b00:	701a      	strb	r2, [r3, #0]
			kd--;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_RxCpltCallback+0x234>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_UART_RxCpltCallback+0x234>)
 8000b12:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4906      	ldr	r1, [pc, #24]	; (8000b30 <HAL_UART_RxCpltCallback+0x21c>)
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_UART_RxCpltCallback+0x238>)
 8000b1a:	f00b fb15 	bl	800c148 <HAL_UART_Receive_IT>
	};

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	20000355 	.word	0x20000355
 8000b30:	20000a90 	.word	0x20000a90
 8000b34:	20000354 	.word	0x20000354
 8000b38:	2000035c 	.word	0x2000035c
 8000b3c:	2000035a 	.word	0x2000035a
 8000b40:	20000362 	.word	0x20000362
 8000b44:	20000364 	.word	0x20000364
 8000b48:	20000366 	.word	0x20000366
 8000b4c:	200009a8 	.word	0x200009a8

08000b50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM10){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d112      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x38>
		get_encoder_pos();
 8000b62:	f7ff fe43 	bl	80007ec <get_encoder_pos>
		if(initialization_encoders==0){
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d108      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x32>
			initialization_encoders=1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
			ENC_P.absolute_pos=0;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
			ENC_L.absolute_pos=0;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]

		}
		timer_flag=1;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM11){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d102      	bne.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x48>
		adc_flag=1;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40014400 	.word	0x40014400
 8000ba4:	2000035d 	.word	0x2000035d
 8000ba8:	20000920 	.word	0x20000920
 8000bac:	20000a88 	.word	0x20000a88
 8000bb0:	20000357 	.word	0x20000357
 8000bb4:	40014800 	.word	0x40014800
 8000bb8:	20000358 	.word	0x20000358

08000bbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUT_2_Pin){
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bcc:	d10e      	bne.n	8000bec <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000bce:	2104      	movs	r1, #4
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x80>)
 8000bd2:	f008 fda8 	bl	8009726 <HAL_GPIO_TogglePin>
		pwm_value-=50;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3b32      	subs	r3, #50	; 0x32
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bde:	6013      	str	r3, [r2, #0]
		printf("Kliknieto BUT_2  PWM = %d \r\n", pwm_value);
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x84>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x88>)
 8000be8:	f00c fe78 	bl	800d8dc <iprintf>
	}
	if(GPIO_Pin == VL_INT_L_Pin){  // left sensor
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d108      	bne.n	8000c04 <HAL_GPIO_EXTI_Callback+0x48>
		printf("LEWY READY \r\n");
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bf4:	f00c fee6 	bl	800d9c4 <puts>
		VL_Data_Ready[0] = 1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x90>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		vl_flag=1;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == VL_INT_F_Pin){  // front sensor
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d108      	bne.n	8000c1c <HAL_GPIO_EXTI_Callback+0x60>
		printf("FRONT READY \r\n");
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x98>)
 8000c0c:	f00c feda 	bl	800d9c4 <puts>
		VL_Data_Ready[1] = 1;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x90>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	705a      	strb	r2, [r3, #1]
		vl_flag=1;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == VL_INT_R_Pin){  // right sensor
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x78>
		printf("PRAWY READY \r\n");
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c24:	f00c fece 	bl	800d9c4 <puts>
		VL_Data_Ready[2] = 1;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x90>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	709a      	strb	r2, [r3, #2]
		vl_flag=1;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	2000034c 	.word	0x2000034c
 8000c44:	0800dd58 	.word	0x0800dd58
 8000c48:	0800dd78 	.word	0x0800dd78
 8000c4c:	20000348 	.word	0x20000348
 8000c50:	20000356 	.word	0x20000356
 8000c54:	0800dd88 	.word	0x0800dd88
 8000c58:	0800dd98 	.word	0x0800dd98

08000c5c <PWM>:



void PWM(int lewy, int prawy) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	if (lewy >= 0) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db1c      	blt.n	8000ca6 <PWM+0x4a>
		if (lewy > MOTOR_MAX) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c72:	4293      	cmp	r3, r2
 8000c74:	dd02      	ble.n	8000c7c <PWM+0x20>
			lewy = MOTOR_MAX;
 8000c76:	f242 730f 	movw	r3, #9999	; 0x270f
 8000c7a:	607b      	str	r3, [r7, #4]
		};
		if(direction_set[0]!=1){
 8000c7c:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <PWM+0x170>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d02c      	beq.n	8000ce0 <PWM+0x84>
			HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8c:	4850      	ldr	r0, [pc, #320]	; (8000dd0 <PWM+0x174>)
 8000c8e:	f008 fd31 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	484d      	ldr	r0, [pc, #308]	; (8000dd0 <PWM+0x174>)
 8000c9a:	f008 fd2b 	bl	80096f4 <HAL_GPIO_WritePin>
			direction_set[0]=1;
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <PWM+0x170>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e01c      	b.n	8000ce0 <PWM+0x84>
		}
	} else if (lewy < 0) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da19      	bge.n	8000ce0 <PWM+0x84>
		if (lewy < -MOTOR_MAX) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <PWM+0x178>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	da01      	bge.n	8000cb8 <PWM+0x5c>
			lewy = -MOTOR_MAX;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <PWM+0x178>)
 8000cb6:	607b      	str	r3, [r7, #4]
		};
		if(direction_set[0]!=2){
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <PWM+0x170>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d00e      	beq.n	8000ce0 <PWM+0x84>
			HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc8:	4841      	ldr	r0, [pc, #260]	; (8000dd0 <PWM+0x174>)
 8000cca:	f008 fd13 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd4:	483e      	ldr	r0, [pc, #248]	; (8000dd0 <PWM+0x174>)
 8000cd6:	f008 fd0d 	bl	80096f4 <HAL_GPIO_WritePin>
			direction_set[0]=2;
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <PWM+0x170>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	701a      	strb	r2, [r3, #0]
		}

	};

	if (prawy >= 0) {
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db1c      	blt.n	8000d20 <PWM+0xc4>
		if (prawy > MOTOR_MAX) {
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cec:	4293      	cmp	r3, r2
 8000cee:	dd02      	ble.n	8000cf6 <PWM+0x9a>
			prawy = MOTOR_MAX;
 8000cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000cf4:	603b      	str	r3, [r7, #0]
		};
		if(direction_set[1]!=1){
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <PWM+0x170>)
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d02c      	beq.n	8000d5a <PWM+0xfe>
			HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d06:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <PWM+0x17c>)
 8000d08:	f008 fcf4 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <PWM+0x17c>)
 8000d14:	f008 fcee 	bl	80096f4 <HAL_GPIO_WritePin>
			direction_set[1]=1;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <PWM+0x170>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	705a      	strb	r2, [r3, #1]
 8000d1e:	e01c      	b.n	8000d5a <PWM+0xfe>
		}
	} else if (prawy < 0) {
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da19      	bge.n	8000d5a <PWM+0xfe>
		if (prawy < -MOTOR_MAX) {
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	4a2a      	ldr	r2, [pc, #168]	; (8000dd4 <PWM+0x178>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	da01      	bge.n	8000d32 <PWM+0xd6>
			prawy = -MOTOR_MAX;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <PWM+0x178>)
 8000d30:	603b      	str	r3, [r7, #0]
		};
		if(direction_set[1]!=2){
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <PWM+0x170>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d00e      	beq.n	8000d5a <PWM+0xfe>
			HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <PWM+0x17c>)
 8000d44:	f008 fcd6 	bl	80096f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <PWM+0x17c>)
 8000d50:	f008 fcd0 	bl	80096f4 <HAL_GPIO_WritePin>
			direction_set[1]=2;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <PWM+0x170>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	705a      	strb	r2, [r3, #1]
		}
	};

	if(prawy==0 && lewy==0){
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d120      	bne.n	8000da2 <PWM+0x146>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11d      	bne.n	8000da2 <PWM+0x146>
		direction_set[1]=0;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <PWM+0x170>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	705a      	strb	r2, [r3, #1]
		direction_set[0]=0;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <PWM+0x170>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <PWM+0x17c>)
 8000d7a:	f008 fcbb 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <PWM+0x17c>)
 8000d86:	f008 fcb5 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <PWM+0x174>)
 8000d92:	f008 fcaf 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <PWM+0x174>)
 8000d9e:	f008 fca9 	bl	80096f4 <HAL_GPIO_WritePin>

	}
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, abs(lewy));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000da8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <PWM+0x180>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, abs(prawy));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000db8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <PWM+0x180>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000360 	.word	0x20000360
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	ffffd8f1 	.word	0xffffd8f1
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	20000a94 	.word	0x20000a94

08000de0 <pos_and_speed_measurement>:


void pos_and_speed_measurement(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	PWM(speed_mm*10, speed_mm*10);
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <pos_and_speed_measurement+0x5c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <pos_and_speed_measurement+0x5c>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff ff27 	bl	8000c5c <PWM>
	for(int i=0; i<10; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e007      	b.n	8000e24 <pos_and_speed_measurement+0x44>
		HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f007 fa41 	bl	800829c <HAL_Delay>
		read_encoders();
 8000e1a:	f7ff fcb1 	bl	8000780 <read_encoders>
	for(int i=0; i<10; i++){
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b09      	cmp	r3, #9
 8000e28:	ddf4      	ble.n	8000e14 <pos_and_speed_measurement+0x34>
	}
	PWM(0,0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff15 	bl	8000c5c <PWM>


}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000035a 	.word	0x2000035a

08000e40 <initialize_PID>:

void initialize_PID(short k_p, short k_i, short k_d){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	807b      	strh	r3, [r7, #2]
	  //Regulator został nastrojony przy pomocy metody ręcznej
	  // Najpierw zmieniając Kp aż do wystąpienia oscylacji i wybrać polowe wartosci
	  // Potem ustalając Ki az do skrocenia czasu regulacji
	  // Na koncu regulacja Kd

	  pid_init(&pid_L, kp*0.1f, ki*0.01f, kd*0.01f, 4, 40);  // 10ms ze wzgledu na 25Hz
 8000e52:	4b6e      	ldr	r3, [pc, #440]	; (800100c <initialize_PID+0x1cc>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001010 <initialize_PID+0x1d0>
 8000e64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <initialize_PID+0x1d4>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e76:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001018 <initialize_PID+0x1d8>
 8000e7a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8000e7e:	4b67      	ldr	r3, [pc, #412]	; (800101c <initialize_PID+0x1dc>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001018 <initialize_PID+0x1d8>
 8000e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e94:	2228      	movs	r2, #40	; 0x28
 8000e96:	2104      	movs	r1, #4
 8000e98:	eeb0 1a67 	vmov.f32	s2, s15
 8000e9c:	eef0 0a46 	vmov.f32	s1, s12
 8000ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8000ea4:	485e      	ldr	r0, [pc, #376]	; (8001020 <initialize_PID+0x1e0>)
 8000ea6:	f001 f986 	bl	80021b6 <pid_init>
	  pid_L.p_max = pid_scale(&pid_L, MOTOR_MAX);
 8000eaa:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001024 <initialize_PID+0x1e4>
 8000eae:	485c      	ldr	r0, [pc, #368]	; (8001020 <initialize_PID+0x1e0>)
 8000eb0:	f001 fac4 	bl	800243c <pid_scale>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <initialize_PID+0x1e0>)
 8000eb8:	619a      	str	r2, [r3, #24]
	  pid_L.p_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000eba:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001028 <initialize_PID+0x1e8>
 8000ebe:	4858      	ldr	r0, [pc, #352]	; (8001020 <initialize_PID+0x1e0>)
 8000ec0:	f001 fabc 	bl	800243c <pid_scale>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <initialize_PID+0x1e0>)
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
	  pid_L.i_max = pid_scale(&pid_L, MOTOR_MAX);
 8000eca:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001024 <initialize_PID+0x1e4>
 8000ece:	4854      	ldr	r0, [pc, #336]	; (8001020 <initialize_PID+0x1e0>)
 8000ed0:	f001 fab4 	bl	800243c <pid_scale>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <initialize_PID+0x1e0>)
 8000ed8:	61da      	str	r2, [r3, #28]
	  pid_L.i_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000eda:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001028 <initialize_PID+0x1e8>
 8000ede:	4850      	ldr	r0, [pc, #320]	; (8001020 <initialize_PID+0x1e0>)
 8000ee0:	f001 faac 	bl	800243c <pid_scale>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <initialize_PID+0x1e0>)
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
	  pid_L.d_max = pid_scale(&pid_L, MOTOR_MAX);
 8000eea:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001024 <initialize_PID+0x1e4>
 8000eee:	484c      	ldr	r0, [pc, #304]	; (8001020 <initialize_PID+0x1e0>)
 8000ef0:	f001 faa4 	bl	800243c <pid_scale>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <initialize_PID+0x1e0>)
 8000ef8:	621a      	str	r2, [r3, #32]
	  pid_L.d_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000efa:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001028 <initialize_PID+0x1e8>
 8000efe:	4848      	ldr	r0, [pc, #288]	; (8001020 <initialize_PID+0x1e0>)
 8000f00:	f001 fa9c 	bl	800243c <pid_scale>
 8000f04:	4602      	mov	r2, r0
 8000f06:	4b46      	ldr	r3, [pc, #280]	; (8001020 <initialize_PID+0x1e0>)
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
	  pid_L.total_max = pid_scale(&pid_L, MOTOR_MAX);
 8000f0a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001024 <initialize_PID+0x1e4>
 8000f0e:	4844      	ldr	r0, [pc, #272]	; (8001020 <initialize_PID+0x1e0>)
 8000f10:	f001 fa94 	bl	800243c <pid_scale>
 8000f14:	4602      	mov	r2, r0
 8000f16:	4b42      	ldr	r3, [pc, #264]	; (8001020 <initialize_PID+0x1e0>)
 8000f18:	649a      	str	r2, [r3, #72]	; 0x48
	  pid_L.total_min = pid_scale(&pid_L, -MOTOR_MAX);
 8000f1a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001028 <initialize_PID+0x1e8>
 8000f1e:	4840      	ldr	r0, [pc, #256]	; (8001020 <initialize_PID+0x1e0>)
 8000f20:	f001 fa8c 	bl	800243c <pid_scale>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <initialize_PID+0x1e0>)
 8000f28:	64da      	str	r2, [r3, #76]	; 0x4c

	  //Regulator został nastrojony przy pomocy metody ręcznej
	  // Najpierw zmieniając Kp aż do wystąpienia oscylacji i wybrać polowe wartosci
	  // Potem ustalając Ki az do skrocenia czasu regulacji
	  // Na koncu regulacja Kd
	  pid_init(&pid_P, kp*0.1f, ki*0.01f, kd*0.01f, 4, 40);  // 40ms ze wzgledu na 25Hz
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <initialize_PID+0x1cc>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f38:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001010 <initialize_PID+0x1d0>
 8000f3c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <initialize_PID+0x1d4>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001018 <initialize_PID+0x1d8>
 8000f52:	ee27 6a87 	vmul.f32	s12, s15, s14
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <initialize_PID+0x1dc>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f64:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001018 <initialize_PID+0x1d8>
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	2228      	movs	r2, #40	; 0x28
 8000f6e:	2104      	movs	r1, #4
 8000f70:	eeb0 1a67 	vmov.f32	s2, s15
 8000f74:	eef0 0a46 	vmov.f32	s1, s12
 8000f78:	eeb0 0a66 	vmov.f32	s0, s13
 8000f7c:	482b      	ldr	r0, [pc, #172]	; (800102c <initialize_PID+0x1ec>)
 8000f7e:	f001 f91a 	bl	80021b6 <pid_init>
	  pid_P.p_max = pid_scale(&pid_P, MOTOR_MAX);
 8000f82:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001024 <initialize_PID+0x1e4>
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <initialize_PID+0x1ec>)
 8000f88:	f001 fa58 	bl	800243c <pid_scale>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <initialize_PID+0x1ec>)
 8000f90:	619a      	str	r2, [r3, #24]
	  pid_P.p_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000f92:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001028 <initialize_PID+0x1e8>
 8000f96:	4825      	ldr	r0, [pc, #148]	; (800102c <initialize_PID+0x1ec>)
 8000f98:	f001 fa50 	bl	800243c <pid_scale>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <initialize_PID+0x1ec>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
	  pid_P.i_max = pid_scale(&pid_P, MOTOR_MAX);
 8000fa2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001024 <initialize_PID+0x1e4>
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <initialize_PID+0x1ec>)
 8000fa8:	f001 fa48 	bl	800243c <pid_scale>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <initialize_PID+0x1ec>)
 8000fb0:	61da      	str	r2, [r3, #28]
	  pid_P.i_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000fb2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001028 <initialize_PID+0x1e8>
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <initialize_PID+0x1ec>)
 8000fb8:	f001 fa40 	bl	800243c <pid_scale>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <initialize_PID+0x1ec>)
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
	  pid_P.d_max = pid_scale(&pid_P, MOTOR_MAX);
 8000fc2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001024 <initialize_PID+0x1e4>
 8000fc6:	4819      	ldr	r0, [pc, #100]	; (800102c <initialize_PID+0x1ec>)
 8000fc8:	f001 fa38 	bl	800243c <pid_scale>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <initialize_PID+0x1ec>)
 8000fd0:	621a      	str	r2, [r3, #32]
	  pid_P.d_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000fd2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001028 <initialize_PID+0x1e8>
 8000fd6:	4815      	ldr	r0, [pc, #84]	; (800102c <initialize_PID+0x1ec>)
 8000fd8:	f001 fa30 	bl	800243c <pid_scale>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <initialize_PID+0x1ec>)
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	  pid_P.total_max = pid_scale(&pid_P, MOTOR_MAX);
 8000fe2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001024 <initialize_PID+0x1e4>
 8000fe6:	4811      	ldr	r0, [pc, #68]	; (800102c <initialize_PID+0x1ec>)
 8000fe8:	f001 fa28 	bl	800243c <pid_scale>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <initialize_PID+0x1ec>)
 8000ff0:	649a      	str	r2, [r3, #72]	; 0x48
	  pid_P.total_min = pid_scale(&pid_P, -MOTOR_MAX);
 8000ff2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001028 <initialize_PID+0x1e8>
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <initialize_PID+0x1ec>)
 8000ff8:	f001 fa20 	bl	800243c <pid_scale>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <initialize_PID+0x1ec>)
 8001000:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000362 	.word	0x20000362
 8001010:	3dcccccd 	.word	0x3dcccccd
 8001014:	20000364 	.word	0x20000364
 8001018:	3c23d70a 	.word	0x3c23d70a
 800101c:	20000366 	.word	0x20000366
 8001020:	20000950 	.word	0x20000950
 8001024:	461c3c00 	.word	0x461c3c00
 8001028:	c61c3c00 	.word	0xc61c3c00
 800102c:	20000b14 	.word	0x20000b14

08001030 <PT_change_sensor>:

void PT_change_sensor(uint8_t sensor){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	if(sensor==0){
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d112      	bne.n	8001066 <PT_change_sensor+0x36>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	484a      	ldr	r0, [pc, #296]	; (8001170 <PT_change_sensor+0x140>)
 8001048:	f008 fb54 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001052:	4847      	ldr	r0, [pc, #284]	; (8001170 <PT_change_sensor+0x140>)
 8001054:	f008 fb4e 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105e:	4844      	ldr	r0, [pc, #272]	; (8001170 <PT_change_sensor+0x140>)
 8001060:	f008 fb48 	bl	80096f4 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_SET);
	}
}
 8001064:	e07f      	b.n	8001166 <PT_change_sensor+0x136>
	else if(sensor==1){
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d112      	bne.n	8001092 <PT_change_sensor+0x62>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001072:	483f      	ldr	r0, [pc, #252]	; (8001170 <PT_change_sensor+0x140>)
 8001074:	f008 fb3e 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	483c      	ldr	r0, [pc, #240]	; (8001170 <PT_change_sensor+0x140>)
 8001080:	f008 fb38 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	4839      	ldr	r0, [pc, #228]	; (8001170 <PT_change_sensor+0x140>)
 800108c:	f008 fb32 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001090:	e069      	b.n	8001166 <PT_change_sensor+0x136>
	else if(sensor==2){
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d112      	bne.n	80010be <PT_change_sensor+0x8e>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	4834      	ldr	r0, [pc, #208]	; (8001170 <PT_change_sensor+0x140>)
 80010a0:	f008 fb28 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010aa:	4831      	ldr	r0, [pc, #196]	; (8001170 <PT_change_sensor+0x140>)
 80010ac:	f008 fb22 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b6:	482e      	ldr	r0, [pc, #184]	; (8001170 <PT_change_sensor+0x140>)
 80010b8:	f008 fb1c 	bl	80096f4 <HAL_GPIO_WritePin>
}
 80010bc:	e053      	b.n	8001166 <PT_change_sensor+0x136>
	else if(sensor==3){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d112      	bne.n	80010ea <PT_change_sensor+0xba>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	4829      	ldr	r0, [pc, #164]	; (8001170 <PT_change_sensor+0x140>)
 80010cc:	f008 fb12 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <PT_change_sensor+0x140>)
 80010d8:	f008 fb0c 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <PT_change_sensor+0x140>)
 80010e4:	f008 fb06 	bl	80096f4 <HAL_GPIO_WritePin>
}
 80010e8:	e03d      	b.n	8001166 <PT_change_sensor+0x136>
	else if(sensor==4){
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d112      	bne.n	8001116 <PT_change_sensor+0xe6>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f6:	481e      	ldr	r0, [pc, #120]	; (8001170 <PT_change_sensor+0x140>)
 80010f8:	f008 fafc 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <PT_change_sensor+0x140>)
 8001104:	f008 faf6 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <PT_change_sensor+0x140>)
 8001110:	f008 faf0 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001114:	e027      	b.n	8001166 <PT_change_sensor+0x136>
	else if(sensor==5){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d112      	bne.n	8001142 <PT_change_sensor+0x112>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001122:	4813      	ldr	r0, [pc, #76]	; (8001170 <PT_change_sensor+0x140>)
 8001124:	f008 fae6 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <PT_change_sensor+0x140>)
 8001130:	f008 fae0 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <PT_change_sensor+0x140>)
 800113c:	f008 fada 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001140:	e011      	b.n	8001166 <PT_change_sensor+0x136>
		HAL_GPIO_WritePin(PT_A_GPIO_Port, PT_A_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <PT_change_sensor+0x140>)
 800114a:	f008 fad3 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_B_GPIO_Port, PT_B_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <PT_change_sensor+0x140>)
 8001156:	f008 facd 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PT_C_GPIO_Port, PT_C_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <PT_change_sensor+0x140>)
 8001162:	f008 fac7 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020800 	.word	0x40020800

08001174 <IR_set>:

void IR_set(uint8_t diode){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	if(diode==0){
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d112      	bne.n	80011aa <IR_set+0x36>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	484a      	ldr	r0, [pc, #296]	; (80012b4 <IR_set+0x140>)
 800118c:	f008 fab2 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4847      	ldr	r0, [pc, #284]	; (80012b4 <IR_set+0x140>)
 8001198:	f008 faac 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <IR_set+0x140>)
 80011a4:	f008 faa6 	bl	80096f4 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_SET);
	}
}
 80011a8:	e07f      	b.n	80012aa <IR_set+0x136>
	else if(diode==1){
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d112      	bne.n	80011d6 <IR_set+0x62>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	483f      	ldr	r0, [pc, #252]	; (80012b4 <IR_set+0x140>)
 80011b8:	f008 fa9c 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c2:	483c      	ldr	r0, [pc, #240]	; (80012b4 <IR_set+0x140>)
 80011c4:	f008 fa96 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4839      	ldr	r0, [pc, #228]	; (80012b4 <IR_set+0x140>)
 80011d0:	f008 fa90 	bl	80096f4 <HAL_GPIO_WritePin>
}
 80011d4:	e069      	b.n	80012aa <IR_set+0x136>
	else if(diode==2){
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d112      	bne.n	8001202 <IR_set+0x8e>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	4834      	ldr	r0, [pc, #208]	; (80012b4 <IR_set+0x140>)
 80011e4:	f008 fa86 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ee:	4831      	ldr	r0, [pc, #196]	; (80012b4 <IR_set+0x140>)
 80011f0:	f008 fa80 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fa:	482e      	ldr	r0, [pc, #184]	; (80012b4 <IR_set+0x140>)
 80011fc:	f008 fa7a 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001200:	e053      	b.n	80012aa <IR_set+0x136>
	else if(diode==3){
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d112      	bne.n	800122e <IR_set+0xba>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	4829      	ldr	r0, [pc, #164]	; (80012b4 <IR_set+0x140>)
 8001210:	f008 fa70 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <IR_set+0x140>)
 800121c:	f008 fa6a 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <IR_set+0x140>)
 8001228:	f008 fa64 	bl	80096f4 <HAL_GPIO_WritePin>
}
 800122c:	e03d      	b.n	80012aa <IR_set+0x136>
	else if(diode==4){
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d112      	bne.n	800125a <IR_set+0xe6>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	481e      	ldr	r0, [pc, #120]	; (80012b4 <IR_set+0x140>)
 800123c:	f008 fa5a 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <IR_set+0x140>)
 8001248:	f008 fa54 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <IR_set+0x140>)
 8001254:	f008 fa4e 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001258:	e027      	b.n	80012aa <IR_set+0x136>
	else if(diode==5){
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d112      	bne.n	8001286 <IR_set+0x112>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001266:	4813      	ldr	r0, [pc, #76]	; (80012b4 <IR_set+0x140>)
 8001268:	f008 fa44 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001272:	4810      	ldr	r0, [pc, #64]	; (80012b4 <IR_set+0x140>)
 8001274:	f008 fa3e 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <IR_set+0x140>)
 8001280:	f008 fa38 	bl	80096f4 <HAL_GPIO_WritePin>
}
 8001284:	e011      	b.n	80012aa <IR_set+0x136>
		HAL_GPIO_WritePin(IR_A_GPIO_Port, IR_A_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <IR_set+0x140>)
 800128e:	f008 fa31 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_B_GPIO_Port, IR_B_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <IR_set+0x140>)
 800129a:	f008 fa2b 	bl	80096f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IR_C_GPIO_Port, IR_C_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <IR_set+0x140>)
 80012a6:	f008 fa25 	bl	80096f4 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020400 	.word	0x40020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int L_pwm_pid=0, P_pwm_pid=0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f006 ff77 	bl	80081b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ca:	f000 fae7 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f000 fe59 	bl	8001f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80012d2:	f000 fe37 	bl	8001f44 <MX_DMA_Init>
  MX_I2C1_Init();
 80012d6:	f000 fbe1 	bl	8001a9c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012da:	f000 fddf 	bl	8001e9c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80012de:	f000 fe07 	bl	8001ef0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80012e2:	f000 fc3f 	bl	8001b64 <MX_TIM1_Init>
  MX_ADC1_Init();
 80012e6:	f000 fb41 	bl	800196c <MX_ADC1_Init>
  MX_SPI1_Init();
 80012ea:	f000 fc05 	bl	8001af8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80012ee:	f000 fce5 	bl	8001cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 80012f2:	f000 fd37 	bl	8001d64 <MX_TIM3_Init>
  MX_TIM10_Init();
 80012f6:	f000 fd89 	bl	8001e0c <MX_TIM10_Init>
  MX_TIM11_Init();
 80012fa:	f000 fdab 	bl	8001e54 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_1, 0 );
 80012fe:	4ba8      	ldr	r3, [pc, #672]	; (80015a0 <main+0x2e8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1 , TIM_CHANNEL_2, 0 );
 8001306:	4ba6      	ldr	r3, [pc, #664]	; (80015a0 <main+0x2e8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	48a3      	ldr	r0, [pc, #652]	; (80015a0 <main+0x2e8>)
 8001312:	f009 fee9 	bl	800b0e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_2);
 8001316:	2104      	movs	r1, #4
 8001318:	48a1      	ldr	r0, [pc, #644]	; (80015a0 <main+0x2e8>)
 800131a:	f009 fee5 	bl	800b0e8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(L_IN1_GPIO_Port, L_IN1_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	489f      	ldr	r0, [pc, #636]	; (80015a4 <main+0x2ec>)
 8001326:	f008 f9e5 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_IN2_GPIO_Port, L_IN2_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001330:	489c      	ldr	r0, [pc, #624]	; (80015a4 <main+0x2ec>)
 8001332:	f008 f9df 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN1_GPIO_Port, R_IN1_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	489a      	ldr	r0, [pc, #616]	; (80015a8 <main+0x2f0>)
 800133e:	f008 f9d9 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_IN2_GPIO_Port, R_IN2_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001348:	4897      	ldr	r0, [pc, #604]	; (80015a8 <main+0x2f0>)
 800134a:	f008 f9d3 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001354:	4895      	ldr	r0, [pc, #596]	; (80015ac <main+0x2f4>)
 8001356:	f008 f9cd 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2104      	movs	r1, #4
 800135e:	4893      	ldr	r0, [pc, #588]	; (80015ac <main+0x2f4>)
 8001360:	f008 f9c8 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2102      	movs	r1, #2
 8001368:	4890      	ldr	r0, [pc, #576]	; (80015ac <main+0x2f4>)
 800136a:	f008 f9c3 	bl	80096f4 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	498f      	ldr	r1, [pc, #572]	; (80015b0 <main+0x2f8>)
 8001372:	4890      	ldr	r0, [pc, #576]	; (80015b4 <main+0x2fc>)
 8001374:	f00a fee8 	bl	800c148 <HAL_UART_Receive_IT>
  VL_Init_All(&hi2c1);
 8001378:	488f      	ldr	r0, [pc, #572]	; (80015b8 <main+0x300>)
 800137a:	f7ff f901 	bl	8000580 <VL_Init_All>
  HAL_TIM_Base_Start_IT(&htim10);
 800137e:	488f      	ldr	r0, [pc, #572]	; (80015bc <main+0x304>)
 8001380:	f009 fe59 	bl	800b036 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001384:	488e      	ldr	r0, [pc, #568]	; (80015c0 <main+0x308>)
 8001386:	f009 fe56 	bl	800b036 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800138a:	213c      	movs	r1, #60	; 0x3c
 800138c:	488d      	ldr	r0, [pc, #564]	; (80015c4 <main+0x30c>)
 800138e:	f009 ff6f 	bl	800b270 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001392:	213c      	movs	r1, #60	; 0x3c
 8001394:	488c      	ldr	r0, [pc, #560]	; (80015c8 <main+0x310>)
 8001396:	f009 ff6b 	bl	800b270 <HAL_TIM_Encoder_Start>
  htim2.Instance->CNT = ENC_ZERO;
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <main+0x310>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  htim3.Instance->CNT = ENC_ZERO;
 80013a4:	4b87      	ldr	r3, [pc, #540]	; (80015c4 <main+0x30c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

  initialize_PID(kp, ki, kd);
 80013ae:	4b87      	ldr	r3, [pc, #540]	; (80015cc <main+0x314>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b218      	sxth	r0, r3
 80013b4:	4b86      	ldr	r3, [pc, #536]	; (80015d0 <main+0x318>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b219      	sxth	r1, r3
 80013ba:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <main+0x31c>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	f7ff fd3d 	bl	8000e40 <initialize_PID>

  HAL_ADC_Start_DMA(&hadc1, adc_measurements, 6);
 80013c6:	2206      	movs	r2, #6
 80013c8:	4983      	ldr	r1, [pc, #524]	; (80015d8 <main+0x320>)
 80013ca:	4884      	ldr	r0, [pc, #528]	; (80015dc <main+0x324>)
 80013cc:	f006 ffcc 	bl	8008368 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(adc_flag==1){
 80013d0:	4b83      	ldr	r3, [pc, #524]	; (80015e0 <main+0x328>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <main+0x128>

		  adc_flag=0;
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <main+0x328>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
	  }
	  if(adc_measurements[0]<2700){
 80013e0:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <main+0x320>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f640 228b 	movw	r2, #2699	; 0xa8b
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d808      	bhi.n	8001400 <main+0x148>
		  HAL_Delay(1000);
 80013ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f2:	f006 ff53 	bl	800829c <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80013f6:	2102      	movs	r1, #2
 80013f8:	486c      	ldr	r0, [pc, #432]	; (80015ac <main+0x2f4>)
 80013fa:	f008 f994 	bl	8009726 <HAL_GPIO_TogglePin>
 80013fe:	e7e7      	b.n	80013d0 <main+0x118>
	  }else{
		  if(timer_flag==1){
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <main+0x32c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d14d      	bne.n	80014a6 <main+0x1ee>
		  		  timer_flag=0;
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <main+0x32c>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		  		  L_pwm_pid = pid_calc(&pid_L, ENC_L.curr_speed, speed_mm*10);
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <main+0x330>)
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <main+0x334>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	461a      	mov	r2, r3
 8001426:	4872      	ldr	r0, [pc, #456]	; (80015f0 <main+0x338>)
 8001428:	f000 ff50 	bl	80022cc <pid_calc>
 800142c:	60f8      	str	r0, [r7, #12]
		  		  P_pwm_pid = pid_calc(&pid_P, ENC_P.curr_speed, speed_mm*10);
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <main+0x33c>)
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <main+0x334>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b21b      	sxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	461a      	mov	r2, r3
 8001444:	486c      	ldr	r0, [pc, #432]	; (80015f8 <main+0x340>)
 8001446:	f000 ff41 	bl	80022cc <pid_calc>
 800144a:	60b8      	str	r0, [r7, #8]
		  		  if(option=='g'){
 800144c:	4b6b      	ldr	r3, [pc, #428]	; (80015fc <main+0x344>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b67      	cmp	r3, #103	; 0x67
 8001454:	d127      	bne.n	80014a6 <main+0x1ee>
		  			  printf("SET: %d     MEAS:  %d     RES:  %d \r\n", speed_mm*10, ENC_L.curr_speed, L_pwm_pid );
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <main+0x334>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b21b      	sxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4619      	mov	r1, r3
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <main+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4864      	ldr	r0, [pc, #400]	; (8001600 <main+0x348>)
 8001470:	f00c fa34 	bl	800d8dc <iprintf>
		  			  PWM(speed_mm*10+L_pwm_pid, speed_mm*10+P_pwm_pid);
 8001474:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <main+0x334>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b21b      	sxth	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	18d0      	adds	r0, r2, r3
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <main+0x334>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b21b      	sxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fbdb 	bl	8000c5c <PWM>
		  		  }
		  	  }
		  	  if(rx_flag==1){
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <main+0x34c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d18f      	bne.n	80013d0 <main+0x118>
		  		  switch(direction){
 80014b0:	4b55      	ldr	r3, [pc, #340]	; (8001608 <main+0x350>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3b61      	subs	r3, #97	; 0x61
 80014b6:	2b16      	cmp	r3, #22
 80014b8:	f200 80bd 	bhi.w	8001636 <main+0x37e>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <main+0x20c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	0800154b 	.word	0x0800154b
 80014c8:	08001637 	.word	0x08001637
 80014cc:	08001637 	.word	0x08001637
 80014d0:	0800160d 	.word	0x0800160d
 80014d4:	08001637 	.word	0x08001637
 80014d8:	08001637 	.word	0x08001637
 80014dc:	08001637 	.word	0x08001637
 80014e0:	08001637 	.word	0x08001637
 80014e4:	08001637 	.word	0x08001637
 80014e8:	08001637 	.word	0x08001637
 80014ec:	08001637 	.word	0x08001637
 80014f0:	08001637 	.word	0x08001637
 80014f4:	08001637 	.word	0x08001637
 80014f8:	08001637 	.word	0x08001637
 80014fc:	08001637 	.word	0x08001637
 8001500:	08001637 	.word	0x08001637
 8001504:	08001637 	.word	0x08001637
 8001508:	08001637 	.word	0x08001637
 800150c:	08001575 	.word	0x08001575
 8001510:	08001637 	.word	0x08001637
 8001514:	08001637 	.word	0x08001637
 8001518:	08001637 	.word	0x08001637
 800151c:	08001521 	.word	0x08001521
		  		 case 'w':
					  PWM(speed_mm*10,speed_mm*10);
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <main+0x334>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b21b      	sxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4618      	mov	r0, r3
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <main+0x334>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b21b      	sxth	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb8a 	bl	8000c5c <PWM>
					  break;
 8001548:	e075      	b.n	8001636 <main+0x37e>
				  case 'a':
					  PWM(-speed_mm*6,speed_mm*6);
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <main+0x334>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b21b      	sxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4613      	mov	r3, r2
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4618      	mov	r0, r3
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <main+0x334>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b21b      	sxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb75 	bl	8000c5c <PWM>
					  break;
 8001572:	e060      	b.n	8001636 <main+0x37e>
				  case 's':
					  PWM(-speed_mm*10,-speed_mm*10);
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <main+0x334>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b21b      	sxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	f06f 0309 	mvn.w	r3, #9
 8001580:	fb03 f202 	mul.w	r2, r3, r2
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <main+0x334>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	f06f 0309 	mvn.w	r3, #9
 8001590:	fb03 f301 	mul.w	r3, r3, r1
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff fb60 	bl	8000c5c <PWM>
					  break;
 800159c:	e04b      	b.n	8001636 <main+0x37e>
 800159e:	bf00      	nop
 80015a0:	20000a94 	.word	0x20000a94
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	20000a90 	.word	0x20000a90
 80015b4:	200009a8 	.word	0x200009a8
 80015b8:	200007f4 	.word	0x200007f4
 80015bc:	20000848 	.word	0x20000848
 80015c0:	200009e8 	.word	0x200009e8
 80015c4:	20000898 	.word	0x20000898
 80015c8:	20000bc4 	.word	0x20000bc4
 80015cc:	20000362 	.word	0x20000362
 80015d0:	20000364 	.word	0x20000364
 80015d4:	20000366 	.word	0x20000366
 80015d8:	200007e8 	.word	0x200007e8
 80015dc:	200008d8 	.word	0x200008d8
 80015e0:	20000358 	.word	0x20000358
 80015e4:	20000357 	.word	0x20000357
 80015e8:	20000a88 	.word	0x20000a88
 80015ec:	2000035a 	.word	0x2000035a
 80015f0:	20000950 	.word	0x20000950
 80015f4:	20000920 	.word	0x20000920
 80015f8:	20000b14 	.word	0x20000b14
 80015fc:	2000035c 	.word	0x2000035c
 8001600:	0800dda8 	.word	0x0800dda8
 8001604:	20000355 	.word	0x20000355
 8001608:	20000354 	.word	0x20000354
				  case 'd':
					  PWM(speed_mm*6,-speed_mm*6);
 800160c:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <main+0x590>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b21b      	sxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4618      	mov	r0, r3
 800161e:	4b8a      	ldr	r3, [pc, #552]	; (8001848 <main+0x590>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b21b      	sxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fb14 	bl	8000c5c <PWM>
					  break;
 8001634:	bf00      	nop


		  		  }
		  		  if(direction != ' '){
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <main+0x594>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b20      	cmp	r3, #32
 800163c:	d00c      	beq.n	8001658 <main+0x3a0>
		  			  HAL_Delay(100);
 800163e:	2064      	movs	r0, #100	; 0x64
 8001640:	f006 fe2c 	bl	800829c <HAL_Delay>
		  			  printf("Stopping\r\n");
 8001644:	4882      	ldr	r0, [pc, #520]	; (8001850 <main+0x598>)
 8001646:	f00c f9bd 	bl	800d9c4 <puts>
		  			  PWM(0,0);
 800164a:	2100      	movs	r1, #0
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fb05 	bl	8000c5c <PWM>
		  			  direction=' ';
 8001652:	4b7e      	ldr	r3, [pc, #504]	; (800184c <main+0x594>)
 8001654:	2220      	movs	r2, #32
 8001656:	701a      	strb	r2, [r3, #0]
		  		  }

		  		  switch(option){
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <main+0x59c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3b51      	subs	r3, #81	; 0x51
 8001660:	2b29      	cmp	r3, #41	; 0x29
 8001662:	f200 80ec 	bhi.w	800183e <main+0x586>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <main+0x3b4>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	080017b9 	.word	0x080017b9
 8001670:	0800183f 	.word	0x0800183f
 8001674:	0800183f 	.word	0x0800183f
 8001678:	0800183f 	.word	0x0800183f
 800167c:	0800183f 	.word	0x0800183f
 8001680:	0800183f 	.word	0x0800183f
 8001684:	0800183f 	.word	0x0800183f
 8001688:	0800183f 	.word	0x0800183f
 800168c:	0800183f 	.word	0x0800183f
 8001690:	0800183f 	.word	0x0800183f
 8001694:	0800183f 	.word	0x0800183f
 8001698:	0800183f 	.word	0x0800183f
 800169c:	08001803 	.word	0x08001803
 80016a0:	0800183f 	.word	0x0800183f
 80016a4:	0800183f 	.word	0x0800183f
 80016a8:	0800183f 	.word	0x0800183f
 80016ac:	0800183f 	.word	0x0800183f
 80016b0:	0800183f 	.word	0x0800183f
 80016b4:	0800183f 	.word	0x0800183f
 80016b8:	0800183f 	.word	0x0800183f
 80016bc:	0800183f 	.word	0x0800183f
 80016c0:	0800183f 	.word	0x0800183f
 80016c4:	0800183f 	.word	0x0800183f
 80016c8:	0800183f 	.word	0x0800183f
 80016cc:	0800183f 	.word	0x0800183f
 80016d0:	0800183f 	.word	0x0800183f
 80016d4:	08001715 	.word	0x08001715
 80016d8:	0800183f 	.word	0x0800183f
 80016dc:	0800183f 	.word	0x0800183f
 80016e0:	0800183f 	.word	0x0800183f
 80016e4:	0800183f 	.word	0x0800183f
 80016e8:	080017ad 	.word	0x080017ad
 80016ec:	0800183f 	.word	0x0800183f
 80016f0:	0800180f 	.word	0x0800180f
 80016f4:	0800183f 	.word	0x0800183f
 80016f8:	0800183f 	.word	0x0800183f
 80016fc:	0800183f 	.word	0x0800183f
 8001700:	0800183f 	.word	0x0800183f
 8001704:	0800183f 	.word	0x0800183f
 8001708:	0800183f 	.word	0x0800183f
 800170c:	0800183f 	.word	0x0800183f
 8001710:	080017ef 	.word	0x080017ef
		  		case 'k':
					  sensor = speed_mm/100;
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <main+0x590>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <main+0x5a0>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	1152      	asrs	r2, r2, #5
 8001722:	17db      	asrs	r3, r3, #31
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b21b      	sxth	r3, r3
 8001728:	71fb      	strb	r3, [r7, #7]
					  printf("Measuring IR %d sensor value .... \r\n", sensor);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	484b      	ldr	r0, [pc, #300]	; (800185c <main+0x5a4>)
 8001730:	f00c f8d4 	bl	800d8dc <iprintf>
					  PT_change_sensor(sensor);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc7a 	bl	8001030 <PT_change_sensor>
					  IR_set(sensor);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fd18 	bl	8001174 <IR_set>
					  HAL_Delay(250);
 8001744:	20fa      	movs	r0, #250	; 0xfa
 8001746:	f006 fda9 	bl	800829c <HAL_Delay>
					  printf("ADC MEASUREMENTS \r\n");
 800174a:	4845      	ldr	r0, [pc, #276]	; (8001860 <main+0x5a8>)
 800174c:	f00c f93a 	bl	800d9c4 <puts>
					  printf(" Batt : %d \r\n", adc_measurements[0]);
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <main+0x5ac>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	4843      	ldr	r0, [pc, #268]	; (8001868 <main+0x5b0>)
 800175a:	f00c f8bf 	bl	800d8dc <iprintf>
					  printf(" KTIR_1 : %d \r\n", adc_measurements[1]);
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <main+0x5ac>)
 8001760:	885b      	ldrh	r3, [r3, #2]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	4841      	ldr	r0, [pc, #260]	; (800186c <main+0x5b4>)
 8001768:	f00c f8b8 	bl	800d8dc <iprintf>
					  printf(" KTIR_2 : %d \r\n", adc_measurements[2]);
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <main+0x5ac>)
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	483e      	ldr	r0, [pc, #248]	; (8001870 <main+0x5b8>)
 8001776:	f00c f8b1 	bl	800d8dc <iprintf>
					  printf(" KTIR_3 : %d \r\n", adc_measurements[3]);
 800177a:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <main+0x5ac>)
 800177c:	88db      	ldrh	r3, [r3, #6]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	483c      	ldr	r0, [pc, #240]	; (8001874 <main+0x5bc>)
 8001784:	f00c f8aa 	bl	800d8dc <iprintf>
					  printf(" KTIR_4 : %d \r\n", adc_measurements[4]);
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <main+0x5ac>)
 800178a:	891b      	ldrh	r3, [r3, #8]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	4839      	ldr	r0, [pc, #228]	; (8001878 <main+0x5c0>)
 8001792:	f00c f8a3 	bl	800d8dc <iprintf>
					  printf(" IR sensor : %d \r\n", adc_measurements[5]);
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <main+0x5ac>)
 8001798:	895b      	ldrh	r3, [r3, #10]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	4837      	ldr	r0, [pc, #220]	; (800187c <main+0x5c4>)
 80017a0:	f00c f89c 	bl	800d8dc <iprintf>
					  option=' ';
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <main+0x59c>)
 80017a6:	2220      	movs	r2, #32
 80017a8:	701a      	strb	r2, [r3, #0]
					  break;
 80017aa:	e048      	b.n	800183e <main+0x586>
		  		  case 'p':
		  			  read_encoders();
 80017ac:	f7fe ffe8 	bl	8000780 <read_encoders>
		  			  option=' ';
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <main+0x59c>)
 80017b2:	2220      	movs	r2, #32
 80017b4:	701a      	strb	r2, [r3, #0]
		  			  break;
 80017b6:	e042      	b.n	800183e <main+0x586>
		  		  case 'Q':
		  			  printf("Kp %d  Ki  %d  Kd  %d \r\n", kp, ki, kd );
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <main+0x5c8>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4619      	mov	r1, r3
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <main+0x5cc>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <main+0x5d0>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	482f      	ldr	r0, [pc, #188]	; (800188c <main+0x5d4>)
 80017d0:	f00c f884 	bl	800d8dc <iprintf>
		  			  initialize_PID(kp, ki, kd);
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <main+0x5c8>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b218      	sxth	r0, r3
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <main+0x5cc>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b219      	sxth	r1, r3
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <main+0x5d0>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f7ff fb2a 	bl	8000e40 <initialize_PID>
		  			  break;
 80017ec:	e027      	b.n	800183e <main+0x586>
		  		  case 'z':
		  			  ENC_L.absolute_pos=0;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <main+0x5d8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
		  			  ENC_P.absolute_pos=0;
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <main+0x5dc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
		  			  option=' ';
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <main+0x59c>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	701a      	strb	r2, [r3, #0]
		  			  break;
 8001800:	e01d      	b.n	800183e <main+0x586>
		  		  case ']':
		  			  pos_and_speed_measurement();
 8001802:	f7ff faed 	bl	8000de0 <pos_and_speed_measurement>
		  			  option=' ';
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <main+0x59c>)
 8001808:	2220      	movs	r2, #32
 800180a:	701a      	strb	r2, [r3, #0]
		  			  break;
 800180c:	e017      	b.n	800183e <main+0x586>
		  		  case 'r':
		  			  PWM(speed_mm*10, speed_mm*10);
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <main+0x590>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b21b      	sxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4618      	mov	r0, r3
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <main+0x590>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b21b      	sxth	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff fa13 	bl	8000c5c <PWM>
		  			  option=' ';
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <main+0x59c>)
 8001838:	2220      	movs	r2, #32
 800183a:	701a      	strb	r2, [r3, #0]
		  			  break;
 800183c:	bf00      	nop
		  		  case 'g':
		  			  break;
		  		  }
		  		  rx_flag=0;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <main+0x5e0>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
	  if(adc_flag==1){
 8001844:	e5c4      	b.n	80013d0 <main+0x118>
 8001846:	bf00      	nop
 8001848:	2000035a 	.word	0x2000035a
 800184c:	20000354 	.word	0x20000354
 8001850:	0800ddd0 	.word	0x0800ddd0
 8001854:	2000035c 	.word	0x2000035c
 8001858:	51eb851f 	.word	0x51eb851f
 800185c:	0800dddc 	.word	0x0800dddc
 8001860:	0800de04 	.word	0x0800de04
 8001864:	200007e8 	.word	0x200007e8
 8001868:	0800de18 	.word	0x0800de18
 800186c:	0800de28 	.word	0x0800de28
 8001870:	0800de38 	.word	0x0800de38
 8001874:	0800de48 	.word	0x0800de48
 8001878:	0800de58 	.word	0x0800de58
 800187c:	0800de68 	.word	0x0800de68
 8001880:	20000362 	.word	0x20000362
 8001884:	20000364 	.word	0x20000364
 8001888:	20000366 	.word	0x20000366
 800188c:	0800de7c 	.word	0x0800de7c
 8001890:	20000a88 	.word	0x20000a88
 8001894:	20000920 	.word	0x20000920
 8001898:	20000355 	.word	0x20000355

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f00b fc9d 	bl	800d1ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <SystemClock_Config+0xc8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <SystemClock_Config+0xc8>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <SystemClock_Config+0xc8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <SystemClock_Config+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <SystemClock_Config+0xcc>)
 80018e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <SystemClock_Config+0xcc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001900:	2310      	movs	r3, #16
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001904:	2302      	movs	r3, #2
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800190c:	2308      	movs	r3, #8
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001910:	2360      	movs	r3, #96	; 0x60
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001918:	2304      	movs	r3, #4
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	4618      	mov	r0, r3
 8001922:	f008 febd 	bl	800a6a0 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800192c:	f000 fc3c 	bl	80021a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f009 f918 	bl	800ab80 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001956:	f000 fc27 	bl	80021a8 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	; 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <MX_ADC1_Init+0x128>)
 8001982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001986:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800198a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <MX_ADC1_Init+0x124>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001994:	2201      	movs	r2, #1
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <MX_ADC1_Init+0x124>)
 800199a:	2201      	movs	r2, #1
 800199c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019ae:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <MX_ADC1_Init+0x12c>)
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019ba:	2206      	movs	r2, #6
 80019bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019cc:	4830      	ldr	r0, [pc, #192]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019ce:	f006 fc87 	bl	80082e0 <HAL_ADC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019d8:	f000 fbe6 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019e4:	2307      	movs	r3, #7
 80019e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4828      	ldr	r0, [pc, #160]	; (8001a90 <MX_ADC1_Init+0x124>)
 80019ee:	f006 fdad 	bl	800854c <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019f8:	f000 fbd6 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80019fc:	230f      	movs	r3, #15
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4821      	ldr	r0, [pc, #132]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001a0a:	f006 fd9f 	bl	800854c <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a14:	f000 fbc8 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	481a      	ldr	r0, [pc, #104]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001a26:	f006 fd91 	bl	800854c <HAL_ADC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001a30:	f000 fbba 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a34:	2303      	movs	r3, #3
 8001a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001a42:	f006 fd83 	bl	800854c <HAL_ADC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001a4c:	f000 fbac 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a50:	2304      	movs	r3, #4
 8001a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a54:	2305      	movs	r3, #5
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001a5e:	f006 fd75 	bl	800854c <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001a68:	f000 fb9e 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001a70:	2306      	movs	r3, #6
 8001a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_ADC1_Init+0x124>)
 8001a7a:	f006 fd67 	bl	800854c <HAL_ADC_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001a84:	f000 fb90 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200008d8 	.word	0x200008d8
 8001a94:	40012000 	.word	0x40012000
 8001a98:	0f000001 	.word	0x0f000001

08001a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f007 fe57 	bl	800978c <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f000 fb60 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200007f4 	.word	0x200007f4
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <MX_SPI1_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b2c:	2218      	movs	r2, #24
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b4a:	f009 f9e5 	bl	800af18 <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b54:	f000 fb28 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000b6c 	.word	0x20000b6c
 8001b60:	40013000 	.word	0x40013000

08001b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	; 0x58
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2220      	movs	r2, #32
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00b fb24 	bl	800d1ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001ba4:	4a44      	ldr	r2, [pc, #272]	; (8001cb8 <MX_TIM1_Init+0x154>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001baa:	2218      	movs	r2, #24
 8001bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bce:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bd0:	f009 fa06 	bl	800afe0 <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bda:	f000 fae5 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001be8:	4619      	mov	r1, r3
 8001bea:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bec:	f009 fd46 	bl	800b67c <HAL_TIM_ConfigClockSource>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bf6:	f000 fad7 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bfa:	482e      	ldr	r0, [pc, #184]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001bfc:	f009 fa3f 	bl	800b07e <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c06:	f000 facf 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c16:	4619      	mov	r1, r3
 8001c18:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001c1a:	f00a f8db 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c24:	f000 fac0 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4819      	ldr	r0, [pc, #100]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001c4e:	f009 fc4f 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c58:	f000 faa6 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	2204      	movs	r2, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001c66:	f009 fc43 	bl	800b4f0 <HAL_TIM_PWM_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c70:	f000 fa9a 	bl	80021a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001c98:	f00a f90a 	bl	800beb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ca2:	f000 fa81 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM1_Init+0x150>)
 8001ca8:	f000 fe1c 	bl	80028e4 <HAL_TIM_MspPostInit>

}
 8001cac:	bf00      	nop
 8001cae:	3758      	adds	r7, #88	; 0x58
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000a94 	.word	0x20000a94
 8001cb8:	40010000 	.word	0x40010000

08001cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00b fa8d 	bl	800d1ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001ce8:	2210      	movs	r2, #16
 8001cea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001d2c:	f009 fa0e 	bl	800b14c <HAL_TIM_Encoder_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d36:	f000 fa37 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <MX_TIM2_Init+0xa4>)
 8001d48:	f00a f844 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d52:	f000 fa29 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000bc4 	.word	0x20000bc4

08001d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00b fa39 	bl	800d1ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <MX_TIM3_Init+0xa4>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001dd2:	f009 f9bb 	bl	800b14c <HAL_TIM_Encoder_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f000 f9e4 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_TIM3_Init+0xa0>)
 8001dee:	f009 fff1 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001df8:	f000 f9d6 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3730      	adds	r7, #48	; 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000898 	.word	0x20000898
 8001e08:	40000400 	.word	0x40000400

08001e0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <MX_TIM10_Init+0x44>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e1c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e2a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_TIM10_Init+0x40>)
 8001e3a:	f009 f8d1 	bl	800afe0 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001e44:	f000 f9b0 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000848 	.word	0x20000848
 8001e50:	40014400 	.word	0x40014400

08001e54 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <MX_TIM11_Init+0x44>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4799;
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e60:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001e64:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e72:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_TIM11_Init+0x40>)
 8001e82:	f009 f8ad 	bl	800afe0 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001e8c:	f000 f98c 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200009e8 	.word	0x200009e8
 8001e98:	40014800 	.word	0x40014800

08001e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_USART1_UART_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	f00a f852 	bl	800bf7c <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 f963 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200009a8 	.word	0x200009a8
 8001eec:	40011000 	.word	0x40011000

08001ef0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART6_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART6_UART_Init+0x4c>)
 8001f28:	f00a f828 	bl	800bf7c <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f939 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000ad4 	.word	0x20000ad4
 8001f40:	40011400 	.word	0x40011400

08001f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_DMA_Init+0x3c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <MX_DMA_Init+0x3c>)
 8001f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_DMA_Init+0x3c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2038      	movs	r0, #56	; 0x38
 8001f6c:	f006 fe79 	bl	8008c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f70:	2038      	movs	r0, #56	; 0x38
 8001f72:	f006 fe92 	bl	8008c9a <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <MX_GPIO_Init+0x208>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a7a      	ldr	r2, [pc, #488]	; (800218c <MX_GPIO_Init+0x208>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b78      	ldr	r3, [pc, #480]	; (800218c <MX_GPIO_Init+0x208>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b74      	ldr	r3, [pc, #464]	; (800218c <MX_GPIO_Init+0x208>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a73      	ldr	r2, [pc, #460]	; (800218c <MX_GPIO_Init+0x208>)
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b71      	ldr	r3, [pc, #452]	; (800218c <MX_GPIO_Init+0x208>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	; (800218c <MX_GPIO_Init+0x208>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a6c      	ldr	r2, [pc, #432]	; (800218c <MX_GPIO_Init+0x208>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	; (800218c <MX_GPIO_Init+0x208>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	4b66      	ldr	r3, [pc, #408]	; (800218c <MX_GPIO_Init+0x208>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a65      	ldr	r2, [pc, #404]	; (800218c <MX_GPIO_Init+0x208>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <MX_GPIO_Init+0x208>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <MX_GPIO_Init+0x208>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a5e      	ldr	r2, [pc, #376]	; (800218c <MX_GPIO_Init+0x208>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <MX_GPIO_Init+0x208>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PT_A_Pin|PT_B_Pin|PT_C_Pin|VL_XSHUT_R_Pin
 8002026:	2200      	movs	r2, #0
 8002028:	f64f 7108 	movw	r1, #65288	; 0xff08
 800202c:	4858      	ldr	r0, [pc, #352]	; (8002190 <MX_GPIO_Init+0x20c>)
 800202e:	f007 fb61 	bl	80096f4 <HAL_GPIO_WritePin>
                          |L_IN1_Pin|L_IN2_Pin|VL_XSHUT_L_Pin|VL_XSHUT_F_Pin
                          |IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|IR_C_Pin
 8002032:	2200      	movs	r2, #0
 8002034:	f24e 4106 	movw	r1, #58374	; 0xe406
 8002038:	4856      	ldr	r0, [pc, #344]	; (8002194 <MX_GPIO_Init+0x210>)
 800203a:	f007 fb5b 	bl	80096f4 <HAL_GPIO_WritePin>
                          |IR_B_Pin|IR_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_IN2_Pin|R_IN1_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002044:	4854      	ldr	r0, [pc, #336]	; (8002198 <MX_GPIO_Init+0x214>)
 8002046:	f007 fb55 	bl	80096f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PT_A_Pin PT_B_Pin PT_C_Pin */
  GPIO_InitStruct.Pin = PT_A_Pin|PT_B_Pin|PT_C_Pin;
 800204a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002054:	2302      	movs	r3, #2
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	484b      	ldr	r0, [pc, #300]	; (8002190 <MX_GPIO_Init+0x20c>)
 8002064:	f007 f9c4 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_1_Pin */
  GPIO_InitStruct.Pin = BUT_1_Pin;
 8002068:	2302      	movs	r3, #2
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_1_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4848      	ldr	r0, [pc, #288]	; (800219c <MX_GPIO_Init+0x218>)
 800207c:	f007 f9b8 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL_INT_R_Pin VL_INT_F_Pin VL_INT_L_Pin */
  GPIO_InitStruct.Pin = VL_INT_R_Pin|VL_INT_F_Pin|VL_INT_L_Pin;
 8002080:	2307      	movs	r3, #7
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002084:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <MX_GPIO_Init+0x21c>)
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	483f      	ldr	r0, [pc, #252]	; (8002190 <MX_GPIO_Init+0x20c>)
 8002094:	f007 f9ac 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL_XSHUT_R_Pin L_IN1_Pin L_IN2_Pin VL_XSHUT_L_Pin
                           VL_XSHUT_F_Pin IMU_CS_Pin */
  GPIO_InitStruct.Pin = VL_XSHUT_R_Pin|L_IN1_Pin|L_IN2_Pin|VL_XSHUT_L_Pin
 8002098:	f641 7308 	movw	r3, #7944	; 0x1f08
 800209c:	617b      	str	r3, [r7, #20]
                          |VL_XSHUT_F_Pin|IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4837      	ldr	r0, [pc, #220]	; (8002190 <MX_GPIO_Init+0x20c>)
 80020b2:	f007 f99d 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 80020b6:	f240 4306 	movw	r3, #1030	; 0x406
 80020ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4831      	ldr	r0, [pc, #196]	; (8002194 <MX_GPIO_Init+0x210>)
 80020d0:	f007 f98e 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_C_Pin IR_B_Pin IR_A_Pin */
  GPIO_InitStruct.Pin = IR_C_Pin|IR_B_Pin|IR_A_Pin;
 80020d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020de:	2302      	movs	r3, #2
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4829      	ldr	r0, [pc, #164]	; (8002194 <MX_GPIO_Init+0x210>)
 80020ee:	f007 f97f 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_IN2_Pin R_IN1_Pin */
  GPIO_InitStruct.Pin = R_IN2_Pin|R_IN1_Pin;
 80020f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4823      	ldr	r0, [pc, #140]	; (8002198 <MX_GPIO_Init+0x214>)
 800210c:	f007 f970 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_2_Pin */
  GPIO_InitStruct.Pin = BUT_2_Pin;
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_GPIO_Init+0x21c>)
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_2_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	481c      	ldr	r0, [pc, #112]	; (8002198 <MX_GPIO_Init+0x214>)
 8002126:	f007 f963 	bl	80093f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800212a:	2304      	movs	r3, #4
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4819      	ldr	r0, [pc, #100]	; (80021a4 <MX_GPIO_Init+0x220>)
 800213e:	f007 f957 	bl	80093f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2006      	movs	r0, #6
 8002148:	f006 fd8b 	bl	8008c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800214c:	2006      	movs	r0, #6
 800214e:	f006 fda4 	bl	8008c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	2007      	movs	r0, #7
 8002158:	f006 fd83 	bl	8008c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800215c:	2007      	movs	r0, #7
 800215e:	f006 fd9c 	bl	8008c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2008      	movs	r0, #8
 8002168:	f006 fd7b 	bl	8008c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800216c:	2008      	movs	r0, #8
 800216e:	f006 fd94 	bl	8008c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f006 fd73 	bl	8008c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800217c:	2028      	movs	r0, #40	; 0x28
 800217e:	f006 fd8c 	bl	8008c9a <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020800 	.word	0x40020800
 8002194:	40020400 	.word	0x40020400
 8002198:	40020000 	.word	0x40020000
 800219c:	40021c00 	.word	0x40021c00
 80021a0:	10110000 	.word	0x10110000
 80021a4:	40020c00 	.word	0x40020c00

080021a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <pid_init>:
 */

#include "pid.h"

void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b089      	sub	sp, #36	; 0x24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6178      	str	r0, [r7, #20]
 80021be:	ed87 0a04 	vstr	s0, [r7, #16]
 80021c2:	edc7 0a03 	vstr	s1, [r7, #12]
 80021c6:	ed87 1a02 	vstr	s2, [r7, #8]
 80021ca:	460b      	mov	r3, r1
 80021cc:	603a      	str	r2, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
    uint32_t k;
    pid->power = 1;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2201      	movs	r2, #1
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34

    for (k = 0; k < f; ++k){
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e007      	b.n	80021ec <pid_init+0x36>
        pid->power = pid->power * 2;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	005a      	lsls	r2, r3, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
    for (k = 0; k < f; ++k){
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3f3      	bcc.n	80021dc <pid_init+0x26>
    }
    pid->f = f;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pid->p = (int32_t) (p * pid->power);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002208:	edd7 7a04 	vldr	s15, [r7, #16]
 800220c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002214:	ee17 2a90 	vmov	r2, s15
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
    pid->i = (int32_t) (i * pid->power);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002228:	edd7 7a03 	vldr	s15, [r7, #12]
 800222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002234:	ee17 2a90 	vmov	r2, s15
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	605a      	str	r2, [r3, #4]
    pid->d = (int32_t) (d * pid->power);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002248:	edd7 7a02 	vldr	s15, [r7, #8]
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002254:	ee17 2a90 	vmov	r2, s15
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	609a      	str	r2, [r3, #8]
    pid->p_val = 0;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    pid->i_val = 0;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
    pid->d_val = 0;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
    pid->p_max = INT32_MAX;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002274:	619a      	str	r2, [r3, #24]
    pid->p_min = INT32_MIN;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
    pid->i_max = INT32_MAX;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002284:	61da      	str	r2, [r3, #28]
    pid->i_min = INT32_MIN;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
    pid->d_max = INT32_MAX;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002294:	621a      	str	r2, [r3, #32]
    pid->d_min = INT32_MIN;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->e_last = 0;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
    pid->sum = 0;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
    pid->total_max = INT32_MAX;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022b0:	649a      	str	r2, [r3, #72]	; 0x48
    pid->total_min = INT32_MIN;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
    pid->dt_ms = dt_ms;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
}
 80022c0:	bf00      	nop
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b08b      	sub	sp, #44	; 0x2c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
    int32_t p, i, d, e, total;
    pid->mv = mv;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->dv = dv;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38

    //Wyliczony blad (uchyb) regulacji jako roznica miedzy wartoscia zadana a zmierzona
    e = pid->dv - pid->mv;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
    //Obliczenie czlonu proporcjonalnego jako iloczyn wspolczynnika p oraz uchybu
    p = pid->p * e;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

    if (p > pid->p_max)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	429a      	cmp	r2, r3
 8002304:	dd03      	ble.n	800230e <pid_calc+0x42>
        p = pid->p_max;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e007      	b.n	800231e <pid_calc+0x52>
    else if (p < pid->p_min)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	429a      	cmp	r2, r3
 8002316:	da02      	bge.n	800231e <pid_calc+0x52>
        p = pid->p_min;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	627b      	str	r3, [r7, #36]	; 0x24

    pid->p_val = p >> pid->f;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002324:	461a      	mov	r2, r3
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa43 f202 	asr.w	r2, r3, r2
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	60da      	str	r2, [r3, #12]



    // Wartosc czlon calkujacego to suma dotychczasowych wartości tego członu zaktualizowana
    // o najnowsza wartosc. Czyli uchyb mnożony przez wspolczynnik oraz chwile czasu z zachowaniem jednostki sekund
    i = pid->sum;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	623b      	str	r3, [r7, #32]
    i += (pid->dt_ms * pid->i * e)/1000;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6852      	ldr	r2, [r2, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <pid_calc+0x16c>)
 800234a:	fb82 1203 	smull	r1, r2, r2, r3
 800234e:	1192      	asrs	r2, r2, #6
 8002350:	17db      	asrs	r3, r3, #31
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	4413      	add	r3, r2
 8002358:	623b      	str	r3, [r7, #32]


    if (i > pid->i_max){
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	6a3a      	ldr	r2, [r7, #32]
 8002360:	429a      	cmp	r2, r3
 8002362:	dd03      	ble.n	800236c <pid_calc+0xa0>
        i = pid->i_max;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	e00a      	b.n	8002382 <pid_calc+0xb6>
    }else if (i < pid->i_min){
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	429a      	cmp	r2, r3
 8002374:	da05      	bge.n	8002382 <pid_calc+0xb6>
        i = pid->i_min;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	623b      	str	r3, [r7, #32]
        pid->sum = i;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    };

    pid->i_val = i >> pid->f;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002388:	461a      	mov	r2, r3
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	fa43 f202 	asr.w	r2, r3, r2
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	611a      	str	r2, [r3, #16]

    // Wartosc czlonu rozniczkujacego to iloczyn wspolczynnika pomnozony przez zmiane uchyba (de) oraz
    // pomnozony przez iloraz 1 i stalej czasowej rozniczkowania ( w tym wypadku mozna zapisac po prostu
    // jako dzielenie przez stala czasowa)
    d = (pid->d * (e - pid->e_last))/pid->dt_ms;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	1a8a      	subs	r2, r1, r2
 80023a0:	fb02 f203 	mul.w	r2, r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80023ac:	61fb      	str	r3, [r7, #28]

    if (d > pid->d_max){
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dd03      	ble.n	80023c0 <pid_calc+0xf4>
    	d = pid->d_max;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e007      	b.n	80023d0 <pid_calc+0x104>
    }else if (d < pid->d_min){
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	da02      	bge.n	80023d0 <pid_calc+0x104>
    	d = pid->d_min;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	61fb      	str	r3, [r7, #28]
    };


    pid->d_val = d >> pid->f;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d6:	461a      	mov	r2, r3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa43 f202 	asr.w	r2, r3, r2
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	615a      	str	r2, [r3, #20]


    total = p + i + d;
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	4413      	add	r3, r2
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]

    if (total > pid->total_max)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dd03      	ble.n	8002400 <pid_calc+0x134>
        total = pid->total_max;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e007      	b.n	8002410 <pid_calc+0x144>
    else if (total < pid->total_min)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	429a      	cmp	r2, r3
 8002408:	da02      	bge.n	8002410 <pid_calc+0x144>
        total = pid->total_min;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	61bb      	str	r3, [r7, #24]

    pid->control = total >> pid->f;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002416:	461a      	mov	r2, r3
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa43 f202 	asr.w	r2, r3, r2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	651a      	str	r2, [r3, #80]	; 0x50
    pid->e_last = e;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

    return pid->control;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800242c:	4618      	mov	r0, r3
 800242e:	372c      	adds	r7, #44	; 0x2c
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <pid_scale>:




int32_t pid_scale(cpid_t * pid, float v)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	ed87 0a00 	vstr	s0, [r7]
    return v * pid->power;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002454:	edd7 7a00 	vldr	s15, [r7]
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002460:	ee17 3a90 	vmov	r3, s15
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3c      	ldr	r2, [pc, #240]	; (80025d0 <HAL_ADC_MspInit+0x110>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d171      	bne.n	80025c6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_ADC_MspInit+0x114>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_batt_Pin|KTIR_2_Pin|KTIR_3_Pin|KTIR_4_Pin
 8002536:	233d      	movs	r3, #61	; 0x3d
 8002538:	617b      	str	r3, [r7, #20]
                          |PT_MEAS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253a:	2303      	movs	r3, #3
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4823      	ldr	r0, [pc, #140]	; (80025d8 <HAL_ADC_MspInit+0x118>)
 800254a:	f006 ff51 	bl	80093f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KTIR_1_Pin;
 800254e:	2320      	movs	r3, #32
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KTIR_1_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	481e      	ldr	r0, [pc, #120]	; (80025dc <HAL_ADC_MspInit+0x11c>)
 8002562:	f006 ff45 	bl	80093f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_ADC_MspInit+0x124>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002584:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 8002598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 80025ac:	f006 fb90 	bl	8008cd0 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80025b6:	f7ff fdf7 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_ADC_MspInit+0x120>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40012000 	.word	0x40012000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020800 	.word	0x40020800
 80025e0:	20000a28 	.word	0x20000a28
 80025e4:	40026410 	.word	0x40026410

080025e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <HAL_I2C_MspInit+0x84>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12c      	bne.n	8002664 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_I2C_MspInit+0x88>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_I2C_MspInit+0x88>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_I2C_MspInit+0x88>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002630:	2301      	movs	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002638:	2304      	movs	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	480c      	ldr	r0, [pc, #48]	; (8002674 <HAL_I2C_MspInit+0x8c>)
 8002644:	f006 fed4 	bl	80093f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_I2C_MspInit+0x88>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_I2C_MspInit+0x88>)
 8002652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_I2C_MspInit+0x88>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40005400 	.word	0x40005400
 8002670:	40023800 	.word	0x40023800
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <HAL_SPI_MspInit+0x84>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d12b      	bne.n	80026f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_SPI_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80026d2:	2338      	movs	r3, #56	; 0x38
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026e2:	2305      	movs	r3, #5
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_SPI_MspInit+0x8c>)
 80026ee:	f006 fe7f 	bl	80093f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40013000 	.word	0x40013000
 8002700:	40023800 	.word	0x40023800
 8002704:	40020400 	.word	0x40020400

08002708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11e      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2019      	movs	r0, #25
 800273c:	f006 fa91 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002740:	2019      	movs	r0, #25
 8002742:	f006 faaa 	bl	8008c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201a      	movs	r0, #26
 800274c:	f006 fa89 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002750:	201a      	movs	r0, #26
 8002752:	f006 faa2 	bl	8008c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002756:	e036      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM10)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_TIM_Base_MspInit+0xd0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d116      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2019      	movs	r0, #25
 8002784:	f006 fa6d 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002788:	2019      	movs	r0, #25
 800278a:	f006 fa86 	bl	8008c9a <HAL_NVIC_EnableIRQ>
}
 800278e:	e01a      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM11)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_TIM_Base_MspInit+0xd4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d115      	bne.n	80027c6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0xcc>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	201a      	movs	r0, #26
 80027bc:	f006 fa51 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027c0:	201a      	movs	r0, #26
 80027c2:	f006 fa6a 	bl	8008c9a <HAL_NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800

080027e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d135      	bne.n	800286e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC_L_B_Pin|ENC_L_A_Pin;
 800283a:	f248 0302 	movw	r3, #32770	; 0x8002
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284c:	2301      	movs	r3, #1
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4821      	ldr	r0, [pc, #132]	; (80028dc <HAL_TIM_Encoder_MspInit+0xfc>)
 8002858:	f006 fdca 	bl	80093f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	201c      	movs	r0, #28
 8002862:	f006 f9fe 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002866:	201c      	movs	r0, #28
 8002868:	f006 fa17 	bl	8008c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800286c:	e030      	b.n	80028d0 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_TIM_Encoder_MspInit+0x100>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d12b      	bne.n	80028d0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4804      	ldr	r0, [pc, #16]	; (80028dc <HAL_TIM_Encoder_MspInit+0xfc>)
 80028cc:	f006 fd90 	bl	80093f0 <HAL_GPIO_Init>
}
 80028d0:	bf00      	nop
 80028d2:	3730      	adds	r7, #48	; 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40000400 	.word	0x40000400

080028e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_TIM_MspPostInit+0x68>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d11e      	bne.n	8002944 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_TIM_MspPostInit+0x6c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_TIM_MspPostInit+0x6c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_TIM_MspPostInit+0x6c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 8002922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002934:	2301      	movs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_TIM_MspPostInit+0x70>)
 8002940:	f006 fd56 	bl	80093f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010000 	.word	0x40010000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a36      	ldr	r2, [pc, #216]	; (8002a50 <HAL_UART_MspInit+0xf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d134      	bne.n	80029e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_TO_BT_Pin|RX_FROM_BT_Pin;
 80029b2:	23c0      	movs	r3, #192	; 0xc0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029c2:	2307      	movs	r3, #7
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	4822      	ldr	r0, [pc, #136]	; (8002a58 <HAL_UART_MspInit+0x100>)
 80029ce:	f006 fd0f 	bl	80093f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2025      	movs	r0, #37	; 0x25
 80029d8:	f006 f943 	bl	8008c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029dc:	2025      	movs	r0, #37	; 0x25
 80029de:	f006 f95c 	bl	8008c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80029e2:	e030      	b.n	8002a46 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_UART_MspInit+0x104>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12b      	bne.n	8002a46 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 80029f8:	f043 0320 	orr.w	r3, r3, #32
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_UART_MspInit+0xfc>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_TO_DEBUG_Pin|RX_FROM_DEBUG_Pin;
 8002a26:	23c0      	movs	r3, #192	; 0xc0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a36:	2308      	movs	r3, #8
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <HAL_UART_MspInit+0x108>)
 8002a42:	f006 fcd5 	bl	80093f0 <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	40020800 	.word	0x40020800

08002a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <HardFault_Handler+0x4>

08002a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <MemManage_Handler+0x4>

08002a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <BusFault_Handler+0x4>

08002a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <UsageFault_Handler+0x4>

08002a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab8:	f005 fbd0 	bl	800825c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f006 fe49 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f006 fe42 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}

08002adc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002ae0:	2004      	movs	r0, #4
 8002ae2:	f006 fe3b 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002af0:	4803      	ldr	r0, [pc, #12]	; (8002b00 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002af2:	f008 fbf4 	bl	800b2de <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002af8:	f008 fbf1 	bl	800b2de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000a94 	.word	0x20000a94
 8002b04:	20000848 	.word	0x20000848

08002b08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b0c:	4803      	ldr	r0, [pc, #12]	; (8002b1c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002b0e:	f008 fbe6 	bl	800b2de <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002b14:	f008 fbe3 	bl	800b2de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000a94 	.word	0x20000a94
 8002b20:	200009e8 	.word	0x200009e8

08002b24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM2_IRQHandler+0x10>)
 8002b2a:	f008 fbd8 	bl	800b2de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000bc4 	.word	0x20000bc4

08002b38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <USART1_IRQHandler+0x10>)
 8002b3e:	f009 fb59 	bl	800c1f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200009a8 	.word	0x200009a8

08002b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b54:	f006 fe02 	bl	800975c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA2_Stream0_IRQHandler+0x10>)
 8002b62:	f006 f9dd 	bl	8008f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000a28 	.word	0x20000a28

08002b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00a      	b.n	8002b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b82:	f3af 8000 	nop.w
 8002b86:	4601      	mov	r1, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	b2ca      	uxtb	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf0      	blt.n	8002b82 <_read+0x12>
	}

return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_isatty>:

int _isatty(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f00a f8be 	bl	800cdc4 <__errno>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20020000 	.word	0x20020000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	20000368 	.word	0x20000368
 8002c7c:	20000c50 	.word	0x20000c50

08002c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <SystemInit+0x28>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <SystemInit+0x28>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SystemInit+0x28>)
 8002c96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f001 fcd8 	bl	8004672 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	218a      	movs	r1, #138	; 0x8a
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f004 ffdf 	bl	8007cb0 <VL53L0X_WrByte>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b096      	sub	sp, #88	; 0x58
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002d12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2188      	movs	r1, #136	; 0x88
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f004 ffc6 	bl	8007cb0 <VL53L0X_WrByte>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d38:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d42:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a9e      	ldr	r2, [pc, #632]	; (8002fc4 <VL53L0X_DataInit+0x2c0>)
 8002d4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a9d      	ldr	r2, [pc, #628]	; (8002fc8 <VL53L0X_DataInit+0x2c4>)
 8002d52:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fab4 	bl	80032d0 <VL53L0X_GetDeviceParameters>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002d6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002d76:	2300      	movs	r3, #0
 8002d78:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0410 	add.w	r4, r3, #16
 8002d84:	f107 0510 	add.w	r5, r7, #16
 8002d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2264      	movs	r2, #100	; 0x64
 8002da0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002daa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002db4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002dbe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f004 ff6e 	bl	8007cb0 <VL53L0X_WrByte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002de2:	2201      	movs	r2, #1
 8002de4:	21ff      	movs	r1, #255	; 0xff
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f004 ff62 	bl	8007cb0 <VL53L0X_WrByte>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f004 ff56 	bl	8007cb0 <VL53L0X_WrByte>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002e12:	f107 030f 	add.w	r3, r7, #15
 8002e16:	461a      	mov	r2, r3
 8002e18:	2191      	movs	r1, #145	; 0x91
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f004 ffce 	bl	8007dbc <VL53L0X_RdByte>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002e36:	2201      	movs	r2, #1
 8002e38:	2100      	movs	r1, #0
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f004 ff38 	bl	8007cb0 <VL53L0X_WrByte>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	21ff      	movs	r1, #255	; 0xff
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f004 ff2c 	bl	8007cb0 <VL53L0X_WrByte>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 ff20 	bl	8007cb0 <VL53L0X_WrByte>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
 8002e82:	e014      	b.n	8002eae <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002e84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2201      	movs	r2, #1
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fd43 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eaa:	3301      	adds	r3, #1
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	dde7      	ble.n	8002e84 <VL53L0X_DataInit+0x180>
 8002eb4:	e000      	b.n	8002eb8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002eb6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002eb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fd2b 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002ed0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2103      	movs	r1, #3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fd1f 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fd13 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002f00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fd07 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002f20:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002f24:	2100      	movs	r1, #0
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fdaa 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002f32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d108      	bne.n	8002f4c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f3e:	2101      	movs	r1, #1
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fd9d 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002f54:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002f58:	2102      	movs	r1, #2
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fd90 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2103      	movs	r1, #3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fd84 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	2101      	movs	r1, #1
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f004 fe8c 	bl	8007cb0 <VL53L0X_WrByte>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002fa6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002fb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3758      	adds	r7, #88	; 0x58
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	00016b85 	.word	0x00016b85
 8002fc8:	000970a4 	.word	0x000970a4

08002fcc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b09e      	sub	sp, #120	; 0x78
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f00a f901 	bl	800d1ea <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003008:	2101      	movs	r1, #1
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f002 fa87 	bl	800551e <VL53L0X_get_info_from_device>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800301c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800302c:	2b01      	cmp	r3, #1
 800302e:	d80d      	bhi.n	800304c <VL53L0X_StaticInit+0x80>
 8003030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303a:	2b20      	cmp	r3, #32
 800303c:	d806      	bhi.n	800304c <VL53L0X_StaticInit+0x80>
 800303e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10e      	bne.n	8003064 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d90b      	bls.n	8003064 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800304c:	f107 0218 	add.w	r2, r7, #24
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f001 fd06 	bl	8004a68 <VL53L0X_perform_ref_spad_management>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003062:	e009      	b.n	8003078 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003068:	461a      	mov	r2, r3
 800306a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f001 ff07 	bl	8004e80 <VL53L0X_set_reference_spads>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003078:	4b94      	ldr	r3, [pc, #592]	; (80032cc <VL53L0X_StaticInit+0x300>)
 800307a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800307c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800308a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800308e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800309c:	66bb      	str	r3, [r7, #104]	; 0x68
 800309e:	e001      	b.n	80030a4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80030a0:	4b8a      	ldr	r3, [pc, #552]	; (80032cc <VL53L0X_StaticInit+0x300>)
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80030a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80030ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f003 fdda 	bl	8006c68 <VL53L0X_load_tuning_settings>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80030ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2304      	movs	r3, #4
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f001 f8ff 	bl	80042d0 <VL53L0X_SetGpioConfig>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d121      	bne.n	8003124 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80030e0:	2201      	movs	r2, #1
 80030e2:	21ff      	movs	r1, #255	; 0xff
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f004 fde3 	bl	8007cb0 <VL53L0X_WrByte>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80030f0:	f107 031a 	add.w	r3, r7, #26
 80030f4:	461a      	mov	r2, r3
 80030f6:	2184      	movs	r1, #132	; 0x84
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f004 fe80 	bl	8007dfe <VL53L0X_RdWord>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003106:	4313      	orrs	r3, r2
 8003108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800310c:	2200      	movs	r2, #0
 800310e:	21ff      	movs	r1, #255	; 0xff
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f004 fdcd 	bl	8007cb0 <VL53L0X_WrByte>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800311e:	4313      	orrs	r3, r2
 8003120:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003124:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800312c:	8b7b      	ldrh	r3, [r7, #26]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003138:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8c2 	bl	80032d0 <VL53L0X_GetDeviceParameters>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003152:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003156:	2b00      	cmp	r3, #0
 8003158:	d110      	bne.n	800317c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800315a:	f107 0319 	add.w	r3, r7, #25
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f9a0 	bl	80034a6 <VL53L0X_GetFractionEnable>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800316c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003174:	7e7a      	ldrb	r2, [r7, #25]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800317c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10e      	bne.n	80031a2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 0410 	add.w	r4, r3, #16
 800318a:	f107 051c 	add.w	r5, r7, #28
 800318e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800319a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800319e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80031a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80031aa:	f107 0319 	add.w	r3, r7, #25
 80031ae:	461a      	mov	r2, r3
 80031b0:	2101      	movs	r1, #1
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f004 fe02 	bl	8007dbc <VL53L0X_RdByte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80031be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80031c6:	7e7a      	ldrb	r2, [r7, #25]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80031ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9d8 	bl	8003590 <VL53L0X_SetSequenceStepEnable>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80031e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80031ee:	2200      	movs	r2, #0
 80031f0:	2102      	movs	r1, #2
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9cc 	bl	8003590 <VL53L0X_SetSequenceStepEnable>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80031fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800320e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003216:	f107 0313 	add.w	r3, r7, #19
 800321a:	461a      	mov	r2, r3
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f99e 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800322a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003232:	7cfa      	ldrb	r2, [r7, #19]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800323a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003242:	f107 0313 	add.w	r3, r7, #19
 8003246:	461a      	mov	r2, r3
 8003248:	2101      	movs	r1, #1
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f988 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003256:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800325e:	7cfa      	ldrb	r2, [r7, #19]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003266:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	461a      	mov	r2, r3
 8003274:	2103      	movs	r1, #3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f002 fed2 	bl	8006020 <get_sequence_step_timeout>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003282:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003292:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	461a      	mov	r2, r3
 80032a0:	2104      	movs	r1, #4
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f002 febc 	bl	8006020 <get_sequence_step_timeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3770      	adds	r7, #112	; 0x70
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200001bc 	.word	0x200001bc

080032d0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8cc 	bl	8003480 <VL53L0X_GetDeviceMode>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80032ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3308      	adds	r3, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fa94 	bl	8003828 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3310      	adds	r3, #16
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 faca 	bl	80038ba <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fcb7 	bl	8002cac <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d134      	bne.n	80033b4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	e02a      	b.n	80033a6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d12a      	bne.n	80033ae <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	b299      	uxth	r1, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	3308      	adds	r3, #8
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	461a      	mov	r2, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fbea 	bl	8003b44 <VL53L0X_GetLimitCheckValue>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	4313      	orrs	r3, r2
 8003378:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d117      	bne.n	80033b2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	b299      	uxth	r1, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3318      	adds	r3, #24
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	461a      	mov	r2, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb51 	bl	8003a38 <VL53L0X_GetLimitCheckEnable>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	4313      	orrs	r3, r2
 800339e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	ddd1      	ble.n	8003350 <VL53L0X_GetDeviceParameters+0x80>
 80033ac:	e002      	b.n	80033b4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80033ae:	bf00      	nop
 80033b0:	e000      	b.n	80033b4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80033b2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	333c      	adds	r3, #60	; 0x3c
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fc4c 	bl	8003c60 <VL53L0X_GetWrapAroundCheckEnable>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f895 	bl	800350a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80033e0:	4603      	mov	r3, r0
 80033e2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	2b15      	cmp	r3, #21
 8003404:	d832      	bhi.n	800346c <VL53L0X_SetDeviceMode+0x7c>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <VL53L0X_SetDeviceMode+0x1c>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003465 	.word	0x08003465
 8003410:	08003465 	.word	0x08003465
 8003414:	0800346d 	.word	0x0800346d
 8003418:	08003465 	.word	0x08003465
 800341c:	0800346d 	.word	0x0800346d
 8003420:	0800346d 	.word	0x0800346d
 8003424:	0800346d 	.word	0x0800346d
 8003428:	0800346d 	.word	0x0800346d
 800342c:	0800346d 	.word	0x0800346d
 8003430:	0800346d 	.word	0x0800346d
 8003434:	0800346d 	.word	0x0800346d
 8003438:	0800346d 	.word	0x0800346d
 800343c:	0800346d 	.word	0x0800346d
 8003440:	0800346d 	.word	0x0800346d
 8003444:	0800346d 	.word	0x0800346d
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800346d 	.word	0x0800346d
 8003450:	0800346d 	.word	0x0800346d
 8003454:	0800346d 	.word	0x0800346d
 8003458:	0800346d 	.word	0x0800346d
 800345c:	08003465 	.word	0x08003465
 8003460:	08003465 	.word	0x08003465
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	741a      	strb	r2, [r3, #16]
		break;
 800346a:	e001      	b.n	8003470 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800346c:	23f8      	movs	r3, #248	; 0xf8
 800346e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7c1a      	ldrb	r2, [r3, #16]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	2109      	movs	r1, #9
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f004 fc7f 	bl	8007dbc <VL53L0X_RdByte>
 80034be:	4603      	mov	r3, r0
 80034c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f003 fa26 	bl	8006946 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f003 faf3 	bl	8006b06 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
 800353c:	4613      	mov	r3, r2
 800353e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003544:	78ba      	ldrb	r2, [r7, #2]
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f002 ff3b 	bl	80063c6 <VL53L0X_set_vcsel_pulse_period>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	460b      	mov	r3, r1
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003572:	7afb      	ldrb	r3, [r7, #11]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f003 f9ad 	bl	80068d8 <VL53L0X_get_vcsel_pulse_period>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
 800359c:	4613      	mov	r3, r2
 800359e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80035ac:	f107 030f 	add.w	r3, r7, #15
 80035b0:	461a      	mov	r2, r3
 80035b2:	2101      	movs	r1, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f004 fc01 	bl	8007dbc <VL53L0X_RdByte>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80035c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d15a      	bne.n	8003680 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80035ca:	78bb      	ldrb	r3, [r7, #2]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d12b      	bne.n	8003628 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d825      	bhi.n	8003622 <VL53L0X_SetSequenceStepEnable+0x92>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <VL53L0X_SetSequenceStepEnable+0x4c>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	080035f1 	.word	0x080035f1
 80035e0:	080035fb 	.word	0x080035fb
 80035e4:	08003605 	.word	0x08003605
 80035e8:	0800360f 	.word	0x0800360f
 80035ec:	08003619 	.word	0x08003619
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80035f0:	7dbb      	ldrb	r3, [r7, #22]
 80035f2:	f043 0310 	orr.w	r3, r3, #16
 80035f6:	75bb      	strb	r3, [r7, #22]
				break;
 80035f8:	e043      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80035fa:	7dbb      	ldrb	r3, [r7, #22]
 80035fc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003600:	75bb      	strb	r3, [r7, #22]
				break;
 8003602:	e03e      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003604:	7dbb      	ldrb	r3, [r7, #22]
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	75bb      	strb	r3, [r7, #22]
				break;
 800360c:	e039      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003614:	75bb      	strb	r3, [r7, #22]
				break;
 8003616:	e034      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003618:	7dbb      	ldrb	r3, [r7, #22]
 800361a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800361e:	75bb      	strb	r3, [r7, #22]
				break;
 8003620:	e02f      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003622:	23fc      	movs	r3, #252	; 0xfc
 8003624:	75fb      	strb	r3, [r7, #23]
 8003626:	e02c      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d825      	bhi.n	800367a <VL53L0X_SetSequenceStepEnable+0xea>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003649 	.word	0x08003649
 8003638:	08003653 	.word	0x08003653
 800363c:	0800365d 	.word	0x0800365d
 8003640:	08003667 	.word	0x08003667
 8003644:	08003671 	.word	0x08003671
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003648:	7dbb      	ldrb	r3, [r7, #22]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	75bb      	strb	r3, [r7, #22]
				break;
 8003650:	e017      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003652:	7dbb      	ldrb	r3, [r7, #22]
 8003654:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003658:	75bb      	strb	r3, [r7, #22]
				break;
 800365a:	e012      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800365c:	7dbb      	ldrb	r3, [r7, #22]
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	75bb      	strb	r3, [r7, #22]
				break;
 8003664:	e00d      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003666:	7dbb      	ldrb	r3, [r7, #22]
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	75bb      	strb	r3, [r7, #22]
				break;
 800366e:	e008      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003670:	7dbb      	ldrb	r3, [r7, #22]
 8003672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003676:	75bb      	strb	r3, [r7, #22]
				break;
 8003678:	e003      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800367a:	23fc      	movs	r3, #252	; 0xfc
 800367c:	75fb      	strb	r3, [r7, #23]
 800367e:	e000      	b.n	8003682 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003680:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	7dba      	ldrb	r2, [r7, #22]
 8003686:	429a      	cmp	r2, r3
 8003688:	d01e      	beq.n	80036c8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800368a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8003692:	7dbb      	ldrb	r3, [r7, #22]
 8003694:	461a      	mov	r2, r3
 8003696:	2101      	movs	r1, #1
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f004 fb09 	bl	8007cb0 <VL53L0X_WrByte>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80036a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7dba      	ldrb	r2, [r7, #22]
 80036ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80036b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff0e 	bl	80034e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80036c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	72fb      	strb	r3, [r7, #11]
 80036e2:	4613      	mov	r3, r2
 80036e4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d836      	bhi.n	8003764 <sequence_step_enabled+0x90>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <sequence_step_enabled+0x28>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003711 	.word	0x08003711
 8003700:	08003723 	.word	0x08003723
 8003704:	08003735 	.word	0x08003735
 8003708:	08003747 	.word	0x08003747
 800370c:	08003759 	.word	0x08003759
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003710:	7abb      	ldrb	r3, [r7, #10]
 8003712:	111b      	asrs	r3, r3, #4
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	b2da      	uxtb	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	701a      	strb	r2, [r3, #0]
		break;
 8003720:	e022      	b.n	8003768 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003722:	7abb      	ldrb	r3, [r7, #10]
 8003724:	10db      	asrs	r3, r3, #3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	701a      	strb	r2, [r3, #0]
		break;
 8003732:	e019      	b.n	8003768 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003734:	7abb      	ldrb	r3, [r7, #10]
 8003736:	109b      	asrs	r3, r3, #2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	701a      	strb	r2, [r3, #0]
		break;
 8003744:	e010      	b.n	8003768 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003746:	7abb      	ldrb	r3, [r7, #10]
 8003748:	119b      	asrs	r3, r3, #6
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	b2da      	uxtb	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	701a      	strb	r2, [r3, #0]
		break;
 8003756:	e007      	b.n	8003768 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003758:	7abb      	ldrb	r3, [r7, #10]
 800375a:	09db      	lsrs	r3, r3, #7
 800375c:	b2da      	uxtb	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	701a      	strb	r2, [r3, #0]
		break;
 8003762:	e001      	b.n	8003768 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003764:	23fc      	movs	r3, #252	; 0xfc
 8003766:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800378a:	f107 030e 	add.w	r3, r7, #14
 800378e:	461a      	mov	r2, r3
 8003790:	2101      	movs	r1, #1
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f004 fb12 	bl	8007dbc <VL53L0X_RdByte>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800379c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80037a4:	7bba      	ldrb	r2, [r7, #14]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2100      	movs	r1, #0
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff92 	bl	80036d4 <sequence_step_enabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80037bc:	7bba      	ldrb	r2, [r7, #14]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	3302      	adds	r3, #2
 80037c2:	2101      	movs	r1, #1
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff85 	bl	80036d4 <sequence_step_enabled>
 80037ca:	4603      	mov	r3, r0
 80037cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80037d6:	7bba      	ldrb	r2, [r7, #14]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	2102      	movs	r1, #2
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff78 	bl	80036d4 <sequence_step_enabled>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80037e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80037f0:	7bba      	ldrb	r2, [r7, #14]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	3303      	adds	r3, #3
 80037f6:	2103      	movs	r1, #3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff6b 	bl	80036d4 <sequence_step_enabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800380a:	7bba      	ldrb	r2, [r7, #14]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	3304      	adds	r3, #4
 8003810:	2104      	movs	r1, #4
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff5e 	bl	80036d4 <sequence_step_enabled>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800381c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	461a      	mov	r2, r3
 800383c:	21f8      	movs	r1, #248	; 0xf8
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f004 fadd 	bl	8007dfe <VL53L0X_RdWord>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d108      	bne.n	8003862 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003850:	f107 0308 	add.w	r3, r7, #8
 8003854:	461a      	mov	r2, r3
 8003856:	2104      	movs	r1, #4
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f004 faf1 	bl	8007e40 <VL53L0X_RdDWord>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800386a:	89bb      	ldrh	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	89ba      	ldrh	r2, [r7, #12]
 8003874:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7f1b      	ldrb	r3, [r3, #28]
 80038a2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	7bba      	ldrb	r2, [r7, #14]
 80038a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80038c8:	f107 030e 	add.w	r3, r7, #14
 80038cc:	461a      	mov	r2, r3
 80038ce:	2120      	movs	r1, #32
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f004 fa94 	bl	8007dfe <VL53L0X_RdWord>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80038da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	771a      	strb	r2, [r3, #28]
 80038fa:	e00b      	b.n	8003914 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003940:	887b      	ldrh	r3, [r7, #2]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d902      	bls.n	800394c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003946:	23fc      	movs	r3, #252	; 0xfc
 8003948:	75fb      	strb	r3, [r7, #23]
 800394a:	e05b      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	73bb      	strb	r3, [r7, #14]
 800395e:	e00a      	b.n	8003976 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	330c      	adds	r3, #12
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	2b05      	cmp	r3, #5
 800397a:	d841      	bhi.n	8003a00 <VL53L0X_SetLimitCheckEnable+0xe0>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <VL53L0X_SetLimitCheckEnable+0x64>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	0800399d 	.word	0x0800399d
 8003988:	080039a7 	.word	0x080039a7
 800398c:	080039bd 	.word	0x080039bd
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039d1 	.word	0x080039d1
 8003998:	080039e9 	.word	0x080039e9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80039a4:	e02e      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	2144      	movs	r1, #68	; 0x44
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f004 f99f 	bl	8007cf4 <VL53L0X_WrWord>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]

			break;
 80039ba:	e023      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80039c4:	e01e      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80039ce:	e019      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80039d6:	7b7b      	ldrb	r3, [r7, #13]
 80039d8:	22fe      	movs	r2, #254	; 0xfe
 80039da:	2160      	movs	r1, #96	; 0x60
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f004 f9ab 	bl	8007d38 <VL53L0X_UpdateByte>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80039e6:	e00d      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80039e8:	7bbb      	ldrb	r3, [r7, #14]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80039ee:	7b7b      	ldrb	r3, [r7, #13]
 80039f0:	22ef      	movs	r2, #239	; 0xef
 80039f2:	2160      	movs	r1, #96	; 0x60
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f004 f99f 	bl	8007d38 <VL53L0X_UpdateByte>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80039fe:	e001      	b.n	8003a04 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003a00:	23fc      	movs	r3, #252	; 0xfc
 8003a02:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10f      	bne.n	8003a2c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a1e:	e005      	b.n	8003a2c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	460b      	mov	r3, r1
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d905      	bls.n	8003a5c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003a50:	23fc      	movs	r3, #252	; 0xfc
 8003a52:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e008      	b.n	8003a6e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a66:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7dba      	ldrb	r2, [r7, #22]
 8003a6c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003a9e:	7dbb      	ldrb	r3, [r7, #22]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003aa4:	897b      	ldrh	r3, [r7, #10]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	e040      	b.n	8003b36 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d830      	bhi.n	8003b1c <VL53L0X_SetLimitCheckValue+0x9c>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <VL53L0X_SetLimitCheckValue+0x40>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	08003af7 	.word	0x08003af7
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003ade:	e01f      	b.n	8003b20 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2144      	movs	r1, #68	; 0x44
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f004 f902 	bl	8007cf4 <VL53L0X_WrWord>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003af4:	e014      	b.n	8003b20 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003afc:	e010      	b.n	8003b20 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003b04:	e00c      	b.n	8003b20 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f004 f8ef 	bl	8007cf4 <VL53L0X_WrWord>
 8003b16:	4603      	mov	r3, r0
 8003b18:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003b1a:	e001      	b.n	8003b20 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b1c:	23fc      	movs	r3, #252	; 0xfc
 8003b1e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop

08003b44 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d847      	bhi.n	8003bf0 <VL53L0X_GetLimitCheckValue+0xac>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <VL53L0X_GetLimitCheckValue+0x24>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b81 	.word	0x08003b81
 8003b6c:	08003b8d 	.word	0x08003b8d
 8003b70:	08003bb3 	.word	0x08003bb3
 8003b74:	08003bbf 	.word	0x08003bbf
 8003b78:	08003bcb 	.word	0x08003bcb
 8003b7c:	08003bcb 	.word	0x08003bcb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	77bb      	strb	r3, [r7, #30]
		break;
 8003b8a:	e033      	b.n	8003bf4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003b8c:	f107 0316 	add.w	r3, r7, #22
 8003b90:	461a      	mov	r2, r3
 8003b92:	2144      	movs	r1, #68	; 0x44
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f004 f932 	bl	8007dfe <VL53L0X_RdWord>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003ba6:	8afb      	ldrh	r3, [r7, #22]
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77bb      	strb	r3, [r7, #30]
		break;
 8003bb0:	e020      	b.n	8003bf4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77bb      	strb	r3, [r7, #30]
		break;
 8003bbc:	e01a      	b.n	8003bf4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77bb      	strb	r3, [r7, #30]
		break;
 8003bc8:	e014      	b.n	8003bf4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003bca:	f107 0316 	add.w	r3, r7, #22
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2164      	movs	r1, #100	; 0x64
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f004 f913 	bl	8007dfe <VL53L0X_RdWord>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003be4:	8afb      	ldrh	r3, [r7, #22]
 8003be6:	025b      	lsls	r3, r3, #9
 8003be8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77bb      	strb	r3, [r7, #30]
		break;
 8003bee:	e001      	b.n	8003bf4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003bf0:	23fc      	movs	r3, #252	; 0xfc
 8003bf2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12a      	bne.n	8003c52 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003bfc:	7fbb      	ldrb	r3, [r7, #30]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d124      	bne.n	8003c4c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d110      	bne.n	8003c2a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003c28:	e013      	b.n	8003c52 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c30:	897b      	ldrh	r3, [r7, #10]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	330c      	adds	r3, #12
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c3e:	897b      	ldrh	r3, [r7, #10]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003c4a:	e002      	b.n	8003c52 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c52:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003c6e:	f107 030e 	add.w	r3, r7, #14
 8003c72:	461a      	mov	r2, r3
 8003c74:	2101      	movs	r1, #1
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f004 f8a0 	bl	8007dbc <VL53L0X_RdByte>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003c88:	7bba      	ldrb	r2, [r7, #14]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	da03      	bge.n	8003ca0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e002      	b.n	8003ca6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003cd0:	f107 030e 	add.w	r3, r7, #14
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fbd2 	bl	8003480 <VL53L0X_GetDeviceMode>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003ce8:	7bbb      	ldrb	r3, [r7, #14]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f898 	bl	8003e24 <VL53L0X_StartMeasurement>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f001 fb3f 	bl	8005384 <VL53L0X_measurement_poll_for_completion>
 8003d06:	4603      	mov	r3, r0
 8003d08:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003d12:	7bbb      	ldrb	r3, [r7, #14]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f001 fae1 	bl	800530a <VL53L0X_perform_ref_calibration>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003d6e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003d70:	7dbb      	ldrb	r3, [r7, #22]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d005      	beq.n	8003d82 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003d76:	7dbb      	ldrb	r3, [r7, #22]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d002      	beq.n	8003d82 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003d7c:	7dbb      	ldrb	r3, [r7, #22]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d147      	bne.n	8003e12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	f107 0210 	add.w	r2, r7, #16
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fbc3 	bl	8004518 <VL53L0X_GetInterruptThresholds>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003d9c:	d803      	bhi.n	8003da6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003d9e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003da0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003da4:	d935      	bls.n	8003e12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d131      	bne.n	8003e12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003db4:	491a      	ldr	r1, [pc, #104]	; (8003e20 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f002 ff56 	bl	8006c68 <VL53L0X_load_tuning_settings>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]
 8003dc0:	e027      	b.n	8003e12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	21ff      	movs	r1, #255	; 0xff
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f003 ff72 	bl	8007cb0 <VL53L0X_WrByte>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2170      	movs	r1, #112	; 0x70
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f003 ff68 	bl	8007cb0 <VL53L0X_WrByte>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003dea:	2200      	movs	r2, #0
 8003dec:	21ff      	movs	r1, #255	; 0xff
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f003 ff5e 	bl	8007cb0 <VL53L0X_WrByte>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f003 ff54 	bl	8007cb0 <VL53L0X_WrByte>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003e12:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000004 	.word	0x20000004

08003e24 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003e34:	f107 030e 	add.w	r3, r7, #14
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fb20 	bl	8003480 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003e40:	2201      	movs	r2, #1
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f003 ff33 	bl	8007cb0 <VL53L0X_WrByte>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e4e:	2201      	movs	r2, #1
 8003e50:	21ff      	movs	r1, #255	; 0xff
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f003 ff2c 	bl	8007cb0 <VL53L0X_WrByte>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2100      	movs	r1, #0
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f003 ff25 	bl	8007cb0 <VL53L0X_WrByte>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003e70:	461a      	mov	r2, r3
 8003e72:	2191      	movs	r1, #145	; 0x91
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f003 ff1b 	bl	8007cb0 <VL53L0X_WrByte>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2100      	movs	r1, #0
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f003 ff14 	bl	8007cb0 <VL53L0X_WrByte>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	21ff      	movs	r1, #255	; 0xff
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f003 ff0d 	bl	8007cb0 <VL53L0X_WrByte>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f003 ff06 	bl	8007cb0 <VL53L0X_WrByte>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d037      	beq.n	8003f1e <VL53L0X_StartMeasurement+0xfa>
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d04f      	beq.n	8003f52 <VL53L0X_StartMeasurement+0x12e>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d167      	bne.n	8003f86 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2100      	movs	r1, #0
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f003 fef8 	bl	8007cb0 <VL53L0X_WrByte>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15d      	bne.n	8003f8c <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8003eda:	f107 030d 	add.w	r3, r7, #13
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f003 ff6a 	bl	8007dbc <VL53L0X_RdByte>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003ef2:	7b7a      	ldrb	r2, [r7, #13]
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8003f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f0e:	d3e1      	bcc.n	8003ed4 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f16:	d339      	bcc.n	8003f8c <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003f18:	23f9      	movs	r3, #249	; 0xf9
 8003f1a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003f1c:	e036      	b.n	8003f8c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003f26:	2101      	movs	r1, #1
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff15 	bl	8003d58 <VL53L0X_CheckAndLoadInterruptSettings>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003f32:	2202      	movs	r2, #2
 8003f34:	2100      	movs	r1, #0
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f003 feba 	bl	8007cb0 <VL53L0X_WrByte>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d123      	bne.n	8003f90 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003f50:	e01e      	b.n	8003f90 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fefb 	bl	8003d58 <VL53L0X_CheckAndLoadInterruptSettings>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003f66:	2204      	movs	r2, #4
 8003f68:	2100      	movs	r1, #0
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f003 fea0 	bl	8007cb0 <VL53L0X_WrByte>
 8003f70:	4603      	mov	r3, r0
 8003f72:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003f84:	e006      	b.n	8003f94 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003f86:	23f8      	movs	r3, #248	; 0xf8
 8003f88:	75fb      	strb	r3, [r7, #23]
 8003f8a:	e004      	b.n	8003f96 <VL53L0X_StartMeasurement+0x172>
		break;
 8003f8c:	bf00      	nop
 8003f8e:	e002      	b.n	8003f96 <VL53L0X_StartMeasurement+0x172>
		break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <VL53L0X_StartMeasurement+0x172>
		break;
 8003f94:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003fb6:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d112      	bne.n	8003fe4 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fb1d 	bl	8004604 <VL53L0X_GetInterruptMaskStatus>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d103      	bne.n	8003fdc <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e01c      	b.n	8004016 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e018      	b.n	8004016 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003fe4:	f107 030d 	add.w	r3, r7, #13
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2114      	movs	r1, #20
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f003 fee5 	bl	8007dbc <VL53L0X_RdByte>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003ffe:	7b7b      	ldrb	r3, [r7, #13]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b096      	sub	sp, #88	; 0x58
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004034:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004038:	230c      	movs	r3, #12
 800403a:	2114      	movs	r1, #20
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f003 fe0e 	bl	8007c5e <VL53L0X_ReadMulti>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004048:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 80d2 	bne.w	80041f6 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800405e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	b29a      	uxth	r2, r3
 8004068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800406c:	b29b      	uxth	r3, r3
 800406e:	4413      	add	r3, r2
 8004070:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800407a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800407e:	b29b      	uxth	r3, r3
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	b29a      	uxth	r2, r3
 8004084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004088:	b29b      	uxth	r3, r3
 800408a:	4413      	add	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	025b      	lsls	r3, r3, #9
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004096:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004098:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800409c:	b29b      	uxth	r3, r3
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80040ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040b2:	025b      	lsls	r3, r3, #9
 80040b4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80040ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80040d6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80040d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80040e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80040ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80040f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80040f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f8:	d047      	beq.n	800418a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80040fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80040fc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <VL53L0X_GetRangingMeasurementData+0x248>)
 800410a:	fb82 1203 	smull	r1, r2, r2, r3
 800410e:	1192      	asrs	r2, r2, #6
 8004110:	17db      	asrs	r3, r3, #31
 8004112:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004114:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f1b      	ldrb	r3, [r3, #28]
 8004122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02d      	beq.n	800418a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800412e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004130:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	121b      	asrs	r3, r3, #8
 800413a:	461a      	mov	r2, r3
				if ((SignalRate
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	4293      	cmp	r3, r2
 8004140:	d10d      	bne.n	800415e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004142:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800414a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800414e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004152:	e016      	b.n	8004182 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004154:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004158:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800415c:	e011      	b.n	8004182 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800415e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004164:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800416a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800416e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004172:	121b      	asrs	r3, r3, #8
 8004174:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004178:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800417e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004186:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800418a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004192:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800419e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	75da      	strb	r2, [r3, #23]
 80041ac:	e006      	b.n	80041bc <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80041b4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80041bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80041c0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80041c4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f003 f9f0 	bl	80075b8 <VL53L0X_get_pal_range_status>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80041e6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80041ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80041f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12f      	bne.n	800425e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f107 040c 	add.w	r4, r7, #12
 8004204:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004210:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004218:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004226:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800422c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004232:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004238:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800423e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004244:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800424e:	f107 050c 	add.w	r5, r7, #12
 8004252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800425a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800425e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004262:	4618      	mov	r0, r3
 8004264:	3750      	adds	r7, #80	; 0x50
 8004266:	46bd      	mov	sp, r7
 8004268:	bdb0      	pop	{r4, r5, r7, pc}
 800426a:	bf00      	nop
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800427e:	2100      	movs	r1, #0
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff f8b5 	bl	80033f0 <VL53L0X_SetDeviceMode>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fd16 	bl	8003cc4 <VL53L0X_PerformSingleMeasurement>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800429c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff febc 	bl	8004024 <VL53L0X_GetRangingMeasurementData>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80042b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80042b8:	2100      	movs	r1, #0
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f962 	bl	8004584 <VL53L0X_ClearInterruptMask>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	70fb      	strb	r3, [r7, #3]
 80042e2:	460b      	mov	r3, r1
 80042e4:	70bb      	strb	r3, [r7, #2]
 80042e6:	4613      	mov	r3, r2
 80042e8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80042f4:	23f6      	movs	r3, #246	; 0xf6
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e107      	b.n	800450a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80042fa:	78bb      	ldrb	r3, [r7, #2]
 80042fc:	2b14      	cmp	r3, #20
 80042fe:	d110      	bne.n	8004322 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004300:	7e3b      	ldrb	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004306:	2310      	movs	r3, #16
 8004308:	73bb      	strb	r3, [r7, #14]
 800430a:	e001      	b.n	8004310 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800430c:	2301      	movs	r3, #1
 800430e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	461a      	mov	r2, r3
 8004314:	2184      	movs	r1, #132	; 0x84
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f003 fcca 	bl	8007cb0 <VL53L0X_WrByte>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e0f3      	b.n	800450a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004322:	78bb      	ldrb	r3, [r7, #2]
 8004324:	2b15      	cmp	r3, #21
 8004326:	f040 8097 	bne.w	8004458 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800432a:	2201      	movs	r2, #1
 800432c:	21ff      	movs	r1, #255	; 0xff
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f003 fcbe 	bl	8007cb0 <VL53L0X_WrByte>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	4313      	orrs	r3, r2
 800433c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f003 fcb4 	bl	8007cb0 <VL53L0X_WrByte>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	4313      	orrs	r3, r2
 8004350:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004352:	2200      	movs	r2, #0
 8004354:	21ff      	movs	r1, #255	; 0xff
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f003 fcaa 	bl	8007cb0 <VL53L0X_WrByte>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	4313      	orrs	r3, r2
 8004364:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004366:	2201      	movs	r2, #1
 8004368:	2180      	movs	r1, #128	; 0x80
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f003 fca0 	bl	8007cb0 <VL53L0X_WrByte>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	4313      	orrs	r3, r2
 8004378:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800437a:	2202      	movs	r2, #2
 800437c:	2185      	movs	r1, #133	; 0x85
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f003 fc96 	bl	8007cb0 <VL53L0X_WrByte>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	4313      	orrs	r3, r2
 800438c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800438e:	2204      	movs	r2, #4
 8004390:	21ff      	movs	r1, #255	; 0xff
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f003 fc8c 	bl	8007cb0 <VL53L0X_WrByte>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	4313      	orrs	r3, r2
 80043a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80043a2:	2200      	movs	r2, #0
 80043a4:	21cd      	movs	r1, #205	; 0xcd
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f003 fc82 	bl	8007cb0 <VL53L0X_WrByte>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80043b6:	2211      	movs	r2, #17
 80043b8:	21cc      	movs	r1, #204	; 0xcc
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f003 fc78 	bl	8007cb0 <VL53L0X_WrByte>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80043ca:	2207      	movs	r2, #7
 80043cc:	21ff      	movs	r1, #255	; 0xff
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f003 fc6e 	bl	8007cb0 <VL53L0X_WrByte>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	4313      	orrs	r3, r2
 80043dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80043de:	2200      	movs	r2, #0
 80043e0:	21be      	movs	r1, #190	; 0xbe
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f003 fc64 	bl	8007cb0 <VL53L0X_WrByte>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80043f2:	2206      	movs	r2, #6
 80043f4:	21ff      	movs	r1, #255	; 0xff
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f003 fc5a 	bl	8007cb0 <VL53L0X_WrByte>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4313      	orrs	r3, r2
 8004404:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004406:	2209      	movs	r2, #9
 8004408:	21cc      	movs	r1, #204	; 0xcc
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f003 fc50 	bl	8007cb0 <VL53L0X_WrByte>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	4313      	orrs	r3, r2
 8004418:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800441a:	2200      	movs	r2, #0
 800441c:	21ff      	movs	r1, #255	; 0xff
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f003 fc46 	bl	8007cb0 <VL53L0X_WrByte>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	4313      	orrs	r3, r2
 800442c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800442e:	2201      	movs	r2, #1
 8004430:	21ff      	movs	r1, #255	; 0xff
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f003 fc3c 	bl	8007cb0 <VL53L0X_WrByte>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4313      	orrs	r3, r2
 8004440:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004442:	2200      	movs	r2, #0
 8004444:	2100      	movs	r1, #0
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f003 fc32 	bl	8007cb0 <VL53L0X_WrByte>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	4313      	orrs	r3, r2
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e058      	b.n	800450a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d121      	bne.n	80044a4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b04      	cmp	r3, #4
 8004464:	d81b      	bhi.n	800449e <VL53L0X_SetGpioConfig+0x1ce>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <VL53L0X_SetGpioConfig+0x19c>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004481 	.word	0x08004481
 8004470:	08004487 	.word	0x08004487
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004493 	.word	0x08004493
 800447c:	08004499 	.word	0x08004499
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004480:	2300      	movs	r3, #0
 8004482:	73bb      	strb	r3, [r7, #14]
				break;
 8004484:	e00f      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004486:	2301      	movs	r3, #1
 8004488:	73bb      	strb	r3, [r7, #14]
				break;
 800448a:	e00c      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800448c:	2302      	movs	r3, #2
 800448e:	73bb      	strb	r3, [r7, #14]
				break;
 8004490:	e009      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004492:	2303      	movs	r3, #3
 8004494:	73bb      	strb	r3, [r7, #14]
				break;
 8004496:	e006      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004498:	2304      	movs	r3, #4
 800449a:	73bb      	strb	r3, [r7, #14]
				break;
 800449c:	e003      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800449e:	23f5      	movs	r3, #245	; 0xf5
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e000      	b.n	80044a6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80044a4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	461a      	mov	r2, r3
 80044b2:	210a      	movs	r1, #10
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f003 fbfb 	bl	8007cb0 <VL53L0X_WrByte>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80044c6:	7e3b      	ldrb	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73bb      	strb	r3, [r7, #14]
 80044d0:	e001      	b.n	80044d6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80044d2:	2310      	movs	r3, #16
 80044d4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	22ef      	movs	r2, #239	; 0xef
 80044da:	2184      	movs	r1, #132	; 0x84
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f003 fc2b 	bl	8007d38 <VL53L0X_UpdateByte>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80044e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	787a      	ldrb	r2, [r7, #1]
 80044f2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f83f 	bl	8004584 <VL53L0X_ClearInterruptMask>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800450a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	460b      	mov	r3, r1
 8004526:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	461a      	mov	r2, r3
 8004532:	210e      	movs	r1, #14
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f003 fc62 	bl	8007dfe <VL53L0X_RdWord>
 800453a:	4603      	mov	r3, r0
 800453c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800453e:	8abb      	ldrh	r3, [r7, #20]
 8004540:	045b      	lsls	r3, r3, #17
 8004542:	461a      	mov	r2, r3
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <VL53L0X_GetInterruptThresholds+0x68>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800454c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10f      	bne.n	8004574 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	461a      	mov	r2, r3
 800455a:	210c      	movs	r1, #12
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f003 fc4e 	bl	8007dfe <VL53L0X_RdWord>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004566:	8abb      	ldrh	r3, [r7, #20]
 8004568:	045b      	lsls	r3, r3, #17
 800456a:	461a      	mov	r2, r3
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <VL53L0X_GetInterruptThresholds+0x68>)
 800456e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	1ffe0000 	.word	0x1ffe0000

08004584 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004596:	2201      	movs	r2, #1
 8004598:	210b      	movs	r1, #11
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f003 fb88 	bl	8007cb0 <VL53L0X_WrByte>
 80045a0:	4603      	mov	r3, r0
 80045a2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80045a4:	2200      	movs	r2, #0
 80045a6:	210b      	movs	r1, #11
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f003 fb81 	bl	8007cb0 <VL53L0X_WrByte>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80045b8:	f107 030d 	add.w	r3, r7, #13
 80045bc:	461a      	mov	r2, r3
 80045be:	2113      	movs	r1, #19
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f003 fbfb 	bl	8007dbc <VL53L0X_RdByte>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	3301      	adds	r3, #1
 80045d4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80045d6:	7b7b      	ldrb	r3, [r7, #13]
 80045d8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d803      	bhi.n	80045ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0d3      	beq.n	8004596 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80045f4:	23f4      	movs	r3, #244	; 0xf4
 80045f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80045f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004612:	f107 030e 	add.w	r3, r7, #14
 8004616:	461a      	mov	r2, r3
 8004618:	2113      	movs	r1, #19
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f003 fbce 	bl	8007dbc <VL53L0X_RdByte>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	f003 0207 	and.w	r2, r3, #7
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	f003 0318 	and.w	r3, r3, #24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004638:	23fa      	movs	r3, #250	; 0xfa
 800463a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800463c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004654:	2300      	movs	r3, #0
 8004656:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa03 	bl	8004a68 <VL53L0X_perform_ref_spad_management>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004680:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004684:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	461a      	mov	r2, r3
 8004692:	2128      	movs	r1, #40	; 0x28
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f003 fbb2 	bl	8007dfe <VL53L0X_RdWord>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11e      	bne.n	80046e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80046b0:	893b      	ldrh	r3, [r7, #8]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dd0b      	ble.n	80046d4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80046bc:	893a      	ldrh	r2, [r7, #8]
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	461a      	mov	r2, r3
					* 250;
 80046c8:	23fa      	movs	r3, #250	; 0xfa
 80046ca:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e007      	b.n	80046e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80046d4:	893b      	ldrh	r3, [r7, #8]
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	23fa      	movs	r3, #250	; 0xfa
 80046dc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80046e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b08b      	sub	sp, #44	; 0x2c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80046fe:	2308      	movs	r3, #8
 8004700:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	fb01 f202 	mul.w	r2, r1, r2
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e030      	b.n	8004792 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	429a      	cmp	r2, r3
 8004744:	d11e      	bne.n	8004784 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004746:	7ffa      	ldrb	r2, [r7, #31]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	fa42 f303 	asr.w	r3, r2, r3
 800474e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004754:	e016      	b.n	8004784 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004756:	7ffb      	ldrb	r3, [r7, #31]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00b      	beq.n	8004778 <get_next_good_spad+0x88>
				success = 1;
 8004760:	2301      	movs	r3, #1
 8004762:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	fb02 f203 	mul.w	r2, r2, r3
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	4413      	add	r3, r2
 8004770:	461a      	mov	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	601a      	str	r2, [r3, #0]
				break;
 8004776:	e009      	b.n	800478c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	3301      	adds	r3, #1
 8004782:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d3e4      	bcc.n	8004756 <get_next_good_spad+0x66>
				coarseIndex++) {
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	3301      	adds	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d202      	bcs.n	80047a0 <get_next_good_spad+0xb0>
 800479a:	7fbb      	ldrb	r3, [r7, #30]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0c7      	beq.n	8004730 <get_next_good_spad+0x40>
		}
	}
}
 80047a0:	bf00      	nop
 80047a2:	372c      	adds	r7, #44	; 0x2c
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <is_aperture+0x30>)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <is_aperture+0x22>
		isAperture = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	200002b0 	.word	0x200002b0

080047e0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80047f0:	2308      	movs	r3, #8
 80047f2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	fbb3 f2f2 	udiv	r2, r3, r2
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	fb01 f202 	mul.w	r2, r1, r2
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004818:	23ce      	movs	r3, #206	; 0xce
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e010      	b.n	8004840 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b25a      	sxtb	r2, r3
 8004828:	2101      	movs	r1, #1
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	b25b      	sxtb	r3, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	b259      	sxtb	r1, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	b2ca      	uxtb	r2, r1
 800483e:	701a      	strb	r2, [r3, #0]

	return status;
 8004840:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800485a:	2306      	movs	r3, #6
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	21b0      	movs	r1, #176	; 0xb0
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f003 f9d1 	bl	8007c08 <VL53L0X_WriteMulti>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004880:	2306      	movs	r3, #6
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	21b0      	movs	r1, #176	; 0xb0
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f003 f9e9 	bl	8007c5e <VL53L0X_ReadMulti>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08c      	sub	sp, #48	; 0x30
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	460b      	mov	r3, r1
 80048aa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80048b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80048b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048be:	e02b      	b.n	8004918 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff11 	bl	80046f0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d103      	bne.n	80048de <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80048d6:	23ce      	movs	r3, #206	; 0xce
 80048d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80048dc:	e020      	b.n	8004920 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	4413      	add	r3, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff60 	bl	80047ac <is_aperture>
 80048ec:	4603      	mov	r3, r0
 80048ee:	461a      	mov	r2, r3
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80048f6:	23ce      	movs	r3, #206	; 0xce
 80048f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80048fc:	e010      	b.n	8004920 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f7ff ff6a 	bl	80047e0 <enable_spad_bit>
		currentSpad++;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	3301      	adds	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	3301      	adds	r3, #1
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800491a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491c:	429a      	cmp	r2, r3
 800491e:	d3cf      	bcc.n	80048c0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	6a3a      	ldr	r2, [r7, #32]
 8004924:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8004926:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ff8d 	bl	8004850 <set_ref_spad_map>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800493c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004940:	2b00      	cmp	r3, #0
 8004942:	d121      	bne.n	8004988 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	4619      	mov	r1, r3
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff ff93 	bl	8004876 <get_ref_spad_map>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800495a:	e011      	b.n	8004980 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	4413      	add	r3, r2
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	f107 0114 	add.w	r1, r7, #20
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	440b      	add	r3, r1
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d003      	beq.n	800497a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004972:	23ce      	movs	r3, #206	; 0xce
 8004974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004978:	e006      	b.n	8004988 <enable_ref_spads+0xec>
			}
			i++;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	3301      	adds	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	429a      	cmp	r2, r3
 8004986:	d3e9      	bcc.n	800495c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004988:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800498c:	4618      	mov	r0, r3
 800498e:	3730      	adds	r7, #48	; 0x30
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80049b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80049b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80049bc:	22c0      	movs	r2, #192	; 0xc0
 80049be:	2101      	movs	r1, #1
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f003 f975 	bl	8007cb0 <VL53L0X_WrByte>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80049cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fc48 	bl	8004270 <VL53L0X_PerformSingleRangingMeasurement>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80049e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80049ee:	2201      	movs	r2, #1
 80049f0:	21ff      	movs	r1, #255	; 0xff
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f003 f95c 	bl	8007cb0 <VL53L0X_WrByte>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80049fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	21b6      	movs	r1, #182	; 0xb6
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f003 f9f7 	bl	8007dfe <VL53L0X_RdWord>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8004a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d107      	bne.n	8004a2e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	21ff      	movs	r1, #255	; 0xff
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f003 f944 	bl	8007cb0 <VL53L0X_WrByte>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004a2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d112      	bne.n	8004a5c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004a36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f003 f936 	bl	8007cb0 <VL53L0X_WrByte>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004a58:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3728      	adds	r7, #40	; 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b09d      	sub	sp, #116	; 0x74
 8004a6c:	af06      	add	r7, sp, #24
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8004a7a:	23b4      	movs	r3, #180	; 0xb4
 8004a7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004a80:	2303      	movs	r3, #3
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8004a84:	232c      	movs	r3, #44	; 0x2c
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004a94:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004a98:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8004acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad2:	e009      	b.n	8004ae8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3f1      	bcc.n	8004ad4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004af0:	2201      	movs	r2, #1
 8004af2:	21ff      	movs	r1, #255	; 0xff
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f003 f8db 	bl	8007cb0 <VL53L0X_WrByte>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004b00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004b08:	2200      	movs	r2, #0
 8004b0a:	214f      	movs	r1, #79	; 0x4f
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f003 f8cf 	bl	8007cb0 <VL53L0X_WrByte>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004b18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004b20:	222c      	movs	r2, #44	; 0x2c
 8004b22:	214e      	movs	r1, #78	; 0x4e
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f003 f8c3 	bl	8007cb0 <VL53L0X_WrByte>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004b30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	21ff      	movs	r1, #255	; 0xff
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f003 f8b7 	bl	8007cb0 <VL53L0X_WrByte>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004b48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004b50:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004b54:	461a      	mov	r2, r3
 8004b56:	21b6      	movs	r1, #182	; 0xb6
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f003 f8a9 	bl	8007cb0 <VL53L0X_WrByte>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d107      	bne.n	8004b7c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f003 f89d 	bl	8007cb0 <VL53L0X_WrByte>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004b7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004b84:	f107 0210 	add.w	r2, r7, #16
 8004b88:	f107 0111 	add.w	r1, r7, #17
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fbbb 	bl	800530a <VL53L0X_perform_ref_calibration>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d121      	bne.n	8004be6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8004bbe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004bc2:	f107 0218 	add.w	r2, r7, #24
 8004bc6:	9204      	str	r2, [sp, #16]
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bca:	9203      	str	r2, [sp, #12]
 8004bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7ff fe5e 	bl	800489c <enable_ref_spads>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004be6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d174      	bne.n	8004cd8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004bf2:	f107 0312 	add.w	r3, r7, #18
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fecb 	bl	8004994 <perform_ref_signal_measurement>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004c04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d161      	bne.n	8004cd0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004c0c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d25d      	bcs.n	8004cd0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c18:	e009      	b.n	8004c2e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d3f1      	bcc.n	8004c1a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004c36:	e002      	b.n	8004c3e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004c3e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	4413      	add	r3, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff fdb0 	bl	80047ac <is_aperture>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3ee      	bcc.n	8004c38 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c60:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004c6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004c72:	f107 0218 	add.w	r2, r7, #24
 8004c76:	9204      	str	r2, [sp, #16]
 8004c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7a:	9203      	str	r2, [sp, #12]
 8004c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c7e:	9202      	str	r2, [sp, #8]
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4623      	mov	r3, r4
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff fe06 	bl	800489c <enable_ref_spads>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004c96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11b      	bne.n	8004cd6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004ca2:	f107 0312 	add.w	r3, r7, #18
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fe73 	bl	8004994 <perform_ref_signal_measurement>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004cb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004cbc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004cbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d208      	bcs.n	8004cd6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004cce:	e002      	b.n	8004cd6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	e000      	b.n	8004cd8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004cd6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004cd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 80af 	bne.w	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004ce2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004ce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	f240 80aa 	bls.w	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d02:	4618      	mov	r0, r3
 8004d04:	f008 fa66 	bl	800d1d4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004d08:	8a7b      	ldrh	r3, [r7, #18]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfb8      	it	lt
 8004d14:	425b      	neglt	r3, r3
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004d1e:	e086      	b.n	8004e2e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2e:	f7ff fcdf 	bl	80046f0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004d3a:	23ce      	movs	r3, #206	; 0xce
 8004d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004d40:	e07e      	b.n	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004d42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fd2e 	bl	80047ac <is_aperture>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461a      	mov	r2, r3
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004d60:	e06e      	b.n	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d64:	3301      	adds	r3, #1
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004d72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fd32 	bl	80047e0 <enable_spad_bit>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004d82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004d96:	4619      	mov	r1, r3
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fd59 	bl	8004850 <set_ref_spad_map>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004da4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d146      	bne.n	8004e3a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004dac:	f107 0312 	add.w	r3, r7, #18
 8004db0:	4619      	mov	r1, r3
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff fdee 	bl	8004994 <perform_ref_signal_measurement>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004dbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d13b      	bne.n	8004e3e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004dc6:	8a7b      	ldrh	r3, [r7, #18]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	425b      	neglt	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004dd6:	8a7b      	ldrh	r3, [r7, #18]
 8004dd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d21c      	bcs.n	8004e18 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d914      	bls.n	8004e10 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004de6:	f107 031c 	add.w	r3, r7, #28
 8004dea:	4619      	mov	r1, r3
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fd2f 	bl	8004850 <set_ref_spad_map>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004dfe:	f107 011c 	add.w	r1, r7, #28
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	4618      	mov	r0, r3
 8004e06:	f008 f9e5 	bl	800d1d4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e00a      	b.n	8004e2e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004e22:	f107 031c 	add.w	r3, r7, #28
 8004e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f008 f9d3 	bl	800d1d4 <memcpy>
		while (!complete) {
 8004e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f43f af74 	beq.w	8004d20 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004e38:	e002      	b.n	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004e3e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d115      	bne.n	8004e74 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e4c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004e54:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004e74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	375c      	adds	r7, #92	; 0x5c
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}

08004e80 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b093      	sub	sp, #76	; 0x4c
 8004e84:	af06      	add	r7, sp, #24
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004e98:	23b4      	movs	r3, #180	; 0xb4
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004ea2:	232c      	movs	r3, #44	; 0x2c
 8004ea4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	21ff      	movs	r1, #255	; 0xff
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f002 ff00 	bl	8007cb0 <VL53L0X_WrByte>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004eb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	214f      	movs	r1, #79	; 0x4f
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f002 fef4 	bl	8007cb0 <VL53L0X_WrByte>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004ed6:	222c      	movs	r2, #44	; 0x2c
 8004ed8:	214e      	movs	r1, #78	; 0x4e
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f002 fee8 	bl	8007cb0 <VL53L0X_WrByte>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004ee6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	21ff      	movs	r1, #255	; 0xff
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f002 fedc 	bl	8007cb0 <VL53L0X_WrByte>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004efe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	21b6      	movs	r1, #182	; 0xb6
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f002 fece 	bl	8007cb0 <VL53L0X_WrByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	e009      	b.n	8004f34 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	3301      	adds	r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3f1      	bcc.n	8004f20 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004f42:	e002      	b.n	8004f4a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	3301      	adds	r3, #1
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004f4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	4413      	add	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fc2a 	bl	80047ac <is_aperture>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <VL53L0X_set_reference_spads+0xe6>
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3ee      	bcc.n	8004f44 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f76:	79f9      	ldrb	r1, [r7, #7]
 8004f78:	f107 0214 	add.w	r2, r7, #20
 8004f7c:	9204      	str	r2, [sp, #16]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	9203      	str	r2, [sp, #12]
 8004f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f84:	9202      	str	r2, [sp, #8]
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fc83 	bl	800489c <enable_ref_spads>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004f9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10c      	bne.n	8004fbe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	79fa      	ldrb	r2, [r7, #7]
 8004fba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3734      	adds	r7, #52	; 0x34
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}

08004fca <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	2100      	movs	r1, #0
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 fe5e 	bl	8007cb0 <VL53L0X_WrByte>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9bf 	bl	8005384 <VL53L0X_measurement_poll_for_completion>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800500a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fab5 	bl	8004584 <VL53L0X_ClearInterruptMask>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800501e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 fe40 	bl	8007cb0 <VL53L0X_WrByte>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005034:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4603      	mov	r3, r0
 8005050:	70fb      	strb	r3, [r7, #3]
 8005052:	460b      	mov	r3, r1
 8005054:	70bb      	strb	r3, [r7, #2]
 8005056:	4613      	mov	r3, r2
 8005058:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005062:	2201      	movs	r2, #1
 8005064:	21ff      	movs	r1, #255	; 0xff
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f002 fe22 	bl	8007cb0 <VL53L0X_WrByte>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	4313      	orrs	r3, r2
 8005074:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fe18 	bl	8007cb0 <VL53L0X_WrByte>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	4313      	orrs	r3, r2
 8005088:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800508a:	2200      	movs	r2, #0
 800508c:	21ff      	movs	r1, #255	; 0xff
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f002 fe0e 	bl	8007cb0 <VL53L0X_WrByte>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	4313      	orrs	r3, r2
 800509c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01e      	beq.n	80050e2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80050a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d009      	beq.n	80050c0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	21cb      	movs	r1, #203	; 0xcb
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 fe83 	bl	8007dbc <VL53L0X_RdByte>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	4313      	orrs	r3, r2
 80050be:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80050c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02a      	beq.n	800511e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80050c8:	f107 030e 	add.w	r3, r7, #14
 80050cc:	461a      	mov	r2, r3
 80050ce:	21ee      	movs	r1, #238	; 0xee
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f002 fe73 	bl	8007dbc <VL53L0X_RdByte>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461a      	mov	r2, r3
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	4313      	orrs	r3, r2
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e01d      	b.n	800511e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80050e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80050ea:	78bb      	ldrb	r3, [r7, #2]
 80050ec:	461a      	mov	r2, r3
 80050ee:	21cb      	movs	r1, #203	; 0xcb
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f002 fddd 	bl	8007cb0 <VL53L0X_WrByte>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461a      	mov	r2, r3
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005100:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	21ee      	movs	r1, #238	; 0xee
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f002 fe12 	bl	8007d38 <VL53L0X_UpdateByte>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	4313      	orrs	r3, r2
 800511c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800511e:	2201      	movs	r2, #1
 8005120:	21ff      	movs	r1, #255	; 0xff
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f002 fdc4 	bl	8007cb0 <VL53L0X_WrByte>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	4313      	orrs	r3, r2
 8005130:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005132:	2201      	movs	r2, #1
 8005134:	2100      	movs	r1, #0
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f002 fdba 	bl	8007cb0 <VL53L0X_WrByte>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	4313      	orrs	r3, r2
 8005144:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005146:	2200      	movs	r2, #0
 8005148:	21ff      	movs	r1, #255	; 0xff
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f002 fdb0 	bl	8007cb0 <VL53L0X_WrByte>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	4313      	orrs	r3, r2
 8005158:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	b2da      	uxtb	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	701a      	strb	r2, [r3, #0]

	return Status;
 8005166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b08a      	sub	sp, #40	; 0x28
 8005176:	af04      	add	r7, sp, #16
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	4611      	mov	r1, r2
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	71fb      	strb	r3, [r7, #7]
 8005184:	4613      	mov	r3, r2
 8005186:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800519c:	79bb      	ldrb	r3, [r7, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80051a8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80051aa:	2201      	movs	r2, #1
 80051ac:	2101      	movs	r1, #1
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f002 fd7e 	bl	8007cb0 <VL53L0X_WrByte>
 80051b4:	4603      	mov	r3, r0
 80051b6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80051b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff ff01 	bl	8004fca <VL53L0X_perform_single_ref_calibration>
 80051c8:	4603      	mov	r3, r0
 80051ca:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80051cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d115      	bne.n	8005200 <VL53L0X_perform_vhv_calibration+0x8e>
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d112      	bne.n	8005200 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80051da:	7d39      	ldrb	r1, [r7, #20]
 80051dc:	7d7a      	ldrb	r2, [r7, #21]
 80051de:	2300      	movs	r3, #0
 80051e0:	9303      	str	r3, [sp, #12]
 80051e2:	2301      	movs	r3, #1
 80051e4:	9302      	str	r3, [sp, #8]
 80051e6:	f107 0313 	add.w	r3, r7, #19
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	460b      	mov	r3, r1
 80051f2:	2101      	movs	r1, #1
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff ff23 	bl	8005040 <VL53L0X_ref_calibration_io>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
 80051fe:	e002      	b.n	8005206 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d112      	bne.n	8005234 <VL53L0X_perform_vhv_calibration+0xc2>
 800520e:	79bb      	ldrb	r3, [r7, #6]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	461a      	mov	r2, r3
 8005218:	2101      	movs	r1, #1
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f002 fd48 	bl	8007cb0 <VL53L0X_WrByte>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	7dba      	ldrb	r2, [r7, #22]
 8005230:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005234:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af04      	add	r7, sp, #16
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4611      	mov	r1, r2
 800524c:	461a      	mov	r2, r3
 800524e:	460b      	mov	r3, r1
 8005250:	71fb      	strb	r3, [r7, #7]
 8005252:	4613      	mov	r3, r2
 8005254:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005266:	79bb      	ldrb	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005272:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005274:	2202      	movs	r2, #2
 8005276:	2101      	movs	r1, #1
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f002 fd19 	bl	8007cb0 <VL53L0X_WrByte>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800528a:	2100      	movs	r1, #0
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fe9c 	bl	8004fca <VL53L0X_perform_single_ref_calibration>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <VL53L0X_perform_phase_calibration+0x8a>
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d112      	bne.n	80052ca <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80052a4:	7d39      	ldrb	r1, [r7, #20]
 80052a6:	7d7a      	ldrb	r2, [r7, #21]
 80052a8:	2301      	movs	r3, #1
 80052aa:	9303      	str	r3, [sp, #12]
 80052ac:	2300      	movs	r3, #0
 80052ae:	9302      	str	r3, [sp, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	f107 0313 	add.w	r3, r7, #19
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	460b      	mov	r3, r1
 80052bc:	2101      	movs	r1, #1
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff febe 	bl	8005040 <VL53L0X_ref_calibration_io>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
 80052c8:	e002      	b.n	80052d0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80052d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d112      	bne.n	80052fe <VL53L0X_perform_phase_calibration+0xbe>
 80052d8:	79bb      	ldrb	r3, [r7, #6]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80052de:	7dbb      	ldrb	r3, [r7, #22]
 80052e0:	461a      	mov	r2, r3
 80052e2:	2101      	movs	r1, #1
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f002 fce3 	bl	8007cb0 <VL53L0X_WrByte>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80052ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	7dba      	ldrb	r2, [r7, #22]
 80052fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80052fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005326:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	2300      	movs	r3, #0
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ff1f 	bl	8005172 <VL53L0X_perform_vhv_calibration>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	2300      	movs	r3, #0
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff7a 	bl	8005240 <VL53L0X_perform_phase_calibration>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005358:	7dbb      	ldrb	r3, [r7, #22]
 800535a:	461a      	mov	r2, r3
 800535c:	2101      	movs	r1, #1
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f002 fca6 	bl	8007cb0 <VL53L0X_WrByte>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	7dba      	ldrb	r2, [r7, #22]
 8005374:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005398:	f107 030f 	add.w	r3, r7, #15
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe fdff 	bl	8003fa2 <VL53L0X_GetMeasurementDataReady>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80053a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d00f      	beq.n	80053d6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3301      	adds	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053c2:	d302      	bcc.n	80053ca <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80053c4:	23f9      	movs	r3, #249	; 0xf9
 80053c6:	75fb      	strb	r3, [r7, #23]
			break;
 80053c8:	e006      	b.n	80053d8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 fd59 	bl	8007e82 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80053d0:	e7e2      	b.n	8005398 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80053d6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80053d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	3301      	adds	r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	4603      	mov	r3, r0
 8005412:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800543c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005440:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005442:	e002      	b.n	800544a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d8f8      	bhi.n	8005444 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005452:	e017      	b.n	8005484 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4413      	add	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d30b      	bcc.n	8005478 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4413      	add	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e002      	b.n	800547e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	089b      	lsrs	r3, r3, #2
 8005482:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e4      	bne.n	8005454 <VL53L0X_isqrt+0x24>
	}

	return res;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80054a4:	2200      	movs	r2, #0
 80054a6:	2183      	movs	r1, #131	; 0x83
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f002 fc01 	bl	8007cb0 <VL53L0X_WrByte>
 80054ae:	4603      	mov	r3, r0
 80054b0:	461a      	mov	r2, r3
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80054b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11e      	bne.n	80054fe <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80054c4:	f107 030f 	add.w	r3, r7, #15
 80054c8:	461a      	mov	r2, r3
 80054ca:	2183      	movs	r1, #131	; 0x83
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 fc75 	bl	8007dbc <VL53L0X_RdByte>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <VL53L0X_device_read_strobe+0x5a>
 80054dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	3301      	adds	r3, #1
 80054e8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054f0:	d3e8      	bcc.n	80054c4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054f8:	d301      	bcc.n	80054fe <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80054fa:	23f9      	movs	r3, #249	; 0xf9
 80054fc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80054fe:	2201      	movs	r2, #1
 8005500:	2183      	movs	r1, #131	; 0x83
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fbd4 	bl	8007cb0 <VL53L0X_WrByte>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	4313      	orrs	r3, r2
 8005510:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005512:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b098      	sub	sp, #96	; 0x60
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800552a:	2300      	movs	r3, #0
 800552c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800554e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800556a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800556e:	2b07      	cmp	r3, #7
 8005570:	f000 8408 	beq.w	8005d84 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005574:	2201      	movs	r2, #1
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f002 fb99 	bl	8007cb0 <VL53L0X_WrByte>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005586:	4313      	orrs	r3, r2
 8005588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800558c:	2201      	movs	r2, #1
 800558e:	21ff      	movs	r1, #255	; 0xff
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f002 fb8d 	bl	8007cb0 <VL53L0X_WrByte>
 8005596:	4603      	mov	r3, r0
 8005598:	461a      	mov	r2, r3
 800559a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800559e:	4313      	orrs	r3, r2
 80055a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80055a4:	2200      	movs	r2, #0
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f002 fb81 	bl	8007cb0 <VL53L0X_WrByte>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80055bc:	2206      	movs	r2, #6
 80055be:	21ff      	movs	r1, #255	; 0xff
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f002 fb75 	bl	8007cb0 <VL53L0X_WrByte>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80055d4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80055d8:	461a      	mov	r2, r3
 80055da:	2183      	movs	r1, #131	; 0x83
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 fbed 	bl	8007dbc <VL53L0X_RdByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80055f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	2183      	movs	r1, #131	; 0x83
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f002 fb56 	bl	8007cb0 <VL53L0X_WrByte>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800560c:	4313      	orrs	r3, r2
 800560e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005612:	2207      	movs	r2, #7
 8005614:	21ff      	movs	r1, #255	; 0xff
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f002 fb4a 	bl	8007cb0 <VL53L0X_WrByte>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005624:	4313      	orrs	r3, r2
 8005626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800562a:	2201      	movs	r2, #1
 800562c:	2181      	movs	r1, #129	; 0x81
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f002 fb3e 	bl	8007cb0 <VL53L0X_WrByte>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800563c:	4313      	orrs	r3, r2
 800563e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f002 fc1d 	bl	8007e82 <VL53L0X_PollingDelay>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005650:	4313      	orrs	r3, r2
 8005652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005656:	2201      	movs	r2, #1
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f002 fb28 	bl	8007cb0 <VL53L0X_WrByte>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005668:	4313      	orrs	r3, r2
 800566a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8098 	beq.w	80057aa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800567a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800567e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 8091 	bne.w	80057aa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005688:	226b      	movs	r2, #107	; 0x6b
 800568a:	2194      	movs	r1, #148	; 0x94
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f002 fb0f 	bl	8007cb0 <VL53L0X_WrByte>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800569a:	4313      	orrs	r3, r2
 800569c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fef9 	bl	8005498 <VL53L0X_device_read_strobe>
 80056a6:	4603      	mov	r3, r0
 80056a8:	461a      	mov	r2, r3
 80056aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80056b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056b8:	461a      	mov	r2, r3
 80056ba:	2190      	movs	r1, #144	; 0x90
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f002 fbbf 	bl	8007e40 <VL53L0X_RdDWord>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	0bdb      	lsrs	r3, r3, #15
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80056ec:	2224      	movs	r2, #36	; 0x24
 80056ee:	2194      	movs	r1, #148	; 0x94
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f002 fadd 	bl	8007cb0 <VL53L0X_WrByte>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fe:	4313      	orrs	r3, r2
 8005700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fec7 	bl	8005498 <VL53L0X_device_read_strobe>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005712:	4313      	orrs	r3, r2
 8005714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800571c:	461a      	mov	r2, r3
 800571e:	2190      	movs	r1, #144	; 0x90
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f002 fb8d 	bl	8007e40 <VL53L0X_RdDWord>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800572e:	4313      	orrs	r3, r2
 8005730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	0e1b      	lsrs	r3, r3, #24
 8005738:	b2db      	uxtb	r3, r3
 800573a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	b2db      	uxtb	r3, r3
 8005742:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	b2db      	uxtb	r3, r3
 800574a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	b2db      	uxtb	r3, r3
 8005750:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005752:	2225      	movs	r2, #37	; 0x25
 8005754:	2194      	movs	r1, #148	; 0x94
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f002 faaa 	bl	8007cb0 <VL53L0X_WrByte>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005764:	4313      	orrs	r3, r2
 8005766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe94 	bl	8005498 <VL53L0X_device_read_strobe>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005778:	4313      	orrs	r3, r2
 800577a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800577e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005782:	461a      	mov	r2, r3
 8005784:	2190      	movs	r1, #144	; 0x90
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 fb5a 	bl	8007e40 <VL53L0X_RdDWord>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005794:	4313      	orrs	r3, r2
 8005796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	0e1b      	lsrs	r3, r3, #24
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8189 	beq.w	8005ac8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80057b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057ba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 8182 	bne.w	8005ac8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80057c4:	2202      	movs	r2, #2
 80057c6:	2194      	movs	r1, #148	; 0x94
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f002 fa71 	bl	8007cb0 <VL53L0X_WrByte>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fe5b 	bl	8005498 <VL53L0X_device_read_strobe>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80057f0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80057f4:	461a      	mov	r2, r3
 80057f6:	2190      	movs	r1, #144	; 0x90
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f002 fadf 	bl	8007dbc <VL53L0X_RdByte>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005806:	4313      	orrs	r3, r2
 8005808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800580c:	227b      	movs	r2, #123	; 0x7b
 800580e:	2194      	movs	r1, #148	; 0x94
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 fa4d 	bl	8007cb0 <VL53L0X_WrByte>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800581e:	4313      	orrs	r3, r2
 8005820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff fe37 	bl	8005498 <VL53L0X_device_read_strobe>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005832:	4313      	orrs	r3, r2
 8005834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005838:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800583c:	461a      	mov	r2, r3
 800583e:	2190      	movs	r1, #144	; 0x90
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 fabb 	bl	8007dbc <VL53L0X_RdByte>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800584e:	4313      	orrs	r3, r2
 8005850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005854:	2277      	movs	r2, #119	; 0x77
 8005856:	2194      	movs	r1, #148	; 0x94
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 fa29 	bl	8007cb0 <VL53L0X_WrByte>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005866:	4313      	orrs	r3, r2
 8005868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff fe13 	bl	8005498 <VL53L0X_device_read_strobe>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800587a:	4313      	orrs	r3, r2
 800587c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005884:	461a      	mov	r2, r3
 8005886:	2190      	movs	r1, #144	; 0x90
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 fad9 	bl	8007e40 <VL53L0X_RdDWord>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005896:	4313      	orrs	r3, r2
 8005898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	0e5b      	lsrs	r3, r3, #25
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	0c9b      	lsrs	r3, r3, #18
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	0adb      	lsrs	r3, r3, #11
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80058e6:	2278      	movs	r2, #120	; 0x78
 80058e8:	2194      	movs	r1, #148	; 0x94
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 f9e0 	bl	8007cb0 <VL53L0X_WrByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fdca 	bl	8005498 <VL53L0X_device_read_strobe>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800590c:	4313      	orrs	r3, r2
 800590e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005916:	461a      	mov	r2, r3
 8005918:	2190      	movs	r1, #144	; 0x90
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f002 fa90 	bl	8007e40 <VL53L0X_RdDWord>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005928:	4313      	orrs	r3, r2
 800592a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	0f5b      	lsrs	r3, r3, #29
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005938:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800593a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800593e:	4413      	add	r3, r2
 8005940:	b2db      	uxtb	r3, r3
 8005942:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	0d9b      	lsrs	r3, r3, #22
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	b2db      	uxtb	r3, r3
 8005950:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	0bdb      	lsrs	r3, r3, #15
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	b2db      	uxtb	r3, r3
 800595e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	b2db      	uxtb	r3, r3
 800596c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005978:	b2db      	uxtb	r3, r3
 800597a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	b2db      	uxtb	r3, r3
 8005980:	019b      	lsls	r3, r3, #6
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800598e:	2279      	movs	r2, #121	; 0x79
 8005990:	2194      	movs	r1, #148	; 0x94
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f002 f98c 	bl	8007cb0 <VL53L0X_WrByte>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fd76 	bl	8005498 <VL53L0X_device_read_strobe>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80059ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059be:	461a      	mov	r2, r3
 80059c0:	2190      	movs	r1, #144	; 0x90
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f002 fa3c 	bl	8007e40 <VL53L0X_RdDWord>
 80059c8:	4603      	mov	r3, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	0e9b      	lsrs	r3, r3, #26
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80059e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059e6:	4413      	add	r3, r2
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	0cdb      	lsrs	r3, r3, #19
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	0b1b      	lsrs	r3, r3, #12
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005a28:	227a      	movs	r2, #122	; 0x7a
 8005a2a:	2194      	movs	r1, #148	; 0x94
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 f93f 	bl	8007cb0 <VL53L0X_WrByte>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fd29 	bl	8005498 <VL53L0X_device_read_strobe>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2190      	movs	r1, #144	; 0x90
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f002 f9ef 	bl	8007e40 <VL53L0X_RdDWord>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	0f9b      	lsrs	r3, r3, #30
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a80:	4413      	add	r3, r2
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	0ddb      	lsrs	r3, r3, #23
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	0a5b      	lsrs	r3, r3, #9
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80f1 	beq.w	8005cb6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ad8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 80ea 	bne.w	8005cb6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005ae2:	227b      	movs	r2, #123	; 0x7b
 8005ae4:	2194      	movs	r1, #148	; 0x94
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 f8e2 	bl	8007cb0 <VL53L0X_WrByte>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fccc 	bl	8005498 <VL53L0X_device_read_strobe>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b12:	461a      	mov	r2, r3
 8005b14:	2190      	movs	r1, #144	; 0x90
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f002 f992 	bl	8007e40 <VL53L0X_RdDWord>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005b2a:	227c      	movs	r2, #124	; 0x7c
 8005b2c:	2194      	movs	r1, #148	; 0x94
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 f8be 	bl	8007cb0 <VL53L0X_WrByte>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fca8 	bl	8005498 <VL53L0X_device_read_strobe>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2190      	movs	r1, #144	; 0x90
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 f96e 	bl	8007e40 <VL53L0X_RdDWord>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005b72:	2273      	movs	r2, #115	; 0x73
 8005b74:	2194      	movs	r1, #148	; 0x94
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f002 f89a 	bl	8007cb0 <VL53L0X_WrByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fc84 	bl	8005498 <VL53L0X_device_read_strobe>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2190      	movs	r1, #144	; 0x90
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f002 f94a 	bl	8007e40 <VL53L0X_RdDWord>
 8005bac:	4603      	mov	r3, r0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005bc2:	2274      	movs	r2, #116	; 0x74
 8005bc4:	2194      	movs	r1, #148	; 0x94
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f002 f872 	bl	8007cb0 <VL53L0X_WrByte>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fc5c 	bl	8005498 <VL53L0X_device_read_strobe>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2190      	movs	r1, #144	; 0x90
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 f922 	bl	8007e40 <VL53L0X_RdDWord>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c10:	4313      	orrs	r3, r2
 8005c12:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005c14:	2275      	movs	r2, #117	; 0x75
 8005c16:	2194      	movs	r1, #148	; 0x94
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 f849 	bl	8007cb0 <VL53L0X_WrByte>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fc33 	bl	8005498 <VL53L0X_device_read_strobe>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c44:	461a      	mov	r2, r3
 8005c46:	2190      	movs	r1, #144	; 0x90
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f002 f8f9 	bl	8007e40 <VL53L0X_RdDWord>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005c64:	2276      	movs	r2, #118	; 0x76
 8005c66:	2194      	movs	r1, #148	; 0x94
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 f821 	bl	8007cb0 <VL53L0X_WrByte>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fc0b 	bl	8005498 <VL53L0X_device_read_strobe>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c94:	461a      	mov	r2, r3
 8005c96:	2190      	movs	r1, #144	; 0x90
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 f8d1 	bl	8007e40 <VL53L0X_RdDWord>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2181      	movs	r1, #129	; 0x81
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fff8 	bl	8007cb0 <VL53L0X_WrByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005cce:	2206      	movs	r2, #6
 8005cd0:	21ff      	movs	r1, #255	; 0xff
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 ffec 	bl	8007cb0 <VL53L0X_WrByte>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005ce6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005cea:	461a      	mov	r2, r3
 8005cec:	2183      	movs	r1, #131	; 0x83
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f002 f864 	bl	8007dbc <VL53L0X_RdByte>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d06:	f023 0304 	bic.w	r3, r3, #4
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2183      	movs	r1, #131	; 0x83
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 ffcd 	bl	8007cb0 <VL53L0X_WrByte>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d24:	2201      	movs	r2, #1
 8005d26:	21ff      	movs	r1, #255	; 0xff
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 ffc1 	bl	8007cb0 <VL53L0X_WrByte>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 ffb5 	bl	8007cb0 <VL53L0X_WrByte>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d54:	2200      	movs	r2, #0
 8005d56:	21ff      	movs	r1, #255	; 0xff
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 ffa9 	bl	8007cb0 <VL53L0X_WrByte>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	461a      	mov	r2, r3
 8005d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 ff9d 	bl	8007cb0 <VL53L0X_WrByte>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005d84:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 808f 	bne.w	8005eac <VL53L0X_get_info_from_device+0x98e>
 8005d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d92:	2b07      	cmp	r3, #7
 8005d94:	f000 808a 	beq.w	8005eac <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d024      	beq.n	8005dec <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005da6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d11e      	bne.n	8005dec <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005db4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005dbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc6:	e00e      	b.n	8005de6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005dc8:	f107 0208 	add.w	r2, r7, #8
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	4413      	add	r3, r2
 8005dd0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005ddc:	460a      	mov	r2, r1
 8005dde:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de2:	3301      	adds	r3, #1
 8005de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	dded      	ble.n	8005dc8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005df6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dfa:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d112      	bne.n	8005e28 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	33f3      	adds	r3, #243	; 0xf3
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005e1c:	f107 0310 	add.w	r3, r7, #16
 8005e20:	4619      	mov	r1, r3
 8005e22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e24:	f007 fe29 	bl	800da7a <strcpy>

		}

		if (((option & 4) == 4) &&
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d030      	beq.n	8005e94 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005e32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e36:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d12a      	bne.n	8005e94 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e50:	025b      	lsls	r3, r3, #9
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d011      	beq.n	8005e8c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005e7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005e80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005e84:	425b      	negs	r3, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005e8c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005e94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005ea2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005eac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3760      	adds	r7, #96	; 0x60
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005eb8:	b490      	push	{r4, r7}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005ec4:	f240 6377 	movw	r3, #1655	; 0x677
 8005ec8:	f04f 0400 	mov.w	r4, #0
 8005ecc:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005ed0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005ed4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc90      	pop	{r4, r7}
 8005ef0:	4770      	bx	lr

08005ef2 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005f12:	e005      	b.n	8005f20 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f4      	bne.n	8005f14 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005f38:	4413      	add	r3, r2
 8005f3a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005f3c:	8afb      	ldrh	r3, [r7, #22]

}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	0a12      	lsrs	r2, r2, #8
 8005f60:	b292      	uxth	r2, r2
 8005f62:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005f68:	68fb      	ldr	r3, [r7, #12]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ff92 	bl	8005eb8 <VL53L0X_calc_macro_period_ps>
 8005f94:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <VL53L0X_calc_timeout_mclks+0x50>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	099b      	lsrs	r3, r3, #6
 8005fa4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fac:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	441a      	add	r2, r3
	timeout_period_mclks =
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	10624dd3 	.word	0x10624dd3

08005fcc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	807b      	strh	r3, [r7, #2]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff67 	bl	8005eb8 <VL53L0X_calc_macro_period_ps>
 8005fea:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <VL53L0X_calc_timeout_us+0x50>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	099b      	lsrs	r3, r3, #6
 8005ffa:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005ffc:	887b      	ldrh	r3, [r7, #2]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <VL53L0X_calc_timeout_us+0x50>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	099b      	lsrs	r3, r3, #6
 8006010:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006012:	697b      	ldr	r3, [r7, #20]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	10624dd3 	.word	0x10624dd3

08006020 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	460b      	mov	r3, r1
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800602e:	2300      	movs	r3, #0
 8006030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <get_sequence_step_timeout+0x38>
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d002      	beq.n	8006058 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d128      	bne.n	80060aa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006058:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800605c:	461a      	mov	r2, r3
 800605e:	2100      	movs	r1, #0
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7fd fa7d 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800606c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006074:	f107 0320 	add.w	r3, r7, #32
 8006078:	461a      	mov	r2, r3
 800607a:	2146      	movs	r1, #70	; 0x46
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f001 fe9d 	bl	8007dbc <VL53L0X_RdByte>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006088:	f897 3020 	ldrb.w	r3, [r7, #32]
 800608c:	b29b      	uxth	r3, r3
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff ff5b 	bl	8005f4a <VL53L0X_decode_timeout>
 8006094:	4603      	mov	r3, r0
 8006096:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006098:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800609c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800609e:	4619      	mov	r1, r3
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ff93 	bl	8005fcc <VL53L0X_calc_timeout_us>
 80060a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80060a8:	e092      	b.n	80061d0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80060aa:	7afb      	ldrb	r3, [r7, #11]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d135      	bne.n	800611c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060b0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80060b4:	461a      	mov	r2, r3
 80060b6:	2100      	movs	r1, #0
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7fd fa51 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80060c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 8081 	bne.w	80061d0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060ce:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80060d2:	461a      	mov	r2, r3
 80060d4:	2100      	movs	r1, #0
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7fd fa42 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80060e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80060ea:	f107 031e 	add.w	r3, r7, #30
 80060ee:	461a      	mov	r2, r3
 80060f0:	2151      	movs	r1, #81	; 0x51
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 fe83 	bl	8007dfe <VL53L0X_RdWord>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80060fe:	8bfb      	ldrh	r3, [r7, #30]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff22 	bl	8005f4a <VL53L0X_decode_timeout>
 8006106:	4603      	mov	r3, r0
 8006108:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800610a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800610e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff ff5a 	bl	8005fcc <VL53L0X_calc_timeout_us>
 8006118:	62b8      	str	r0, [r7, #40]	; 0x28
 800611a:	e059      	b.n	80061d0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d156      	bne.n	80061d0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006122:	f107 0314 	add.w	r3, r7, #20
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7fd fb25 	bl	8003778 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01d      	beq.n	8006174 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006138:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800613c:	461a      	mov	r2, r3
 800613e:	2100      	movs	r1, #0
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7fd fa0d 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800614c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006154:	f107 031e 	add.w	r3, r7, #30
 8006158:	461a      	mov	r2, r3
 800615a:	2151      	movs	r1, #81	; 0x51
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f001 fe4e 	bl	8007dfe <VL53L0X_RdWord>
 8006162:	4603      	mov	r3, r0
 8006164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006168:	8bfb      	ldrh	r3, [r7, #30]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff feed 	bl	8005f4a <VL53L0X_decode_timeout>
 8006170:	4603      	mov	r3, r0
 8006172:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006174:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800617c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006180:	461a      	mov	r2, r3
 8006182:	2101      	movs	r1, #1
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7fd f9eb 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006190:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10f      	bne.n	80061b8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006198:	f107 031c 	add.w	r3, r7, #28
 800619c:	461a      	mov	r2, r3
 800619e:	2171      	movs	r1, #113	; 0x71
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 fe2c 	bl	8007dfe <VL53L0X_RdWord>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80061ac:	8bbb      	ldrh	r3, [r7, #28]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fecb 	bl	8005f4a <VL53L0X_decode_timeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80061b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80061c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80061c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff feff 	bl	8005fcc <VL53L0X_calc_timeout_us>
 80061ce:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d4:	601a      	str	r2, [r3, #0]

	return Status;
 80061d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3730      	adds	r7, #48	; 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08a      	sub	sp, #40	; 0x28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	460b      	mov	r3, r1
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80061f6:	7afb      	ldrb	r3, [r7, #11]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <set_sequence_step_timeout+0x26>
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d002      	beq.n	8006208 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d138      	bne.n	800627a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006208:	f107 031b 	add.w	r3, r7, #27
 800620c:	461a      	mov	r2, r3
 800620e:	2100      	movs	r1, #0
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7fd f9a5 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800621c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11a      	bne.n	800625a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006224:	7efb      	ldrb	r3, [r7, #27]
 8006226:	461a      	mov	r2, r3
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fea4 	bl	8005f78 <VL53L0X_calc_timeout_mclks>
 8006230:	4603      	mov	r3, r0
 8006232:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006234:	8bbb      	ldrh	r3, [r7, #28]
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d903      	bls.n	8006244 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800623c:	23ff      	movs	r3, #255	; 0xff
 800623e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006242:	e004      	b.n	800624e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006244:	8bbb      	ldrh	r3, [r7, #28]
 8006246:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006248:	3b01      	subs	r3, #1
 800624a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800624e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800625a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 80ab 	bne.w	80063ba <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006268:	461a      	mov	r2, r3
 800626a:	2146      	movs	r1, #70	; 0x46
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f001 fd1f 	bl	8007cb0 <VL53L0X_WrByte>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006278:	e09f      	b.n	80063ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d135      	bne.n	80062ec <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11b      	bne.n	80062c0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006288:	f107 031b 	add.w	r3, r7, #27
 800628c:	461a      	mov	r2, r3
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7fd f965 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800629c:	7efb      	ldrb	r3, [r7, #27]
 800629e:	461a      	mov	r2, r3
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff fe68 	bl	8005f78 <VL53L0X_calc_timeout_mclks>
 80062a8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80062aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80062ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fe1f 	bl	8005ef2 <VL53L0X_encode_timeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062b8:	8b3a      	ldrh	r2, [r7, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80062c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d108      	bne.n	80062da <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80062c8:	8b3b      	ldrh	r3, [r7, #24]
 80062ca:	461a      	mov	r2, r3
 80062cc:	2151      	movs	r1, #81	; 0x51
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f001 fd10 	bl	8007cf4 <VL53L0X_WrWord>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80062da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d16b      	bne.n	80063ba <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80062ea:	e066      	b.n	80063ba <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80062ec:	7afb      	ldrb	r3, [r7, #11]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d160      	bne.n	80063b4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80062f2:	f107 0310 	add.w	r3, r7, #16
 80062f6:	4619      	mov	r1, r3
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7fd fa3d 	bl	8003778 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01d      	beq.n	8006344 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006308:	f107 031b 	add.w	r3, r7, #27
 800630c:	461a      	mov	r2, r3
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fd f925 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800631c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10f      	bne.n	8006344 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006324:	f107 0318 	add.w	r3, r7, #24
 8006328:	461a      	mov	r2, r3
 800632a:	2151      	movs	r1, #81	; 0x51
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 fd66 	bl	8007dfe <VL53L0X_RdWord>
 8006332:	4603      	mov	r3, r0
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006338:	8b3b      	ldrh	r3, [r7, #24]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fe05 	bl	8005f4a <VL53L0X_decode_timeout>
 8006340:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006342:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800634c:	f107 031b 	add.w	r3, r7, #27
 8006350:	461a      	mov	r2, r3
 8006352:	2101      	movs	r1, #1
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7fd f903 	bl	8003560 <VL53L0X_GetVcselPulsePeriod>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006364:	2b00      	cmp	r3, #0
 8006366:	d128      	bne.n	80063ba <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006368:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800636a:	461a      	mov	r2, r3
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fe02 	bl	8005f78 <VL53L0X_calc_timeout_mclks>
 8006374:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	4413      	add	r3, r2
 800637c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800637e:	6a38      	ldr	r0, [r7, #32]
 8006380:	f7ff fdb7 	bl	8005ef2 <VL53L0X_encode_timeout>
 8006384:	4603      	mov	r3, r0
 8006386:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8006388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006390:	8bfb      	ldrh	r3, [r7, #30]
 8006392:	461a      	mov	r2, r3
 8006394:	2171      	movs	r1, #113	; 0x71
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 fcac 	bl	8007cf4 <VL53L0X_WrWord>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80063a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80063b2:	e002      	b.n	80063ba <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063b4:	23fc      	movs	r3, #252	; 0xfc
 80063b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80063ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b08a      	sub	sp, #40	; 0x28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
 80063d2:	4613      	mov	r3, r2
 80063d4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80063dc:	230c      	movs	r3, #12
 80063de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80063e2:	2312      	movs	r3, #18
 80063e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80063ee:	230e      	movs	r3, #14
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80063f8:	78bb      	ldrb	r3, [r7, #2]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006404:	23fc      	movs	r3, #252	; 0xfc
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800640a:	e020      	b.n	800644e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <VL53L0X_set_vcsel_pulse_period+0x68>
 8006412:	78ba      	ldrb	r2, [r7, #2]
 8006414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006418:	429a      	cmp	r2, r3
 800641a:	d304      	bcc.n	8006426 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800641c:	78ba      	ldrb	r2, [r7, #2]
 800641e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006422:	429a      	cmp	r2, r3
 8006424:	d903      	bls.n	800642e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006426:	23fc      	movs	r3, #252	; 0xfc
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800642c:	e00f      	b.n	800644e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d10c      	bne.n	800644e <VL53L0X_set_vcsel_pulse_period+0x88>
 8006434:	78ba      	ldrb	r2, [r7, #2]
 8006436:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800643a:	429a      	cmp	r2, r3
 800643c:	d304      	bcc.n	8006448 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800643e:	78ba      	ldrb	r2, [r7, #2]
 8006440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006444:	429a      	cmp	r2, r3
 8006446:	d902      	bls.n	800644e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006448:	23fc      	movs	r3, #252	; 0xfc
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800644e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800645a:	e239      	b.n	80068d0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d150      	bne.n	8006504 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006462:	78bb      	ldrb	r3, [r7, #2]
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d110      	bne.n	800648a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006468:	2218      	movs	r2, #24
 800646a:	2157      	movs	r1, #87	; 0x57
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fc1f 	bl	8007cb0 <VL53L0X_WrByte>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006478:	2208      	movs	r2, #8
 800647a:	2156      	movs	r1, #86	; 0x56
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fc17 	bl	8007cb0 <VL53L0X_WrByte>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006488:	e17f      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800648a:	78bb      	ldrb	r3, [r7, #2]
 800648c:	2b0e      	cmp	r3, #14
 800648e:	d110      	bne.n	80064b2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006490:	2230      	movs	r2, #48	; 0x30
 8006492:	2157      	movs	r1, #87	; 0x57
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fc0b 	bl	8007cb0 <VL53L0X_WrByte>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80064a0:	2208      	movs	r2, #8
 80064a2:	2156      	movs	r1, #86	; 0x56
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fc03 	bl	8007cb0 <VL53L0X_WrByte>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064b0:	e16b      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80064b2:	78bb      	ldrb	r3, [r7, #2]
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d110      	bne.n	80064da <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	2157      	movs	r1, #87	; 0x57
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fbf7 	bl	8007cb0 <VL53L0X_WrByte>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80064c8:	2208      	movs	r2, #8
 80064ca:	2156      	movs	r1, #86	; 0x56
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 fbef 	bl	8007cb0 <VL53L0X_WrByte>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064d8:	e157      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80064da:	78bb      	ldrb	r3, [r7, #2]
 80064dc:	2b12      	cmp	r3, #18
 80064de:	f040 8154 	bne.w	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80064e2:	2250      	movs	r2, #80	; 0x50
 80064e4:	2157      	movs	r1, #87	; 0x57
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fbe2 	bl	8007cb0 <VL53L0X_WrByte>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80064f2:	2208      	movs	r2, #8
 80064f4:	2156      	movs	r1, #86	; 0x56
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 fbda 	bl	8007cb0 <VL53L0X_WrByte>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006502:	e142      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	2b01      	cmp	r3, #1
 8006508:	f040 813f 	bne.w	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800650c:	78bb      	ldrb	r3, [r7, #2]
 800650e:	2b08      	cmp	r3, #8
 8006510:	d14c      	bne.n	80065ac <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006512:	2210      	movs	r2, #16
 8006514:	2148      	movs	r1, #72	; 0x48
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fbca 	bl	8007cb0 <VL53L0X_WrByte>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006522:	2208      	movs	r2, #8
 8006524:	2147      	movs	r1, #71	; 0x47
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fbc2 	bl	8007cb0 <VL53L0X_WrByte>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006532:	2202      	movs	r2, #2
 8006534:	2132      	movs	r1, #50	; 0x32
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fbba 	bl	8007cb0 <VL53L0X_WrByte>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006544:	4313      	orrs	r3, r2
 8006546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800654a:	220c      	movs	r2, #12
 800654c:	2130      	movs	r1, #48	; 0x30
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fbae 	bl	8007cb0 <VL53L0X_WrByte>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800655c:	4313      	orrs	r3, r2
 800655e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006562:	2201      	movs	r2, #1
 8006564:	21ff      	movs	r1, #255	; 0xff
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fba2 	bl	8007cb0 <VL53L0X_WrByte>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006574:	4313      	orrs	r3, r2
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800657a:	2230      	movs	r2, #48	; 0x30
 800657c:	2130      	movs	r1, #48	; 0x30
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fb96 	bl	8007cb0 <VL53L0X_WrByte>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800658c:	4313      	orrs	r3, r2
 800658e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006592:	2200      	movs	r2, #0
 8006594:	21ff      	movs	r1, #255	; 0xff
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fb8a 	bl	8007cb0 <VL53L0X_WrByte>
 800659c:	4603      	mov	r3, r0
 800659e:	461a      	mov	r2, r3
 80065a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065aa:	e0ee      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80065ac:	78bb      	ldrb	r3, [r7, #2]
 80065ae:	2b0a      	cmp	r3, #10
 80065b0:	d14c      	bne.n	800664c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80065b2:	2228      	movs	r2, #40	; 0x28
 80065b4:	2148      	movs	r1, #72	; 0x48
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fb7a 	bl	8007cb0 <VL53L0X_WrByte>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80065c2:	2208      	movs	r2, #8
 80065c4:	2147      	movs	r1, #71	; 0x47
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fb72 	bl	8007cb0 <VL53L0X_WrByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80065d2:	2203      	movs	r2, #3
 80065d4:	2132      	movs	r1, #50	; 0x32
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fb6a 	bl	8007cb0 <VL53L0X_WrByte>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80065ea:	2209      	movs	r2, #9
 80065ec:	2130      	movs	r1, #48	; 0x30
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fb5e 	bl	8007cb0 <VL53L0X_WrByte>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006602:	2201      	movs	r2, #1
 8006604:	21ff      	movs	r1, #255	; 0xff
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fb52 	bl	8007cb0 <VL53L0X_WrByte>
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006614:	4313      	orrs	r3, r2
 8006616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800661a:	2220      	movs	r2, #32
 800661c:	2130      	movs	r1, #48	; 0x30
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fb46 	bl	8007cb0 <VL53L0X_WrByte>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662c:	4313      	orrs	r3, r2
 800662e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006632:	2200      	movs	r2, #0
 8006634:	21ff      	movs	r1, #255	; 0xff
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fb3a 	bl	8007cb0 <VL53L0X_WrByte>
 800663c:	4603      	mov	r3, r0
 800663e:	461a      	mov	r2, r3
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006644:	4313      	orrs	r3, r2
 8006646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800664a:	e09e      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800664c:	78bb      	ldrb	r3, [r7, #2]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d14c      	bne.n	80066ec <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006652:	2238      	movs	r2, #56	; 0x38
 8006654:	2148      	movs	r1, #72	; 0x48
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fb2a 	bl	8007cb0 <VL53L0X_WrByte>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006662:	2208      	movs	r2, #8
 8006664:	2147      	movs	r1, #71	; 0x47
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 fb22 	bl	8007cb0 <VL53L0X_WrByte>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006672:	2203      	movs	r2, #3
 8006674:	2132      	movs	r1, #50	; 0x32
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fb1a 	bl	8007cb0 <VL53L0X_WrByte>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006684:	4313      	orrs	r3, r2
 8006686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800668a:	2208      	movs	r2, #8
 800668c:	2130      	movs	r1, #48	; 0x30
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb0e 	bl	8007cb0 <VL53L0X_WrByte>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800669c:	4313      	orrs	r3, r2
 800669e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80066a2:	2201      	movs	r2, #1
 80066a4:	21ff      	movs	r1, #255	; 0xff
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fb02 	bl	8007cb0 <VL53L0X_WrByte>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461a      	mov	r2, r3
 80066b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80066ba:	2220      	movs	r2, #32
 80066bc:	2130      	movs	r1, #48	; 0x30
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 faf6 	bl	8007cb0 <VL53L0X_WrByte>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80066d2:	2200      	movs	r2, #0
 80066d4:	21ff      	movs	r1, #255	; 0xff
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 faea 	bl	8007cb0 <VL53L0X_WrByte>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066ea:	e04e      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80066ec:	78bb      	ldrb	r3, [r7, #2]
 80066ee:	2b0e      	cmp	r3, #14
 80066f0:	d14b      	bne.n	800678a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80066f2:	2248      	movs	r2, #72	; 0x48
 80066f4:	2148      	movs	r1, #72	; 0x48
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 fada 	bl	8007cb0 <VL53L0X_WrByte>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006702:	2208      	movs	r2, #8
 8006704:	2147      	movs	r1, #71	; 0x47
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fad2 	bl	8007cb0 <VL53L0X_WrByte>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006712:	2203      	movs	r2, #3
 8006714:	2132      	movs	r1, #50	; 0x32
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 faca 	bl	8007cb0 <VL53L0X_WrByte>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006724:	4313      	orrs	r3, r2
 8006726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800672a:	2207      	movs	r2, #7
 800672c:	2130      	movs	r1, #48	; 0x30
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fabe 	bl	8007cb0 <VL53L0X_WrByte>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800673c:	4313      	orrs	r3, r2
 800673e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006742:	2201      	movs	r2, #1
 8006744:	21ff      	movs	r1, #255	; 0xff
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fab2 	bl	8007cb0 <VL53L0X_WrByte>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006754:	4313      	orrs	r3, r2
 8006756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800675a:	2220      	movs	r2, #32
 800675c:	2130      	movs	r1, #48	; 0x30
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 faa6 	bl	8007cb0 <VL53L0X_WrByte>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800676c:	4313      	orrs	r3, r2
 800676e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006772:	2200      	movs	r2, #0
 8006774:	21ff      	movs	r1, #255	; 0xff
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fa9a 	bl	8007cb0 <VL53L0X_WrByte>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006784:	4313      	orrs	r3, r2
 8006786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800678a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800678e:	2b00      	cmp	r3, #0
 8006790:	d17f      	bne.n	8006892 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006792:	78bb      	ldrb	r3, [r7, #2]
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fe38 	bl	800540a <VL53L0X_encode_vcsel_period>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d045      	beq.n	8006836 <VL53L0X_set_vcsel_pulse_period+0x470>
 80067aa:	e06e      	b.n	800688a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	461a      	mov	r2, r3
 80067b2:	2103      	movs	r1, #3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fc33 	bl	8006020 <get_sequence_step_timeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80067c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	461a      	mov	r2, r3
 80067ce:	2102      	movs	r1, #2
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff fc25 	bl	8006020 <get_sequence_step_timeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80067dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80067e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80067e8:	461a      	mov	r2, r3
 80067ea:	2150      	movs	r1, #80	; 0x50
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fa5f 	bl	8007cb0 <VL53L0X_WrByte>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80067f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d108      	bne.n	8006812 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	461a      	mov	r2, r3
 8006804:	2103      	movs	r1, #3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fceb 	bl	80061e2 <set_sequence_step_timeout>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	461a      	mov	r2, r3
 800681e:	2102      	movs	r1, #2
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fcde 	bl	80061e2 <set_sequence_step_timeout>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	78ba      	ldrb	r2, [r7, #2]
 8006830:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006834:	e02e      	b.n	8006894 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006836:	f107 0318 	add.w	r3, r7, #24
 800683a:	461a      	mov	r2, r3
 800683c:	2104      	movs	r1, #4
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fbee 	bl	8006020 <get_sequence_step_timeout>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800684a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006852:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006856:	461a      	mov	r2, r3
 8006858:	2170      	movs	r1, #112	; 0x70
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fa28 	bl	8007cb0 <VL53L0X_WrByte>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800686a:	2b00      	cmp	r3, #0
 800686c:	d108      	bne.n	8006880 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	461a      	mov	r2, r3
 8006872:	2104      	movs	r1, #4
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fcb4 	bl	80061e2 <set_sequence_step_timeout>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	78ba      	ldrb	r2, [r7, #2]
 8006884:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006888:	e004      	b.n	8006894 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800688a:	23fc      	movs	r3, #252	; 0xfc
 800688c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006890:	e000      	b.n	8006894 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8006892:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fc fe1d 	bl	80034e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80068b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80068b8:	f107 010f 	add.w	r1, r7, #15
 80068bc:	2301      	movs	r3, #1
 80068be:	2200      	movs	r2, #0
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe fcbd 	bl	8005240 <VL53L0X_perform_phase_calibration>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80068cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3728      	adds	r7, #40	; 0x28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	460b      	mov	r3, r1
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00a      	beq.n	800690a <VL53L0X_get_vcsel_pulse_period+0x32>
 80068f4:	e013      	b.n	800691e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80068f6:	f107 0316 	add.w	r3, r7, #22
 80068fa:	461a      	mov	r2, r3
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fa5c 	bl	8007dbc <VL53L0X_RdByte>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006908:	e00b      	b.n	8006922 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800690a:	f107 0316 	add.w	r3, r7, #22
 800690e:	461a      	mov	r2, r3
 8006910:	2170      	movs	r1, #112	; 0x70
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 fa52 	bl	8007dbc <VL53L0X_RdByte>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800691c:	e001      	b.n	8006922 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800691e:	23fc      	movs	r3, #252	; 0xfc
 8006920:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800692a:	7dbb      	ldrb	r3, [r7, #22]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd59 	bl	80053e4 <VL53L0X_decode_vcsel_period>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	701a      	strb	r2, [r3, #0]

	return Status;
 800693a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b092      	sub	sp, #72	; 0x48
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006956:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800695a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800695c:	f240 7376 	movw	r3, #1910	; 0x776
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006962:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006966:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006968:	f44f 7325 	mov.w	r3, #660	; 0x294
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800696e:	f240 234e 	movw	r3, #590	; 0x24e
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006974:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800697a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006980:	f240 2326 	movw	r3, #550	; 0x226
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800698a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800698e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	429a      	cmp	r2, r3
 800699a:	d205      	bcs.n	80069a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800699c:	23fc      	movs	r3, #252	; 0xfc
 800699e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80069a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069a6:	e0aa      	b.n	8006afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80069a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fc fedc 	bl	8003778 <VL53L0X_GetSequenceStepEnables>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80069c6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d15b      	bne.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80069ce:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80069d4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80069da:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d052      	beq.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80069e0:	f107 0310 	add.w	r3, r7, #16
 80069e4:	461a      	mov	r2, r3
 80069e6:	2102      	movs	r1, #2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fb19 	bl	8006020 <get_sequence_step_timeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80069f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80069fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a00:	e07d      	b.n	8006afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006a02:	7d3b      	ldrb	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006a08:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d204      	bcs.n	8006a22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a20:	e002      	b.n	8006a28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a22:	23fc      	movs	r3, #252	; 0xfc
 8006a24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006a28:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006a30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a34:	e063      	b.n	8006afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d011      	beq.n	8006a60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	4413      	add	r3, r2
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d204      	bcs.n	8006a58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006a4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
 8006a56:	e016      	b.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a58:	23fc      	movs	r3, #252	; 0xfc
 8006a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a5e:	e012      	b.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006a60:	7d7b      	ldrb	r3, [r7, #21]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6a:	4413      	add	r3, r2
 8006a6c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d204      	bcs.n	8006a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7e:	e002      	b.n	8006a86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a80:	23fc      	movs	r3, #252	; 0xfc
 8006a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006a86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006a8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a92:	e034      	b.n	8006afe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d019      	beq.n	8006ace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006a9a:	f107 030c 	add.w	r3, r7, #12
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2103      	movs	r1, #3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fabc 	bl	8006020 <get_sequence_step_timeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab2:	4413      	add	r3, r2
 8006ab4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d204      	bcs.n	8006ac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac6:	e002      	b.n	8006ace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ac8:	23fc      	movs	r3, #252	; 0xfc
 8006aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006ace:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d111      	bne.n	8006afa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006ad6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00e      	beq.n	8006afa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fb7a 	bl	80061e2 <set_sequence_step_timeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006afa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3748      	adds	r7, #72	; 0x48
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b090      	sub	sp, #64	; 0x40
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006b16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b1a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006b1c:	f240 7376 	movw	r3, #1910	; 0x776
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006b22:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006b28:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006b2c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006b2e:	f240 234e 	movw	r3, #590	; 0x24e
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006b34:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006b3a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006b40:	f240 2326 	movw	r3, #550	; 0x226
 8006b44:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	441a      	add	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006b54:	f107 0318 	add.w	r3, r7, #24
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fc fe0c 	bl	8003778 <VL53L0X_GetSequenceStepEnables>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006b66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006b6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b72:	e075      	b.n	8006c60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006b74:	7e3b      	ldrb	r3, [r7, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006b7a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006b80:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d030      	beq.n	8006be8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006b86:	f107 0310 	add.w	r3, r7, #16
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fa46 	bl	8006020 <get_sequence_step_timeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006b9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d122      	bne.n	8006be8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006ba2:	7e3b      	ldrb	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006bac:	6939      	ldr	r1, [r7, #16]
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006bb2:	441a      	add	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006bb8:	7ebb      	ldrb	r3, [r7, #26]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006bc2:	6939      	ldr	r1, [r7, #16]
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	440b      	add	r3, r1
 8006bc8:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006bca:	441a      	add	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e00a      	b.n	8006be8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006bd2:	7e7b      	ldrb	r3, [r7, #25]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006bdc:	6939      	ldr	r1, [r7, #16]
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006be2:	441a      	add	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006be8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006bf0:	7efb      	ldrb	r3, [r7, #27]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fa0e 	bl	8006020 <get_sequence_step_timeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006c14:	441a      	add	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d114      	bne.n	8006c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006c22:	7f3b      	ldrb	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d011      	beq.n	8006c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006c28:	f107 0314 	add.w	r3, r7, #20
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2104      	movs	r1, #4
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff f9f5 	bl	8006020 <get_sequence_step_timeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006c46:	441a      	add	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d103      	bne.n	8006c5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3740      	adds	r7, #64	; 0x40
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006c7a:	e0c6      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006c8c:	7cfb      	ldrb	r3, [r7, #19]
 8006c8e:	2bff      	cmp	r3, #255	; 0xff
 8006c90:	f040 808d 	bne.w	8006dae <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	4413      	add	r3, r2
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	747b      	strb	r3, [r7, #17]
			Index++;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006ca4:	7c7b      	ldrb	r3, [r7, #17]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d87e      	bhi.n	8006da8 <VL53L0X_load_tuning_settings+0x140>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <VL53L0X_load_tuning_settings+0x48>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cfb 	.word	0x08006cfb
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d6f 	.word	0x08006d6f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	743b      	strb	r3, [r7, #16]
				Index++;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ce0:	7c3b      	ldrb	r3, [r7, #16]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	89ba      	ldrh	r2, [r7, #12]
 8006cf4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006cf8:	e087      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	743b      	strb	r3, [r7, #16]
				Index++;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	3301      	adds	r3, #1
 8006d08:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3301      	adds	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006d1a:	7c3b      	ldrb	r3, [r7, #16]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4413      	add	r3, r2
 8006d28:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	89ba      	ldrh	r2, [r7, #12]
 8006d2e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006d32:	e06a      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	743b      	strb	r3, [r7, #16]
				Index++;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	3301      	adds	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	4413      	add	r3, r2
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	3301      	adds	r3, #1
 8006d52:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006d54:	7c3b      	ldrb	r3, [r7, #16]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	89ba      	ldrh	r2, [r7, #12]
 8006d68:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006d6c:	e04d      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	4413      	add	r3, r2
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	743b      	strb	r3, [r7, #16]
				Index++;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	4413      	add	r3, r2
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006d8e:	7c3b      	ldrb	r3, [r7, #16]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	89ba      	ldrh	r2, [r7, #12]
 8006da2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006da6:	e030      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006da8:	23fc      	movs	r3, #252	; 0xfc
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e02d      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006dae:	7cfb      	ldrb	r3, [r7, #19]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d828      	bhi.n	8006e06 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	e00f      	b.n	8006dea <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	4413      	add	r3, r2
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	f107 0208 	add.w	r2, r7, #8
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	4413      	add	r3, r2
 8006dda:	460a      	mov	r2, r1
 8006ddc:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	3301      	adds	r3, #1
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	7cfb      	ldrb	r3, [r7, #19]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	dbeb      	blt.n	8006dca <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006df2:	7cfb      	ldrb	r3, [r7, #19]
 8006df4:	f107 0208 	add.w	r2, r7, #8
 8006df8:	7cb9      	ldrb	r1, [r7, #18]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ff04 	bl	8007c08 <VL53L0X_WriteMulti>
 8006e00:	4603      	mov	r3, r0
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e001      	b.n	8006e0a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e06:	23fc      	movs	r3, #252	; 0xfc
 8006e08:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <VL53L0X_load_tuning_settings+0x1b8>
 8006e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f43f af2e 	beq.w	8006c7c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006e42:	f107 0313 	add.w	r3, r7, #19
 8006e46:	4619      	mov	r1, r3
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7fc fd21 	bl	8003890 <VL53L0X_GetXTalkCompensationEnable>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006e52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d111      	bne.n	8006e7e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00e      	beq.n	8006e7e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	8a9b      	ldrh	r3, [r3, #20]
 8006e6a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3380      	adds	r3, #128	; 0x80
 8006e78:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006e7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006ea2:	f107 0310 	add.w	r3, r7, #16
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff ffbe 	bl	8006e2c <VL53L0X_get_total_xtalk_rate>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	441a      	add	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]

	return Status;
 8006ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b09a      	sub	sp, #104	; 0x68
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006ee2:	2312      	movs	r3, #18
 8006ee4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eea:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006eec:	2342      	movs	r3, #66	; 0x42
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006ef4:	2307      	movs	r3, #7
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	3380      	adds	r3, #128	; 0x80
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01b      	beq.n	8006f6c <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	029b      	lsls	r3, r3, #10
 8006f38:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f40:	4413      	add	r3, r2
 8006f42:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006f44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006f4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f50:	4613      	mov	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4413      	add	r3, r2
 8006f56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f96:	085a      	lsrs	r2, r3, #1
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	441a      	add	r2, r3
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb4:	d302      	bcc.n	8006fbc <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8006fb6:	4b55      	ldr	r3, [pc, #340]	; (800710c <VL53L0X_calc_dmax+0x238>)
 8006fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fba:	e016      	b.n	8006fea <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	085a      	lsrs	r2, r3, #1
 8006fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc2:	441a      	add	r2, r3
 8006fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fec:	039b      	lsls	r3, r3, #14
 8006fee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006ff2:	4a47      	ldr	r2, [pc, #284]	; (8007110 <VL53L0X_calc_dmax+0x23c>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	099b      	lsrs	r3, r3, #6
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	3308      	adds	r3, #8
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007022:	4613      	mov	r3, r2
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4413      	add	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007032:	0b9b      	lsrs	r3, r3, #14
 8007034:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800703a:	4413      	add	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800703e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	4413      	add	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	039b      	lsls	r3, r3, #14
 8007056:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4413      	add	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007070:	fb02 f303 	mul.w	r3, r2, r3
 8007074:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800707c:	4a24      	ldr	r2, [pc, #144]	; (8007110 <VL53L0X_calc_dmax+0x23c>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	099b      	lsrs	r3, r3, #6
 8007084:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <VL53L0X_calc_dmax+0x23c>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	099b      	lsrs	r3, r3, #6
 800709a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800709c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709e:	3380      	adds	r3, #128	; 0x80
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	085a      	lsrs	r2, r3, #1
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	441a      	add	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80070ba:	e001      	b.n	80070c0 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80070c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80070c2:	f7fe f9b5 	bl	8005430 <VL53L0X_isqrt>
 80070c6:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d008      	beq.n	80070e0 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	085a      	lsrs	r2, r3, #1
 80070d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d4:	441a      	add	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070de:	e001      	b.n	80070e4 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80070e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80070e6:	f7fe f9a3 	bl	8005430 <VL53L0X_isqrt>
 80070ea:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80070ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d902      	bls.n	8007100 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80070fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070fe:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007100:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007104:	4618      	mov	r0, r3
 8007106:	3768      	adds	r7, #104	; 0x68
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	fff00000 	.word	0xfff00000
 8007110:	10624dd3 	.word	0x10624dd3

08007114 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b0b4      	sub	sp, #208	; 0xd0
 8007118:	af04      	add	r7, sp, #16
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007122:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800712a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800712e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007132:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800713a:	f241 235c 	movw	r3, #4700	; 0x125c
 800713e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007142:	4b9e      	ldr	r3, [pc, #632]	; (80073bc <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007148:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800714c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800714e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800715c:	4b98      	ldr	r3, [pc, #608]	; (80073c0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800715e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007164:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007166:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800716a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800716c:	f240 6377 	movw	r3, #1655	; 0x677
 8007170:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007172:	2300      	movs	r3, #0
 8007174:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007186:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	461a      	mov	r2, r3
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff fe74 	bl	8006e8a <VL53L0X_get_total_signal_rate>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	461a      	mov	r2, r3
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fe3b 	bl	8006e2c <VL53L0X_get_total_xtalk_rate>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80071c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80071e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80071e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d902      	bls.n	80071f0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80071ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80071f0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d168      	bne.n	80072ca <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007208:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800720c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007210:	461a      	mov	r2, r3
 8007212:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7fe feae 	bl	8005f78 <VL53L0X_calc_timeout_mclks>
 800721c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800722e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007232:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007236:	461a      	mov	r2, r3
 8007238:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7fe fe9b 	bl	8005f78 <VL53L0X_calc_timeout_mclks>
 8007242:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007244:	2303      	movs	r3, #3
 8007246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800724a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800724e:	2b08      	cmp	r3, #8
 8007250:	d102      	bne.n	8007258 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007252:	2302      	movs	r3, #2
 8007254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800725a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800725e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	02db      	lsls	r3, r3, #11
 8007268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800726c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007270:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007274:	4a53      	ldr	r2, [pc, #332]	; (80073c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	099b      	lsrs	r3, r3, #6
 800727c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007284:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800728e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007296:	4a4b      	ldr	r2, [pc, #300]	; (80073c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	099b      	lsrs	r3, r3, #6
 800729e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3380      	adds	r3, #128	; 0x80
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80072b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072bc:	3380      	adds	r3, #128	; 0x80
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80072ca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80072d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80072d6:	e165      	b.n	80075a4 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 80072d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072e4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	e153      	b.n	80075a0 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 80072f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007300:	2301      	movs	r3, #1
 8007302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800730c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730e:	041a      	lsls	r2, r3, #16
 8007310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007312:	fbb2 f3f3 	udiv	r3, r2, r3
 8007316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800731a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800731e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007320:	429a      	cmp	r2, r3
 8007322:	d902      	bls.n	800732a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800732a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800732e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800733a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe f872 	bl	8005430 <VL53L0X_isqrt>
 800734c:	4603      	mov	r3, r0
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	891b      	ldrh	r3, [r3, #8]
 8007356:	461a      	mov	r2, r3
 8007358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007362:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007364:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007368:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800736a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800736c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007370:	4a14      	ldr	r2, [pc, #80]	; (80073c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800737a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007382:	4a10      	ldr	r2, [pc, #64]	; (80073c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	099b      	lsrs	r3, r3, #6
 800738a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800738c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfb8      	it	lt
 800739e:	425b      	neglt	r3, r3
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	7e1b      	ldrb	r3, [r3, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80073b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073b8:	e035      	b.n	8007426 <VL53L0X_calc_sigma_estimate+0x312>
 80073ba:	bf00      	nop
 80073bc:	028f87ae 	.word	0x028f87ae
 80073c0:	0006999a 	.word	0x0006999a
 80073c4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80073c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80073dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80073e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ee:	4413      	add	r3, r2
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80073f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80073fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800740c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007410:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800741c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007420:	0b9b      	lsrs	r3, r3, #14
 8007422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800742c:	fb02 f303 	mul.w	r3, r2, r3
 8007430:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	4413      	add	r3, r2
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746a:	f7fd ffe1 	bl	8005430 <VL53L0X_isqrt>
 800746e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	3332      	adds	r3, #50	; 0x32
 800747a:	4a4c      	ldr	r2, [pc, #304]	; (80075ac <VL53L0X_calc_sigma_estimate+0x498>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	095a      	lsrs	r2, r3, #5
 8007482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800748c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007490:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800749c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80074a4:	3308      	adds	r3, #8
 80074a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80074aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ae:	4a40      	ldr	r2, [pc, #256]	; (80075b0 <VL53L0X_calc_sigma_estimate+0x49c>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	0b5b      	lsrs	r3, r3, #13
 80074b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80074ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d902      	bls.n	80074ca <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80074c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80074ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80074d8:	4a36      	ldr	r2, [pc, #216]	; (80075b4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	099b      	lsrs	r3, r3, #6
 80074e0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80074e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ea:	441a      	add	r2, r3
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd ff9c 	bl	8005430 <VL53L0X_isqrt>
 80074f8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007506:	4a2b      	ldr	r2, [pc, #172]	; (80075b4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	099b      	lsrs	r3, r3, #6
 800750e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007514:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007518:	fb02 f303 	mul.w	r3, r2, r3
 800751c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	4413      	add	r3, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd ff7e 	bl	8005430 <VL53L0X_isqrt>
 8007534:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <VL53L0X_calc_sigma_estimate+0x44a>
 800754a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <VL53L0X_calc_sigma_estimate+0x44a>
 8007552:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800755a:	429a      	cmp	r2, r3
 800755c:	d903      	bls.n	8007566 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800755e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800756c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007578:	6939      	ldr	r1, [r7, #16]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007592:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff fc9d 	bl	8006ed4 <VL53L0X_calc_dmax>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	37c0      	adds	r7, #192	; 0xc0
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	51eb851f 	.word	0x51eb851f
 80075b0:	d1b71759 	.word	0xd1b71759
 80075b4:	10624dd3 	.word	0x10624dd3

080075b8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b090      	sub	sp, #64	; 0x40
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	461a      	mov	r2, r3
 80075c4:	460b      	mov	r3, r1
 80075c6:	72fb      	strb	r3, [r7, #11]
 80075c8:	4613      	mov	r3, r2
 80075ca:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	10db      	asrs	r3, r3, #3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007618:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d017      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
 8007620:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007624:	2b05      	cmp	r3, #5
 8007626:	d013      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007628:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800762c:	2b07      	cmp	r3, #7
 800762e:	d00f      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007630:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d00b      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007638:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800763c:	2b0d      	cmp	r3, #13
 800763e:	d007      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007640:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007644:	2b0e      	cmp	r3, #14
 8007646:	d003      	beq.n	8007650 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007648:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800764c:	2b0f      	cmp	r3, #15
 800764e:	d103      	bne.n	8007658 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007656:	e002      	b.n	800765e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800765e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007666:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800766a:	461a      	mov	r2, r3
 800766c:	2100      	movs	r1, #0
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7fc f9e2 	bl	8003a38 <VL53L0X_GetLimitCheckEnable>
 8007674:	4603      	mov	r3, r0
 8007676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800767a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800767e:	2b00      	cmp	r3, #0
 8007680:	d02e      	beq.n	80076e0 <VL53L0X_get_pal_range_status+0x128>
 8007682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d12a      	bne.n	80076e0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007692:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fd3d 	bl	8007114 <VL53L0X_calc_sigma_estimate>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80076a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80076b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d113      	bne.n	80076e0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80076b8:	f107 0320 	add.w	r3, r7, #32
 80076bc:	461a      	mov	r2, r3
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7fc fa3f 	bl	8003b44 <VL53L0X_GetLimitCheckValue>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d902      	bls.n	80076e0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80076e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80076e8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80076ec:	461a      	mov	r2, r3
 80076ee:	2102      	movs	r1, #2
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7fc f9a1 	bl	8003a38 <VL53L0X_GetLimitCheckEnable>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80076fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007700:	2b00      	cmp	r3, #0
 8007702:	d044      	beq.n	800778e <VL53L0X_get_pal_range_status+0x1d6>
 8007704:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007708:	2b00      	cmp	r3, #0
 800770a:	d140      	bne.n	800778e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800770c:	f107 031c 	add.w	r3, r7, #28
 8007710:	461a      	mov	r2, r3
 8007712:	2102      	movs	r1, #2
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7fc fa15 	bl	8003b44 <VL53L0X_GetLimitCheckValue>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007720:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007724:	2b00      	cmp	r3, #0
 8007726:	d107      	bne.n	8007738 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007728:	2201      	movs	r2, #1
 800772a:	21ff      	movs	r1, #255	; 0xff
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fabf 	bl	8007cb0 <VL53L0X_WrByte>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007740:	f107 0316 	add.w	r3, r7, #22
 8007744:	461a      	mov	r2, r3
 8007746:	21b6      	movs	r1, #182	; 0xb6
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fb58 	bl	8007dfe <VL53L0X_RdWord>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007754:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800775c:	2200      	movs	r2, #0
 800775e:	21ff      	movs	r1, #255	; 0xff
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 faa5 	bl	8007cb0 <VL53L0X_WrByte>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800776c:	8afb      	ldrh	r3, [r7, #22]
 800776e:	025b      	lsls	r3, r3, #9
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007776:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007780:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007784:	429a      	cmp	r2, r3
 8007786:	d902      	bls.n	800778e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800778e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800779a:	461a      	mov	r2, r3
 800779c:	2103      	movs	r1, #3
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7fc f94a 	bl	8003a38 <VL53L0X_GetLimitCheckEnable>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80077aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d023      	beq.n	80077fa <VL53L0X_get_pal_range_status+0x242>
 80077b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d11f      	bne.n	80077fa <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80077ba:	893b      	ldrh	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
 80077c4:	e005      	b.n	80077d2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	893b      	ldrh	r3, [r7, #8]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80077d2:	f107 0318 	add.w	r3, r7, #24
 80077d6:	461a      	mov	r2, r3
 80077d8:	2103      	movs	r1, #3
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7fc f9b2 	bl	8003b44 <VL53L0X_GetLimitCheckValue>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80077ec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80077ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d202      	bcs.n	80077fa <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d14a      	bne.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007802:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007806:	2b01      	cmp	r3, #1
 8007808:	d103      	bne.n	8007812 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e042      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007812:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007816:	2b01      	cmp	r3, #1
 8007818:	d007      	beq.n	800782a <VL53L0X_get_pal_range_status+0x272>
 800781a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800781e:	2b02      	cmp	r3, #2
 8007820:	d003      	beq.n	800782a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007826:	2b03      	cmp	r3, #3
 8007828:	d103      	bne.n	8007832 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	2205      	movs	r2, #5
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e032      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007832:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007836:	2b06      	cmp	r3, #6
 8007838:	d003      	beq.n	8007842 <VL53L0X_get_pal_range_status+0x28a>
 800783a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800783e:	2b09      	cmp	r3, #9
 8007840:	d103      	bne.n	800784a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007844:	2204      	movs	r2, #4
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e026      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800784a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800784e:	2b08      	cmp	r3, #8
 8007850:	d007      	beq.n	8007862 <VL53L0X_get_pal_range_status+0x2aa>
 8007852:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007856:	2b0a      	cmp	r3, #10
 8007858:	d003      	beq.n	8007862 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800785a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800785e:	2b01      	cmp	r3, #1
 8007860:	d103      	bne.n	800786a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007864:	2203      	movs	r2, #3
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e016      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800786a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800786e:	2b04      	cmp	r3, #4
 8007870:	d003      	beq.n	800787a <VL53L0X_get_pal_range_status+0x2c2>
 8007872:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007876:	2b01      	cmp	r3, #1
 8007878:	d103      	bne.n	8007882 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800787a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787c:	2202      	movs	r2, #2
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e00a      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007882:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007886:	2b01      	cmp	r3, #1
 8007888:	d103      	bne.n	8007892 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	2201      	movs	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e002      	b.n	8007898 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80078a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a2:	2200      	movs	r2, #0
 80078a4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80078a6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80078aa:	461a      	mov	r2, r3
 80078ac:	2101      	movs	r1, #1
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7fc f8c2 	bl	8003a38 <VL53L0X_GetLimitCheckEnable>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80078ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d14f      	bne.n	8007962 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80078c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <VL53L0X_get_pal_range_status+0x31a>
 80078ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d103      	bne.n	80078da <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078d8:	e002      	b.n	80078e0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80078e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80078ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d003      	beq.n	80078fa <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80078f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007900:	e002      	b.n	8007908 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800790e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007912:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <VL53L0X_get_pal_range_status+0x36a>
 800791a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d103      	bne.n	800792a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007928:	e002      	b.n	8007930 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800793a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <VL53L0X_get_pal_range_status+0x392>
 8007942:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007946:	2b01      	cmp	r3, #1
 8007948:	d103      	bne.n	8007952 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007950:	e002      	b.n	8007958 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800795e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007962:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007966:	4618      	mov	r0, r3
 8007968:	3740      	adds	r7, #64	; 0x40
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <VL53L0X_write_byte>:

#include "vl53l0x_i2c_platform.h"

uint8_t _i2c_buffer[64];

int32_t VL53L0X_write_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t   data){
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af02      	add	r7, sp, #8
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4603      	mov	r3, r0
 8007980:	70fb      	strb	r3, [r7, #3]
 8007982:	460b      	mov	r3, r1
 8007984:	70bb      	strb	r3, [r7, #2]
 8007986:	4613      	mov	r3, r2
 8007988:	707b      	strb	r3, [r7, #1]

	_i2c_buffer[0]=index;
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <VL53L0X_write_byte+0x44>)
 800798c:	78bb      	ldrb	r3, [r7, #2]
 800798e:	7013      	strb	r3, [r2, #0]
	_i2c_buffer[1]=data;
 8007990:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <VL53L0X_write_byte+0x44>)
 8007992:	787b      	ldrb	r3, [r7, #1]
 8007994:	7053      	strb	r3, [r2, #1]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,2,10);
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	b299      	uxth	r1, r3
 800799a:	230a      	movs	r3, #10
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	2302      	movs	r3, #2
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <VL53L0X_write_byte+0x44>)
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f002 f82a 	bl	80099fc <HAL_I2C_Master_Transmit>
 80079a8:	4603      	mov	r3, r0

}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000c04 	.word	0x20000c04

080079b8 <VL53L0X_read_byte>:

int32_t VL53L0X_read_byte(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata){
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af02      	add	r7, sp, #8
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	72fb      	strb	r3, [r7, #11]
 80079c6:	4613      	mov	r3, r2
 80079c8:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(i2c_handle,address,&index,1,10)){
 80079ca:	7afb      	ldrb	r3, [r7, #11]
 80079cc:	b299      	uxth	r1, r3
 80079ce:	f107 020a 	add.w	r2, r7, #10
 80079d2:	230a      	movs	r3, #10
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2301      	movs	r3, #1
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f002 f80f 	bl	80099fc <HAL_I2C_Master_Transmit>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <VL53L0X_read_byte+0x30>
		return 1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e00c      	b.n	8007a02 <VL53L0X_read_byte+0x4a>
	}

	return HAL_I2C_Master_Receive(i2c_handle,address|1,pdata,1,10);
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	b299      	uxth	r1, r3
 80079f2:	230a      	movs	r3, #10
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	2301      	movs	r3, #1
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f002 f8fc 	bl	8009bf8 <HAL_I2C_Master_Receive>
 8007a00:	4603      	mov	r3, r0



}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint32_t *pdata) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	72fb      	strb	r3, [r7, #11]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	b299      	uxth	r1, r3
 8007a22:	f107 020a 	add.w	r2, r7, #10
 8007a26:	230a      	movs	r3, #10
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f001 ffe5 	bl	80099fc <HAL_I2C_Master_Transmit>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <VL53L0X_read_dword+0x30>
		return 1;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e021      	b.n	8007a80 <VL53L0X_read_dword+0x74>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 4, 10)) {
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	b299      	uxth	r1, r3
 8007a46:	230a      	movs	r3, #10
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	4a0e      	ldr	r2, [pc, #56]	; (8007a88 <VL53L0X_read_dword+0x7c>)
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f002 f8d2 	bl	8009bf8 <HAL_I2C_Master_Receive>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <VL53L0X_read_dword+0x52>
		return 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e010      	b.n	8007a80 <VL53L0X_read_dword+0x74>
	}

	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <VL53L0X_read_dword+0x7c>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) _i2c_buffer[1] << 16)
 8007a64:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <VL53L0X_read_dword+0x7c>)
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	441a      	add	r2, r3
			+ ((uint32_t) _i2c_buffer[2] << 8) + (uint32_t) _i2c_buffer[3];
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <VL53L0X_read_dword+0x7c>)
 8007a6e:	789b      	ldrb	r3, [r3, #2]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	4413      	add	r3, r2
 8007a74:	4a04      	ldr	r2, [pc, #16]	; (8007a88 <VL53L0X_read_dword+0x7c>)
 8007a76:	78d2      	ldrb	r2, [r2, #3]
 8007a78:	441a      	add	r2, r3
	*pdata = ((uint32_t) _i2c_buffer[0] << 24)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
	return 0;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000c04 	.word	0x20000c04

08007a8c <VL53L0X_write_word>:


int32_t VL53L0X_write_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t  data){
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	70fb      	strb	r3, [r7, #3]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70bb      	strb	r3, [r7, #2]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	803b      	strh	r3, [r7, #0]


    _i2c_buffer[0] = index;
 8007aa6:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <VL53L0X_write_word+0x50>)
 8007aa8:	78bb      	ldrb	r3, [r7, #2]
 8007aaa:	7013      	strb	r3, [r2, #0]
    _i2c_buffer[1] = data >> 8;
 8007aac:	883b      	ldrh	r3, [r7, #0]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b09      	ldr	r3, [pc, #36]	; (8007adc <VL53L0X_write_word+0x50>)
 8007ab6:	705a      	strb	r2, [r3, #1]
    _i2c_buffer[2] = data & 0x00FF;
 8007ab8:	883b      	ldrh	r3, [r7, #0]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b07      	ldr	r3, [pc, #28]	; (8007adc <VL53L0X_write_word+0x50>)
 8007abe:	709a      	strb	r2, [r3, #2]

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,3,10);
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	b299      	uxth	r1, r3
 8007ac4:	230a      	movs	r3, #10
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	2303      	movs	r3, #3
 8007aca:	4a04      	ldr	r2, [pc, #16]	; (8007adc <VL53L0X_write_word+0x50>)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ff95 	bl	80099fc <HAL_I2C_Master_Transmit>
 8007ad2:	4603      	mov	r3, r0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000c04 	.word	0x20000c04

08007ae0 <VL53L0X_read_word>:


int32_t VL53L0X_read_word(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint16_t *pdata){
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	72fb      	strb	r3, [r7, #11]
 8007aee:	4613      	mov	r3, r2
 8007af0:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	b299      	uxth	r1, r3
 8007af6:	f107 020a 	add.w	r2, r7, #10
 8007afa:	230a      	movs	r3, #10
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2301      	movs	r3, #1
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f001 ff7b 	bl	80099fc <HAL_I2C_Master_Transmit>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <VL53L0X_read_word+0x30>
		return 1;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e01d      	b.n	8007b4c <VL53L0X_read_word+0x6c>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, _i2c_buffer, 2, 10)) {
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	b299      	uxth	r1, r3
 8007b1a:	230a      	movs	r3, #10
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2302      	movs	r3, #2
 8007b20:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <VL53L0X_read_word+0x74>)
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f002 f868 	bl	8009bf8 <HAL_I2C_Master_Receive>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <VL53L0X_read_word+0x52>
		return 1;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e00c      	b.n	8007b4c <VL53L0X_read_word+0x6c>
	}

	 *pdata = ((uint16_t)_i2c_buffer[0]<<8) + (uint16_t)_i2c_buffer[1];
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <VL53L0X_read_word+0x74>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <VL53L0X_read_word+0x74>)
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	801a      	strh	r2, [r3, #0]
	return 0;
 8007b4a:	2300      	movs	r3, #0

}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000c04 	.word	0x20000c04

08007b58 <VL53L0X_read_multi>:


int32_t VL53L0X_read_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address,  uint8_t index, uint8_t  *pdata, int32_t count){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	72fb      	strb	r3, [r7, #11]
 8007b66:	4613      	mov	r3, r2
 8007b68:	72bb      	strb	r3, [r7, #10]
	if (HAL_I2C_Master_Transmit(i2c_handle, address, &index, 1, 10)) {
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	b299      	uxth	r1, r3
 8007b6e:	f107 020a 	add.w	r2, r7, #10
 8007b72:	230a      	movs	r3, #10
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	2301      	movs	r3, #1
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 ff3f 	bl	80099fc <HAL_I2C_Master_Transmit>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <VL53L0X_read_multi+0x30>
		return 1;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e013      	b.n	8007bb0 <VL53L0X_read_multi+0x58>
	}
	if (HAL_I2C_Master_Receive(i2c_handle, address | 1, pdata, count, 10)) {
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	b299      	uxth	r1, r3
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	230a      	movs	r3, #10
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f002 f82a 	bl	8009bf8 <HAL_I2C_Master_Receive>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <VL53L0X_read_multi+0x56>
		return 1;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <VL53L0X_read_multi+0x58>
	}

	return 0;
 8007bae:	2300      	movs	r3, #0


}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <VL53L0X_write_multi>:


int32_t VL53L0X_write_multi(I2C_HandleTypeDef* i2c_handle,uint8_t address, uint8_t index, uint8_t  *pdata, int32_t count){
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	72fb      	strb	r3, [r7, #11]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	72bb      	strb	r3, [r7, #10]
    _i2c_buffer[0] = index;
 8007bca:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <VL53L0X_write_multi+0x48>)
 8007bcc:	7abb      	ldrb	r3, [r7, #10]
 8007bce:	7013      	strb	r3, [r2, #0]
    memcpy(&_i2c_buffer[1], pdata, count);
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	480b      	ldr	r0, [pc, #44]	; (8007c04 <VL53L0X_write_multi+0x4c>)
 8007bd8:	f005 fafc 	bl	800d1d4 <memcpy>

	return HAL_I2C_Master_Transmit(i2c_handle,address,_i2c_buffer,count+1,10);
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	b299      	uxth	r1, r3
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3301      	adds	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	230a      	movs	r3, #10
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <VL53L0X_write_multi+0x48>)
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f001 ff03 	bl	80099fc <HAL_I2C_Master_Transmit>
 8007bf6:	4603      	mov	r3, r0

}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000c04 	.word	0x20000c04
 8007c04:	20000c05 	.word	0x20000c05

08007c08 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	460b      	mov	r3, r1
 8007c16:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b3f      	cmp	r3, #63	; 0x3f
 8007c24:	d901      	bls.n	8007c2a <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c26:	23fc      	movs	r3, #252	; 0xfc
 8007c28:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007c30:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	7afa      	ldrb	r2, [r7, #11]
 8007c3c:	7df9      	ldrb	r1, [r7, #23]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f7ff ffb9 	bl	8007bb8 <VL53L0X_write_multi>
 8007c46:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <VL53L0X_WriteMulti+0x4a>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c4e:	23ec      	movs	r3, #236	; 0xec
 8007c50:	77fb      	strb	r3, [r7, #31]

    return Status;
 8007c52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b088      	sub	sp, #32
 8007c62:	af02      	add	r7, sp, #8
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b3f      	cmp	r3, #63	; 0x3f
 8007c76:	d901      	bls.n	8007c7c <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c78:	23fc      	movs	r3, #252	; 0xfc
 8007c7a:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007c82:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(Dev->i2c_handle,deviceAddress, index, pdata, count);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	7afa      	ldrb	r2, [r7, #11]
 8007c8e:	7db9      	ldrb	r1, [r7, #22]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f7ff ff60 	bl	8007b58 <VL53L0X_read_multi>
 8007c98:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <VL53L0X_ReadMulti+0x46>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ca0:	23ec      	movs	r3, #236	; 0xec
 8007ca2:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007cca:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007cd2:	78bb      	ldrb	r3, [r7, #2]
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	7bb9      	ldrb	r1, [r7, #14]
 8007cd8:	f7ff fe4a 	bl	8007970 <VL53L0X_write_byte>
 8007cdc:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <VL53L0X_WrByte+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ce4:	23ec      	movs	r3, #236	; 0xec
 8007ce6:	73fb      	strb	r3, [r7, #15]

    return Status;
 8007ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
 8007d00:	4613      	mov	r3, r2
 8007d02:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007d0e:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(Dev->i2c_handle,deviceAddress, index, data);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007d16:	883b      	ldrh	r3, [r7, #0]
 8007d18:	78fa      	ldrb	r2, [r7, #3]
 8007d1a:	7bb9      	ldrb	r1, [r7, #14]
 8007d1c:	f7ff feb6 	bl	8007a8c <VL53L0X_write_word>
 8007d20:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <VL53L0X_WrWord+0x38>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d28:	23ec      	movs	r3, #236	; 0xec
 8007d2a:	73fb      	strb	r3, [r7, #15]

    return Status;
 8007d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	70fb      	strb	r3, [r7, #3]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70bb      	strb	r3, [r7, #2]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007d5c:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, &data);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007d64:	f107 030f 	add.w	r3, r7, #15
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	7db9      	ldrb	r1, [r7, #22]
 8007d6c:	f7ff fe24 	bl	80079b8 <VL53L0X_read_byte>
 8007d70:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <VL53L0X_UpdateByte+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d78:	23ec      	movs	r3, #236	; 0xec
 8007d7a:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8007d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d115      	bne.n	8007db0 <VL53L0X_UpdateByte+0x78>
        data = (data & AndData) | OrData;
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	78bb      	ldrb	r3, [r7, #2]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	787b      	ldrb	r3, [r7, #1]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(Dev->i2c_handle,deviceAddress, index, data);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	7db9      	ldrb	r1, [r7, #22]
 8007da0:	f7ff fde6 	bl	8007970 <VL53L0X_write_byte>
 8007da4:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <VL53L0X_UpdateByte+0x78>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007dac:	23ec      	movs	r3, #236	; 0xec
 8007dae:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8007db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007dd4:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(Dev->i2c_handle,deviceAddress, index, data);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007ddc:	7afa      	ldrb	r2, [r7, #11]
 8007dde:	7db9      	ldrb	r1, [r7, #22]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f7ff fde9 	bl	80079b8 <VL53L0X_read_byte>
 8007de6:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <VL53L0X_RdByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007dee:	23ec      	movs	r3, #236	; 0xec
 8007df0:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	460b      	mov	r3, r1
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007e16:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(Dev->i2c_handle,deviceAddress, index, data);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007e1e:	7afa      	ldrb	r2, [r7, #11]
 8007e20:	7db9      	ldrb	r1, [r7, #22]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f7ff fe5c 	bl	8007ae0 <VL53L0X_read_word>
 8007e28:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <VL53L0X_RdWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e30:	23ec      	movs	r3, #236	; 0xec
 8007e32:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007e58:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(Dev->i2c_handle,deviceAddress, index, data);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007e60:	7afa      	ldrb	r2, [r7, #11]
 8007e62:	7db9      	ldrb	r1, [r7, #22]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f7ff fdd1 	bl	8007a0c <VL53L0X_read_dword>
 8007e6a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <VL53L0X_RdDWord+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e72:	23ec      	movs	r3, #236	; 0xec
 8007e74:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]
    LOG_FUNCTION_START("");

    vl_api_delay(1);
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f000 f806 	bl	8007ea0 <vl_api_delay>

    LOG_FUNCTION_END(status);
    return status;
 8007e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <vl_api_delay>:
 */

#include "vl_api_config.h"

/* Odczekanie czasu w ms */
void vl_api_delay(uint16_t time_ms){
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms); // to można czymś zastąpić
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f9f5 	bl	800829c <HAL_Delay>
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <VL_init_sensor_setAddres>:
}
*/

/* Set addres of VL sensor */
uint8_t VL_init_sensor_setAddres(VL53L0X_DEV dev, uint8_t addr)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
	uint8_t status=0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
	vl_api_delay(100);
 8007eca:	2064      	movs	r0, #100	; 0x64
 8007ecc:	f7ff ffe8 	bl	8007ea0 <vl_api_delay>

	status |= VL53L0X_DataInit(dev);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fa ff17 	bl	8002d04 <VL53L0X_DataInit>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	b25b      	sxtb	r3, r3
 8007ee2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L0X_SetDeviceAddress(dev, addr);
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fa fef2 	bl	8002cd2 <VL53L0X_SetDeviceAddress>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	73fb      	strb	r3, [r7, #15]

	if(status){return status;}
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <VL_init_sensor_setAddres+0x4c>
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	e004      	b.n	8007f10 <VL_init_sensor_setAddres+0x56>

	dev->I2cDevAddr = addr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	return status;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <VL_set_interrupt>:


/* Set interrupt mode */
uint8_t VL_set_interrupt(VL53L0X_DEV dev, uint8_t state, VL53L0X_InterruptPolarity polarity)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
 8007f24:	4613      	mov	r3, r2
 8007f26:	70bb      	strb	r3, [r7, #2]
	if(state) // if inerrupts ON
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <VL_set_interrupt+0x2c>
	{
		return VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_SINGLE_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, polarity);
 8007f2e:	78bb      	ldrb	r3, [r7, #2]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2304      	movs	r3, #4
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fc f9c9 	bl	80042d0 <VL53L0X_SetGpioConfig>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	e009      	b.n	8007f58 <VL_set_interrupt+0x40>
	} else {  // if inerrupts OFF
		return VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_SINGLE_RANGING, VL53L0X_GPIOFUNCTIONALITY_OFF, polarity);
 8007f44:	78bb      	ldrb	r3, [r7, #2]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fc f9be 	bl	80042d0 <VL53L0X_SetGpioConfig>
 8007f54:	4603      	mov	r3, r0
 8007f56:	b2db      	uxtb	r3, r3
	}
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <VL_init_parameters>:



uint8_t VL_init_parameters(VL53L0X_Dev_t *dev, RangingModeConfig rangingConfig, VL53L0X_DeviceModes mode)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	; 0x28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	70bb      	strb	r3, [r7, #2]
	int status;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t) (1 * 65536);
 8007f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (50 * 65536);
 8007f76:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007f7a:	623b      	str	r3, [r7, #32]
	uint32_t timingBudget = 33000;
 8007f7c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007f80:	61fb      	str	r3, [r7, #28]
	uint8_t preRangeVcselPeriod = 14;
 8007f82:	230e      	movs	r3, #14
 8007f84:	76fb      	strb	r3, [r7, #27]
	uint8_t finalRangeVcselPeriod = 10;
 8007f86:	230a      	movs	r3, #10
 8007f88:	76bb      	strb	r3, [r7, #26]

	status = VL53L0X_StaticInit(dev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fb f81e 	bl	8002fcc <VL53L0X_StaticInit>
 8007f90:	4603      	mov	r3, r0
 8007f92:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <VL_init_parameters+0x40>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e0cd      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8007fa0:	f107 0212 	add.w	r2, r7, #18
 8007fa4:	f107 0313 	add.w	r3, r7, #19
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7fb febe 	bl	8003d2c <VL53L0X_PerformRefCalibration>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <VL_init_parameters+0x60>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	e0bd      	b.n	800813c <VL_init_parameters+0x1dc>



	status = VL53L0X_PerformRefSpadManagement(dev, &refSpadCount, &isApertureSpads);
 8007fc0:	f107 020b 	add.w	r2, r7, #11
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fc fb3c 	bl	8004648 <VL53L0X_PerformRefSpadManagement>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <VL_init_parameters+0x80>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	e0ad      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetDeviceMode(dev, mode);
 8007fe0:	78bb      	ldrb	r3, [r7, #2]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fb fa03 	bl	80033f0 <VL53L0X_SetDeviceMode>
 8007fea:	4603      	mov	r3, r0
 8007fec:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <VL_init_parameters+0x9a>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e0a0      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckEnable(dev,
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fb fc8e 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 8008004:	4603      	mov	r3, r0
 8008006:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
	if (status){ return status; }
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <VL_init_parameters+0xb4>
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e093      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckEnable(dev,
 8008014:	2201      	movs	r2, #1
 8008016:	2101      	movs	r1, #1
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fb fc81 	bl	8003920 <VL53L0X_SetLimitCheckEnable>
 800801e:	4603      	mov	r3, r0
 8008020:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
	if (status){ return status; }
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <VL_init_parameters+0xce>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e086      	b.n	800813c <VL_init_parameters+0x1dc>

	/* Ranging configuration */
	switch (rangingConfig)
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d012      	beq.n	800805a <VL_init_parameters+0xfa>
 8008034:	2b02      	cmp	r3, #2
 8008036:	d002      	beq.n	800803e <VL_init_parameters+0xde>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01b      	beq.n	8008074 <VL_init_parameters+0x114>
 800803c:	e028      	b.n	8008090 <VL_init_parameters+0x130>
	{
	case LONG_RANGE:
		signalLimit = (FixPoint1616_t) (0.1 * 65536);
 800803e:	f641 1399 	movw	r3, #6553	; 0x1999
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (60 * 65536);
 8008044:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8008048:	623b      	str	r3, [r7, #32]
		timingBudget = 33000;
 800804a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800804e:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 18;
 8008050:	2312      	movs	r3, #18
 8008052:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 14;
 8008054:	230e      	movs	r3, #14
 8008056:	76bb      	strb	r3, [r7, #26]
		break;
 8008058:	e01d      	b.n	8008096 <VL_init_parameters+0x136>
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t) (0.25 * 65536);
 800805a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (18 * 65536);
 8008060:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8008064:	623b      	str	r3, [r7, #32]
		timingBudget = 200000;
 8008066:	4b37      	ldr	r3, [pc, #220]	; (8008144 <VL_init_parameters+0x1e4>)
 8008068:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 14;
 800806a:	230e      	movs	r3, #14
 800806c:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 10;
 800806e:	230a      	movs	r3, #10
 8008070:	76bb      	strb	r3, [r7, #26]
		break;
 8008072:	e010      	b.n	8008096 <VL_init_parameters+0x136>
	case HIGH_SPEED:
		signalLimit = (FixPoint1616_t) (1 * 65536);
 8008074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaLimit = (FixPoint1616_t) (50 * 65536);
 800807a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800807e:	623b      	str	r3, [r7, #32]
		timingBudget = 20000;
 8008080:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008084:	61fb      	str	r3, [r7, #28]
		preRangeVcselPeriod = 14;
 8008086:	230e      	movs	r3, #14
 8008088:	76fb      	strb	r3, [r7, #27]
		finalRangeVcselPeriod = 10;
 800808a:	230a      	movs	r3, #10
 800808c:	76bb      	strb	r3, [r7, #26]
		break;
 800808e:	e002      	b.n	8008096 <VL_init_parameters+0x136>
	default:
		return status;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	e052      	b.n	800813c <VL_init_parameters+0x1dc>
	}

	status = VL53L0X_SetLimitCheckValue(dev,
 8008096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008098:	2101      	movs	r1, #1
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fb fcf0 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 80080a0:	4603      	mov	r3, r0
 80080a2:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
	if (status){ return status; }
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <VL_init_parameters+0x150>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	e045      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetLimitCheckValue(dev,
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7fb fce3 	bl	8003a80 <VL53L0X_SetLimitCheckValue>
 80080ba:	4603      	mov	r3, r0
 80080bc:	617b      	str	r3, [r7, #20]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
	if (status){ return status; }
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <VL_init_parameters+0x16a>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	e038      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 80080ca:	69f9      	ldr	r1, [r7, #28]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7fb fa09 	bl	80034e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80080d2:	4603      	mov	r3, r0
 80080d4:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <VL_init_parameters+0x182>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e02c      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetVcselPulsePeriod(dev,
 80080e2:	7efb      	ldrb	r3, [r7, #27]
 80080e4:	461a      	mov	r2, r3
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fb fa21 	bl	8003530 <VL53L0X_SetVcselPulsePeriod>
 80080ee:	4603      	mov	r3, r0
 80080f0:	617b      	str	r3, [r7, #20]
	VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
	if (status){ return status; }
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <VL_init_parameters+0x19e>
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	e01e      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_SetVcselPulsePeriod(dev,
 80080fe:	7ebb      	ldrb	r3, [r7, #26]
 8008100:	461a      	mov	r2, r3
 8008102:	2101      	movs	r1, #1
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fb fa13 	bl	8003530 <VL53L0X_SetVcselPulsePeriod>
 800810a:	4603      	mov	r3, r0
 800810c:	617b      	str	r3, [r7, #20]
	VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
	if (status){ return status; }
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <VL_init_parameters+0x1ba>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e010      	b.n	800813c <VL_init_parameters+0x1dc>

	status = VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 800811a:	f107 0212 	add.w	r2, r7, #18
 800811e:	f107 0313 	add.w	r3, r7, #19
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fb fe01 	bl	8003d2c <VL53L0X_PerformRefCalibration>
 800812a:	4603      	mov	r3, r0
 800812c:	617b      	str	r3, [r7, #20]
	if (status){ return status; }
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <VL_init_parameters+0x1da>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	e000      	b.n	800813c <VL_init_parameters+0x1dc>
	return 0;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3728      	adds	r7, #40	; 0x28
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	00030d40 	.word	0x00030d40

08008148 <VL_start_measurement_non_blocking>:
			return 0;
	}
	return 1;
}

uint8_t VL_start_measurement_non_blocking(VL53L0X_DEV dev){
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
    return VL53L0X_StartMeasurement(dev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fb fe67 	bl	8003e24 <VL53L0X_StartMeasurement>
 8008156:	4603      	mov	r3, r0
 8008158:	b2db      	uxtb	r3, r3
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800819c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800816a:	e003      	b.n	8008174 <LoopCopyDataInit>

0800816c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800816e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008172:	3104      	adds	r1, #4

08008174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008174:	480b      	ldr	r0, [pc, #44]	; (80081a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800817a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800817c:	d3f6      	bcc.n	800816c <CopyDataInit>
  ldr  r2, =_sbss
 800817e:	4a0b      	ldr	r2, [pc, #44]	; (80081ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008180:	e002      	b.n	8008188 <LoopFillZerobss>

08008182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008184:	f842 3b04 	str.w	r3, [r2], #4

08008188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800818a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800818c:	d3f9      	bcc.n	8008182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800818e:	f7fa fd77 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008192:	f004 ff97 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008196:	f7f9 f88f 	bl	80012b8 <main>
  bx  lr    
 800819a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800819c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80081a0:	0800df60 	.word	0x0800df60
  ldr  r0, =_sdata
 80081a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80081a8:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 80081ac:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 80081b0:	20000c4c 	.word	0x20000c4c

080081b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081b4:	e7fe      	b.n	80081b4 <ADC_IRQHandler>
	...

080081b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <HAL_Init+0x40>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0d      	ldr	r2, [pc, #52]	; (80081f8 <HAL_Init+0x40>)
 80081c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <HAL_Init+0x40>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a0a      	ldr	r2, [pc, #40]	; (80081f8 <HAL_Init+0x40>)
 80081ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80081d4:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <HAL_Init+0x40>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a07      	ldr	r2, [pc, #28]	; (80081f8 <HAL_Init+0x40>)
 80081da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081e0:	2003      	movs	r0, #3
 80081e2:	f000 fd33 	bl	8008c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081e6:	2000      	movs	r0, #0
 80081e8:	f000 f808 	bl	80081fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081ec:	f7fa f940 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	40023c00 	.word	0x40023c00

080081fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008204:	4b12      	ldr	r3, [pc, #72]	; (8008250 <HAL_InitTick+0x54>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b12      	ldr	r3, [pc, #72]	; (8008254 <HAL_InitTick+0x58>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008212:	fbb3 f3f1 	udiv	r3, r3, r1
 8008216:	fbb2 f3f3 	udiv	r3, r2, r3
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fd4b 	bl	8008cb6 <HAL_SYSTICK_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e00e      	b.n	8008248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b0f      	cmp	r3, #15
 800822e:	d80a      	bhi.n	8008246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008230:	2200      	movs	r2, #0
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	f000 fd13 	bl	8008c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800823c:	4a06      	ldr	r2, [pc, #24]	; (8008258 <HAL_InitTick+0x5c>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	e000      	b.n	8008248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000000 	.word	0x20000000
 8008254:	200002c4 	.word	0x200002c4
 8008258:	200002c0 	.word	0x200002c0

0800825c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <HAL_IncTick+0x20>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <HAL_IncTick+0x24>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4413      	add	r3, r2
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <HAL_IncTick+0x24>)
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	200002c4 	.word	0x200002c4
 8008280:	20000c44 	.word	0x20000c44

08008284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  return uwTick;
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <HAL_GetTick+0x14>)
 800828a:	681b      	ldr	r3, [r3, #0]
}
 800828c:	4618      	mov	r0, r3
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000c44 	.word	0x20000c44

0800829c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082a4:	f7ff ffee 	bl	8008284 <HAL_GetTick>
 80082a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b4:	d005      	beq.n	80082c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082b6:	4b09      	ldr	r3, [pc, #36]	; (80082dc <HAL_Delay+0x40>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80082c2:	bf00      	nop
 80082c4:	f7ff ffde 	bl	8008284 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d8f7      	bhi.n	80082c4 <HAL_Delay+0x28>
  {
  }
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200002c4 	.word	0x200002c4

080082e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e033      	b.n	800835e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fa f8de 	bl	80024c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b00      	cmp	r3, #0
 800831c:	d118      	bne.n	8008350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008326:	f023 0302 	bic.w	r3, r3, #2
 800832a:	f043 0202 	orr.w	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa3c 	bl	80087b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	f043 0201 	orr.w	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
 800834e:	e001      	b.n	8008354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_ADC_Start_DMA+0x1e>
 8008382:	2302      	movs	r3, #2
 8008384:	e0b1      	b.n	80084ea <HAL_ADC_Start_DMA+0x182>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	d018      	beq.n	80083ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80083ac:	4b51      	ldr	r3, [pc, #324]	; (80084f4 <HAL_ADC_Start_DMA+0x18c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a51      	ldr	r2, [pc, #324]	; (80084f8 <HAL_ADC_Start_DMA+0x190>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	0c9a      	lsrs	r2, r3, #18
 80083b8:	4613      	mov	r3, r2
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	4413      	add	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80083c0:	e002      	b.n	80083c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f9      	bne.n	80083c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b01      	cmp	r3, #1
 80083da:	f040 8085 	bne.w	80084e8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008408:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841c:	d106      	bne.n	800842c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008422:	f023 0206 	bic.w	r2, r3, #6
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
 800842a:	e002      	b.n	8008432 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800843a:	4b30      	ldr	r3, [pc, #192]	; (80084fc <HAL_ADC_Start_DMA+0x194>)
 800843c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	4a2f      	ldr	r2, [pc, #188]	; (8008500 <HAL_ADC_Start_DMA+0x198>)
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	4a2e      	ldr	r2, [pc, #184]	; (8008504 <HAL_ADC_Start_DMA+0x19c>)
 800844c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	4a2d      	ldr	r2, [pc, #180]	; (8008508 <HAL_ADC_Start_DMA+0x1a0>)
 8008454:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800845e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800846e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800847e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	334c      	adds	r3, #76	; 0x4c
 800848a:	4619      	mov	r1, r3
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f000 fccc 	bl	8008e2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10f      	bne.n	80084c0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d11c      	bne.n	80084e8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80084bc:	609a      	str	r2, [r3, #8]
 80084be:	e013      	b.n	80084e8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a11      	ldr	r2, [pc, #68]	; (800850c <HAL_ADC_Start_DMA+0x1a4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d10e      	bne.n	80084e8 <HAL_ADC_Start_DMA+0x180>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d107      	bne.n	80084e8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80084e6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000000 	.word	0x20000000
 80084f8:	431bde83 	.word	0x431bde83
 80084fc:	40012300 	.word	0x40012300
 8008500:	080089a9 	.word	0x080089a9
 8008504:	08008a63 	.word	0x08008a63
 8008508:	08008a7f 	.word	0x08008a7f
 800850c:	40012000 	.word	0x40012000

08008510 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_ADC_ConfigChannel+0x1c>
 8008564:	2302      	movs	r3, #2
 8008566:	e113      	b.n	8008790 <HAL_ADC_ConfigChannel+0x244>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b09      	cmp	r3, #9
 8008576:	d925      	bls.n	80085c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68d9      	ldr	r1, [r3, #12]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	3b1e      	subs	r3, #30
 800858e:	2207      	movs	r2, #7
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	43da      	mvns	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	400a      	ands	r2, r1
 800859c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68d9      	ldr	r1, [r3, #12]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4618      	mov	r0, r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	4403      	add	r3, r0
 80085b6:	3b1e      	subs	r3, #30
 80085b8:	409a      	lsls	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	e022      	b.n	800860a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6919      	ldr	r1, [r3, #16]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	4613      	mov	r3, r2
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	4413      	add	r3, r2
 80085d8:	2207      	movs	r2, #7
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	43da      	mvns	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	400a      	ands	r2, r1
 80085e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6919      	ldr	r1, [r3, #16]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4618      	mov	r0, r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4403      	add	r3, r0
 8008600:	409a      	lsls	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b06      	cmp	r3, #6
 8008610:	d824      	bhi.n	800865c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	3b05      	subs	r3, #5
 8008624:	221f      	movs	r2, #31
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	43da      	mvns	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	400a      	ands	r2, r1
 8008632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	4618      	mov	r0, r3
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	3b05      	subs	r3, #5
 800864e:	fa00 f203 	lsl.w	r2, r0, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	635a      	str	r2, [r3, #52]	; 0x34
 800865a:	e04c      	b.n	80086f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	2b0c      	cmp	r3, #12
 8008662:	d824      	bhi.n	80086ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	3b23      	subs	r3, #35	; 0x23
 8008676:	221f      	movs	r2, #31
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	43da      	mvns	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	400a      	ands	r2, r1
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	4618      	mov	r0, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	3b23      	subs	r3, #35	; 0x23
 80086a0:	fa00 f203 	lsl.w	r2, r0, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
 80086ac:	e023      	b.n	80086f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	3b41      	subs	r3, #65	; 0x41
 80086c0:	221f      	movs	r2, #31
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	43da      	mvns	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	400a      	ands	r2, r1
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4618      	mov	r0, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	3b41      	subs	r3, #65	; 0x41
 80086ea:	fa00 f203 	lsl.w	r2, r0, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80086f6:	4b29      	ldr	r3, [pc, #164]	; (800879c <HAL_ADC_ConfigChannel+0x250>)
 80086f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a28      	ldr	r2, [pc, #160]	; (80087a0 <HAL_ADC_ConfigChannel+0x254>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d10f      	bne.n	8008724 <HAL_ADC_ConfigChannel+0x1d8>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b12      	cmp	r3, #18
 800870a:	d10b      	bne.n	8008724 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1d      	ldr	r2, [pc, #116]	; (80087a0 <HAL_ADC_ConfigChannel+0x254>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d12b      	bne.n	8008786 <HAL_ADC_ConfigChannel+0x23a>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <HAL_ADC_ConfigChannel+0x258>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <HAL_ADC_ConfigChannel+0x1f4>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b11      	cmp	r3, #17
 800873e:	d122      	bne.n	8008786 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <HAL_ADC_ConfigChannel+0x258>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d111      	bne.n	8008786 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008762:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <HAL_ADC_ConfigChannel+0x25c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a11      	ldr	r2, [pc, #68]	; (80087ac <HAL_ADC_ConfigChannel+0x260>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	0c9a      	lsrs	r2, r3, #18
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008778:	e002      	b.n	8008780 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3b01      	subs	r3, #1
 800877e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f9      	bne.n	800877a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40012300 	.word	0x40012300
 80087a0:	40012000 	.word	0x40012000
 80087a4:	10000012 	.word	0x10000012
 80087a8:	20000000 	.word	0x20000000
 80087ac:	431bde83 	.word	0x431bde83

080087b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80087b8:	4b79      	ldr	r3, [pc, #484]	; (80089a0 <ADC_Init+0x1f0>)
 80087ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	431a      	orrs	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6859      	ldr	r1, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	021a      	lsls	r2, r3, #8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6859      	ldr	r1, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800882a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6899      	ldr	r1, [r3, #8]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	4a58      	ldr	r2, [pc, #352]	; (80089a4 <ADC_Init+0x1f4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d022      	beq.n	800888e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6899      	ldr	r1, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6899      	ldr	r1, [r3, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	609a      	str	r2, [r3, #8]
 800888c:	e00f      	b.n	80088ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800889c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80088ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0202 	bic.w	r2, r2, #2
 80088bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6899      	ldr	r1, [r3, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e1b      	ldrb	r3, [r3, #24]
 80088c8:	005a      	lsls	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01b      	beq.n	8008914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80088fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6859      	ldr	r1, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	3b01      	subs	r3, #1
 8008908:	035a      	lsls	r2, r3, #13
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	e007      	b.n	8008924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008922:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	3b01      	subs	r3, #1
 8008940:	051a      	lsls	r2, r3, #20
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6899      	ldr	r1, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008966:	025a      	lsls	r2, r3, #9
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6899      	ldr	r1, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	029a      	lsls	r2, r3, #10
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	609a      	str	r2, [r3, #8]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	40012300 	.word	0x40012300
 80089a4:	0f000001 	.word	0x0f000001

080089a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d13c      	bne.n	8008a3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d12b      	bne.n	8008a34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d127      	bne.n	8008a34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d119      	bne.n	8008a34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0220 	bic.w	r2, r2, #32
 8008a0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d105      	bne.n	8008a34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	f043 0201 	orr.w	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff fd6b 	bl	8008510 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a3a:	e00e      	b.n	8008a5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff fd75 	bl	8008538 <HAL_ADC_ErrorCallback>
}
 8008a4e:	e004      	b.n	8008a5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fd57 	bl	8008524 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2240      	movs	r2, #64	; 0x40
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a96:	f043 0204 	orr.w	r2, r3, #4
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff fd4a 	bl	8008538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008abc:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <__NVIC_SetPriorityGrouping+0x44>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ade:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <__NVIC_SetPriorityGrouping+0x44>)
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	60d3      	str	r3, [r2, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008af8:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <__NVIC_GetPriorityGrouping+0x18>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	f003 0307 	and.w	r3, r3, #7
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	e000ed00 	.word	0xe000ed00

08008b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db0b      	blt.n	8008b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	f003 021f 	and.w	r2, r3, #31
 8008b28:	4907      	ldr	r1, [pc, #28]	; (8008b48 <__NVIC_EnableIRQ+0x38>)
 8008b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	2001      	movs	r0, #1
 8008b32:	fa00 f202 	lsl.w	r2, r0, r2
 8008b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	e000e100 	.word	0xe000e100

08008b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	db0a      	blt.n	8008b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	490c      	ldr	r1, [pc, #48]	; (8008b98 <__NVIC_SetPriority+0x4c>)
 8008b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b6a:	0112      	lsls	r2, r2, #4
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	440b      	add	r3, r1
 8008b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b74:	e00a      	b.n	8008b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	4908      	ldr	r1, [pc, #32]	; (8008b9c <__NVIC_SetPriority+0x50>)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	3b04      	subs	r3, #4
 8008b84:	0112      	lsls	r2, r2, #4
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	440b      	add	r3, r1
 8008b8a:	761a      	strb	r2, [r3, #24]
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	e000e100 	.word	0xe000e100
 8008b9c:	e000ed00 	.word	0xe000ed00

08008ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b089      	sub	sp, #36	; 0x24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f1c3 0307 	rsb	r3, r3, #7
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	bf28      	it	cs
 8008bbe:	2304      	movcs	r3, #4
 8008bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d902      	bls.n	8008bd0 <NVIC_EncodePriority+0x30>
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3b03      	subs	r3, #3
 8008bce:	e000      	b.n	8008bd2 <NVIC_EncodePriority+0x32>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43da      	mvns	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	401a      	ands	r2, r3
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf2:	43d9      	mvns	r1, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bf8:	4313      	orrs	r3, r2
         );
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3724      	adds	r7, #36	; 0x24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c18:	d301      	bcc.n	8008c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00f      	b.n	8008c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c1e:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <SysTick_Config+0x40>)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c26:	210f      	movs	r1, #15
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	f7ff ff8e 	bl	8008b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <SysTick_Config+0x40>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <SysTick_Config+0x40>)
 8008c38:	2207      	movs	r2, #7
 8008c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	e000e010 	.word	0xe000e010

08008c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff29 	bl	8008aac <__NVIC_SetPriorityGrouping>
}
 8008c5a:	bf00      	nop
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	4603      	mov	r3, r0
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c74:	f7ff ff3e 	bl	8008af4 <__NVIC_GetPriorityGrouping>
 8008c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff ff8e 	bl	8008ba0 <NVIC_EncodePriority>
 8008c84:	4602      	mov	r2, r0
 8008c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff ff5d 	bl	8008b4c <__NVIC_SetPriority>
}
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff ff31 	bl	8008b10 <__NVIC_EnableIRQ>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff ffa2 	bl	8008c08 <SysTick_Config>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008cdc:	f7ff fad2 	bl	8008284 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e099      	b.n	8008e20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d0c:	e00f      	b.n	8008d2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d0e:	f7ff fab9 	bl	8008284 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	2b05      	cmp	r3, #5
 8008d1a:	d908      	bls.n	8008d2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2203      	movs	r2, #3
 8008d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e078      	b.n	8008e20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e8      	bne.n	8008d0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4b38      	ldr	r3, [pc, #224]	; (8008e28 <HAL_DMA_Init+0x158>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d107      	bne.n	8008d98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d90:	4313      	orrs	r3, r2
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0307 	bic.w	r3, r3, #7
 8008dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d117      	bne.n	8008df2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00e      	beq.n	8008df2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa91 	bl	80092fc <DMA_CheckFifoParam>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2240      	movs	r2, #64	; 0x40
 8008de4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008dee:	2301      	movs	r3, #1
 8008df0:	e016      	b.n	8008e20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa48 	bl	8009290 <DMA_CalcBaseAndBitshift>
 8008e00:	4603      	mov	r3, r0
 8008e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e08:	223f      	movs	r2, #63	; 0x3f
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	f010803f 	.word	0xf010803f

08008e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_DMA_Start_IT+0x26>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e040      	b.n	8008ed4 <HAL_DMA_Start_IT+0xa8>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d12f      	bne.n	8008ec6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f9da 	bl	8009234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e84:	223f      	movs	r2, #63	; 0x3f
 8008e86:	409a      	lsls	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0216 	orr.w	r2, r2, #22
 8008e9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0208 	orr.w	r2, r2, #8
 8008eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e005      	b.n	8008ed2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d004      	beq.n	8008efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2280      	movs	r2, #128	; 0x80
 8008ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e00c      	b.n	8008f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2205      	movs	r2, #5
 8008efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008f2c:	4b92      	ldr	r3, [pc, #584]	; (8009178 <HAL_DMA_IRQHandler+0x258>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a92      	ldr	r2, [pc, #584]	; (800917c <HAL_DMA_IRQHandler+0x25c>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	0a9b      	lsrs	r3, r3, #10
 8008f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	2208      	movs	r2, #8
 8008f4c:	409a      	lsls	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4013      	ands	r3, r2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01a      	beq.n	8008f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d013      	beq.n	8008f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0204 	bic.w	r2, r2, #4
 8008f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f78:	2208      	movs	r2, #8
 8008f7a:	409a      	lsls	r2, r3
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f043 0201 	orr.w	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f90:	2201      	movs	r2, #1
 8008f92:	409a      	lsls	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d012      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fae:	2201      	movs	r2, #1
 8008fb0:	409a      	lsls	r2, r3
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	409a      	lsls	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d012      	beq.n	8008ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	409a      	lsls	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff0:	f043 0204 	orr.w	r2, r3, #4
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	409a      	lsls	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d043      	beq.n	8009090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0308 	and.w	r3, r3, #8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d03c      	beq.n	8009090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901a:	2210      	movs	r2, #16
 800901c:	409a      	lsls	r2, r3
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d018      	beq.n	8009062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d108      	bne.n	8009050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	2b00      	cmp	r3, #0
 8009044:	d024      	beq.n	8009090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
 800904e:	e01f      	b.n	8009090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01b      	beq.n	8009090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
 8009060:	e016      	b.n	8009090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906c:	2b00      	cmp	r3, #0
 800906e:	d107      	bne.n	8009080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0208 	bic.w	r2, r2, #8
 800907e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009094:	2220      	movs	r2, #32
 8009096:	409a      	lsls	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4013      	ands	r3, r2
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 808e 	beq.w	80091be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0310 	and.w	r3, r3, #16
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8086 	beq.w	80091be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b6:	2220      	movs	r2, #32
 80090b8:	409a      	lsls	r2, r3
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d136      	bne.n	8009138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0216 	bic.w	r2, r2, #22
 80090d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <HAL_DMA_IRQHandler+0x1da>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d007      	beq.n	800910a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0208 	bic.w	r2, r2, #8
 8009108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910e:	223f      	movs	r2, #63	; 0x3f
 8009110:	409a      	lsls	r2, r3
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912a:	2b00      	cmp	r3, #0
 800912c:	d07d      	beq.n	800922a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
        }
        return;
 8009136:	e078      	b.n	800922a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01c      	beq.n	8009180 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009158:	2b00      	cmp	r3, #0
 800915a:	d030      	beq.n	80091be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	e02b      	b.n	80091be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d027      	beq.n	80091be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	e022      	b.n	80091be <HAL_DMA_IRQHandler+0x29e>
 8009178:	20000000 	.word	0x20000000
 800917c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10f      	bne.n	80091ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0210 	bic.w	r2, r2, #16
 800919c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d032      	beq.n	800922c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d022      	beq.n	8009218 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2205      	movs	r2, #5
 80091d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d307      	bcc.n	8009206 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f2      	bne.n	80091ea <HAL_DMA_IRQHandler+0x2ca>
 8009204:	e000      	b.n	8009208 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009206:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
 8009228:	e000      	b.n	800922c <HAL_DMA_IRQHandler+0x30c>
        return;
 800922a:	bf00      	nop
    }
  }
}
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop

08009234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	d108      	bne.n	8009274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009272:	e007      	b.n	8009284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	60da      	str	r2, [r3, #12]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	3b10      	subs	r3, #16
 80092a0:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <DMA_CalcBaseAndBitshift+0x64>)
 80092a2:	fba2 2303 	umull	r2, r3, r2, r3
 80092a6:	091b      	lsrs	r3, r3, #4
 80092a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80092aa:	4a13      	ldr	r2, [pc, #76]	; (80092f8 <DMA_CalcBaseAndBitshift+0x68>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d909      	bls.n	80092d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092c6:	f023 0303 	bic.w	r3, r3, #3
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	659a      	str	r2, [r3, #88]	; 0x58
 80092d0:	e007      	b.n	80092e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	aaaaaaab 	.word	0xaaaaaaab
 80092f8:	0800deb0 	.word	0x0800deb0

080092fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d11f      	bne.n	8009356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d855      	bhi.n	80093c8 <DMA_CheckFifoParam+0xcc>
 800931c:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <DMA_CheckFifoParam+0x28>)
 800931e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009322:	bf00      	nop
 8009324:	08009335 	.word	0x08009335
 8009328:	08009347 	.word	0x08009347
 800932c:	08009335 	.word	0x08009335
 8009330:	080093c9 	.word	0x080093c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d045      	beq.n	80093cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009344:	e042      	b.n	80093cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800934e:	d13f      	bne.n	80093d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009354:	e03c      	b.n	80093d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935e:	d121      	bne.n	80093a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d836      	bhi.n	80093d4 <DMA_CheckFifoParam+0xd8>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <DMA_CheckFifoParam+0x70>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	0800937d 	.word	0x0800937d
 8009370:	08009383 	.word	0x08009383
 8009374:	0800937d 	.word	0x0800937d
 8009378:	08009395 	.word	0x08009395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
      break;
 8009380:	e02f      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d024      	beq.n	80093d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009392:	e021      	b.n	80093d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800939c:	d11e      	bne.n	80093dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80093a2:	e01b      	b.n	80093dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d902      	bls.n	80093b0 <DMA_CheckFifoParam+0xb4>
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d003      	beq.n	80093b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80093ae:	e018      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
      break;
 80093b4:	e015      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
      break;
 80093c6:	e00b      	b.n	80093e0 <DMA_CheckFifoParam+0xe4>
      break;
 80093c8:	bf00      	nop
 80093ca:	e00a      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;
 80093cc:	bf00      	nop
 80093ce:	e008      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;
 80093d0:	bf00      	nop
 80093d2:	e006      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;
 80093d4:	bf00      	nop
 80093d6:	e004      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;
 80093d8:	bf00      	nop
 80093da:	e002      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80093dc:	bf00      	nop
 80093de:	e000      	b.n	80093e2 <DMA_CheckFifoParam+0xe6>
      break;
 80093e0:	bf00      	nop
    }
  } 
  
  return status; 
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b089      	sub	sp, #36	; 0x24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80093fe:	2300      	movs	r3, #0
 8009400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009402:	2300      	movs	r3, #0
 8009404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009406:	2300      	movs	r3, #0
 8009408:	61fb      	str	r3, [r7, #28]
 800940a:	e159      	b.n	80096c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800940c:	2201      	movs	r2, #1
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4013      	ands	r3, r2
 800941e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	429a      	cmp	r2, r3
 8009426:	f040 8148 	bne.w	80096ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d00b      	beq.n	800944a <HAL_GPIO_Init+0x5a>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d007      	beq.n	800944a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800943e:	2b11      	cmp	r3, #17
 8009440:	d003      	beq.n	800944a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2b12      	cmp	r3, #18
 8009448:	d130      	bne.n	80094ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	2203      	movs	r2, #3
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	43db      	mvns	r3, r3
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	4013      	ands	r3, r2
 8009460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009480:	2201      	movs	r2, #1
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	43db      	mvns	r3, r3
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	4013      	ands	r3, r2
 800948e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	f003 0201 	and.w	r2, r3, #1
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	fa02 f303 	lsl.w	r3, r2, r3
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	2203      	movs	r2, #3
 80094b8:	fa02 f303 	lsl.w	r3, r2, r3
 80094bc:	43db      	mvns	r3, r3
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	4013      	ands	r3, r2
 80094c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d003      	beq.n	80094ec <HAL_GPIO_Init+0xfc>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b12      	cmp	r3, #18
 80094ea:	d123      	bne.n	8009534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	08da      	lsrs	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3208      	adds	r2, #8
 80094f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	220f      	movs	r2, #15
 8009504:	fa02 f303 	lsl.w	r3, r2, r3
 8009508:	43db      	mvns	r3, r3
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	4013      	ands	r3, r2
 800950e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	691a      	ldr	r2, [r3, #16]
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	fa02 f303 	lsl.w	r3, r2, r3
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	4313      	orrs	r3, r2
 8009524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	08da      	lsrs	r2, r3, #3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3208      	adds	r2, #8
 800952e:	69b9      	ldr	r1, [r7, #24]
 8009530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	2203      	movs	r2, #3
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	43db      	mvns	r3, r3
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	4013      	ands	r3, r2
 800954a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f003 0203 	and.w	r2, r3, #3
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	4313      	orrs	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80a2 	beq.w	80096ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	4b56      	ldr	r3, [pc, #344]	; (80096d4 <HAL_GPIO_Init+0x2e4>)
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	4a55      	ldr	r2, [pc, #340]	; (80096d4 <HAL_GPIO_Init+0x2e4>)
 8009580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009584:	6453      	str	r3, [r2, #68]	; 0x44
 8009586:	4b53      	ldr	r3, [pc, #332]	; (80096d4 <HAL_GPIO_Init+0x2e4>)
 8009588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009592:	4a51      	ldr	r2, [pc, #324]	; (80096d8 <HAL_GPIO_Init+0x2e8>)
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	089b      	lsrs	r3, r3, #2
 8009598:	3302      	adds	r3, #2
 800959a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800959e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	220f      	movs	r2, #15
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	43db      	mvns	r3, r3
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4013      	ands	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a48      	ldr	r2, [pc, #288]	; (80096dc <HAL_GPIO_Init+0x2ec>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d019      	beq.n	80095f2 <HAL_GPIO_Init+0x202>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a47      	ldr	r2, [pc, #284]	; (80096e0 <HAL_GPIO_Init+0x2f0>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d013      	beq.n	80095ee <HAL_GPIO_Init+0x1fe>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a46      	ldr	r2, [pc, #280]	; (80096e4 <HAL_GPIO_Init+0x2f4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d00d      	beq.n	80095ea <HAL_GPIO_Init+0x1fa>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a45      	ldr	r2, [pc, #276]	; (80096e8 <HAL_GPIO_Init+0x2f8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d007      	beq.n	80095e6 <HAL_GPIO_Init+0x1f6>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a44      	ldr	r2, [pc, #272]	; (80096ec <HAL_GPIO_Init+0x2fc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d101      	bne.n	80095e2 <HAL_GPIO_Init+0x1f2>
 80095de:	2304      	movs	r3, #4
 80095e0:	e008      	b.n	80095f4 <HAL_GPIO_Init+0x204>
 80095e2:	2307      	movs	r3, #7
 80095e4:	e006      	b.n	80095f4 <HAL_GPIO_Init+0x204>
 80095e6:	2303      	movs	r3, #3
 80095e8:	e004      	b.n	80095f4 <HAL_GPIO_Init+0x204>
 80095ea:	2302      	movs	r3, #2
 80095ec:	e002      	b.n	80095f4 <HAL_GPIO_Init+0x204>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <HAL_GPIO_Init+0x204>
 80095f2:	2300      	movs	r3, #0
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	f002 0203 	and.w	r2, r2, #3
 80095fa:	0092      	lsls	r2, r2, #2
 80095fc:	4093      	lsls	r3, r2
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	4313      	orrs	r3, r2
 8009602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009604:	4934      	ldr	r1, [pc, #208]	; (80096d8 <HAL_GPIO_Init+0x2e8>)
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	089b      	lsrs	r3, r3, #2
 800960a:	3302      	adds	r3, #2
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <HAL_GPIO_Init+0x300>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	43db      	mvns	r3, r3
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4013      	ands	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009636:	4a2e      	ldr	r2, [pc, #184]	; (80096f0 <HAL_GPIO_Init+0x300>)
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800963c:	4b2c      	ldr	r3, [pc, #176]	; (80096f0 <HAL_GPIO_Init+0x300>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	43db      	mvns	r3, r3
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	4013      	ands	r3, r2
 800964a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	4313      	orrs	r3, r2
 800965e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009660:	4a23      	ldr	r2, [pc, #140]	; (80096f0 <HAL_GPIO_Init+0x300>)
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009666:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <HAL_GPIO_Init+0x300>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	43db      	mvns	r3, r3
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	4013      	ands	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800968a:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <HAL_GPIO_Init+0x300>)
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <HAL_GPIO_Init+0x300>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	43db      	mvns	r3, r3
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	4013      	ands	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80096b4:	4a0e      	ldr	r2, [pc, #56]	; (80096f0 <HAL_GPIO_Init+0x300>)
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	3301      	adds	r3, #1
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b0f      	cmp	r3, #15
 80096c4:	f67f aea2 	bls.w	800940c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80096c8:	bf00      	nop
 80096ca:	3724      	adds	r7, #36	; 0x24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40023800 	.word	0x40023800
 80096d8:	40013800 	.word	0x40013800
 80096dc:	40020000 	.word	0x40020000
 80096e0:	40020400 	.word	0x40020400
 80096e4:	40020800 	.word	0x40020800
 80096e8:	40020c00 	.word	0x40020c00
 80096ec:	40021000 	.word	0x40021000
 80096f0:	40013c00 	.word	0x40013c00

080096f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	807b      	strh	r3, [r7, #2]
 8009700:	4613      	mov	r3, r2
 8009702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009704:	787b      	ldrb	r3, [r7, #1]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800970a:	887a      	ldrh	r2, [r7, #2]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009710:	e003      	b.n	800971a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009712:	887b      	ldrh	r3, [r7, #2]
 8009714:	041a      	lsls	r2, r3, #16
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	619a      	str	r2, [r3, #24]
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695a      	ldr	r2, [r3, #20]
 8009736:	887b      	ldrh	r3, [r7, #2]
 8009738:	401a      	ands	r2, r3
 800973a:	887b      	ldrh	r3, [r7, #2]
 800973c:	429a      	cmp	r2, r3
 800973e:	d104      	bne.n	800974a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009740:	887b      	ldrh	r3, [r7, #2]
 8009742:	041a      	lsls	r2, r3, #16
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009748:	e002      	b.n	8009750 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800974a:	887a      	ldrh	r2, [r7, #2]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	619a      	str	r2, [r3, #24]
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009766:	4b08      	ldr	r3, [pc, #32]	; (8009788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	4013      	ands	r3, r2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d006      	beq.n	8009780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009772:	4a05      	ldr	r2, [pc, #20]	; (8009788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	4618      	mov	r0, r3
 800977c:	f7f7 fa1e 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40013c00 	.word	0x40013c00

0800978c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e11f      	b.n	80099de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f8 ff18 	bl	80025e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2224      	movs	r2, #36	; 0x24
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80097f0:	f001 fb6a 	bl	800aec8 <HAL_RCC_GetPCLK1Freq>
 80097f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4a7b      	ldr	r2, [pc, #492]	; (80099e8 <HAL_I2C_Init+0x25c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d807      	bhi.n	8009810 <HAL_I2C_Init+0x84>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a7a      	ldr	r2, [pc, #488]	; (80099ec <HAL_I2C_Init+0x260>)
 8009804:	4293      	cmp	r3, r2
 8009806:	bf94      	ite	ls
 8009808:	2301      	movls	r3, #1
 800980a:	2300      	movhi	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	e006      	b.n	800981e <HAL_I2C_Init+0x92>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a77      	ldr	r2, [pc, #476]	; (80099f0 <HAL_I2C_Init+0x264>)
 8009814:	4293      	cmp	r3, r2
 8009816:	bf94      	ite	ls
 8009818:	2301      	movls	r3, #1
 800981a:	2300      	movhi	r3, #0
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e0db      	b.n	80099de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a72      	ldr	r2, [pc, #456]	; (80099f4 <HAL_I2C_Init+0x268>)
 800982a:	fba2 2303 	umull	r2, r3, r2, r3
 800982e:	0c9b      	lsrs	r3, r3, #18
 8009830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a64      	ldr	r2, [pc, #400]	; (80099e8 <HAL_I2C_Init+0x25c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d802      	bhi.n	8009860 <HAL_I2C_Init+0xd4>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3301      	adds	r3, #1
 800985e:	e009      	b.n	8009874 <HAL_I2C_Init+0xe8>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009866:	fb02 f303 	mul.w	r3, r2, r3
 800986a:	4a63      	ldr	r2, [pc, #396]	; (80099f8 <HAL_I2C_Init+0x26c>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	3301      	adds	r3, #1
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	6812      	ldr	r2, [r2, #0]
 8009878:	430b      	orrs	r3, r1
 800987a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4956      	ldr	r1, [pc, #344]	; (80099e8 <HAL_I2C_Init+0x25c>)
 8009890:	428b      	cmp	r3, r1
 8009892:	d80d      	bhi.n	80098b0 <HAL_I2C_Init+0x124>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1e59      	subs	r1, r3, #1
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	fbb1 f3f3 	udiv	r3, r1, r3
 80098a2:	3301      	adds	r3, #1
 80098a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	bf38      	it	cc
 80098ac:	2304      	movcc	r3, #4
 80098ae:	e04f      	b.n	8009950 <HAL_I2C_Init+0x1c4>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d111      	bne.n	80098dc <HAL_I2C_Init+0x150>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	1e58      	subs	r0, r3, #1
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6859      	ldr	r1, [r3, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	440b      	add	r3, r1
 80098c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80098ca:	3301      	adds	r3, #1
 80098cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bf0c      	ite	eq
 80098d4:	2301      	moveq	r3, #1
 80098d6:	2300      	movne	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	e012      	b.n	8009902 <HAL_I2C_Init+0x176>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	1e58      	subs	r0, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6859      	ldr	r1, [r3, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	0099      	lsls	r1, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80098f2:	3301      	adds	r3, #1
 80098f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bf0c      	ite	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2300      	movne	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <HAL_I2C_Init+0x17e>
 8009906:	2301      	movs	r3, #1
 8009908:	e022      	b.n	8009950 <HAL_I2C_Init+0x1c4>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10e      	bne.n	8009930 <HAL_I2C_Init+0x1a4>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	1e58      	subs	r0, r3, #1
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6859      	ldr	r1, [r3, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	440b      	add	r3, r1
 8009920:	fbb0 f3f3 	udiv	r3, r0, r3
 8009924:	3301      	adds	r3, #1
 8009926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	e00f      	b.n	8009950 <HAL_I2C_Init+0x1c4>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	1e58      	subs	r0, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6859      	ldr	r1, [r3, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	0099      	lsls	r1, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	fbb0 f3f3 	udiv	r3, r0, r3
 8009946:	3301      	adds	r3, #1
 8009948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800994c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	6809      	ldr	r1, [r1, #0]
 8009954:	4313      	orrs	r3, r2
 8009956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	69da      	ldr	r2, [r3, #28]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800997e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	6911      	ldr	r1, [r2, #16]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68d2      	ldr	r2, [r2, #12]
 800998a:	4311      	orrs	r1, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	430b      	orrs	r3, r1
 8009992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695a      	ldr	r2, [r3, #20]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f042 0201 	orr.w	r2, r2, #1
 80099be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	000186a0 	.word	0x000186a0
 80099ec:	001e847f 	.word	0x001e847f
 80099f0:	003d08ff 	.word	0x003d08ff
 80099f4:	431bde83 	.word	0x431bde83
 80099f8:	10624dd3 	.word	0x10624dd3

080099fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	461a      	mov	r2, r3
 8009a08:	460b      	mov	r3, r1
 8009a0a:	817b      	strh	r3, [r7, #10]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a10:	f7fe fc38 	bl	8008284 <HAL_GetTick>
 8009a14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	f040 80e0 	bne.w	8009be4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2319      	movs	r3, #25
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	4970      	ldr	r1, [pc, #448]	; (8009bf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 fc58 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e0d3      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_I2C_Master_Transmit+0x50>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e0cc      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d007      	beq.n	8009a72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0201 	orr.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2210      	movs	r2, #16
 8009a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	893a      	ldrh	r2, [r7, #8]
 8009aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4a50      	ldr	r2, [pc, #320]	; (8009bf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009ab4:	8979      	ldrh	r1, [r7, #10]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6a3a      	ldr	r2, [r7, #32]
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fac2 	bl	800a044 <I2C_MasterRequestWrite>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e08d      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aca:	2300      	movs	r3, #0
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	613b      	str	r3, [r7, #16]
 8009ade:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009ae0:	e066      	b.n	8009bb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	6a39      	ldr	r1, [r7, #32]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fcd2 	bl	800a490 <I2C_WaitOnTXEFlagUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d107      	bne.n	8009b0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e06b      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	f003 0304 	and.w	r3, r3, #4
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d11b      	bne.n	8009b84 <HAL_I2C_Master_Transmit+0x188>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d017      	beq.n	8009b84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	6a39      	ldr	r1, [r7, #32]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fcc2 	bl	800a512 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00d      	beq.n	8009bb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d107      	bne.n	8009bac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009baa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e01a      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d194      	bne.n	8009ae2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e000      	b.n	8009be6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009be4:	2302      	movs	r3, #2
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	00100002 	.word	0x00100002
 8009bf4:	ffff0000 	.word	0xffff0000

08009bf8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	; 0x30
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	461a      	mov	r2, r3
 8009c04:	460b      	mov	r3, r1
 8009c06:	817b      	strh	r3, [r7, #10]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c0c:	f7fe fb3a 	bl	8008284 <HAL_GetTick>
 8009c10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	f040 820b 	bne.w	800a036 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2319      	movs	r3, #25
 8009c26:	2201      	movs	r2, #1
 8009c28:	497c      	ldr	r1, [pc, #496]	; (8009e1c <HAL_I2C_Master_Receive+0x224>)
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fb5a 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009c36:	2302      	movs	r3, #2
 8009c38:	e1fe      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <HAL_I2C_Master_Receive+0x50>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e1f7      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d007      	beq.n	8009c6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0201 	orr.w	r2, r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2222      	movs	r2, #34	; 0x22
 8009c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2210      	movs	r2, #16
 8009c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	893a      	ldrh	r2, [r7, #8]
 8009c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4a5c      	ldr	r2, [pc, #368]	; (8009e20 <HAL_I2C_Master_Receive+0x228>)
 8009cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009cb0:	8979      	ldrh	r1, [r7, #10]
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fa46 	bl	800a148 <I2C_MasterRequestRead>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e1b8      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d113      	bne.n	8009cf6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cce:	2300      	movs	r3, #0
 8009cd0:	623b      	str	r3, [r7, #32]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	623b      	str	r3, [r7, #32]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	623b      	str	r3, [r7, #32]
 8009ce2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e18c      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d11b      	bne.n	8009d36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e16c      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d11b      	bne.n	8009d76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	61bb      	str	r3, [r7, #24]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	61bb      	str	r3, [r7, #24]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	e14c      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	617b      	str	r3, [r7, #20]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009d9c:	e138      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	f200 80f1 	bhi.w	8009f8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d123      	bne.n	8009df8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fbed 	bl	800a594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e139      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009df6:	e10b      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d14e      	bne.n	8009e9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	2200      	movs	r2, #0
 8009e08:	4906      	ldr	r1, [pc, #24]	; (8009e24 <HAL_I2C_Master_Receive+0x22c>)
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 fa6a 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d008      	beq.n	8009e28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e10e      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
 8009e1a:	bf00      	nop
 8009e1c:	00100002 	.word	0x00100002
 8009e20:	ffff0000 	.word	0xffff0000
 8009e24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691a      	ldr	r2, [r3, #16]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	3b01      	subs	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e9c:	e0b8      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4966      	ldr	r1, [pc, #408]	; (800a040 <HAL_I2C_Master_Receive+0x448>)
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 fa1b 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e0bf      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691a      	ldr	r2, [r3, #16]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	2200      	movs	r2, #0
 8009f02:	494f      	ldr	r1, [pc, #316]	; (800a040 <HAL_I2C_Master_Receive+0x448>)
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f9ed 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e091      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f88:	e042      	b.n	800a010 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fb00 	bl	800a594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e04c      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	691a      	ldr	r2, [r3, #16]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d118      	bne.n	800a010 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	b2d2      	uxtb	r2, r2
 8009fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a006:	b29b      	uxth	r3, r3
 800a008:	3b01      	subs	r3, #1
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	2b00      	cmp	r3, #0
 800a016:	f47f aec2 	bne.w	8009d9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	e000      	b.n	800a038 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a036:	2302      	movs	r3, #2
  }
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3728      	adds	r7, #40	; 0x28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	00010004 	.word	0x00010004

0800a044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	460b      	mov	r3, r1
 800a052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d006      	beq.n	800a06e <I2C_MasterRequestWrite+0x2a>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d003      	beq.n	800a06e <I2C_MasterRequestWrite+0x2a>
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a06c:	d108      	bne.n	800a080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e00b      	b.n	800a098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a084:	2b12      	cmp	r3, #18
 800a086:	d107      	bne.n	800a098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f91d 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00d      	beq.n	800a0cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0be:	d103      	bne.n	800a0c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e035      	b.n	800a138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d4:	d108      	bne.n	800a0e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0d6:	897b      	ldrh	r3, [r7, #10]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0e4:	611a      	str	r2, [r3, #16]
 800a0e6:	e01b      	b.n	800a120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0e8:	897b      	ldrh	r3, [r7, #10]
 800a0ea:	11db      	asrs	r3, r3, #7
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 0306 	and.w	r3, r3, #6
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f063 030f 	orn	r3, r3, #15
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	490e      	ldr	r1, [pc, #56]	; (800a140 <I2C_MasterRequestWrite+0xfc>)
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f943 	bl	800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e010      	b.n	800a138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a116:	897b      	ldrh	r3, [r7, #10]
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4907      	ldr	r1, [pc, #28]	; (800a144 <I2C_MasterRequestWrite+0x100>)
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 f933 	bl	800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	00010008 	.word	0x00010008
 800a144:	00010002 	.word	0x00010002

0800a148 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	460b      	mov	r3, r1
 800a156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a16c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b08      	cmp	r3, #8
 800a172:	d006      	beq.n	800a182 <I2C_MasterRequestRead+0x3a>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d003      	beq.n	800a182 <I2C_MasterRequestRead+0x3a>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a180:	d108      	bne.n	800a194 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e00b      	b.n	800a1ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	2b11      	cmp	r3, #17
 800a19a:	d107      	bne.n	800a1ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f893 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00d      	beq.n	800a1e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d2:	d103      	bne.n	800a1dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e079      	b.n	800a2d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1e8:	d108      	bne.n	800a1fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a1ea:	897b      	ldrh	r3, [r7, #10]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	611a      	str	r2, [r3, #16]
 800a1fa:	e05f      	b.n	800a2bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a1fc:	897b      	ldrh	r3, [r7, #10]
 800a1fe:	11db      	asrs	r3, r3, #7
 800a200:	b2db      	uxtb	r3, r3
 800a202:	f003 0306 	and.w	r3, r3, #6
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f063 030f 	orn	r3, r3, #15
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	4930      	ldr	r1, [pc, #192]	; (800a2dc <I2C_MasterRequestRead+0x194>)
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f8b9 	bl	800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e054      	b.n	800a2d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a22a:	897b      	ldrh	r3, [r7, #10]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	4929      	ldr	r1, [pc, #164]	; (800a2e0 <I2C_MasterRequestRead+0x198>)
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f8a9 	bl	800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e044      	b.n	800a2d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a24a:	2300      	movs	r3, #0
 800a24c:	613b      	str	r3, [r7, #16]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	613b      	str	r3, [r7, #16]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a26e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f831 	bl	800a2e4 <I2C_WaitOnFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00d      	beq.n	800a2a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a296:	d103      	bne.n	800a2a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a29e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e017      	b.n	800a2d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	11db      	asrs	r3, r3, #7
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 0306 	and.w	r3, r3, #6
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f063 030e 	orn	r3, r3, #14
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4907      	ldr	r1, [pc, #28]	; (800a2e0 <I2C_MasterRequestRead+0x198>)
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 f865 	bl	800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	00010008 	.word	0x00010008
 800a2e0:	00010002 	.word	0x00010002

0800a2e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2f4:	e025      	b.n	800a342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fc:	d021      	beq.n	800a342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2fe:	f7fd ffc1 	bl	8008284 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d302      	bcc.n	800a314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d116      	bne.n	800a342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	f043 0220 	orr.w	r2, r3, #32
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e023      	b.n	800a38a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	0c1b      	lsrs	r3, r3, #16
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d10d      	bne.n	800a368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	43da      	mvns	r2, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4013      	ands	r3, r2
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bf0c      	ite	eq
 800a35e:	2301      	moveq	r3, #1
 800a360:	2300      	movne	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	e00c      	b.n	800a382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	43da      	mvns	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	bf0c      	ite	eq
 800a37a:	2301      	moveq	r3, #1
 800a37c:	2300      	movne	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	429a      	cmp	r2, r3
 800a386:	d0b6      	beq.n	800a2f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3a0:	e051      	b.n	800a446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b0:	d123      	bne.n	800a3fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	f043 0204 	orr.w	r2, r3, #4
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e046      	b.n	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d021      	beq.n	800a446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a402:	f7fd ff3f 	bl	8008284 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d302      	bcc.n	800a418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d116      	bne.n	800a446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2220      	movs	r2, #32
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a432:	f043 0220 	orr.w	r2, r3, #32
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e020      	b.n	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d10c      	bne.n	800a46a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	43da      	mvns	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4013      	ands	r3, r2
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bf14      	ite	ne
 800a462:	2301      	movne	r3, #1
 800a464:	2300      	moveq	r3, #0
 800a466:	b2db      	uxtb	r3, r3
 800a468:	e00b      	b.n	800a482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	43da      	mvns	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4013      	ands	r3, r2
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bf14      	ite	ne
 800a47c:	2301      	movne	r3, #1
 800a47e:	2300      	moveq	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d18d      	bne.n	800a3a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a49c:	e02d      	b.n	800a4fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 f8ce 	bl	800a640 <I2C_IsAcknowledgeFailed>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e02d      	b.n	800a50a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d021      	beq.n	800a4fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7fd fee5 	bl	8008284 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d116      	bne.n	800a4fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	f043 0220 	orr.w	r2, r3, #32
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e007      	b.n	800a50a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a504:	2b80      	cmp	r3, #128	; 0x80
 800a506:	d1ca      	bne.n	800a49e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a51e:	e02d      	b.n	800a57c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 f88d 	bl	800a640 <I2C_IsAcknowledgeFailed>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e02d      	b.n	800a58c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a536:	d021      	beq.n	800a57c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a538:	f7fd fea4 	bl	8008284 <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d302      	bcc.n	800a54e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d116      	bne.n	800a57c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	f043 0220 	orr.w	r2, r3, #32
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e007      	b.n	800a58c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d1ca      	bne.n	800a520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5a0:	e042      	b.n	800a628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d119      	bne.n	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f06f 0210 	mvn.w	r2, #16
 800a5b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e029      	b.n	800a638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e4:	f7fd fe4e 	bl	8008284 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d302      	bcc.n	800a5fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d116      	bne.n	800a628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	f043 0220 	orr.w	r2, r3, #32
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e007      	b.n	800a638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b40      	cmp	r3, #64	; 0x40
 800a634:	d1b5      	bne.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a656:	d11b      	bne.n	800a690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67c:	f043 0204 	orr.w	r2, r3, #4
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e000      	b.n	800a692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e25b      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d075      	beq.n	800a7aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a6be:	4ba3      	ldr	r3, [pc, #652]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 030c 	and.w	r3, r3, #12
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d00c      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6ca:	4ba0      	ldr	r3, [pc, #640]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a6d2:	2b08      	cmp	r3, #8
 800a6d4:	d112      	bne.n	800a6fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6d6:	4b9d      	ldr	r3, [pc, #628]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6e2:	d10b      	bne.n	800a6fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6e4:	4b99      	ldr	r3, [pc, #612]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d05b      	beq.n	800a7a8 <HAL_RCC_OscConfig+0x108>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d157      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e236      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a704:	d106      	bne.n	800a714 <HAL_RCC_OscConfig+0x74>
 800a706:	4b91      	ldr	r3, [pc, #580]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a90      	ldr	r2, [pc, #576]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a70c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e01d      	b.n	800a750 <HAL_RCC_OscConfig+0xb0>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a71c:	d10c      	bne.n	800a738 <HAL_RCC_OscConfig+0x98>
 800a71e:	4b8b      	ldr	r3, [pc, #556]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a8a      	ldr	r2, [pc, #552]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	4b88      	ldr	r3, [pc, #544]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a87      	ldr	r2, [pc, #540]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e00b      	b.n	800a750 <HAL_RCC_OscConfig+0xb0>
 800a738:	4b84      	ldr	r3, [pc, #528]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a83      	ldr	r2, [pc, #524]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a73e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	4b81      	ldr	r3, [pc, #516]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a80      	ldr	r2, [pc, #512]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a74a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a74e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d013      	beq.n	800a780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a758:	f7fd fd94 	bl	8008284 <HAL_GetTick>
 800a75c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a75e:	e008      	b.n	800a772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a760:	f7fd fd90 	bl	8008284 <HAL_GetTick>
 800a764:	4602      	mov	r2, r0
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	2b64      	cmp	r3, #100	; 0x64
 800a76c:	d901      	bls.n	800a772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e1fb      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a772:	4b76      	ldr	r3, [pc, #472]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f0      	beq.n	800a760 <HAL_RCC_OscConfig+0xc0>
 800a77e:	e014      	b.n	800a7aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a780:	f7fd fd80 	bl	8008284 <HAL_GetTick>
 800a784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a786:	e008      	b.n	800a79a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a788:	f7fd fd7c 	bl	8008284 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	2b64      	cmp	r3, #100	; 0x64
 800a794:	d901      	bls.n	800a79a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e1e7      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a79a:	4b6c      	ldr	r3, [pc, #432]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1f0      	bne.n	800a788 <HAL_RCC_OscConfig+0xe8>
 800a7a6:	e000      	b.n	800a7aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d063      	beq.n	800a87e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a7b6:	4b65      	ldr	r3, [pc, #404]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 030c 	and.w	r3, r3, #12
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7c2:	4b62      	ldr	r3, [pc, #392]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d11c      	bne.n	800a808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7ce:	4b5f      	ldr	r3, [pc, #380]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d116      	bne.n	800a808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7da:	4b5c      	ldr	r3, [pc, #368]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x152>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d001      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e1bb      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7f2:	4b56      	ldr	r3, [pc, #344]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4952      	ldr	r1, [pc, #328]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a802:	4313      	orrs	r3, r2
 800a804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a806:	e03a      	b.n	800a87e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d020      	beq.n	800a852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a810:	4b4f      	ldr	r3, [pc, #316]	; (800a950 <HAL_RCC_OscConfig+0x2b0>)
 800a812:	2201      	movs	r2, #1
 800a814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a816:	f7fd fd35 	bl	8008284 <HAL_GetTick>
 800a81a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a81c:	e008      	b.n	800a830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a81e:	f7fd fd31 	bl	8008284 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d901      	bls.n	800a830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e19c      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a830:	4b46      	ldr	r3, [pc, #280]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0f0      	beq.n	800a81e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a83c:	4b43      	ldr	r3, [pc, #268]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4940      	ldr	r1, [pc, #256]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	600b      	str	r3, [r1, #0]
 800a850:	e015      	b.n	800a87e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a852:	4b3f      	ldr	r3, [pc, #252]	; (800a950 <HAL_RCC_OscConfig+0x2b0>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fd fd14 	bl	8008284 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a860:	f7fd fd10 	bl	8008284 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e17b      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a872:	4b36      	ldr	r3, [pc, #216]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f0      	bne.n	800a860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0308 	and.w	r3, r3, #8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d030      	beq.n	800a8ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d016      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a892:	4b30      	ldr	r3, [pc, #192]	; (800a954 <HAL_RCC_OscConfig+0x2b4>)
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a898:	f7fd fcf4 	bl	8008284 <HAL_GetTick>
 800a89c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8a0:	f7fd fcf0 	bl	8008284 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e15b      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8b2:	4b26      	ldr	r3, [pc, #152]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0f0      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x200>
 800a8be:	e015      	b.n	800a8ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8c0:	4b24      	ldr	r3, [pc, #144]	; (800a954 <HAL_RCC_OscConfig+0x2b4>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8c6:	f7fd fcdd 	bl	8008284 <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8ce:	f7fd fcd9 	bl	8008284 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e144      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8e0:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f0      	bne.n	800a8ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 80a0 	beq.w	800aa3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8fe:	4b13      	ldr	r3, [pc, #76]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10f      	bne.n	800a92a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a912:	4a0e      	ldr	r2, [pc, #56]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a918:	6413      	str	r3, [r2, #64]	; 0x40
 800a91a:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <HAL_RCC_OscConfig+0x2ac>)
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a926:	2301      	movs	r3, #1
 800a928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a92a:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <HAL_RCC_OscConfig+0x2b8>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d121      	bne.n	800a97a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a936:	4b08      	ldr	r3, [pc, #32]	; (800a958 <HAL_RCC_OscConfig+0x2b8>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a07      	ldr	r2, [pc, #28]	; (800a958 <HAL_RCC_OscConfig+0x2b8>)
 800a93c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a942:	f7fd fc9f 	bl	8008284 <HAL_GetTick>
 800a946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a948:	e011      	b.n	800a96e <HAL_RCC_OscConfig+0x2ce>
 800a94a:	bf00      	nop
 800a94c:	40023800 	.word	0x40023800
 800a950:	42470000 	.word	0x42470000
 800a954:	42470e80 	.word	0x42470e80
 800a958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a95c:	f7fd fc92 	bl	8008284 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d901      	bls.n	800a96e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e0fd      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a96e:	4b81      	ldr	r3, [pc, #516]	; (800ab74 <HAL_RCC_OscConfig+0x4d4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0f0      	beq.n	800a95c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d106      	bne.n	800a990 <HAL_RCC_OscConfig+0x2f0>
 800a982:	4b7d      	ldr	r3, [pc, #500]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a986:	4a7c      	ldr	r2, [pc, #496]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	6713      	str	r3, [r2, #112]	; 0x70
 800a98e:	e01c      	b.n	800a9ca <HAL_RCC_OscConfig+0x32a>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	2b05      	cmp	r3, #5
 800a996:	d10c      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x312>
 800a998:	4b77      	ldr	r3, [pc, #476]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a99c:	4a76      	ldr	r2, [pc, #472]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a99e:	f043 0304 	orr.w	r3, r3, #4
 800a9a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a9a4:	4b74      	ldr	r3, [pc, #464]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a8:	4a73      	ldr	r2, [pc, #460]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a9b0:	e00b      	b.n	800a9ca <HAL_RCC_OscConfig+0x32a>
 800a9b2:	4b71      	ldr	r3, [pc, #452]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	4a70      	ldr	r2, [pc, #448]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9b8:	f023 0301 	bic.w	r3, r3, #1
 800a9bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a9be:	4b6e      	ldr	r3, [pc, #440]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c2:	4a6d      	ldr	r2, [pc, #436]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d015      	beq.n	800a9fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9d2:	f7fd fc57 	bl	8008284 <HAL_GetTick>
 800a9d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9d8:	e00a      	b.n	800a9f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9da:	f7fd fc53 	bl	8008284 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d901      	bls.n	800a9f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e0bc      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9f0:	4b61      	ldr	r3, [pc, #388]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800a9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0ee      	beq.n	800a9da <HAL_RCC_OscConfig+0x33a>
 800a9fc:	e014      	b.n	800aa28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9fe:	f7fd fc41 	bl	8008284 <HAL_GetTick>
 800aa02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa04:	e00a      	b.n	800aa1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa06:	f7fd fc3d 	bl	8008284 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d901      	bls.n	800aa1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e0a6      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa1c:	4b56      	ldr	r3, [pc, #344]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aa1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ee      	bne.n	800aa06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d105      	bne.n	800aa3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa2e:	4b52      	ldr	r3, [pc, #328]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	4a51      	ldr	r2, [pc, #324]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aa34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8092 	beq.w	800ab68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa44:	4b4c      	ldr	r3, [pc, #304]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f003 030c 	and.w	r3, r3, #12
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d05c      	beq.n	800ab0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d141      	bne.n	800aadc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa58:	4b48      	ldr	r3, [pc, #288]	; (800ab7c <HAL_RCC_OscConfig+0x4dc>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa5e:	f7fd fc11 	bl	8008284 <HAL_GetTick>
 800aa62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa64:	e008      	b.n	800aa78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa66:	f7fd fc0d 	bl	8008284 <HAL_GetTick>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d901      	bls.n	800aa78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e078      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa78:	4b3f      	ldr	r3, [pc, #252]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1f0      	bne.n	800aa66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	69da      	ldr	r2, [r3, #28]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	431a      	orrs	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	019b      	lsls	r3, r3, #6
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	061b      	lsls	r3, r3, #24
 800aaa8:	4933      	ldr	r1, [pc, #204]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaae:	4b33      	ldr	r3, [pc, #204]	; (800ab7c <HAL_RCC_OscConfig+0x4dc>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aab4:	f7fd fbe6 	bl	8008284 <HAL_GetTick>
 800aab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaba:	e008      	b.n	800aace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aabc:	f7fd fbe2 	bl	8008284 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d901      	bls.n	800aace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e04d      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aace:	4b2a      	ldr	r3, [pc, #168]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0f0      	beq.n	800aabc <HAL_RCC_OscConfig+0x41c>
 800aada:	e045      	b.n	800ab68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aadc:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <HAL_RCC_OscConfig+0x4dc>)
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aae2:	f7fd fbcf 	bl	8008284 <HAL_GetTick>
 800aae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aae8:	e008      	b.n	800aafc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aaea:	f7fd fbcb 	bl	8008284 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d901      	bls.n	800aafc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e036      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aafc:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1f0      	bne.n	800aaea <HAL_RCC_OscConfig+0x44a>
 800ab08:	e02e      	b.n	800ab68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d101      	bne.n	800ab16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e029      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ab16:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <HAL_RCC_OscConfig+0x4d8>)
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d11c      	bne.n	800ab64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d115      	bne.n	800ab64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ab3e:	4013      	ands	r3, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d106      	bne.n	800ab64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d001      	beq.n	800ab68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	40007000 	.word	0x40007000
 800ab78:	40023800 	.word	0x40023800
 800ab7c:	42470060 	.word	0x42470060

0800ab80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e0cc      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab94:	4b68      	ldr	r3, [pc, #416]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 030f 	and.w	r3, r3, #15
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d90c      	bls.n	800abbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba2:	4b65      	ldr	r3, [pc, #404]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abaa:	4b63      	ldr	r3, [pc, #396]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d001      	beq.n	800abbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e0b8      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d020      	beq.n	800ac0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abd4:	4b59      	ldr	r3, [pc, #356]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	4a58      	ldr	r2, [pc, #352]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800abda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800abde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0308 	and.w	r3, r3, #8
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d005      	beq.n	800abf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abec:	4b53      	ldr	r3, [pc, #332]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	4a52      	ldr	r2, [pc, #328]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800abf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800abf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abf8:	4b50      	ldr	r3, [pc, #320]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	494d      	ldr	r1, [pc, #308]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d044      	beq.n	800aca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d107      	bne.n	800ac2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac1e:	4b47      	ldr	r3, [pc, #284]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d119      	bne.n	800ac5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e07f      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d003      	beq.n	800ac3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d107      	bne.n	800ac4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac3e:	4b3f      	ldr	r3, [pc, #252]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e06f      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac4e:	4b3b      	ldr	r3, [pc, #236]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e067      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac5e:	4b37      	ldr	r3, [pc, #220]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	f023 0203 	bic.w	r2, r3, #3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	4934      	ldr	r1, [pc, #208]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac70:	f7fd fb08 	bl	8008284 <HAL_GetTick>
 800ac74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac76:	e00a      	b.n	800ac8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac78:	f7fd fb04 	bl	8008284 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d901      	bls.n	800ac8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e04f      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac8e:	4b2b      	ldr	r3, [pc, #172]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 020c 	and.w	r2, r3, #12
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d1eb      	bne.n	800ac78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aca0:	4b25      	ldr	r3, [pc, #148]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 030f 	and.w	r3, r3, #15
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d20c      	bcs.n	800acc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acae:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	b2d2      	uxtb	r2, r2
 800acb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acb6:	4b20      	ldr	r3, [pc, #128]	; (800ad38 <HAL_RCC_ClockConfig+0x1b8>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d001      	beq.n	800acc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e032      	b.n	800ad2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d008      	beq.n	800ace6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acd4:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	4916      	ldr	r1, [pc, #88]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0308 	and.w	r3, r3, #8
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d009      	beq.n	800ad06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	490e      	ldr	r1, [pc, #56]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ad06:	f000 f821 	bl	800ad4c <HAL_RCC_GetSysClockFreq>
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <HAL_RCC_ClockConfig+0x1bc>)
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	091b      	lsrs	r3, r3, #4
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	4a0a      	ldr	r2, [pc, #40]	; (800ad40 <HAL_RCC_ClockConfig+0x1c0>)
 800ad18:	5cd3      	ldrb	r3, [r2, r3]
 800ad1a:	fa21 f303 	lsr.w	r3, r1, r3
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <HAL_RCC_ClockConfig+0x1c4>)
 800ad20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <HAL_RCC_ClockConfig+0x1c8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fd fa68 	bl	80081fc <HAL_InitTick>

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40023c00 	.word	0x40023c00
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	0800de98 	.word	0x0800de98
 800ad44:	20000000 	.word	0x20000000
 800ad48:	200002c0 	.word	0x200002c0

0800ad4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	607b      	str	r3, [r7, #4]
 800ad56:	2300      	movs	r3, #0
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad62:	4b50      	ldr	r3, [pc, #320]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f003 030c 	and.w	r3, r3, #12
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	d007      	beq.n	800ad7e <HAL_RCC_GetSysClockFreq+0x32>
 800ad6e:	2b08      	cmp	r3, #8
 800ad70:	d008      	beq.n	800ad84 <HAL_RCC_GetSysClockFreq+0x38>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 808d 	bne.w	800ae92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad78:	4b4b      	ldr	r3, [pc, #300]	; (800aea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ad7a:	60bb      	str	r3, [r7, #8]
       break;
 800ad7c:	e08c      	b.n	800ae98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad7e:	4b4b      	ldr	r3, [pc, #300]	; (800aeac <HAL_RCC_GetSysClockFreq+0x160>)
 800ad80:	60bb      	str	r3, [r7, #8]
      break;
 800ad82:	e089      	b.n	800ae98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad84:	4b47      	ldr	r3, [pc, #284]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad8e:	4b45      	ldr	r3, [pc, #276]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d023      	beq.n	800ade2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad9a:	4b42      	ldr	r3, [pc, #264]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	099b      	lsrs	r3, r3, #6
 800ada0:	f04f 0400 	mov.w	r4, #0
 800ada4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ada8:	f04f 0200 	mov.w	r2, #0
 800adac:	ea03 0501 	and.w	r5, r3, r1
 800adb0:	ea04 0602 	and.w	r6, r4, r2
 800adb4:	4a3d      	ldr	r2, [pc, #244]	; (800aeac <HAL_RCC_GetSysClockFreq+0x160>)
 800adb6:	fb02 f106 	mul.w	r1, r2, r6
 800adba:	2200      	movs	r2, #0
 800adbc:	fb02 f205 	mul.w	r2, r2, r5
 800adc0:	440a      	add	r2, r1
 800adc2:	493a      	ldr	r1, [pc, #232]	; (800aeac <HAL_RCC_GetSysClockFreq+0x160>)
 800adc4:	fba5 0101 	umull	r0, r1, r5, r1
 800adc8:	1853      	adds	r3, r2, r1
 800adca:	4619      	mov	r1, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f04f 0400 	mov.w	r4, #0
 800add2:	461a      	mov	r2, r3
 800add4:	4623      	mov	r3, r4
 800add6:	f7f5 fa53 	bl	8000280 <__aeabi_uldivmod>
 800adda:	4603      	mov	r3, r0
 800addc:	460c      	mov	r4, r1
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e049      	b.n	800ae76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ade2:	4b30      	ldr	r3, [pc, #192]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	099b      	lsrs	r3, r3, #6
 800ade8:	f04f 0400 	mov.w	r4, #0
 800adec:	f240 11ff 	movw	r1, #511	; 0x1ff
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	ea03 0501 	and.w	r5, r3, r1
 800adf8:	ea04 0602 	and.w	r6, r4, r2
 800adfc:	4629      	mov	r1, r5
 800adfe:	4632      	mov	r2, r6
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	f04f 0400 	mov.w	r4, #0
 800ae08:	0154      	lsls	r4, r2, #5
 800ae0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ae0e:	014b      	lsls	r3, r1, #5
 800ae10:	4619      	mov	r1, r3
 800ae12:	4622      	mov	r2, r4
 800ae14:	1b49      	subs	r1, r1, r5
 800ae16:	eb62 0206 	sbc.w	r2, r2, r6
 800ae1a:	f04f 0300 	mov.w	r3, #0
 800ae1e:	f04f 0400 	mov.w	r4, #0
 800ae22:	0194      	lsls	r4, r2, #6
 800ae24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ae28:	018b      	lsls	r3, r1, #6
 800ae2a:	1a5b      	subs	r3, r3, r1
 800ae2c:	eb64 0402 	sbc.w	r4, r4, r2
 800ae30:	f04f 0100 	mov.w	r1, #0
 800ae34:	f04f 0200 	mov.w	r2, #0
 800ae38:	00e2      	lsls	r2, r4, #3
 800ae3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ae3e:	00d9      	lsls	r1, r3, #3
 800ae40:	460b      	mov	r3, r1
 800ae42:	4614      	mov	r4, r2
 800ae44:	195b      	adds	r3, r3, r5
 800ae46:	eb44 0406 	adc.w	r4, r4, r6
 800ae4a:	f04f 0100 	mov.w	r1, #0
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	02a2      	lsls	r2, r4, #10
 800ae54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ae58:	0299      	lsls	r1, r3, #10
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	4621      	mov	r1, r4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f04f 0400 	mov.w	r4, #0
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	f7f5 fa08 	bl	8000280 <__aeabi_uldivmod>
 800ae70:	4603      	mov	r3, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ae76:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <HAL_RCC_GetSysClockFreq+0x158>)
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	0c1b      	lsrs	r3, r3, #16
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	3301      	adds	r3, #1
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8e:	60bb      	str	r3, [r7, #8]
      break;
 800ae90:	e002      	b.n	800ae98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ae94:	60bb      	str	r3, [r7, #8]
      break;
 800ae96:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae98:	68bb      	ldr	r3, [r7, #8]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea2:	bf00      	nop
 800aea4:	40023800 	.word	0x40023800
 800aea8:	00f42400 	.word	0x00f42400
 800aeac:	017d7840 	.word	0x017d7840

0800aeb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aeb4:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <HAL_RCC_GetHCLKFreq+0x14>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20000000 	.word	0x20000000

0800aec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aecc:	f7ff fff0 	bl	800aeb0 <HAL_RCC_GetHCLKFreq>
 800aed0:	4601      	mov	r1, r0
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	0a9b      	lsrs	r3, r3, #10
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	4a03      	ldr	r2, [pc, #12]	; (800aeec <HAL_RCC_GetPCLK1Freq+0x24>)
 800aede:	5cd3      	ldrb	r3, [r2, r3]
 800aee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	40023800 	.word	0x40023800
 800aeec:	0800dea8 	.word	0x0800dea8

0800aef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aef4:	f7ff ffdc 	bl	800aeb0 <HAL_RCC_GetHCLKFreq>
 800aef8:	4601      	mov	r1, r0
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	0b5b      	lsrs	r3, r3, #13
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	4a03      	ldr	r2, [pc, #12]	; (800af14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af06:	5cd3      	ldrb	r3, [r2, r3]
 800af08:	fa21 f303 	lsr.w	r3, r1, r3
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	40023800 	.word	0x40023800
 800af14:	0800dea8 	.word	0x0800dea8

0800af18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e056      	b.n	800afd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7f7 fb97 	bl	8002678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2202      	movs	r2, #2
 800af4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	431a      	orrs	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	431a      	orrs	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af86:	431a      	orrs	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	431a      	orrs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	ea42 0103 	orr.w	r1, r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	0c1b      	lsrs	r3, r3, #16
 800afa8:	f003 0104 	and.w	r1, r3, #4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69da      	ldr	r2, [r3, #28]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e01d      	b.n	800b02e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7f7 fb7e 	bl	8002708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f000 fc0c 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68da      	ldr	r2, [r3, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f042 0201 	orr.w	r2, r2, #1
 800b04c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b06      	cmp	r3, #6
 800b05e:	d007      	beq.n	800b070 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f042 0201 	orr.w	r2, r2, #1
 800b06e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e01d      	b.n	800b0cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f815 	bl	800b0d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f000 fbbd 	bl	800b83c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fe44 	bl	800bd88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a10      	ldr	r2, [pc, #64]	; (800b148 <HAL_TIM_PWM_Start+0x60>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d107      	bne.n	800b11a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b06      	cmp	r3, #6
 800b12a:	d007      	beq.n	800b13c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0201 	orr.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40010000 	.word	0x40010000

0800b14c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e083      	b.n	800b268 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7f7 fb33 	bl	80027e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2202      	movs	r2, #2
 800b17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b190:	f023 0307 	bic.w	r3, r3, #7
 800b194:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f000 fb4b 	bl	800b83c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6a1b      	ldr	r3, [r3, #32]
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ce:	f023 0303 	bic.w	r3, r3, #3
 800b1d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b1ec:	f023 030c 	bic.w	r3, r3, #12
 800b1f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	4313      	orrs	r3, r2
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	011a      	lsls	r2, r3, #4
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	031b      	lsls	r3, r3, #12
 800b21c:	4313      	orrs	r3, r2
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	4313      	orrs	r3, r2
 800b222:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b22a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	011b      	lsls	r3, r3, #4
 800b23e:	4313      	orrs	r3, r2
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <HAL_TIM_Encoder_Start+0x16>
 800b280:	2b04      	cmp	r3, #4
 800b282:	d008      	beq.n	800b296 <HAL_TIM_Encoder_Start+0x26>
 800b284:	e00f      	b.n	800b2a6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2201      	movs	r2, #1
 800b28c:	2100      	movs	r1, #0
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fd7a 	bl	800bd88 <TIM_CCxChannelCmd>
      break;
 800b294:	e016      	b.n	800b2c4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2201      	movs	r2, #1
 800b29c:	2104      	movs	r1, #4
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fd72 	bl	800bd88 <TIM_CCxChannelCmd>
      break;
 800b2a4:	e00e      	b.n	800b2c4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fd6a 	bl	800bd88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	2104      	movs	r1, #4
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fd63 	bl	800bd88 <TIM_CCxChannelCmd>
      break;
 800b2c2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0201 	orr.w	r2, r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	f003 0302 	and.w	r3, r3, #2
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d122      	bne.n	800b33a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d11b      	bne.n	800b33a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f06f 0202 	mvn.w	r2, #2
 800b30a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fa6c 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b326:	e005      	b.n	800b334 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fa5e 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa6f 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b04      	cmp	r3, #4
 800b346:	d122      	bne.n	800b38e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b04      	cmp	r3, #4
 800b354:	d11b      	bne.n	800b38e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f06f 0204 	mvn.w	r2, #4
 800b35e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa42 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b37a:	e005      	b.n	800b388 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fa34 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa45 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	f003 0308 	and.w	r3, r3, #8
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d122      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	f003 0308 	and.w	r3, r3, #8
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	d11b      	bne.n	800b3e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f06f 0208 	mvn.w	r2, #8
 800b3b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fa18 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b3ce:	e005      	b.n	800b3dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fa0a 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa1b 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f003 0310 	and.w	r3, r3, #16
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d122      	bne.n	800b436 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	f003 0310 	and.w	r3, r3, #16
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	d11b      	bne.n	800b436 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f06f 0210 	mvn.w	r2, #16
 800b406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2208      	movs	r2, #8
 800b40c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f9ee 	bl	800b7fe <HAL_TIM_IC_CaptureCallback>
 800b422:	e005      	b.n	800b430 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f9e0 	bl	800b7ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f9f1 	bl	800b812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b01      	cmp	r3, #1
 800b442:	d10e      	bne.n	800b462 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d107      	bne.n	800b462 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f06f 0201 	mvn.w	r2, #1
 800b45a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7f5 fb77 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46c:	2b80      	cmp	r3, #128	; 0x80
 800b46e:	d10e      	bne.n	800b48e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47a:	2b80      	cmp	r3, #128	; 0x80
 800b47c:	d107      	bne.n	800b48e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fd6d 	bl	800bf68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b498:	2b40      	cmp	r3, #64	; 0x40
 800b49a:	d10e      	bne.n	800b4ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a6:	2b40      	cmp	r3, #64	; 0x40
 800b4a8:	d107      	bne.n	800b4ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f9b6 	bl	800b826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	f003 0320 	and.w	r3, r3, #32
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	d10e      	bne.n	800b4e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b20      	cmp	r3, #32
 800b4d4:	d107      	bne.n	800b4e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f06f 0220 	mvn.w	r2, #32
 800b4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fd37 	bl	800bf54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b506:	2302      	movs	r3, #2
 800b508:	e0b4      	b.n	800b674 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2202      	movs	r2, #2
 800b516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b0c      	cmp	r3, #12
 800b51e:	f200 809f 	bhi.w	800b660 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b55d 	.word	0x0800b55d
 800b52c:	0800b661 	.word	0x0800b661
 800b530:	0800b661 	.word	0x0800b661
 800b534:	0800b661 	.word	0x0800b661
 800b538:	0800b59d 	.word	0x0800b59d
 800b53c:	0800b661 	.word	0x0800b661
 800b540:	0800b661 	.word	0x0800b661
 800b544:	0800b661 	.word	0x0800b661
 800b548:	0800b5df 	.word	0x0800b5df
 800b54c:	0800b661 	.word	0x0800b661
 800b550:	0800b661 	.word	0x0800b661
 800b554:	0800b661 	.word	0x0800b661
 800b558:	0800b61f 	.word	0x0800b61f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	4618      	mov	r0, r3
 800b564:	f000 f9ea 	bl	800b93c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	699a      	ldr	r2, [r3, #24]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f042 0208 	orr.w	r2, r2, #8
 800b576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699a      	ldr	r2, [r3, #24]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0204 	bic.w	r2, r2, #4
 800b586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6999      	ldr	r1, [r3, #24]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	619a      	str	r2, [r3, #24]
      break;
 800b59a:	e062      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fa30 	bl	800ba08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6999      	ldr	r1, [r3, #24]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	021a      	lsls	r2, r3, #8
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	619a      	str	r2, [r3, #24]
      break;
 800b5dc:	e041      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fa7b 	bl	800bae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	69da      	ldr	r2, [r3, #28]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0208 	orr.w	r2, r2, #8
 800b5f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69da      	ldr	r2, [r3, #28]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0204 	bic.w	r2, r2, #4
 800b608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69d9      	ldr	r1, [r3, #28]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	61da      	str	r2, [r3, #28]
      break;
 800b61c:	e021      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fac5 	bl	800bbb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69da      	ldr	r2, [r3, #28]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	69da      	ldr	r2, [r3, #28]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69d9      	ldr	r1, [r3, #28]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	021a      	lsls	r2, r3, #8
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	61da      	str	r2, [r3, #28]
      break;
 800b65e:	e000      	b.n	800b662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b660:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIM_ConfigClockSource+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e0a6      	b.n	800b7e2 <HAL_TIM_ConfigClockSource+0x166>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d067      	beq.n	800b79c <HAL_TIM_ConfigClockSource+0x120>
 800b6cc:	2b40      	cmp	r3, #64	; 0x40
 800b6ce:	d80b      	bhi.n	800b6e8 <HAL_TIM_ConfigClockSource+0x6c>
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d073      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
 800b6d4:	2b10      	cmp	r3, #16
 800b6d6:	d802      	bhi.n	800b6de <HAL_TIM_ConfigClockSource+0x62>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d06f      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b6dc:	e078      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d06c      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
 800b6e2:	2b30      	cmp	r3, #48	; 0x30
 800b6e4:	d06a      	beq.n	800b7bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b6e6:	e073      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6e8:	2b70      	cmp	r3, #112	; 0x70
 800b6ea:	d00d      	beq.n	800b708 <HAL_TIM_ConfigClockSource+0x8c>
 800b6ec:	2b70      	cmp	r3, #112	; 0x70
 800b6ee:	d804      	bhi.n	800b6fa <HAL_TIM_ConfigClockSource+0x7e>
 800b6f0:	2b50      	cmp	r3, #80	; 0x50
 800b6f2:	d033      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0xe0>
 800b6f4:	2b60      	cmp	r3, #96	; 0x60
 800b6f6:	d041      	beq.n	800b77c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b6f8:	e06a      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fe:	d066      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x152>
 800b700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b704:	d017      	beq.n	800b736 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b706:	e063      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	6899      	ldr	r1, [r3, #8]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f000 fb16 	bl	800bd48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b72a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	609a      	str	r2, [r3, #8]
      break;
 800b734:	e04c      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	6899      	ldr	r1, [r3, #8]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f000 faff 	bl	800bd48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689a      	ldr	r2, [r3, #8]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b758:	609a      	str	r2, [r3, #8]
      break;
 800b75a:	e039      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6859      	ldr	r1, [r3, #4]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	461a      	mov	r2, r3
 800b76a:	f000 fa73 	bl	800bc54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2150      	movs	r1, #80	; 0x50
 800b774:	4618      	mov	r0, r3
 800b776:	f000 facc 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b77a:	e029      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	6859      	ldr	r1, [r3, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	461a      	mov	r2, r3
 800b78a:	f000 fa92 	bl	800bcb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2160      	movs	r1, #96	; 0x60
 800b794:	4618      	mov	r0, r3
 800b796:	f000 fabc 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b79a:	e019      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	6859      	ldr	r1, [r3, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	f000 fa53 	bl	800bc54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2140      	movs	r1, #64	; 0x40
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 faac 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b7ba:	e009      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f000 faa3 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b7cc:	e000      	b.n	800b7d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b7ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b81a:	bf00      	nop
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a34      	ldr	r2, [pc, #208]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00f      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b85a:	d00b      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a31      	ldr	r2, [pc, #196]	; (800b924 <TIM_Base_SetConfig+0xe8>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d007      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a30      	ldr	r2, [pc, #192]	; (800b928 <TIM_Base_SetConfig+0xec>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d003      	beq.n	800b874 <TIM_Base_SetConfig+0x38>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a2f      	ldr	r2, [pc, #188]	; (800b92c <TIM_Base_SetConfig+0xf0>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d108      	bne.n	800b886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a25      	ldr	r2, [pc, #148]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d01b      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b894:	d017      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a22      	ldr	r2, [pc, #136]	; (800b924 <TIM_Base_SetConfig+0xe8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d013      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a21      	ldr	r2, [pc, #132]	; (800b928 <TIM_Base_SetConfig+0xec>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00f      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a20      	ldr	r2, [pc, #128]	; (800b92c <TIM_Base_SetConfig+0xf0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00b      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a1f      	ldr	r2, [pc, #124]	; (800b930 <TIM_Base_SetConfig+0xf4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d007      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a1e      	ldr	r2, [pc, #120]	; (800b934 <TIM_Base_SetConfig+0xf8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d003      	beq.n	800b8c6 <TIM_Base_SetConfig+0x8a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a1d      	ldr	r2, [pc, #116]	; (800b938 <TIM_Base_SetConfig+0xfc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d108      	bne.n	800b8d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	689a      	ldr	r2, [r3, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a08      	ldr	r2, [pc, #32]	; (800b920 <TIM_Base_SetConfig+0xe4>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d103      	bne.n	800b90c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	691a      	ldr	r2, [r3, #16]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	615a      	str	r2, [r3, #20]
}
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	40010000 	.word	0x40010000
 800b924:	40000400 	.word	0x40000400
 800b928:	40000800 	.word	0x40000800
 800b92c:	40000c00 	.word	0x40000c00
 800b930:	40014000 	.word	0x40014000
 800b934:	40014400 	.word	0x40014400
 800b938:	40014800 	.word	0x40014800

0800b93c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	f023 0201 	bic.w	r2, r3, #1
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f023 0302 	bic.w	r3, r3, #2
 800b984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1c      	ldr	r2, [pc, #112]	; (800ba04 <TIM_OC1_SetConfig+0xc8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d10c      	bne.n	800b9b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0308 	bic.w	r3, r3, #8
 800b99e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f023 0304 	bic.w	r3, r3, #4
 800b9b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <TIM_OC1_SetConfig+0xc8>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d111      	bne.n	800b9de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	621a      	str	r2, [r3, #32]
}
 800b9f8:	bf00      	nop
 800b9fa:	371c      	adds	r7, #28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	40010000 	.word	0x40010000

0800ba08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	f023 0210 	bic.w	r2, r3, #16
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	021b      	lsls	r3, r3, #8
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0320 	bic.w	r3, r3, #32
 800ba52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a1e      	ldr	r2, [pc, #120]	; (800badc <TIM_OC2_SetConfig+0xd4>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d10d      	bne.n	800ba84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a15      	ldr	r2, [pc, #84]	; (800badc <TIM_OC2_SetConfig+0xd4>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d113      	bne.n	800bab4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	621a      	str	r2, [r3, #32]
}
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	40010000 	.word	0x40010000

0800bae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0303 	bic.w	r3, r3, #3
 800bb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a1d      	ldr	r2, [pc, #116]	; (800bbb0 <TIM_OC3_SetConfig+0xd0>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10d      	bne.n	800bb5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a14      	ldr	r2, [pc, #80]	; (800bbb0 <TIM_OC3_SetConfig+0xd0>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d113      	bne.n	800bb8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	621a      	str	r2, [r3, #32]
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	40010000 	.word	0x40010000

0800bbb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	031b      	lsls	r3, r3, #12
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a10      	ldr	r2, [pc, #64]	; (800bc50 <TIM_OC4_SetConfig+0x9c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d109      	bne.n	800bc28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	40010000 	.word	0x40010000

0800bc54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	f023 0201 	bic.w	r2, r3, #1
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f023 030a 	bic.w	r3, r3, #10
 800bc90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	621a      	str	r2, [r3, #32]
}
 800bca6:	bf00      	nop
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b087      	sub	sp, #28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	f023 0210 	bic.w	r2, r3, #16
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	031b      	lsls	r3, r3, #12
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	011b      	lsls	r3, r3, #4
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	621a      	str	r2, [r3, #32]
}
 800bd06:	bf00      	nop
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b085      	sub	sp, #20
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f043 0307 	orr.w	r3, r3, #7
 800bd34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	609a      	str	r2, [r3, #8]
}
 800bd3c:	bf00      	nop
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	021a      	lsls	r2, r3, #8
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	609a      	str	r2, [r3, #8]
}
 800bd7c:	bf00      	nop
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a1a      	ldr	r2, [r3, #32]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	401a      	ands	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6a1a      	ldr	r2, [r3, #32]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f003 031f 	and.w	r3, r3, #31
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e050      	b.n	800be8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a1c      	ldr	r2, [pc, #112]	; (800be9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d018      	beq.n	800be62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be38:	d013      	beq.n	800be62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a18      	ldr	r2, [pc, #96]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d00e      	beq.n	800be62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a16      	ldr	r2, [pc, #88]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d009      	beq.n	800be62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a15      	ldr	r2, [pc, #84]	; (800bea8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d004      	beq.n	800be62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a13      	ldr	r2, [pc, #76]	; (800beac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d10c      	bne.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	4313      	orrs	r3, r2
 800be72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	40010000 	.word	0x40010000
 800bea0:	40000400 	.word	0x40000400
 800bea4:	40000800 	.word	0x40000800
 800bea8:	40000c00 	.word	0x40000c00
 800beac:	40014000 	.word	0x40014000

0800beb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d101      	bne.n	800becc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bec8:	2302      	movs	r3, #2
 800beca:	e03d      	b.n	800bf48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	4313      	orrs	r3, r2
 800befc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e03f      	b.n	800c00e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7f6 fcd8 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2224      	movs	r2, #36	; 0x24
 800bfac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68da      	ldr	r2, [r3, #12]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fb83 	bl	800c6cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	691a      	ldr	r2, [r3, #16]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	695a      	ldr	r2, [r3, #20]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68da      	ldr	r2, [r3, #12]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2220      	movs	r2, #32
 800c008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b088      	sub	sp, #32
 800c01a:	af02      	add	r7, sp, #8
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	603b      	str	r3, [r7, #0]
 800c022:	4613      	mov	r3, r2
 800c024:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b20      	cmp	r3, #32
 800c034:	f040 8083 	bne.w	800c13e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <HAL_UART_Transmit+0x2e>
 800c03e:	88fb      	ldrh	r3, [r7, #6]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e07b      	b.n	800c140 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_UART_Transmit+0x40>
 800c052:	2302      	movs	r3, #2
 800c054:	e074      	b.n	800c140 <HAL_UART_Transmit+0x12a>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2221      	movs	r2, #33	; 0x21
 800c068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c06c:	f7fc f90a 	bl	8008284 <HAL_GetTick>
 800c070:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	88fa      	ldrh	r2, [r7, #6]
 800c076:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	88fa      	ldrh	r2, [r7, #6]
 800c07c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c086:	e042      	b.n	800c10e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09e:	d122      	bne.n	800c0e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2180      	movs	r1, #128	; 0x80
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f9a2 	bl	800c3f4 <UART_WaitOnFlagUntilTimeout>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e042      	b.n	800c140 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	3302      	adds	r3, #2
 800c0da:	60bb      	str	r3, [r7, #8]
 800c0dc:	e017      	b.n	800c10e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	60bb      	str	r3, [r7, #8]
 800c0e4:	e013      	b.n	800c10e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2180      	movs	r1, #128	; 0x80
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f000 f97f 	bl	800c3f4 <UART_WaitOnFlagUntilTimeout>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e01f      	b.n	800c140 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	60ba      	str	r2, [r7, #8]
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c112:	b29b      	uxth	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1b7      	bne.n	800c088 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	2200      	movs	r2, #0
 800c120:	2140      	movs	r1, #64	; 0x40
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 f966 	bl	800c3f4 <UART_WaitOnFlagUntilTimeout>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e006      	b.n	800c140 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2220      	movs	r2, #32
 800c136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	e000      	b.n	800c140 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c13e:	2302      	movs	r3, #2
  }
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d140      	bne.n	800c1e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <HAL_UART_Receive_IT+0x26>
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e039      	b.n	800c1e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d101      	bne.n	800c180 <HAL_UART_Receive_IT+0x38>
 800c17c:	2302      	movs	r3, #2
 800c17e:	e032      	b.n	800c1e6 <HAL_UART_Receive_IT+0x9e>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	88fa      	ldrh	r2, [r7, #6]
 800c192:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	88fa      	ldrh	r2, [r7, #6]
 800c198:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2222      	movs	r2, #34	; 0x22
 800c1a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695a      	ldr	r2, [r3, #20]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0201 	orr.w	r2, r2, #1
 800c1ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0220 	orr.w	r2, r2, #32
 800c1de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e000      	b.n	800c1e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c1e4:	2302      	movs	r3, #2
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c214:	2300      	movs	r3, #0
 800c216:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	f003 030f 	and.w	r3, r3, #15
 800c222:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10d      	bne.n	800c246 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	f003 0320 	and.w	r3, r3, #32
 800c230:	2b00      	cmp	r3, #0
 800c232:	d008      	beq.n	800c246 <HAL_UART_IRQHandler+0x52>
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	f003 0320 	and.w	r3, r3, #32
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f9c2 	bl	800c5c8 <UART_Receive_IT>
      return;
 800c244:	e0d1      	b.n	800c3ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 80b0 	beq.w	800c3ae <HAL_UART_IRQHandler+0x1ba>
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d105      	bne.n	800c264 <HAL_UART_IRQHandler+0x70>
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 80a5 	beq.w	800c3ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00a      	beq.n	800c284 <HAL_UART_IRQHandler+0x90>
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c27c:	f043 0201 	orr.w	r2, r3, #1
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <HAL_UART_IRQHandler+0xb0>
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29c:	f043 0202 	orr.w	r2, r3, #2
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00a      	beq.n	800c2c4 <HAL_UART_IRQHandler+0xd0>
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2bc:	f043 0204 	orr.w	r2, r3, #4
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00f      	beq.n	800c2ee <HAL_UART_IRQHandler+0xfa>
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	f003 0320 	and.w	r3, r3, #32
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d104      	bne.n	800c2e2 <HAL_UART_IRQHandler+0xee>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d005      	beq.n	800c2ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2e6:	f043 0208 	orr.w	r2, r3, #8
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d078      	beq.n	800c3e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	f003 0320 	and.w	r3, r3, #32
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <HAL_UART_IRQHandler+0x11c>
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f95c 	bl	800c5c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31a:	2b40      	cmp	r3, #64	; 0x40
 800c31c:	bf0c      	ite	eq
 800c31e:	2301      	moveq	r3, #1
 800c320:	2300      	movne	r3, #0
 800c322:	b2db      	uxtb	r3, r3
 800c324:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32a:	f003 0308 	and.w	r3, r3, #8
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <HAL_UART_IRQHandler+0x144>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d031      	beq.n	800c39c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8a5 	bl	800c488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c348:	2b40      	cmp	r3, #64	; 0x40
 800c34a:	d123      	bne.n	800c394 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	695a      	ldr	r2, [r3, #20]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c35a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c360:	2b00      	cmp	r3, #0
 800c362:	d013      	beq.n	800c38c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c368:	4a21      	ldr	r2, [pc, #132]	; (800c3f0 <HAL_UART_IRQHandler+0x1fc>)
 800c36a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c370:	4618      	mov	r0, r3
 800c372:	f7fc fdb3 	bl	8008edc <HAL_DMA_Abort_IT>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d016      	beq.n	800c3aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c386:	4610      	mov	r0, r2
 800c388:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c38a:	e00e      	b.n	800c3aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7f4 fab5 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c392:	e00a      	b.n	800c3aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7f4 fab1 	bl	80008fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c39a:	e006      	b.n	800c3aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7f4 faad 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c3a8:	e01e      	b.n	800c3e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3aa:	bf00      	nop
    return;
 800c3ac:	e01c      	b.n	800c3e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_UART_IRQHandler+0x1d6>
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d003      	beq.n	800c3ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f892 	bl	800c4ec <UART_Transmit_IT>
    return;
 800c3c8:	e00f      	b.n	800c3ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <HAL_UART_IRQHandler+0x1f6>
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d005      	beq.n	800c3ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f8da 	bl	800c598 <UART_EndTransmit_IT>
    return;
 800c3e4:	bf00      	nop
 800c3e6:	e000      	b.n	800c3ea <HAL_UART_IRQHandler+0x1f6>
    return;
 800c3e8:	bf00      	nop
  }
}
 800c3ea:	3720      	adds	r7, #32
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	0800c4c5 	.word	0x0800c4c5

0800c3f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	4613      	mov	r3, r2
 800c402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c404:	e02c      	b.n	800c460 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d028      	beq.n	800c460 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <UART_WaitOnFlagUntilTimeout+0x30>
 800c414:	f7fb ff36 	bl	8008284 <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	429a      	cmp	r2, r3
 800c422:	d21d      	bcs.n	800c460 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c432:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	695a      	ldr	r2, [r3, #20]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 0201 	bic.w	r2, r2, #1
 800c442:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2220      	movs	r2, #32
 800c448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2220      	movs	r2, #32
 800c450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e00f      	b.n	800c480 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	4013      	ands	r3, r2
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	bf0c      	ite	eq
 800c470:	2301      	moveq	r3, #1
 800c472:	2300      	movne	r3, #0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	461a      	mov	r2, r3
 800c478:	79fb      	ldrb	r3, [r7, #7]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d0c3      	beq.n	800c406 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c49e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	695a      	ldr	r2, [r3, #20]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0201 	bic.w	r2, r2, #1
 800c4ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f7f4 fa0c 	bl	80008fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4e4:	bf00      	nop
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b21      	cmp	r3, #33	; 0x21
 800c4fe:	d144      	bne.n	800c58a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c508:	d11a      	bne.n	800c540 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c51e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d105      	bne.n	800c534 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	1c9a      	adds	r2, r3, #2
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	621a      	str	r2, [r3, #32]
 800c532:	e00e      	b.n	800c552 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	621a      	str	r2, [r3, #32]
 800c53e:	e008      	b.n	800c552 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6a1b      	ldr	r3, [r3, #32]
 800c544:	1c59      	adds	r1, r3, #1
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	6211      	str	r1, [r2, #32]
 800c54a:	781a      	ldrb	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c556:	b29b      	uxth	r3, r3
 800c558:	3b01      	subs	r3, #1
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	4619      	mov	r1, r3
 800c560:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10f      	bne.n	800c586 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68da      	ldr	r2, [r3, #12]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68da      	ldr	r2, [r3, #12]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	e000      	b.n	800c58c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c58a:	2302      	movs	r3, #2
  }
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68da      	ldr	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7f4 f98b 	bl	80008d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b22      	cmp	r3, #34	; 0x22
 800c5da:	d171      	bne.n	800c6c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5e4:	d123      	bne.n	800c62e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10e      	bne.n	800c612 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	b29a      	uxth	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60a:	1c9a      	adds	r2, r3, #2
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	629a      	str	r2, [r3, #40]	; 0x28
 800c610:	e029      	b.n	800c666 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	629a      	str	r2, [r3, #40]	; 0x28
 800c62c:	e01b      	b.n	800c666 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10a      	bne.n	800c64c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6858      	ldr	r0, [r3, #4]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	1c59      	adds	r1, r3, #1
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6291      	str	r1, [r2, #40]	; 0x28
 800c646:	b2c2      	uxtb	r2, r0
 800c648:	701a      	strb	r2, [r3, #0]
 800c64a:	e00c      	b.n	800c666 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	b2da      	uxtb	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c658:	1c58      	adds	r0, r3, #1
 800c65a:	6879      	ldr	r1, [r7, #4]
 800c65c:	6288      	str	r0, [r1, #40]	; 0x28
 800c65e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	3b01      	subs	r3, #1
 800c66e:	b29b      	uxth	r3, r3
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	4619      	mov	r1, r3
 800c674:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c676:	2b00      	cmp	r3, #0
 800c678:	d120      	bne.n	800c6bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f022 0220 	bic.w	r2, r2, #32
 800c688:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c698:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	695a      	ldr	r2, [r3, #20]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f022 0201 	bic.w	r2, r2, #1
 800c6a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7f4 f92e 	bl	8000914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e002      	b.n	800c6c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e000      	b.n	800c6c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c6c0:	2302      	movs	r3, #2
  }
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68da      	ldr	r2, [r3, #12]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	69db      	ldr	r3, [r3, #28]
 800c700:	4313      	orrs	r3, r2
 800c702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c70e:	f023 030c 	bic.w	r3, r3, #12
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6812      	ldr	r2, [r2, #0]
 800c716:	68f9      	ldr	r1, [r7, #12]
 800c718:	430b      	orrs	r3, r1
 800c71a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	430a      	orrs	r2, r1
 800c730:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c73a:	f040 818b 	bne.w	800ca54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4ac1      	ldr	r2, [pc, #772]	; (800ca48 <UART_SetConfig+0x37c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d005      	beq.n	800c754 <UART_SetConfig+0x88>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4abf      	ldr	r2, [pc, #764]	; (800ca4c <UART_SetConfig+0x380>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	f040 80bd 	bne.w	800c8ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c754:	f7fe fbcc 	bl	800aef0 <HAL_RCC_GetPCLK2Freq>
 800c758:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	461d      	mov	r5, r3
 800c75e:	f04f 0600 	mov.w	r6, #0
 800c762:	46a8      	mov	r8, r5
 800c764:	46b1      	mov	r9, r6
 800c766:	eb18 0308 	adds.w	r3, r8, r8
 800c76a:	eb49 0409 	adc.w	r4, r9, r9
 800c76e:	4698      	mov	r8, r3
 800c770:	46a1      	mov	r9, r4
 800c772:	eb18 0805 	adds.w	r8, r8, r5
 800c776:	eb49 0906 	adc.w	r9, r9, r6
 800c77a:	f04f 0100 	mov.w	r1, #0
 800c77e:	f04f 0200 	mov.w	r2, #0
 800c782:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c786:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c78a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c78e:	4688      	mov	r8, r1
 800c790:	4691      	mov	r9, r2
 800c792:	eb18 0005 	adds.w	r0, r8, r5
 800c796:	eb49 0106 	adc.w	r1, r9, r6
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	461d      	mov	r5, r3
 800c7a0:	f04f 0600 	mov.w	r6, #0
 800c7a4:	196b      	adds	r3, r5, r5
 800c7a6:	eb46 0406 	adc.w	r4, r6, r6
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	f7f3 fd67 	bl	8000280 <__aeabi_uldivmod>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	4ba5      	ldr	r3, [pc, #660]	; (800ca50 <UART_SetConfig+0x384>)
 800c7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	461d      	mov	r5, r3
 800c7c8:	f04f 0600 	mov.w	r6, #0
 800c7cc:	46a9      	mov	r9, r5
 800c7ce:	46b2      	mov	sl, r6
 800c7d0:	eb19 0309 	adds.w	r3, r9, r9
 800c7d4:	eb4a 040a 	adc.w	r4, sl, sl
 800c7d8:	4699      	mov	r9, r3
 800c7da:	46a2      	mov	sl, r4
 800c7dc:	eb19 0905 	adds.w	r9, r9, r5
 800c7e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800c7e4:	f04f 0100 	mov.w	r1, #0
 800c7e8:	f04f 0200 	mov.w	r2, #0
 800c7ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7f8:	4689      	mov	r9, r1
 800c7fa:	4692      	mov	sl, r2
 800c7fc:	eb19 0005 	adds.w	r0, r9, r5
 800c800:	eb4a 0106 	adc.w	r1, sl, r6
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	461d      	mov	r5, r3
 800c80a:	f04f 0600 	mov.w	r6, #0
 800c80e:	196b      	adds	r3, r5, r5
 800c810:	eb46 0406 	adc.w	r4, r6, r6
 800c814:	461a      	mov	r2, r3
 800c816:	4623      	mov	r3, r4
 800c818:	f7f3 fd32 	bl	8000280 <__aeabi_uldivmod>
 800c81c:	4603      	mov	r3, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	461a      	mov	r2, r3
 800c822:	4b8b      	ldr	r3, [pc, #556]	; (800ca50 <UART_SetConfig+0x384>)
 800c824:	fba3 1302 	umull	r1, r3, r3, r2
 800c828:	095b      	lsrs	r3, r3, #5
 800c82a:	2164      	movs	r1, #100	; 0x64
 800c82c:	fb01 f303 	mul.w	r3, r1, r3
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	3332      	adds	r3, #50	; 0x32
 800c836:	4a86      	ldr	r2, [pc, #536]	; (800ca50 <UART_SetConfig+0x384>)
 800c838:	fba2 2303 	umull	r2, r3, r2, r3
 800c83c:	095b      	lsrs	r3, r3, #5
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c844:	4498      	add	r8, r3
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	461d      	mov	r5, r3
 800c84a:	f04f 0600 	mov.w	r6, #0
 800c84e:	46a9      	mov	r9, r5
 800c850:	46b2      	mov	sl, r6
 800c852:	eb19 0309 	adds.w	r3, r9, r9
 800c856:	eb4a 040a 	adc.w	r4, sl, sl
 800c85a:	4699      	mov	r9, r3
 800c85c:	46a2      	mov	sl, r4
 800c85e:	eb19 0905 	adds.w	r9, r9, r5
 800c862:	eb4a 0a06 	adc.w	sl, sl, r6
 800c866:	f04f 0100 	mov.w	r1, #0
 800c86a:	f04f 0200 	mov.w	r2, #0
 800c86e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c872:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c876:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c87a:	4689      	mov	r9, r1
 800c87c:	4692      	mov	sl, r2
 800c87e:	eb19 0005 	adds.w	r0, r9, r5
 800c882:	eb4a 0106 	adc.w	r1, sl, r6
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	461d      	mov	r5, r3
 800c88c:	f04f 0600 	mov.w	r6, #0
 800c890:	196b      	adds	r3, r5, r5
 800c892:	eb46 0406 	adc.w	r4, r6, r6
 800c896:	461a      	mov	r2, r3
 800c898:	4623      	mov	r3, r4
 800c89a:	f7f3 fcf1 	bl	8000280 <__aeabi_uldivmod>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	4b6a      	ldr	r3, [pc, #424]	; (800ca50 <UART_SetConfig+0x384>)
 800c8a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c8aa:	095b      	lsrs	r3, r3, #5
 800c8ac:	2164      	movs	r1, #100	; 0x64
 800c8ae:	fb01 f303 	mul.w	r3, r1, r3
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	00db      	lsls	r3, r3, #3
 800c8b6:	3332      	adds	r3, #50	; 0x32
 800c8b8:	4a65      	ldr	r2, [pc, #404]	; (800ca50 <UART_SetConfig+0x384>)
 800c8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c8be:	095b      	lsrs	r3, r3, #5
 800c8c0:	f003 0207 	and.w	r2, r3, #7
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4442      	add	r2, r8
 800c8ca:	609a      	str	r2, [r3, #8]
 800c8cc:	e26f      	b.n	800cdae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c8ce:	f7fe fafb 	bl	800aec8 <HAL_RCC_GetPCLK1Freq>
 800c8d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	461d      	mov	r5, r3
 800c8d8:	f04f 0600 	mov.w	r6, #0
 800c8dc:	46a8      	mov	r8, r5
 800c8de:	46b1      	mov	r9, r6
 800c8e0:	eb18 0308 	adds.w	r3, r8, r8
 800c8e4:	eb49 0409 	adc.w	r4, r9, r9
 800c8e8:	4698      	mov	r8, r3
 800c8ea:	46a1      	mov	r9, r4
 800c8ec:	eb18 0805 	adds.w	r8, r8, r5
 800c8f0:	eb49 0906 	adc.w	r9, r9, r6
 800c8f4:	f04f 0100 	mov.w	r1, #0
 800c8f8:	f04f 0200 	mov.w	r2, #0
 800c8fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c900:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c904:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c908:	4688      	mov	r8, r1
 800c90a:	4691      	mov	r9, r2
 800c90c:	eb18 0005 	adds.w	r0, r8, r5
 800c910:	eb49 0106 	adc.w	r1, r9, r6
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	461d      	mov	r5, r3
 800c91a:	f04f 0600 	mov.w	r6, #0
 800c91e:	196b      	adds	r3, r5, r5
 800c920:	eb46 0406 	adc.w	r4, r6, r6
 800c924:	461a      	mov	r2, r3
 800c926:	4623      	mov	r3, r4
 800c928:	f7f3 fcaa 	bl	8000280 <__aeabi_uldivmod>
 800c92c:	4603      	mov	r3, r0
 800c92e:	460c      	mov	r4, r1
 800c930:	461a      	mov	r2, r3
 800c932:	4b47      	ldr	r3, [pc, #284]	; (800ca50 <UART_SetConfig+0x384>)
 800c934:	fba3 2302 	umull	r2, r3, r3, r2
 800c938:	095b      	lsrs	r3, r3, #5
 800c93a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	461d      	mov	r5, r3
 800c942:	f04f 0600 	mov.w	r6, #0
 800c946:	46a9      	mov	r9, r5
 800c948:	46b2      	mov	sl, r6
 800c94a:	eb19 0309 	adds.w	r3, r9, r9
 800c94e:	eb4a 040a 	adc.w	r4, sl, sl
 800c952:	4699      	mov	r9, r3
 800c954:	46a2      	mov	sl, r4
 800c956:	eb19 0905 	adds.w	r9, r9, r5
 800c95a:	eb4a 0a06 	adc.w	sl, sl, r6
 800c95e:	f04f 0100 	mov.w	r1, #0
 800c962:	f04f 0200 	mov.w	r2, #0
 800c966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c96a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c96e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c972:	4689      	mov	r9, r1
 800c974:	4692      	mov	sl, r2
 800c976:	eb19 0005 	adds.w	r0, r9, r5
 800c97a:	eb4a 0106 	adc.w	r1, sl, r6
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	461d      	mov	r5, r3
 800c984:	f04f 0600 	mov.w	r6, #0
 800c988:	196b      	adds	r3, r5, r5
 800c98a:	eb46 0406 	adc.w	r4, r6, r6
 800c98e:	461a      	mov	r2, r3
 800c990:	4623      	mov	r3, r4
 800c992:	f7f3 fc75 	bl	8000280 <__aeabi_uldivmod>
 800c996:	4603      	mov	r3, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	461a      	mov	r2, r3
 800c99c:	4b2c      	ldr	r3, [pc, #176]	; (800ca50 <UART_SetConfig+0x384>)
 800c99e:	fba3 1302 	umull	r1, r3, r3, r2
 800c9a2:	095b      	lsrs	r3, r3, #5
 800c9a4:	2164      	movs	r1, #100	; 0x64
 800c9a6:	fb01 f303 	mul.w	r3, r1, r3
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	3332      	adds	r3, #50	; 0x32
 800c9b0:	4a27      	ldr	r2, [pc, #156]	; (800ca50 <UART_SetConfig+0x384>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	095b      	lsrs	r3, r3, #5
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9be:	4498      	add	r8, r3
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	461d      	mov	r5, r3
 800c9c4:	f04f 0600 	mov.w	r6, #0
 800c9c8:	46a9      	mov	r9, r5
 800c9ca:	46b2      	mov	sl, r6
 800c9cc:	eb19 0309 	adds.w	r3, r9, r9
 800c9d0:	eb4a 040a 	adc.w	r4, sl, sl
 800c9d4:	4699      	mov	r9, r3
 800c9d6:	46a2      	mov	sl, r4
 800c9d8:	eb19 0905 	adds.w	r9, r9, r5
 800c9dc:	eb4a 0a06 	adc.w	sl, sl, r6
 800c9e0:	f04f 0100 	mov.w	r1, #0
 800c9e4:	f04f 0200 	mov.w	r2, #0
 800c9e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c9f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	4692      	mov	sl, r2
 800c9f8:	eb19 0005 	adds.w	r0, r9, r5
 800c9fc:	eb4a 0106 	adc.w	r1, sl, r6
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	461d      	mov	r5, r3
 800ca06:	f04f 0600 	mov.w	r6, #0
 800ca0a:	196b      	adds	r3, r5, r5
 800ca0c:	eb46 0406 	adc.w	r4, r6, r6
 800ca10:	461a      	mov	r2, r3
 800ca12:	4623      	mov	r3, r4
 800ca14:	f7f3 fc34 	bl	8000280 <__aeabi_uldivmod>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <UART_SetConfig+0x384>)
 800ca20:	fba3 1302 	umull	r1, r3, r3, r2
 800ca24:	095b      	lsrs	r3, r3, #5
 800ca26:	2164      	movs	r1, #100	; 0x64
 800ca28:	fb01 f303 	mul.w	r3, r1, r3
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	3332      	adds	r3, #50	; 0x32
 800ca32:	4a07      	ldr	r2, [pc, #28]	; (800ca50 <UART_SetConfig+0x384>)
 800ca34:	fba2 2303 	umull	r2, r3, r2, r3
 800ca38:	095b      	lsrs	r3, r3, #5
 800ca3a:	f003 0207 	and.w	r2, r3, #7
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4442      	add	r2, r8
 800ca44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ca46:	e1b2      	b.n	800cdae <UART_SetConfig+0x6e2>
 800ca48:	40011000 	.word	0x40011000
 800ca4c:	40011400 	.word	0x40011400
 800ca50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4ad7      	ldr	r2, [pc, #860]	; (800cdb8 <UART_SetConfig+0x6ec>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d005      	beq.n	800ca6a <UART_SetConfig+0x39e>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4ad6      	ldr	r2, [pc, #856]	; (800cdbc <UART_SetConfig+0x6f0>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	f040 80d1 	bne.w	800cc0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca6a:	f7fe fa41 	bl	800aef0 <HAL_RCC_GetPCLK2Freq>
 800ca6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	469a      	mov	sl, r3
 800ca74:	f04f 0b00 	mov.w	fp, #0
 800ca78:	46d0      	mov	r8, sl
 800ca7a:	46d9      	mov	r9, fp
 800ca7c:	eb18 0308 	adds.w	r3, r8, r8
 800ca80:	eb49 0409 	adc.w	r4, r9, r9
 800ca84:	4698      	mov	r8, r3
 800ca86:	46a1      	mov	r9, r4
 800ca88:	eb18 080a 	adds.w	r8, r8, sl
 800ca8c:	eb49 090b 	adc.w	r9, r9, fp
 800ca90:	f04f 0100 	mov.w	r1, #0
 800ca94:	f04f 0200 	mov.w	r2, #0
 800ca98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ca9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800caa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800caa4:	4688      	mov	r8, r1
 800caa6:	4691      	mov	r9, r2
 800caa8:	eb1a 0508 	adds.w	r5, sl, r8
 800caac:	eb4b 0609 	adc.w	r6, fp, r9
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4619      	mov	r1, r3
 800cab6:	f04f 0200 	mov.w	r2, #0
 800caba:	f04f 0300 	mov.w	r3, #0
 800cabe:	f04f 0400 	mov.w	r4, #0
 800cac2:	0094      	lsls	r4, r2, #2
 800cac4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cac8:	008b      	lsls	r3, r1, #2
 800caca:	461a      	mov	r2, r3
 800cacc:	4623      	mov	r3, r4
 800cace:	4628      	mov	r0, r5
 800cad0:	4631      	mov	r1, r6
 800cad2:	f7f3 fbd5 	bl	8000280 <__aeabi_uldivmod>
 800cad6:	4603      	mov	r3, r0
 800cad8:	460c      	mov	r4, r1
 800cada:	461a      	mov	r2, r3
 800cadc:	4bb8      	ldr	r3, [pc, #736]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cade:	fba3 2302 	umull	r2, r3, r3, r2
 800cae2:	095b      	lsrs	r3, r3, #5
 800cae4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	469b      	mov	fp, r3
 800caec:	f04f 0c00 	mov.w	ip, #0
 800caf0:	46d9      	mov	r9, fp
 800caf2:	46e2      	mov	sl, ip
 800caf4:	eb19 0309 	adds.w	r3, r9, r9
 800caf8:	eb4a 040a 	adc.w	r4, sl, sl
 800cafc:	4699      	mov	r9, r3
 800cafe:	46a2      	mov	sl, r4
 800cb00:	eb19 090b 	adds.w	r9, r9, fp
 800cb04:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb08:	f04f 0100 	mov.w	r1, #0
 800cb0c:	f04f 0200 	mov.w	r2, #0
 800cb10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb1c:	4689      	mov	r9, r1
 800cb1e:	4692      	mov	sl, r2
 800cb20:	eb1b 0509 	adds.w	r5, fp, r9
 800cb24:	eb4c 060a 	adc.w	r6, ip, sl
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f04f 0200 	mov.w	r2, #0
 800cb32:	f04f 0300 	mov.w	r3, #0
 800cb36:	f04f 0400 	mov.w	r4, #0
 800cb3a:	0094      	lsls	r4, r2, #2
 800cb3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb40:	008b      	lsls	r3, r1, #2
 800cb42:	461a      	mov	r2, r3
 800cb44:	4623      	mov	r3, r4
 800cb46:	4628      	mov	r0, r5
 800cb48:	4631      	mov	r1, r6
 800cb4a:	f7f3 fb99 	bl	8000280 <__aeabi_uldivmod>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	460c      	mov	r4, r1
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b9a      	ldr	r3, [pc, #616]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cb56:	fba3 1302 	umull	r1, r3, r3, r2
 800cb5a:	095b      	lsrs	r3, r3, #5
 800cb5c:	2164      	movs	r1, #100	; 0x64
 800cb5e:	fb01 f303 	mul.w	r3, r1, r3
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	011b      	lsls	r3, r3, #4
 800cb66:	3332      	adds	r3, #50	; 0x32
 800cb68:	4a95      	ldr	r2, [pc, #596]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6e:	095b      	lsrs	r3, r3, #5
 800cb70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb74:	4498      	add	r8, r3
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	469b      	mov	fp, r3
 800cb7a:	f04f 0c00 	mov.w	ip, #0
 800cb7e:	46d9      	mov	r9, fp
 800cb80:	46e2      	mov	sl, ip
 800cb82:	eb19 0309 	adds.w	r3, r9, r9
 800cb86:	eb4a 040a 	adc.w	r4, sl, sl
 800cb8a:	4699      	mov	r9, r3
 800cb8c:	46a2      	mov	sl, r4
 800cb8e:	eb19 090b 	adds.w	r9, r9, fp
 800cb92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb96:	f04f 0100 	mov.w	r1, #0
 800cb9a:	f04f 0200 	mov.w	r2, #0
 800cb9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbaa:	4689      	mov	r9, r1
 800cbac:	4692      	mov	sl, r2
 800cbae:	eb1b 0509 	adds.w	r5, fp, r9
 800cbb2:	eb4c 060a 	adc.w	r6, ip, sl
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f04f 0200 	mov.w	r2, #0
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	f04f 0400 	mov.w	r4, #0
 800cbc8:	0094      	lsls	r4, r2, #2
 800cbca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cbce:	008b      	lsls	r3, r1, #2
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4623      	mov	r3, r4
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	f7f3 fb52 	bl	8000280 <__aeabi_uldivmod>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b77      	ldr	r3, [pc, #476]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cbe4:	fba3 1302 	umull	r1, r3, r3, r2
 800cbe8:	095b      	lsrs	r3, r3, #5
 800cbea:	2164      	movs	r1, #100	; 0x64
 800cbec:	fb01 f303 	mul.w	r3, r1, r3
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	011b      	lsls	r3, r3, #4
 800cbf4:	3332      	adds	r3, #50	; 0x32
 800cbf6:	4a72      	ldr	r2, [pc, #456]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbfc:	095b      	lsrs	r3, r3, #5
 800cbfe:	f003 020f 	and.w	r2, r3, #15
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4442      	add	r2, r8
 800cc08:	609a      	str	r2, [r3, #8]
 800cc0a:	e0d0      	b.n	800cdae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc0c:	f7fe f95c 	bl	800aec8 <HAL_RCC_GetPCLK1Freq>
 800cc10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	469a      	mov	sl, r3
 800cc16:	f04f 0b00 	mov.w	fp, #0
 800cc1a:	46d0      	mov	r8, sl
 800cc1c:	46d9      	mov	r9, fp
 800cc1e:	eb18 0308 	adds.w	r3, r8, r8
 800cc22:	eb49 0409 	adc.w	r4, r9, r9
 800cc26:	4698      	mov	r8, r3
 800cc28:	46a1      	mov	r9, r4
 800cc2a:	eb18 080a 	adds.w	r8, r8, sl
 800cc2e:	eb49 090b 	adc.w	r9, r9, fp
 800cc32:	f04f 0100 	mov.w	r1, #0
 800cc36:	f04f 0200 	mov.w	r2, #0
 800cc3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cc3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cc42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cc46:	4688      	mov	r8, r1
 800cc48:	4691      	mov	r9, r2
 800cc4a:	eb1a 0508 	adds.w	r5, sl, r8
 800cc4e:	eb4b 0609 	adc.w	r6, fp, r9
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	4619      	mov	r1, r3
 800cc58:	f04f 0200 	mov.w	r2, #0
 800cc5c:	f04f 0300 	mov.w	r3, #0
 800cc60:	f04f 0400 	mov.w	r4, #0
 800cc64:	0094      	lsls	r4, r2, #2
 800cc66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cc6a:	008b      	lsls	r3, r1, #2
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	4623      	mov	r3, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	4631      	mov	r1, r6
 800cc74:	f7f3 fb04 	bl	8000280 <__aeabi_uldivmod>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4b50      	ldr	r3, [pc, #320]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cc80:	fba3 2302 	umull	r2, r3, r3, r2
 800cc84:	095b      	lsrs	r3, r3, #5
 800cc86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	469b      	mov	fp, r3
 800cc8e:	f04f 0c00 	mov.w	ip, #0
 800cc92:	46d9      	mov	r9, fp
 800cc94:	46e2      	mov	sl, ip
 800cc96:	eb19 0309 	adds.w	r3, r9, r9
 800cc9a:	eb4a 040a 	adc.w	r4, sl, sl
 800cc9e:	4699      	mov	r9, r3
 800cca0:	46a2      	mov	sl, r4
 800cca2:	eb19 090b 	adds.w	r9, r9, fp
 800cca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ccaa:	f04f 0100 	mov.w	r1, #0
 800ccae:	f04f 0200 	mov.w	r2, #0
 800ccb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ccb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ccba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ccbe:	4689      	mov	r9, r1
 800ccc0:	4692      	mov	sl, r2
 800ccc2:	eb1b 0509 	adds.w	r5, fp, r9
 800ccc6:	eb4c 060a 	adc.w	r6, ip, sl
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	f04f 0300 	mov.w	r3, #0
 800ccd8:	f04f 0400 	mov.w	r4, #0
 800ccdc:	0094      	lsls	r4, r2, #2
 800ccde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cce2:	008b      	lsls	r3, r1, #2
 800cce4:	461a      	mov	r2, r3
 800cce6:	4623      	mov	r3, r4
 800cce8:	4628      	mov	r0, r5
 800ccea:	4631      	mov	r1, r6
 800ccec:	f7f3 fac8 	bl	8000280 <__aeabi_uldivmod>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4b32      	ldr	r3, [pc, #200]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800ccf8:	fba3 1302 	umull	r1, r3, r3, r2
 800ccfc:	095b      	lsrs	r3, r3, #5
 800ccfe:	2164      	movs	r1, #100	; 0x64
 800cd00:	fb01 f303 	mul.w	r3, r1, r3
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	3332      	adds	r3, #50	; 0x32
 800cd0a:	4a2d      	ldr	r2, [pc, #180]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd10:	095b      	lsrs	r3, r3, #5
 800cd12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd16:	4498      	add	r8, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	469b      	mov	fp, r3
 800cd1c:	f04f 0c00 	mov.w	ip, #0
 800cd20:	46d9      	mov	r9, fp
 800cd22:	46e2      	mov	sl, ip
 800cd24:	eb19 0309 	adds.w	r3, r9, r9
 800cd28:	eb4a 040a 	adc.w	r4, sl, sl
 800cd2c:	4699      	mov	r9, r3
 800cd2e:	46a2      	mov	sl, r4
 800cd30:	eb19 090b 	adds.w	r9, r9, fp
 800cd34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd38:	f04f 0100 	mov.w	r1, #0
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd4c:	4689      	mov	r9, r1
 800cd4e:	4692      	mov	sl, r2
 800cd50:	eb1b 0509 	adds.w	r5, fp, r9
 800cd54:	eb4c 060a 	adc.w	r6, ip, sl
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	f04f 0200 	mov.w	r2, #0
 800cd62:	f04f 0300 	mov.w	r3, #0
 800cd66:	f04f 0400 	mov.w	r4, #0
 800cd6a:	0094      	lsls	r4, r2, #2
 800cd6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd70:	008b      	lsls	r3, r1, #2
 800cd72:	461a      	mov	r2, r3
 800cd74:	4623      	mov	r3, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	4631      	mov	r1, r6
 800cd7a:	f7f3 fa81 	bl	8000280 <__aeabi_uldivmod>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	460c      	mov	r4, r1
 800cd82:	461a      	mov	r2, r3
 800cd84:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cd86:	fba3 1302 	umull	r1, r3, r3, r2
 800cd8a:	095b      	lsrs	r3, r3, #5
 800cd8c:	2164      	movs	r1, #100	; 0x64
 800cd8e:	fb01 f303 	mul.w	r3, r1, r3
 800cd92:	1ad3      	subs	r3, r2, r3
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	3332      	adds	r3, #50	; 0x32
 800cd98:	4a09      	ldr	r2, [pc, #36]	; (800cdc0 <UART_SetConfig+0x6f4>)
 800cd9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd9e:	095b      	lsrs	r3, r3, #5
 800cda0:	f003 020f 	and.w	r2, r3, #15
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4442      	add	r2, r8
 800cdaa:	609a      	str	r2, [r3, #8]
}
 800cdac:	e7ff      	b.n	800cdae <UART_SetConfig+0x6e2>
 800cdae:	bf00      	nop
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	40011000 	.word	0x40011000
 800cdbc:	40011400 	.word	0x40011400
 800cdc0:	51eb851f 	.word	0x51eb851f

0800cdc4 <__errno>:
 800cdc4:	4b01      	ldr	r3, [pc, #4]	; (800cdcc <__errno+0x8>)
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	200002c8 	.word	0x200002c8

0800cdd0 <__sflush_r>:
 800cdd0:	898a      	ldrh	r2, [r1, #12]
 800cdd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	0710      	lsls	r0, r2, #28
 800cdda:	460c      	mov	r4, r1
 800cddc:	d458      	bmi.n	800ce90 <__sflush_r+0xc0>
 800cdde:	684b      	ldr	r3, [r1, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	dc05      	bgt.n	800cdf0 <__sflush_r+0x20>
 800cde4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dc02      	bgt.n	800cdf0 <__sflush_r+0x20>
 800cdea:	2000      	movs	r0, #0
 800cdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d0f9      	beq.n	800cdea <__sflush_r+0x1a>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdfc:	682f      	ldr	r7, [r5, #0]
 800cdfe:	6a21      	ldr	r1, [r4, #32]
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	d032      	beq.n	800ce6a <__sflush_r+0x9a>
 800ce04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	075a      	lsls	r2, r3, #29
 800ce0a:	d505      	bpl.n	800ce18 <__sflush_r+0x48>
 800ce0c:	6863      	ldr	r3, [r4, #4]
 800ce0e:	1ac0      	subs	r0, r0, r3
 800ce10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce12:	b10b      	cbz	r3, 800ce18 <__sflush_r+0x48>
 800ce14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce16:	1ac0      	subs	r0, r0, r3
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce1e:	6a21      	ldr	r1, [r4, #32]
 800ce20:	4628      	mov	r0, r5
 800ce22:	47b0      	blx	r6
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	d106      	bne.n	800ce38 <__sflush_r+0x68>
 800ce2a:	6829      	ldr	r1, [r5, #0]
 800ce2c:	291d      	cmp	r1, #29
 800ce2e:	d848      	bhi.n	800cec2 <__sflush_r+0xf2>
 800ce30:	4a29      	ldr	r2, [pc, #164]	; (800ced8 <__sflush_r+0x108>)
 800ce32:	40ca      	lsrs	r2, r1
 800ce34:	07d6      	lsls	r6, r2, #31
 800ce36:	d544      	bpl.n	800cec2 <__sflush_r+0xf2>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	6062      	str	r2, [r4, #4]
 800ce3c:	04d9      	lsls	r1, r3, #19
 800ce3e:	6922      	ldr	r2, [r4, #16]
 800ce40:	6022      	str	r2, [r4, #0]
 800ce42:	d504      	bpl.n	800ce4e <__sflush_r+0x7e>
 800ce44:	1c42      	adds	r2, r0, #1
 800ce46:	d101      	bne.n	800ce4c <__sflush_r+0x7c>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b903      	cbnz	r3, 800ce4e <__sflush_r+0x7e>
 800ce4c:	6560      	str	r0, [r4, #84]	; 0x54
 800ce4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce50:	602f      	str	r7, [r5, #0]
 800ce52:	2900      	cmp	r1, #0
 800ce54:	d0c9      	beq.n	800cdea <__sflush_r+0x1a>
 800ce56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	d002      	beq.n	800ce64 <__sflush_r+0x94>
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f000 f9cc 	bl	800d1fc <_free_r>
 800ce64:	2000      	movs	r0, #0
 800ce66:	6360      	str	r0, [r4, #52]	; 0x34
 800ce68:	e7c0      	b.n	800cdec <__sflush_r+0x1c>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	47b0      	blx	r6
 800ce70:	1c41      	adds	r1, r0, #1
 800ce72:	d1c8      	bne.n	800ce06 <__sflush_r+0x36>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d0c5      	beq.n	800ce06 <__sflush_r+0x36>
 800ce7a:	2b1d      	cmp	r3, #29
 800ce7c:	d001      	beq.n	800ce82 <__sflush_r+0xb2>
 800ce7e:	2b16      	cmp	r3, #22
 800ce80:	d101      	bne.n	800ce86 <__sflush_r+0xb6>
 800ce82:	602f      	str	r7, [r5, #0]
 800ce84:	e7b1      	b.n	800cdea <__sflush_r+0x1a>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8c:	81a3      	strh	r3, [r4, #12]
 800ce8e:	e7ad      	b.n	800cdec <__sflush_r+0x1c>
 800ce90:	690f      	ldr	r7, [r1, #16]
 800ce92:	2f00      	cmp	r7, #0
 800ce94:	d0a9      	beq.n	800cdea <__sflush_r+0x1a>
 800ce96:	0793      	lsls	r3, r2, #30
 800ce98:	680e      	ldr	r6, [r1, #0]
 800ce9a:	bf08      	it	eq
 800ce9c:	694b      	ldreq	r3, [r1, #20]
 800ce9e:	600f      	str	r7, [r1, #0]
 800cea0:	bf18      	it	ne
 800cea2:	2300      	movne	r3, #0
 800cea4:	eba6 0807 	sub.w	r8, r6, r7
 800cea8:	608b      	str	r3, [r1, #8]
 800ceaa:	f1b8 0f00 	cmp.w	r8, #0
 800ceae:	dd9c      	ble.n	800cdea <__sflush_r+0x1a>
 800ceb0:	4643      	mov	r3, r8
 800ceb2:	463a      	mov	r2, r7
 800ceb4:	6a21      	ldr	r1, [r4, #32]
 800ceb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ceb8:	4628      	mov	r0, r5
 800ceba:	47b0      	blx	r6
 800cebc:	2800      	cmp	r0, #0
 800cebe:	dc06      	bgt.n	800cece <__sflush_r+0xfe>
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	e78e      	b.n	800cdec <__sflush_r+0x1c>
 800cece:	4407      	add	r7, r0
 800ced0:	eba8 0800 	sub.w	r8, r8, r0
 800ced4:	e7e9      	b.n	800ceaa <__sflush_r+0xda>
 800ced6:	bf00      	nop
 800ced8:	20400001 	.word	0x20400001

0800cedc <_fflush_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	690b      	ldr	r3, [r1, #16]
 800cee0:	4605      	mov	r5, r0
 800cee2:	460c      	mov	r4, r1
 800cee4:	b1db      	cbz	r3, 800cf1e <_fflush_r+0x42>
 800cee6:	b118      	cbz	r0, 800cef0 <_fflush_r+0x14>
 800cee8:	6983      	ldr	r3, [r0, #24]
 800ceea:	b90b      	cbnz	r3, 800cef0 <_fflush_r+0x14>
 800ceec:	f000 f860 	bl	800cfb0 <__sinit>
 800cef0:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <_fflush_r+0x48>)
 800cef2:	429c      	cmp	r4, r3
 800cef4:	d109      	bne.n	800cf0a <_fflush_r+0x2e>
 800cef6:	686c      	ldr	r4, [r5, #4]
 800cef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefc:	b17b      	cbz	r3, 800cf1e <_fflush_r+0x42>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf06:	f7ff bf63 	b.w	800cdd0 <__sflush_r>
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <_fflush_r+0x4c>)
 800cf0c:	429c      	cmp	r4, r3
 800cf0e:	d101      	bne.n	800cf14 <_fflush_r+0x38>
 800cf10:	68ac      	ldr	r4, [r5, #8]
 800cf12:	e7f1      	b.n	800cef8 <_fflush_r+0x1c>
 800cf14:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <_fflush_r+0x50>)
 800cf16:	429c      	cmp	r4, r3
 800cf18:	bf08      	it	eq
 800cf1a:	68ec      	ldreq	r4, [r5, #12]
 800cf1c:	e7ec      	b.n	800cef8 <_fflush_r+0x1c>
 800cf1e:	2000      	movs	r0, #0
 800cf20:	bd38      	pop	{r3, r4, r5, pc}
 800cf22:	bf00      	nop
 800cf24:	0800ded8 	.word	0x0800ded8
 800cf28:	0800def8 	.word	0x0800def8
 800cf2c:	0800deb8 	.word	0x0800deb8

0800cf30 <std>:
 800cf30:	2300      	movs	r3, #0
 800cf32:	b510      	push	{r4, lr}
 800cf34:	4604      	mov	r4, r0
 800cf36:	e9c0 3300 	strd	r3, r3, [r0]
 800cf3a:	6083      	str	r3, [r0, #8]
 800cf3c:	8181      	strh	r1, [r0, #12]
 800cf3e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf40:	81c2      	strh	r2, [r0, #14]
 800cf42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf46:	6183      	str	r3, [r0, #24]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	305c      	adds	r0, #92	; 0x5c
 800cf4e:	f000 f94c 	bl	800d1ea <memset>
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <std+0x38>)
 800cf54:	6263      	str	r3, [r4, #36]	; 0x24
 800cf56:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <std+0x3c>)
 800cf58:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf5a:	4b05      	ldr	r3, [pc, #20]	; (800cf70 <std+0x40>)
 800cf5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <std+0x44>)
 800cf60:	6224      	str	r4, [r4, #32]
 800cf62:	6323      	str	r3, [r4, #48]	; 0x30
 800cf64:	bd10      	pop	{r4, pc}
 800cf66:	bf00      	nop
 800cf68:	0800d9f5 	.word	0x0800d9f5
 800cf6c:	0800da17 	.word	0x0800da17
 800cf70:	0800da4f 	.word	0x0800da4f
 800cf74:	0800da73 	.word	0x0800da73

0800cf78 <_cleanup_r>:
 800cf78:	4901      	ldr	r1, [pc, #4]	; (800cf80 <_cleanup_r+0x8>)
 800cf7a:	f000 b885 	b.w	800d088 <_fwalk_reent>
 800cf7e:	bf00      	nop
 800cf80:	0800cedd 	.word	0x0800cedd

0800cf84 <__sfmoreglue>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	1e4a      	subs	r2, r1, #1
 800cf88:	2568      	movs	r5, #104	; 0x68
 800cf8a:	4355      	muls	r5, r2
 800cf8c:	460e      	mov	r6, r1
 800cf8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf92:	f000 f981 	bl	800d298 <_malloc_r>
 800cf96:	4604      	mov	r4, r0
 800cf98:	b140      	cbz	r0, 800cfac <__sfmoreglue+0x28>
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	e9c0 1600 	strd	r1, r6, [r0]
 800cfa0:	300c      	adds	r0, #12
 800cfa2:	60a0      	str	r0, [r4, #8]
 800cfa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfa8:	f000 f91f 	bl	800d1ea <memset>
 800cfac:	4620      	mov	r0, r4
 800cfae:	bd70      	pop	{r4, r5, r6, pc}

0800cfb0 <__sinit>:
 800cfb0:	6983      	ldr	r3, [r0, #24]
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	bb33      	cbnz	r3, 800d006 <__sinit+0x56>
 800cfb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cfbc:	6503      	str	r3, [r0, #80]	; 0x50
 800cfbe:	4b12      	ldr	r3, [pc, #72]	; (800d008 <__sinit+0x58>)
 800cfc0:	4a12      	ldr	r2, [pc, #72]	; (800d00c <__sinit+0x5c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6282      	str	r2, [r0, #40]	; 0x28
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	bf04      	itt	eq
 800cfca:	2301      	moveq	r3, #1
 800cfcc:	6183      	streq	r3, [r0, #24]
 800cfce:	f000 f81f 	bl	800d010 <__sfp>
 800cfd2:	6060      	str	r0, [r4, #4]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 f81b 	bl	800d010 <__sfp>
 800cfda:	60a0      	str	r0, [r4, #8]
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f000 f817 	bl	800d010 <__sfp>
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	60e0      	str	r0, [r4, #12]
 800cfe6:	2104      	movs	r1, #4
 800cfe8:	6860      	ldr	r0, [r4, #4]
 800cfea:	f7ff ffa1 	bl	800cf30 <std>
 800cfee:	2201      	movs	r2, #1
 800cff0:	2109      	movs	r1, #9
 800cff2:	68a0      	ldr	r0, [r4, #8]
 800cff4:	f7ff ff9c 	bl	800cf30 <std>
 800cff8:	2202      	movs	r2, #2
 800cffa:	2112      	movs	r1, #18
 800cffc:	68e0      	ldr	r0, [r4, #12]
 800cffe:	f7ff ff97 	bl	800cf30 <std>
 800d002:	2301      	movs	r3, #1
 800d004:	61a3      	str	r3, [r4, #24]
 800d006:	bd10      	pop	{r4, pc}
 800d008:	0800df18 	.word	0x0800df18
 800d00c:	0800cf79 	.word	0x0800cf79

0800d010 <__sfp>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	4b1b      	ldr	r3, [pc, #108]	; (800d080 <__sfp+0x70>)
 800d014:	681e      	ldr	r6, [r3, #0]
 800d016:	69b3      	ldr	r3, [r6, #24]
 800d018:	4607      	mov	r7, r0
 800d01a:	b913      	cbnz	r3, 800d022 <__sfp+0x12>
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff ffc7 	bl	800cfb0 <__sinit>
 800d022:	3648      	adds	r6, #72	; 0x48
 800d024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d028:	3b01      	subs	r3, #1
 800d02a:	d503      	bpl.n	800d034 <__sfp+0x24>
 800d02c:	6833      	ldr	r3, [r6, #0]
 800d02e:	b133      	cbz	r3, 800d03e <__sfp+0x2e>
 800d030:	6836      	ldr	r6, [r6, #0]
 800d032:	e7f7      	b.n	800d024 <__sfp+0x14>
 800d034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d038:	b16d      	cbz	r5, 800d056 <__sfp+0x46>
 800d03a:	3468      	adds	r4, #104	; 0x68
 800d03c:	e7f4      	b.n	800d028 <__sfp+0x18>
 800d03e:	2104      	movs	r1, #4
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ff9f 	bl	800cf84 <__sfmoreglue>
 800d046:	6030      	str	r0, [r6, #0]
 800d048:	2800      	cmp	r0, #0
 800d04a:	d1f1      	bne.n	800d030 <__sfp+0x20>
 800d04c:	230c      	movs	r3, #12
 800d04e:	603b      	str	r3, [r7, #0]
 800d050:	4604      	mov	r4, r0
 800d052:	4620      	mov	r0, r4
 800d054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d056:	4b0b      	ldr	r3, [pc, #44]	; (800d084 <__sfp+0x74>)
 800d058:	6665      	str	r5, [r4, #100]	; 0x64
 800d05a:	e9c4 5500 	strd	r5, r5, [r4]
 800d05e:	60a5      	str	r5, [r4, #8]
 800d060:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d064:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d068:	2208      	movs	r2, #8
 800d06a:	4629      	mov	r1, r5
 800d06c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d070:	f000 f8bb 	bl	800d1ea <memset>
 800d074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d07c:	e7e9      	b.n	800d052 <__sfp+0x42>
 800d07e:	bf00      	nop
 800d080:	0800df18 	.word	0x0800df18
 800d084:	ffff0001 	.word	0xffff0001

0800d088 <_fwalk_reent>:
 800d088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d08c:	4680      	mov	r8, r0
 800d08e:	4689      	mov	r9, r1
 800d090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d094:	2600      	movs	r6, #0
 800d096:	b914      	cbnz	r4, 800d09e <_fwalk_reent+0x16>
 800d098:	4630      	mov	r0, r6
 800d09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d0a2:	3f01      	subs	r7, #1
 800d0a4:	d501      	bpl.n	800d0aa <_fwalk_reent+0x22>
 800d0a6:	6824      	ldr	r4, [r4, #0]
 800d0a8:	e7f5      	b.n	800d096 <_fwalk_reent+0xe>
 800d0aa:	89ab      	ldrh	r3, [r5, #12]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d907      	bls.n	800d0c0 <_fwalk_reent+0x38>
 800d0b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	d003      	beq.n	800d0c0 <_fwalk_reent+0x38>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	47c8      	blx	r9
 800d0be:	4306      	orrs	r6, r0
 800d0c0:	3568      	adds	r5, #104	; 0x68
 800d0c2:	e7ee      	b.n	800d0a2 <_fwalk_reent+0x1a>

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4e0d      	ldr	r6, [pc, #52]	; (800d0fc <__libc_init_array+0x38>)
 800d0c8:	4c0d      	ldr	r4, [pc, #52]	; (800d100 <__libc_init_array+0x3c>)
 800d0ca:	1ba4      	subs	r4, r4, r6
 800d0cc:	10a4      	asrs	r4, r4, #2
 800d0ce:	2500      	movs	r5, #0
 800d0d0:	42a5      	cmp	r5, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	4e0b      	ldr	r6, [pc, #44]	; (800d104 <__libc_init_array+0x40>)
 800d0d6:	4c0c      	ldr	r4, [pc, #48]	; (800d108 <__libc_init_array+0x44>)
 800d0d8:	f000 fe02 	bl	800dce0 <_init>
 800d0dc:	1ba4      	subs	r4, r4, r6
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	2500      	movs	r5, #0
 800d0e2:	42a5      	cmp	r5, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0ec:	4798      	blx	r3
 800d0ee:	3501      	adds	r5, #1
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0f6:	4798      	blx	r3
 800d0f8:	3501      	adds	r5, #1
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	0800df58 	.word	0x0800df58
 800d100:	0800df58 	.word	0x0800df58
 800d104:	0800df58 	.word	0x0800df58
 800d108:	0800df5c 	.word	0x0800df5c

0800d10c <__swhatbuf_r>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	460e      	mov	r6, r1
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	2900      	cmp	r1, #0
 800d116:	b096      	sub	sp, #88	; 0x58
 800d118:	4614      	mov	r4, r2
 800d11a:	461d      	mov	r5, r3
 800d11c:	da07      	bge.n	800d12e <__swhatbuf_r+0x22>
 800d11e:	2300      	movs	r3, #0
 800d120:	602b      	str	r3, [r5, #0]
 800d122:	89b3      	ldrh	r3, [r6, #12]
 800d124:	061a      	lsls	r2, r3, #24
 800d126:	d410      	bmi.n	800d14a <__swhatbuf_r+0x3e>
 800d128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d12c:	e00e      	b.n	800d14c <__swhatbuf_r+0x40>
 800d12e:	466a      	mov	r2, sp
 800d130:	f000 fd8e 	bl	800dc50 <_fstat_r>
 800d134:	2800      	cmp	r0, #0
 800d136:	dbf2      	blt.n	800d11e <__swhatbuf_r+0x12>
 800d138:	9a01      	ldr	r2, [sp, #4]
 800d13a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d13e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d142:	425a      	negs	r2, r3
 800d144:	415a      	adcs	r2, r3
 800d146:	602a      	str	r2, [r5, #0]
 800d148:	e7ee      	b.n	800d128 <__swhatbuf_r+0x1c>
 800d14a:	2340      	movs	r3, #64	; 0x40
 800d14c:	2000      	movs	r0, #0
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	b016      	add	sp, #88	; 0x58
 800d152:	bd70      	pop	{r4, r5, r6, pc}

0800d154 <__smakebuf_r>:
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d158:	079d      	lsls	r5, r3, #30
 800d15a:	4606      	mov	r6, r0
 800d15c:	460c      	mov	r4, r1
 800d15e:	d507      	bpl.n	800d170 <__smakebuf_r+0x1c>
 800d160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	6123      	str	r3, [r4, #16]
 800d168:	2301      	movs	r3, #1
 800d16a:	6163      	str	r3, [r4, #20]
 800d16c:	b002      	add	sp, #8
 800d16e:	bd70      	pop	{r4, r5, r6, pc}
 800d170:	ab01      	add	r3, sp, #4
 800d172:	466a      	mov	r2, sp
 800d174:	f7ff ffca 	bl	800d10c <__swhatbuf_r>
 800d178:	9900      	ldr	r1, [sp, #0]
 800d17a:	4605      	mov	r5, r0
 800d17c:	4630      	mov	r0, r6
 800d17e:	f000 f88b 	bl	800d298 <_malloc_r>
 800d182:	b948      	cbnz	r0, 800d198 <__smakebuf_r+0x44>
 800d184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d188:	059a      	lsls	r2, r3, #22
 800d18a:	d4ef      	bmi.n	800d16c <__smakebuf_r+0x18>
 800d18c:	f023 0303 	bic.w	r3, r3, #3
 800d190:	f043 0302 	orr.w	r3, r3, #2
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	e7e3      	b.n	800d160 <__smakebuf_r+0xc>
 800d198:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <__smakebuf_r+0x7c>)
 800d19a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	6020      	str	r0, [r4, #0]
 800d1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a4:	81a3      	strh	r3, [r4, #12]
 800d1a6:	9b00      	ldr	r3, [sp, #0]
 800d1a8:	6163      	str	r3, [r4, #20]
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	6120      	str	r0, [r4, #16]
 800d1ae:	b15b      	cbz	r3, 800d1c8 <__smakebuf_r+0x74>
 800d1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f000 fd5d 	bl	800dc74 <_isatty_r>
 800d1ba:	b128      	cbz	r0, 800d1c8 <__smakebuf_r+0x74>
 800d1bc:	89a3      	ldrh	r3, [r4, #12]
 800d1be:	f023 0303 	bic.w	r3, r3, #3
 800d1c2:	f043 0301 	orr.w	r3, r3, #1
 800d1c6:	81a3      	strh	r3, [r4, #12]
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	431d      	orrs	r5, r3
 800d1cc:	81a5      	strh	r5, [r4, #12]
 800d1ce:	e7cd      	b.n	800d16c <__smakebuf_r+0x18>
 800d1d0:	0800cf79 	.word	0x0800cf79

0800d1d4 <memcpy>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	1e43      	subs	r3, r0, #1
 800d1d8:	440a      	add	r2, r1
 800d1da:	4291      	cmp	r1, r2
 800d1dc:	d100      	bne.n	800d1e0 <memcpy+0xc>
 800d1de:	bd10      	pop	{r4, pc}
 800d1e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1e8:	e7f7      	b.n	800d1da <memcpy+0x6>

0800d1ea <memset>:
 800d1ea:	4402      	add	r2, r0
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d100      	bne.n	800d1f4 <memset+0xa>
 800d1f2:	4770      	bx	lr
 800d1f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d1f8:	e7f9      	b.n	800d1ee <memset+0x4>
	...

0800d1fc <_free_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4605      	mov	r5, r0
 800d200:	2900      	cmp	r1, #0
 800d202:	d045      	beq.n	800d290 <_free_r+0x94>
 800d204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d208:	1f0c      	subs	r4, r1, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bfb8      	it	lt
 800d20e:	18e4      	addlt	r4, r4, r3
 800d210:	f000 fd52 	bl	800dcb8 <__malloc_lock>
 800d214:	4a1f      	ldr	r2, [pc, #124]	; (800d294 <_free_r+0x98>)
 800d216:	6813      	ldr	r3, [r2, #0]
 800d218:	4610      	mov	r0, r2
 800d21a:	b933      	cbnz	r3, 800d22a <_free_r+0x2e>
 800d21c:	6063      	str	r3, [r4, #4]
 800d21e:	6014      	str	r4, [r2, #0]
 800d220:	4628      	mov	r0, r5
 800d222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d226:	f000 bd48 	b.w	800dcba <__malloc_unlock>
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	d90c      	bls.n	800d248 <_free_r+0x4c>
 800d22e:	6821      	ldr	r1, [r4, #0]
 800d230:	1862      	adds	r2, r4, r1
 800d232:	4293      	cmp	r3, r2
 800d234:	bf04      	itt	eq
 800d236:	681a      	ldreq	r2, [r3, #0]
 800d238:	685b      	ldreq	r3, [r3, #4]
 800d23a:	6063      	str	r3, [r4, #4]
 800d23c:	bf04      	itt	eq
 800d23e:	1852      	addeq	r2, r2, r1
 800d240:	6022      	streq	r2, [r4, #0]
 800d242:	6004      	str	r4, [r0, #0]
 800d244:	e7ec      	b.n	800d220 <_free_r+0x24>
 800d246:	4613      	mov	r3, r2
 800d248:	685a      	ldr	r2, [r3, #4]
 800d24a:	b10a      	cbz	r2, 800d250 <_free_r+0x54>
 800d24c:	42a2      	cmp	r2, r4
 800d24e:	d9fa      	bls.n	800d246 <_free_r+0x4a>
 800d250:	6819      	ldr	r1, [r3, #0]
 800d252:	1858      	adds	r0, r3, r1
 800d254:	42a0      	cmp	r0, r4
 800d256:	d10b      	bne.n	800d270 <_free_r+0x74>
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	4401      	add	r1, r0
 800d25c:	1858      	adds	r0, r3, r1
 800d25e:	4282      	cmp	r2, r0
 800d260:	6019      	str	r1, [r3, #0]
 800d262:	d1dd      	bne.n	800d220 <_free_r+0x24>
 800d264:	6810      	ldr	r0, [r2, #0]
 800d266:	6852      	ldr	r2, [r2, #4]
 800d268:	605a      	str	r2, [r3, #4]
 800d26a:	4401      	add	r1, r0
 800d26c:	6019      	str	r1, [r3, #0]
 800d26e:	e7d7      	b.n	800d220 <_free_r+0x24>
 800d270:	d902      	bls.n	800d278 <_free_r+0x7c>
 800d272:	230c      	movs	r3, #12
 800d274:	602b      	str	r3, [r5, #0]
 800d276:	e7d3      	b.n	800d220 <_free_r+0x24>
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	1821      	adds	r1, r4, r0
 800d27c:	428a      	cmp	r2, r1
 800d27e:	bf04      	itt	eq
 800d280:	6811      	ldreq	r1, [r2, #0]
 800d282:	6852      	ldreq	r2, [r2, #4]
 800d284:	6062      	str	r2, [r4, #4]
 800d286:	bf04      	itt	eq
 800d288:	1809      	addeq	r1, r1, r0
 800d28a:	6021      	streq	r1, [r4, #0]
 800d28c:	605c      	str	r4, [r3, #4]
 800d28e:	e7c7      	b.n	800d220 <_free_r+0x24>
 800d290:	bd38      	pop	{r3, r4, r5, pc}
 800d292:	bf00      	nop
 800d294:	2000036c 	.word	0x2000036c

0800d298 <_malloc_r>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	1ccd      	adds	r5, r1, #3
 800d29c:	f025 0503 	bic.w	r5, r5, #3
 800d2a0:	3508      	adds	r5, #8
 800d2a2:	2d0c      	cmp	r5, #12
 800d2a4:	bf38      	it	cc
 800d2a6:	250c      	movcc	r5, #12
 800d2a8:	2d00      	cmp	r5, #0
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	db01      	blt.n	800d2b2 <_malloc_r+0x1a>
 800d2ae:	42a9      	cmp	r1, r5
 800d2b0:	d903      	bls.n	800d2ba <_malloc_r+0x22>
 800d2b2:	230c      	movs	r3, #12
 800d2b4:	6033      	str	r3, [r6, #0]
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ba:	f000 fcfd 	bl	800dcb8 <__malloc_lock>
 800d2be:	4a21      	ldr	r2, [pc, #132]	; (800d344 <_malloc_r+0xac>)
 800d2c0:	6814      	ldr	r4, [r2, #0]
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	b991      	cbnz	r1, 800d2ec <_malloc_r+0x54>
 800d2c6:	4c20      	ldr	r4, [pc, #128]	; (800d348 <_malloc_r+0xb0>)
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	b91b      	cbnz	r3, 800d2d4 <_malloc_r+0x3c>
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f000 fb81 	bl	800d9d4 <_sbrk_r>
 800d2d2:	6020      	str	r0, [r4, #0]
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f000 fb7c 	bl	800d9d4 <_sbrk_r>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d124      	bne.n	800d32a <_malloc_r+0x92>
 800d2e0:	230c      	movs	r3, #12
 800d2e2:	6033      	str	r3, [r6, #0]
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f000 fce8 	bl	800dcba <__malloc_unlock>
 800d2ea:	e7e4      	b.n	800d2b6 <_malloc_r+0x1e>
 800d2ec:	680b      	ldr	r3, [r1, #0]
 800d2ee:	1b5b      	subs	r3, r3, r5
 800d2f0:	d418      	bmi.n	800d324 <_malloc_r+0x8c>
 800d2f2:	2b0b      	cmp	r3, #11
 800d2f4:	d90f      	bls.n	800d316 <_malloc_r+0x7e>
 800d2f6:	600b      	str	r3, [r1, #0]
 800d2f8:	50cd      	str	r5, [r1, r3]
 800d2fa:	18cc      	adds	r4, r1, r3
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f000 fcdc 	bl	800dcba <__malloc_unlock>
 800d302:	f104 000b 	add.w	r0, r4, #11
 800d306:	1d23      	adds	r3, r4, #4
 800d308:	f020 0007 	bic.w	r0, r0, #7
 800d30c:	1ac3      	subs	r3, r0, r3
 800d30e:	d0d3      	beq.n	800d2b8 <_malloc_r+0x20>
 800d310:	425a      	negs	r2, r3
 800d312:	50e2      	str	r2, [r4, r3]
 800d314:	e7d0      	b.n	800d2b8 <_malloc_r+0x20>
 800d316:	428c      	cmp	r4, r1
 800d318:	684b      	ldr	r3, [r1, #4]
 800d31a:	bf16      	itet	ne
 800d31c:	6063      	strne	r3, [r4, #4]
 800d31e:	6013      	streq	r3, [r2, #0]
 800d320:	460c      	movne	r4, r1
 800d322:	e7eb      	b.n	800d2fc <_malloc_r+0x64>
 800d324:	460c      	mov	r4, r1
 800d326:	6849      	ldr	r1, [r1, #4]
 800d328:	e7cc      	b.n	800d2c4 <_malloc_r+0x2c>
 800d32a:	1cc4      	adds	r4, r0, #3
 800d32c:	f024 0403 	bic.w	r4, r4, #3
 800d330:	42a0      	cmp	r0, r4
 800d332:	d005      	beq.n	800d340 <_malloc_r+0xa8>
 800d334:	1a21      	subs	r1, r4, r0
 800d336:	4630      	mov	r0, r6
 800d338:	f000 fb4c 	bl	800d9d4 <_sbrk_r>
 800d33c:	3001      	adds	r0, #1
 800d33e:	d0cf      	beq.n	800d2e0 <_malloc_r+0x48>
 800d340:	6025      	str	r5, [r4, #0]
 800d342:	e7db      	b.n	800d2fc <_malloc_r+0x64>
 800d344:	2000036c 	.word	0x2000036c
 800d348:	20000370 	.word	0x20000370

0800d34c <__sfputc_r>:
 800d34c:	6893      	ldr	r3, [r2, #8]
 800d34e:	3b01      	subs	r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	b410      	push	{r4}
 800d354:	6093      	str	r3, [r2, #8]
 800d356:	da08      	bge.n	800d36a <__sfputc_r+0x1e>
 800d358:	6994      	ldr	r4, [r2, #24]
 800d35a:	42a3      	cmp	r3, r4
 800d35c:	db01      	blt.n	800d362 <__sfputc_r+0x16>
 800d35e:	290a      	cmp	r1, #10
 800d360:	d103      	bne.n	800d36a <__sfputc_r+0x1e>
 800d362:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d366:	f000 bb91 	b.w	800da8c <__swbuf_r>
 800d36a:	6813      	ldr	r3, [r2, #0]
 800d36c:	1c58      	adds	r0, r3, #1
 800d36e:	6010      	str	r0, [r2, #0]
 800d370:	7019      	strb	r1, [r3, #0]
 800d372:	4608      	mov	r0, r1
 800d374:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <__sfputs_r>:
 800d37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37c:	4606      	mov	r6, r0
 800d37e:	460f      	mov	r7, r1
 800d380:	4614      	mov	r4, r2
 800d382:	18d5      	adds	r5, r2, r3
 800d384:	42ac      	cmp	r4, r5
 800d386:	d101      	bne.n	800d38c <__sfputs_r+0x12>
 800d388:	2000      	movs	r0, #0
 800d38a:	e007      	b.n	800d39c <__sfputs_r+0x22>
 800d38c:	463a      	mov	r2, r7
 800d38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff ffda 	bl	800d34c <__sfputc_r>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d1f3      	bne.n	800d384 <__sfputs_r+0xa>
 800d39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3a0 <_vfiprintf_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	b09d      	sub	sp, #116	; 0x74
 800d3a8:	4617      	mov	r7, r2
 800d3aa:	461d      	mov	r5, r3
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	b118      	cbz	r0, 800d3b8 <_vfiprintf_r+0x18>
 800d3b0:	6983      	ldr	r3, [r0, #24]
 800d3b2:	b90b      	cbnz	r3, 800d3b8 <_vfiprintf_r+0x18>
 800d3b4:	f7ff fdfc 	bl	800cfb0 <__sinit>
 800d3b8:	4b7c      	ldr	r3, [pc, #496]	; (800d5ac <_vfiprintf_r+0x20c>)
 800d3ba:	429c      	cmp	r4, r3
 800d3bc:	d158      	bne.n	800d470 <_vfiprintf_r+0xd0>
 800d3be:	6874      	ldr	r4, [r6, #4]
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	0718      	lsls	r0, r3, #28
 800d3c4:	d55e      	bpl.n	800d484 <_vfiprintf_r+0xe4>
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d05b      	beq.n	800d484 <_vfiprintf_r+0xe4>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d0:	2320      	movs	r3, #32
 800d3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3d6:	2330      	movs	r3, #48	; 0x30
 800d3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3dc:	9503      	str	r5, [sp, #12]
 800d3de:	f04f 0b01 	mov.w	fp, #1
 800d3e2:	46b8      	mov	r8, r7
 800d3e4:	4645      	mov	r5, r8
 800d3e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3ea:	b10b      	cbz	r3, 800d3f0 <_vfiprintf_r+0x50>
 800d3ec:	2b25      	cmp	r3, #37	; 0x25
 800d3ee:	d154      	bne.n	800d49a <_vfiprintf_r+0xfa>
 800d3f0:	ebb8 0a07 	subs.w	sl, r8, r7
 800d3f4:	d00b      	beq.n	800d40e <_vfiprintf_r+0x6e>
 800d3f6:	4653      	mov	r3, sl
 800d3f8:	463a      	mov	r2, r7
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f7ff ffbc 	bl	800d37a <__sfputs_r>
 800d402:	3001      	adds	r0, #1
 800d404:	f000 80c2 	beq.w	800d58c <_vfiprintf_r+0x1ec>
 800d408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40a:	4453      	add	r3, sl
 800d40c:	9309      	str	r3, [sp, #36]	; 0x24
 800d40e:	f898 3000 	ldrb.w	r3, [r8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80ba 	beq.w	800d58c <_vfiprintf_r+0x1ec>
 800d418:	2300      	movs	r3, #0
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	9307      	str	r3, [sp, #28]
 800d426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d42a:	931a      	str	r3, [sp, #104]	; 0x68
 800d42c:	46a8      	mov	r8, r5
 800d42e:	2205      	movs	r2, #5
 800d430:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d434:	485e      	ldr	r0, [pc, #376]	; (800d5b0 <_vfiprintf_r+0x210>)
 800d436:	f7f2 fed3 	bl	80001e0 <memchr>
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	bb78      	cbnz	r0, 800d49e <_vfiprintf_r+0xfe>
 800d43e:	06d9      	lsls	r1, r3, #27
 800d440:	bf44      	itt	mi
 800d442:	2220      	movmi	r2, #32
 800d444:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d448:	071a      	lsls	r2, r3, #28
 800d44a:	bf44      	itt	mi
 800d44c:	222b      	movmi	r2, #43	; 0x2b
 800d44e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d452:	782a      	ldrb	r2, [r5, #0]
 800d454:	2a2a      	cmp	r2, #42	; 0x2a
 800d456:	d02a      	beq.n	800d4ae <_vfiprintf_r+0x10e>
 800d458:	9a07      	ldr	r2, [sp, #28]
 800d45a:	46a8      	mov	r8, r5
 800d45c:	2000      	movs	r0, #0
 800d45e:	250a      	movs	r5, #10
 800d460:	4641      	mov	r1, r8
 800d462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d466:	3b30      	subs	r3, #48	; 0x30
 800d468:	2b09      	cmp	r3, #9
 800d46a:	d969      	bls.n	800d540 <_vfiprintf_r+0x1a0>
 800d46c:	b360      	cbz	r0, 800d4c8 <_vfiprintf_r+0x128>
 800d46e:	e024      	b.n	800d4ba <_vfiprintf_r+0x11a>
 800d470:	4b50      	ldr	r3, [pc, #320]	; (800d5b4 <_vfiprintf_r+0x214>)
 800d472:	429c      	cmp	r4, r3
 800d474:	d101      	bne.n	800d47a <_vfiprintf_r+0xda>
 800d476:	68b4      	ldr	r4, [r6, #8]
 800d478:	e7a2      	b.n	800d3c0 <_vfiprintf_r+0x20>
 800d47a:	4b4f      	ldr	r3, [pc, #316]	; (800d5b8 <_vfiprintf_r+0x218>)
 800d47c:	429c      	cmp	r4, r3
 800d47e:	bf08      	it	eq
 800d480:	68f4      	ldreq	r4, [r6, #12]
 800d482:	e79d      	b.n	800d3c0 <_vfiprintf_r+0x20>
 800d484:	4621      	mov	r1, r4
 800d486:	4630      	mov	r0, r6
 800d488:	f000 fb64 	bl	800db54 <__swsetup_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d09d      	beq.n	800d3cc <_vfiprintf_r+0x2c>
 800d490:	f04f 30ff 	mov.w	r0, #4294967295
 800d494:	b01d      	add	sp, #116	; 0x74
 800d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49a:	46a8      	mov	r8, r5
 800d49c:	e7a2      	b.n	800d3e4 <_vfiprintf_r+0x44>
 800d49e:	4a44      	ldr	r2, [pc, #272]	; (800d5b0 <_vfiprintf_r+0x210>)
 800d4a0:	1a80      	subs	r0, r0, r2
 800d4a2:	fa0b f000 	lsl.w	r0, fp, r0
 800d4a6:	4318      	orrs	r0, r3
 800d4a8:	9004      	str	r0, [sp, #16]
 800d4aa:	4645      	mov	r5, r8
 800d4ac:	e7be      	b.n	800d42c <_vfiprintf_r+0x8c>
 800d4ae:	9a03      	ldr	r2, [sp, #12]
 800d4b0:	1d11      	adds	r1, r2, #4
 800d4b2:	6812      	ldr	r2, [r2, #0]
 800d4b4:	9103      	str	r1, [sp, #12]
 800d4b6:	2a00      	cmp	r2, #0
 800d4b8:	db01      	blt.n	800d4be <_vfiprintf_r+0x11e>
 800d4ba:	9207      	str	r2, [sp, #28]
 800d4bc:	e004      	b.n	800d4c8 <_vfiprintf_r+0x128>
 800d4be:	4252      	negs	r2, r2
 800d4c0:	f043 0302 	orr.w	r3, r3, #2
 800d4c4:	9207      	str	r2, [sp, #28]
 800d4c6:	9304      	str	r3, [sp, #16]
 800d4c8:	f898 3000 	ldrb.w	r3, [r8]
 800d4cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ce:	d10e      	bne.n	800d4ee <_vfiprintf_r+0x14e>
 800d4d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d6:	d138      	bne.n	800d54a <_vfiprintf_r+0x1aa>
 800d4d8:	9b03      	ldr	r3, [sp, #12]
 800d4da:	1d1a      	adds	r2, r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	9203      	str	r2, [sp, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bfb8      	it	lt
 800d4e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4e8:	f108 0802 	add.w	r8, r8, #2
 800d4ec:	9305      	str	r3, [sp, #20]
 800d4ee:	4d33      	ldr	r5, [pc, #204]	; (800d5bc <_vfiprintf_r+0x21c>)
 800d4f0:	f898 1000 	ldrb.w	r1, [r8]
 800d4f4:	2203      	movs	r2, #3
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f7f2 fe72 	bl	80001e0 <memchr>
 800d4fc:	b140      	cbz	r0, 800d510 <_vfiprintf_r+0x170>
 800d4fe:	2340      	movs	r3, #64	; 0x40
 800d500:	1b40      	subs	r0, r0, r5
 800d502:	fa03 f000 	lsl.w	r0, r3, r0
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	4303      	orrs	r3, r0
 800d50a:	f108 0801 	add.w	r8, r8, #1
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	f898 1000 	ldrb.w	r1, [r8]
 800d514:	482a      	ldr	r0, [pc, #168]	; (800d5c0 <_vfiprintf_r+0x220>)
 800d516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d51a:	2206      	movs	r2, #6
 800d51c:	f108 0701 	add.w	r7, r8, #1
 800d520:	f7f2 fe5e 	bl	80001e0 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d037      	beq.n	800d598 <_vfiprintf_r+0x1f8>
 800d528:	4b26      	ldr	r3, [pc, #152]	; (800d5c4 <_vfiprintf_r+0x224>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_vfiprintf_r+0x1d4>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53a:	444b      	add	r3, r9
 800d53c:	9309      	str	r3, [sp, #36]	; 0x24
 800d53e:	e750      	b.n	800d3e2 <_vfiprintf_r+0x42>
 800d540:	fb05 3202 	mla	r2, r5, r2, r3
 800d544:	2001      	movs	r0, #1
 800d546:	4688      	mov	r8, r1
 800d548:	e78a      	b.n	800d460 <_vfiprintf_r+0xc0>
 800d54a:	2300      	movs	r3, #0
 800d54c:	f108 0801 	add.w	r8, r8, #1
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	4619      	mov	r1, r3
 800d554:	250a      	movs	r5, #10
 800d556:	4640      	mov	r0, r8
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	; 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_vfiprintf_r+0x1ca>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c3      	beq.n	800d4ee <_vfiprintf_r+0x14e>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c1      	b.n	800d4ee <_vfiprintf_r+0x14e>
 800d56a:	fb05 2101 	mla	r1, r5, r1, r2
 800d56e:	2301      	movs	r3, #1
 800d570:	4680      	mov	r8, r0
 800d572:	e7f0      	b.n	800d556 <_vfiprintf_r+0x1b6>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	4622      	mov	r2, r4
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <_vfiprintf_r+0x228>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4630      	mov	r0, r6
 800d580:	f3af 8000 	nop.w
 800d584:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d588:	4681      	mov	r9, r0
 800d58a:	d1d5      	bne.n	800d538 <_vfiprintf_r+0x198>
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	065b      	lsls	r3, r3, #25
 800d590:	f53f af7e 	bmi.w	800d490 <_vfiprintf_r+0xf0>
 800d594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d596:	e77d      	b.n	800d494 <_vfiprintf_r+0xf4>
 800d598:	ab03      	add	r3, sp, #12
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	4622      	mov	r2, r4
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <_vfiprintf_r+0x228>)
 800d5a0:	a904      	add	r1, sp, #16
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f000 f888 	bl	800d6b8 <_printf_i>
 800d5a8:	e7ec      	b.n	800d584 <_vfiprintf_r+0x1e4>
 800d5aa:	bf00      	nop
 800d5ac:	0800ded8 	.word	0x0800ded8
 800d5b0:	0800df1c 	.word	0x0800df1c
 800d5b4:	0800def8 	.word	0x0800def8
 800d5b8:	0800deb8 	.word	0x0800deb8
 800d5bc:	0800df22 	.word	0x0800df22
 800d5c0:	0800df26 	.word	0x0800df26
 800d5c4:	00000000 	.word	0x00000000
 800d5c8:	0800d37b 	.word	0x0800d37b

0800d5cc <_printf_common>:
 800d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d0:	4691      	mov	r9, r2
 800d5d2:	461f      	mov	r7, r3
 800d5d4:	688a      	ldr	r2, [r1, #8]
 800d5d6:	690b      	ldr	r3, [r1, #16]
 800d5d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	bfb8      	it	lt
 800d5e0:	4613      	movlt	r3, r2
 800d5e2:	f8c9 3000 	str.w	r3, [r9]
 800d5e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	b112      	cbz	r2, 800d5f6 <_printf_common+0x2a>
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	f8c9 3000 	str.w	r3, [r9]
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	0699      	lsls	r1, r3, #26
 800d5fa:	bf42      	ittt	mi
 800d5fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d600:	3302      	addmi	r3, #2
 800d602:	f8c9 3000 	strmi.w	r3, [r9]
 800d606:	6825      	ldr	r5, [r4, #0]
 800d608:	f015 0506 	ands.w	r5, r5, #6
 800d60c:	d107      	bne.n	800d61e <_printf_common+0x52>
 800d60e:	f104 0a19 	add.w	sl, r4, #25
 800d612:	68e3      	ldr	r3, [r4, #12]
 800d614:	f8d9 2000 	ldr.w	r2, [r9]
 800d618:	1a9b      	subs	r3, r3, r2
 800d61a:	42ab      	cmp	r3, r5
 800d61c:	dc28      	bgt.n	800d670 <_printf_common+0xa4>
 800d61e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d622:	6822      	ldr	r2, [r4, #0]
 800d624:	3300      	adds	r3, #0
 800d626:	bf18      	it	ne
 800d628:	2301      	movne	r3, #1
 800d62a:	0692      	lsls	r2, r2, #26
 800d62c:	d42d      	bmi.n	800d68a <_printf_common+0xbe>
 800d62e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d632:	4639      	mov	r1, r7
 800d634:	4630      	mov	r0, r6
 800d636:	47c0      	blx	r8
 800d638:	3001      	adds	r0, #1
 800d63a:	d020      	beq.n	800d67e <_printf_common+0xb2>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	68e5      	ldr	r5, [r4, #12]
 800d640:	f8d9 2000 	ldr.w	r2, [r9]
 800d644:	f003 0306 	and.w	r3, r3, #6
 800d648:	2b04      	cmp	r3, #4
 800d64a:	bf08      	it	eq
 800d64c:	1aad      	subeq	r5, r5, r2
 800d64e:	68a3      	ldr	r3, [r4, #8]
 800d650:	6922      	ldr	r2, [r4, #16]
 800d652:	bf0c      	ite	eq
 800d654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d658:	2500      	movne	r5, #0
 800d65a:	4293      	cmp	r3, r2
 800d65c:	bfc4      	itt	gt
 800d65e:	1a9b      	subgt	r3, r3, r2
 800d660:	18ed      	addgt	r5, r5, r3
 800d662:	f04f 0900 	mov.w	r9, #0
 800d666:	341a      	adds	r4, #26
 800d668:	454d      	cmp	r5, r9
 800d66a:	d11a      	bne.n	800d6a2 <_printf_common+0xd6>
 800d66c:	2000      	movs	r0, #0
 800d66e:	e008      	b.n	800d682 <_printf_common+0xb6>
 800d670:	2301      	movs	r3, #1
 800d672:	4652      	mov	r2, sl
 800d674:	4639      	mov	r1, r7
 800d676:	4630      	mov	r0, r6
 800d678:	47c0      	blx	r8
 800d67a:	3001      	adds	r0, #1
 800d67c:	d103      	bne.n	800d686 <_printf_common+0xba>
 800d67e:	f04f 30ff 	mov.w	r0, #4294967295
 800d682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d686:	3501      	adds	r5, #1
 800d688:	e7c3      	b.n	800d612 <_printf_common+0x46>
 800d68a:	18e1      	adds	r1, r4, r3
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	2030      	movs	r0, #48	; 0x30
 800d690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d694:	4422      	add	r2, r4
 800d696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d69a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d69e:	3302      	adds	r3, #2
 800d6a0:	e7c5      	b.n	800d62e <_printf_common+0x62>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4622      	mov	r2, r4
 800d6a6:	4639      	mov	r1, r7
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	47c0      	blx	r8
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d0e6      	beq.n	800d67e <_printf_common+0xb2>
 800d6b0:	f109 0901 	add.w	r9, r9, #1
 800d6b4:	e7d8      	b.n	800d668 <_printf_common+0x9c>
	...

0800d6b8 <_printf_i>:
 800d6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	7e09      	ldrb	r1, [r1, #24]
 800d6c4:	b085      	sub	sp, #20
 800d6c6:	296e      	cmp	r1, #110	; 0x6e
 800d6c8:	4617      	mov	r7, r2
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	4698      	mov	r8, r3
 800d6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6d0:	f000 80b3 	beq.w	800d83a <_printf_i+0x182>
 800d6d4:	d822      	bhi.n	800d71c <_printf_i+0x64>
 800d6d6:	2963      	cmp	r1, #99	; 0x63
 800d6d8:	d036      	beq.n	800d748 <_printf_i+0x90>
 800d6da:	d80a      	bhi.n	800d6f2 <_printf_i+0x3a>
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	f000 80b9 	beq.w	800d854 <_printf_i+0x19c>
 800d6e2:	2958      	cmp	r1, #88	; 0x58
 800d6e4:	f000 8083 	beq.w	800d7ee <_printf_i+0x136>
 800d6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d6f0:	e032      	b.n	800d758 <_printf_i+0xa0>
 800d6f2:	2964      	cmp	r1, #100	; 0x64
 800d6f4:	d001      	beq.n	800d6fa <_printf_i+0x42>
 800d6f6:	2969      	cmp	r1, #105	; 0x69
 800d6f8:	d1f6      	bne.n	800d6e8 <_printf_i+0x30>
 800d6fa:	6820      	ldr	r0, [r4, #0]
 800d6fc:	6813      	ldr	r3, [r2, #0]
 800d6fe:	0605      	lsls	r5, r0, #24
 800d700:	f103 0104 	add.w	r1, r3, #4
 800d704:	d52a      	bpl.n	800d75c <_printf_i+0xa4>
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	6011      	str	r1, [r2, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	da03      	bge.n	800d716 <_printf_i+0x5e>
 800d70e:	222d      	movs	r2, #45	; 0x2d
 800d710:	425b      	negs	r3, r3
 800d712:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d716:	486f      	ldr	r0, [pc, #444]	; (800d8d4 <_printf_i+0x21c>)
 800d718:	220a      	movs	r2, #10
 800d71a:	e039      	b.n	800d790 <_printf_i+0xd8>
 800d71c:	2973      	cmp	r1, #115	; 0x73
 800d71e:	f000 809d 	beq.w	800d85c <_printf_i+0x1a4>
 800d722:	d808      	bhi.n	800d736 <_printf_i+0x7e>
 800d724:	296f      	cmp	r1, #111	; 0x6f
 800d726:	d020      	beq.n	800d76a <_printf_i+0xb2>
 800d728:	2970      	cmp	r1, #112	; 0x70
 800d72a:	d1dd      	bne.n	800d6e8 <_printf_i+0x30>
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	f043 0320 	orr.w	r3, r3, #32
 800d732:	6023      	str	r3, [r4, #0]
 800d734:	e003      	b.n	800d73e <_printf_i+0x86>
 800d736:	2975      	cmp	r1, #117	; 0x75
 800d738:	d017      	beq.n	800d76a <_printf_i+0xb2>
 800d73a:	2978      	cmp	r1, #120	; 0x78
 800d73c:	d1d4      	bne.n	800d6e8 <_printf_i+0x30>
 800d73e:	2378      	movs	r3, #120	; 0x78
 800d740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d744:	4864      	ldr	r0, [pc, #400]	; (800d8d8 <_printf_i+0x220>)
 800d746:	e055      	b.n	800d7f4 <_printf_i+0x13c>
 800d748:	6813      	ldr	r3, [r2, #0]
 800d74a:	1d19      	adds	r1, r3, #4
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6011      	str	r1, [r2, #0]
 800d750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d758:	2301      	movs	r3, #1
 800d75a:	e08c      	b.n	800d876 <_printf_i+0x1be>
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6011      	str	r1, [r2, #0]
 800d760:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d764:	bf18      	it	ne
 800d766:	b21b      	sxthne	r3, r3
 800d768:	e7cf      	b.n	800d70a <_printf_i+0x52>
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	6825      	ldr	r5, [r4, #0]
 800d76e:	1d18      	adds	r0, r3, #4
 800d770:	6010      	str	r0, [r2, #0]
 800d772:	0628      	lsls	r0, r5, #24
 800d774:	d501      	bpl.n	800d77a <_printf_i+0xc2>
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	e002      	b.n	800d780 <_printf_i+0xc8>
 800d77a:	0668      	lsls	r0, r5, #25
 800d77c:	d5fb      	bpl.n	800d776 <_printf_i+0xbe>
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	4854      	ldr	r0, [pc, #336]	; (800d8d4 <_printf_i+0x21c>)
 800d782:	296f      	cmp	r1, #111	; 0x6f
 800d784:	bf14      	ite	ne
 800d786:	220a      	movne	r2, #10
 800d788:	2208      	moveq	r2, #8
 800d78a:	2100      	movs	r1, #0
 800d78c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d790:	6865      	ldr	r5, [r4, #4]
 800d792:	60a5      	str	r5, [r4, #8]
 800d794:	2d00      	cmp	r5, #0
 800d796:	f2c0 8095 	blt.w	800d8c4 <_printf_i+0x20c>
 800d79a:	6821      	ldr	r1, [r4, #0]
 800d79c:	f021 0104 	bic.w	r1, r1, #4
 800d7a0:	6021      	str	r1, [r4, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d13d      	bne.n	800d822 <_printf_i+0x16a>
 800d7a6:	2d00      	cmp	r5, #0
 800d7a8:	f040 808e 	bne.w	800d8c8 <_printf_i+0x210>
 800d7ac:	4665      	mov	r5, ip
 800d7ae:	2a08      	cmp	r2, #8
 800d7b0:	d10b      	bne.n	800d7ca <_printf_i+0x112>
 800d7b2:	6823      	ldr	r3, [r4, #0]
 800d7b4:	07db      	lsls	r3, r3, #31
 800d7b6:	d508      	bpl.n	800d7ca <_printf_i+0x112>
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	6862      	ldr	r2, [r4, #4]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	bfde      	ittt	le
 800d7c0:	2330      	movle	r3, #48	; 0x30
 800d7c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7ca:	ebac 0305 	sub.w	r3, ip, r5
 800d7ce:	6123      	str	r3, [r4, #16]
 800d7d0:	f8cd 8000 	str.w	r8, [sp]
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	aa03      	add	r2, sp, #12
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff fef6 	bl	800d5cc <_printf_common>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d14d      	bne.n	800d880 <_printf_i+0x1c8>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	b005      	add	sp, #20
 800d7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ee:	4839      	ldr	r0, [pc, #228]	; (800d8d4 <_printf_i+0x21c>)
 800d7f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d7f4:	6813      	ldr	r3, [r2, #0]
 800d7f6:	6821      	ldr	r1, [r4, #0]
 800d7f8:	1d1d      	adds	r5, r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6015      	str	r5, [r2, #0]
 800d7fe:	060a      	lsls	r2, r1, #24
 800d800:	d50b      	bpl.n	800d81a <_printf_i+0x162>
 800d802:	07ca      	lsls	r2, r1, #31
 800d804:	bf44      	itt	mi
 800d806:	f041 0120 	orrmi.w	r1, r1, #32
 800d80a:	6021      	strmi	r1, [r4, #0]
 800d80c:	b91b      	cbnz	r3, 800d816 <_printf_i+0x15e>
 800d80e:	6822      	ldr	r2, [r4, #0]
 800d810:	f022 0220 	bic.w	r2, r2, #32
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	2210      	movs	r2, #16
 800d818:	e7b7      	b.n	800d78a <_printf_i+0xd2>
 800d81a:	064d      	lsls	r5, r1, #25
 800d81c:	bf48      	it	mi
 800d81e:	b29b      	uxthmi	r3, r3
 800d820:	e7ef      	b.n	800d802 <_printf_i+0x14a>
 800d822:	4665      	mov	r5, ip
 800d824:	fbb3 f1f2 	udiv	r1, r3, r2
 800d828:	fb02 3311 	mls	r3, r2, r1, r3
 800d82c:	5cc3      	ldrb	r3, [r0, r3]
 800d82e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d832:	460b      	mov	r3, r1
 800d834:	2900      	cmp	r1, #0
 800d836:	d1f5      	bne.n	800d824 <_printf_i+0x16c>
 800d838:	e7b9      	b.n	800d7ae <_printf_i+0xf6>
 800d83a:	6813      	ldr	r3, [r2, #0]
 800d83c:	6825      	ldr	r5, [r4, #0]
 800d83e:	6961      	ldr	r1, [r4, #20]
 800d840:	1d18      	adds	r0, r3, #4
 800d842:	6010      	str	r0, [r2, #0]
 800d844:	0628      	lsls	r0, r5, #24
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	d501      	bpl.n	800d84e <_printf_i+0x196>
 800d84a:	6019      	str	r1, [r3, #0]
 800d84c:	e002      	b.n	800d854 <_printf_i+0x19c>
 800d84e:	066a      	lsls	r2, r5, #25
 800d850:	d5fb      	bpl.n	800d84a <_printf_i+0x192>
 800d852:	8019      	strh	r1, [r3, #0]
 800d854:	2300      	movs	r3, #0
 800d856:	6123      	str	r3, [r4, #16]
 800d858:	4665      	mov	r5, ip
 800d85a:	e7b9      	b.n	800d7d0 <_printf_i+0x118>
 800d85c:	6813      	ldr	r3, [r2, #0]
 800d85e:	1d19      	adds	r1, r3, #4
 800d860:	6011      	str	r1, [r2, #0]
 800d862:	681d      	ldr	r5, [r3, #0]
 800d864:	6862      	ldr	r2, [r4, #4]
 800d866:	2100      	movs	r1, #0
 800d868:	4628      	mov	r0, r5
 800d86a:	f7f2 fcb9 	bl	80001e0 <memchr>
 800d86e:	b108      	cbz	r0, 800d874 <_printf_i+0x1bc>
 800d870:	1b40      	subs	r0, r0, r5
 800d872:	6060      	str	r0, [r4, #4]
 800d874:	6863      	ldr	r3, [r4, #4]
 800d876:	6123      	str	r3, [r4, #16]
 800d878:	2300      	movs	r3, #0
 800d87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d87e:	e7a7      	b.n	800d7d0 <_printf_i+0x118>
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	462a      	mov	r2, r5
 800d884:	4639      	mov	r1, r7
 800d886:	4630      	mov	r0, r6
 800d888:	47c0      	blx	r8
 800d88a:	3001      	adds	r0, #1
 800d88c:	d0aa      	beq.n	800d7e4 <_printf_i+0x12c>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	079b      	lsls	r3, r3, #30
 800d892:	d413      	bmi.n	800d8bc <_printf_i+0x204>
 800d894:	68e0      	ldr	r0, [r4, #12]
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	4298      	cmp	r0, r3
 800d89a:	bfb8      	it	lt
 800d89c:	4618      	movlt	r0, r3
 800d89e:	e7a3      	b.n	800d7e8 <_printf_i+0x130>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	464a      	mov	r2, r9
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	47c0      	blx	r8
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d09a      	beq.n	800d7e4 <_printf_i+0x12c>
 800d8ae:	3501      	adds	r5, #1
 800d8b0:	68e3      	ldr	r3, [r4, #12]
 800d8b2:	9a03      	ldr	r2, [sp, #12]
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	42ab      	cmp	r3, r5
 800d8b8:	dcf2      	bgt.n	800d8a0 <_printf_i+0x1e8>
 800d8ba:	e7eb      	b.n	800d894 <_printf_i+0x1dc>
 800d8bc:	2500      	movs	r5, #0
 800d8be:	f104 0919 	add.w	r9, r4, #25
 800d8c2:	e7f5      	b.n	800d8b0 <_printf_i+0x1f8>
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1ac      	bne.n	800d822 <_printf_i+0x16a>
 800d8c8:	7803      	ldrb	r3, [r0, #0]
 800d8ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8d2:	e76c      	b.n	800d7ae <_printf_i+0xf6>
 800d8d4:	0800df2d 	.word	0x0800df2d
 800d8d8:	0800df3e 	.word	0x0800df3e

0800d8dc <iprintf>:
 800d8dc:	b40f      	push	{r0, r1, r2, r3}
 800d8de:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <iprintf+0x2c>)
 800d8e0:	b513      	push	{r0, r1, r4, lr}
 800d8e2:	681c      	ldr	r4, [r3, #0]
 800d8e4:	b124      	cbz	r4, 800d8f0 <iprintf+0x14>
 800d8e6:	69a3      	ldr	r3, [r4, #24]
 800d8e8:	b913      	cbnz	r3, 800d8f0 <iprintf+0x14>
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff fb60 	bl	800cfb0 <__sinit>
 800d8f0:	ab05      	add	r3, sp, #20
 800d8f2:	9a04      	ldr	r2, [sp, #16]
 800d8f4:	68a1      	ldr	r1, [r4, #8]
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f7ff fd51 	bl	800d3a0 <_vfiprintf_r>
 800d8fe:	b002      	add	sp, #8
 800d900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d904:	b004      	add	sp, #16
 800d906:	4770      	bx	lr
 800d908:	200002c8 	.word	0x200002c8

0800d90c <_puts_r>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	460e      	mov	r6, r1
 800d910:	4605      	mov	r5, r0
 800d912:	b118      	cbz	r0, 800d91c <_puts_r+0x10>
 800d914:	6983      	ldr	r3, [r0, #24]
 800d916:	b90b      	cbnz	r3, 800d91c <_puts_r+0x10>
 800d918:	f7ff fb4a 	bl	800cfb0 <__sinit>
 800d91c:	69ab      	ldr	r3, [r5, #24]
 800d91e:	68ac      	ldr	r4, [r5, #8]
 800d920:	b913      	cbnz	r3, 800d928 <_puts_r+0x1c>
 800d922:	4628      	mov	r0, r5
 800d924:	f7ff fb44 	bl	800cfb0 <__sinit>
 800d928:	4b23      	ldr	r3, [pc, #140]	; (800d9b8 <_puts_r+0xac>)
 800d92a:	429c      	cmp	r4, r3
 800d92c:	d117      	bne.n	800d95e <_puts_r+0x52>
 800d92e:	686c      	ldr	r4, [r5, #4]
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	071b      	lsls	r3, r3, #28
 800d934:	d51d      	bpl.n	800d972 <_puts_r+0x66>
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	b1db      	cbz	r3, 800d972 <_puts_r+0x66>
 800d93a:	3e01      	subs	r6, #1
 800d93c:	68a3      	ldr	r3, [r4, #8]
 800d93e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d942:	3b01      	subs	r3, #1
 800d944:	60a3      	str	r3, [r4, #8]
 800d946:	b9e9      	cbnz	r1, 800d984 <_puts_r+0x78>
 800d948:	2b00      	cmp	r3, #0
 800d94a:	da2e      	bge.n	800d9aa <_puts_r+0x9e>
 800d94c:	4622      	mov	r2, r4
 800d94e:	210a      	movs	r1, #10
 800d950:	4628      	mov	r0, r5
 800d952:	f000 f89b 	bl	800da8c <__swbuf_r>
 800d956:	3001      	adds	r0, #1
 800d958:	d011      	beq.n	800d97e <_puts_r+0x72>
 800d95a:	200a      	movs	r0, #10
 800d95c:	e011      	b.n	800d982 <_puts_r+0x76>
 800d95e:	4b17      	ldr	r3, [pc, #92]	; (800d9bc <_puts_r+0xb0>)
 800d960:	429c      	cmp	r4, r3
 800d962:	d101      	bne.n	800d968 <_puts_r+0x5c>
 800d964:	68ac      	ldr	r4, [r5, #8]
 800d966:	e7e3      	b.n	800d930 <_puts_r+0x24>
 800d968:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <_puts_r+0xb4>)
 800d96a:	429c      	cmp	r4, r3
 800d96c:	bf08      	it	eq
 800d96e:	68ec      	ldreq	r4, [r5, #12]
 800d970:	e7de      	b.n	800d930 <_puts_r+0x24>
 800d972:	4621      	mov	r1, r4
 800d974:	4628      	mov	r0, r5
 800d976:	f000 f8ed 	bl	800db54 <__swsetup_r>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d0dd      	beq.n	800d93a <_puts_r+0x2e>
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	2b00      	cmp	r3, #0
 800d986:	da04      	bge.n	800d992 <_puts_r+0x86>
 800d988:	69a2      	ldr	r2, [r4, #24]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	dc06      	bgt.n	800d99c <_puts_r+0x90>
 800d98e:	290a      	cmp	r1, #10
 800d990:	d004      	beq.n	800d99c <_puts_r+0x90>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	1c5a      	adds	r2, r3, #1
 800d996:	6022      	str	r2, [r4, #0]
 800d998:	7019      	strb	r1, [r3, #0]
 800d99a:	e7cf      	b.n	800d93c <_puts_r+0x30>
 800d99c:	4622      	mov	r2, r4
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f000 f874 	bl	800da8c <__swbuf_r>
 800d9a4:	3001      	adds	r0, #1
 800d9a6:	d1c9      	bne.n	800d93c <_puts_r+0x30>
 800d9a8:	e7e9      	b.n	800d97e <_puts_r+0x72>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	200a      	movs	r0, #10
 800d9ae:	1c5a      	adds	r2, r3, #1
 800d9b0:	6022      	str	r2, [r4, #0]
 800d9b2:	7018      	strb	r0, [r3, #0]
 800d9b4:	e7e5      	b.n	800d982 <_puts_r+0x76>
 800d9b6:	bf00      	nop
 800d9b8:	0800ded8 	.word	0x0800ded8
 800d9bc:	0800def8 	.word	0x0800def8
 800d9c0:	0800deb8 	.word	0x0800deb8

0800d9c4 <puts>:
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <puts+0xc>)
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	f7ff bf9f 	b.w	800d90c <_puts_r>
 800d9ce:	bf00      	nop
 800d9d0:	200002c8 	.word	0x200002c8

0800d9d4 <_sbrk_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4c06      	ldr	r4, [pc, #24]	; (800d9f0 <_sbrk_r+0x1c>)
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4605      	mov	r5, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	6023      	str	r3, [r4, #0]
 800d9e0:	f7f5 f918 	bl	8002c14 <_sbrk>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_sbrk_r+0x1a>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_sbrk_r+0x1a>
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	20000c48 	.word	0x20000c48

0800d9f4 <__sread>:
 800d9f4:	b510      	push	{r4, lr}
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	f000 f95e 	bl	800dcbc <_read_r>
 800da00:	2800      	cmp	r0, #0
 800da02:	bfab      	itete	ge
 800da04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da06:	89a3      	ldrhlt	r3, [r4, #12]
 800da08:	181b      	addge	r3, r3, r0
 800da0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da0e:	bfac      	ite	ge
 800da10:	6563      	strge	r3, [r4, #84]	; 0x54
 800da12:	81a3      	strhlt	r3, [r4, #12]
 800da14:	bd10      	pop	{r4, pc}

0800da16 <__swrite>:
 800da16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1a:	461f      	mov	r7, r3
 800da1c:	898b      	ldrh	r3, [r1, #12]
 800da1e:	05db      	lsls	r3, r3, #23
 800da20:	4605      	mov	r5, r0
 800da22:	460c      	mov	r4, r1
 800da24:	4616      	mov	r6, r2
 800da26:	d505      	bpl.n	800da34 <__swrite+0x1e>
 800da28:	2302      	movs	r3, #2
 800da2a:	2200      	movs	r2, #0
 800da2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da30:	f000 f930 	bl	800dc94 <_lseek_r>
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da3e:	81a3      	strh	r3, [r4, #12]
 800da40:	4632      	mov	r2, r6
 800da42:	463b      	mov	r3, r7
 800da44:	4628      	mov	r0, r5
 800da46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da4a:	f000 b871 	b.w	800db30 <_write_r>

0800da4e <__sseek>:
 800da4e:	b510      	push	{r4, lr}
 800da50:	460c      	mov	r4, r1
 800da52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da56:	f000 f91d 	bl	800dc94 <_lseek_r>
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	bf15      	itete	ne
 800da60:	6560      	strne	r0, [r4, #84]	; 0x54
 800da62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da6a:	81a3      	strheq	r3, [r4, #12]
 800da6c:	bf18      	it	ne
 800da6e:	81a3      	strhne	r3, [r4, #12]
 800da70:	bd10      	pop	{r4, pc}

0800da72 <__sclose>:
 800da72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da76:	f000 b8db 	b.w	800dc30 <_close_r>

0800da7a <strcpy>:
 800da7a:	4603      	mov	r3, r0
 800da7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da80:	f803 2b01 	strb.w	r2, [r3], #1
 800da84:	2a00      	cmp	r2, #0
 800da86:	d1f9      	bne.n	800da7c <strcpy+0x2>
 800da88:	4770      	bx	lr
	...

0800da8c <__swbuf_r>:
 800da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8e:	460e      	mov	r6, r1
 800da90:	4614      	mov	r4, r2
 800da92:	4605      	mov	r5, r0
 800da94:	b118      	cbz	r0, 800da9e <__swbuf_r+0x12>
 800da96:	6983      	ldr	r3, [r0, #24]
 800da98:	b90b      	cbnz	r3, 800da9e <__swbuf_r+0x12>
 800da9a:	f7ff fa89 	bl	800cfb0 <__sinit>
 800da9e:	4b21      	ldr	r3, [pc, #132]	; (800db24 <__swbuf_r+0x98>)
 800daa0:	429c      	cmp	r4, r3
 800daa2:	d12a      	bne.n	800dafa <__swbuf_r+0x6e>
 800daa4:	686c      	ldr	r4, [r5, #4]
 800daa6:	69a3      	ldr	r3, [r4, #24]
 800daa8:	60a3      	str	r3, [r4, #8]
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	071a      	lsls	r2, r3, #28
 800daae:	d52e      	bpl.n	800db0e <__swbuf_r+0x82>
 800dab0:	6923      	ldr	r3, [r4, #16]
 800dab2:	b363      	cbz	r3, 800db0e <__swbuf_r+0x82>
 800dab4:	6923      	ldr	r3, [r4, #16]
 800dab6:	6820      	ldr	r0, [r4, #0]
 800dab8:	1ac0      	subs	r0, r0, r3
 800daba:	6963      	ldr	r3, [r4, #20]
 800dabc:	b2f6      	uxtb	r6, r6
 800dabe:	4283      	cmp	r3, r0
 800dac0:	4637      	mov	r7, r6
 800dac2:	dc04      	bgt.n	800dace <__swbuf_r+0x42>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4628      	mov	r0, r5
 800dac8:	f7ff fa08 	bl	800cedc <_fflush_r>
 800dacc:	bb28      	cbnz	r0, 800db1a <__swbuf_r+0x8e>
 800dace:	68a3      	ldr	r3, [r4, #8]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	60a3      	str	r3, [r4, #8]
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	6022      	str	r2, [r4, #0]
 800dada:	701e      	strb	r6, [r3, #0]
 800dadc:	6963      	ldr	r3, [r4, #20]
 800dade:	3001      	adds	r0, #1
 800dae0:	4283      	cmp	r3, r0
 800dae2:	d004      	beq.n	800daee <__swbuf_r+0x62>
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	07db      	lsls	r3, r3, #31
 800dae8:	d519      	bpl.n	800db1e <__swbuf_r+0x92>
 800daea:	2e0a      	cmp	r6, #10
 800daec:	d117      	bne.n	800db1e <__swbuf_r+0x92>
 800daee:	4621      	mov	r1, r4
 800daf0:	4628      	mov	r0, r5
 800daf2:	f7ff f9f3 	bl	800cedc <_fflush_r>
 800daf6:	b190      	cbz	r0, 800db1e <__swbuf_r+0x92>
 800daf8:	e00f      	b.n	800db1a <__swbuf_r+0x8e>
 800dafa:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <__swbuf_r+0x9c>)
 800dafc:	429c      	cmp	r4, r3
 800dafe:	d101      	bne.n	800db04 <__swbuf_r+0x78>
 800db00:	68ac      	ldr	r4, [r5, #8]
 800db02:	e7d0      	b.n	800daa6 <__swbuf_r+0x1a>
 800db04:	4b09      	ldr	r3, [pc, #36]	; (800db2c <__swbuf_r+0xa0>)
 800db06:	429c      	cmp	r4, r3
 800db08:	bf08      	it	eq
 800db0a:	68ec      	ldreq	r4, [r5, #12]
 800db0c:	e7cb      	b.n	800daa6 <__swbuf_r+0x1a>
 800db0e:	4621      	mov	r1, r4
 800db10:	4628      	mov	r0, r5
 800db12:	f000 f81f 	bl	800db54 <__swsetup_r>
 800db16:	2800      	cmp	r0, #0
 800db18:	d0cc      	beq.n	800dab4 <__swbuf_r+0x28>
 800db1a:	f04f 37ff 	mov.w	r7, #4294967295
 800db1e:	4638      	mov	r0, r7
 800db20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db22:	bf00      	nop
 800db24:	0800ded8 	.word	0x0800ded8
 800db28:	0800def8 	.word	0x0800def8
 800db2c:	0800deb8 	.word	0x0800deb8

0800db30 <_write_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4c07      	ldr	r4, [pc, #28]	; (800db50 <_write_r+0x20>)
 800db34:	4605      	mov	r5, r0
 800db36:	4608      	mov	r0, r1
 800db38:	4611      	mov	r1, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	6022      	str	r2, [r4, #0]
 800db3e:	461a      	mov	r2, r3
 800db40:	f7f2 fe0a 	bl	8000758 <_write>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_write_r+0x1e>
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_write_r+0x1e>
 800db4c:	602b      	str	r3, [r5, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20000c48 	.word	0x20000c48

0800db54 <__swsetup_r>:
 800db54:	4b32      	ldr	r3, [pc, #200]	; (800dc20 <__swsetup_r+0xcc>)
 800db56:	b570      	push	{r4, r5, r6, lr}
 800db58:	681d      	ldr	r5, [r3, #0]
 800db5a:	4606      	mov	r6, r0
 800db5c:	460c      	mov	r4, r1
 800db5e:	b125      	cbz	r5, 800db6a <__swsetup_r+0x16>
 800db60:	69ab      	ldr	r3, [r5, #24]
 800db62:	b913      	cbnz	r3, 800db6a <__swsetup_r+0x16>
 800db64:	4628      	mov	r0, r5
 800db66:	f7ff fa23 	bl	800cfb0 <__sinit>
 800db6a:	4b2e      	ldr	r3, [pc, #184]	; (800dc24 <__swsetup_r+0xd0>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	d10f      	bne.n	800db90 <__swsetup_r+0x3c>
 800db70:	686c      	ldr	r4, [r5, #4]
 800db72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db76:	b29a      	uxth	r2, r3
 800db78:	0715      	lsls	r5, r2, #28
 800db7a:	d42c      	bmi.n	800dbd6 <__swsetup_r+0x82>
 800db7c:	06d0      	lsls	r0, r2, #27
 800db7e:	d411      	bmi.n	800dba4 <__swsetup_r+0x50>
 800db80:	2209      	movs	r2, #9
 800db82:	6032      	str	r2, [r6, #0]
 800db84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	f04f 30ff 	mov.w	r0, #4294967295
 800db8e:	e03e      	b.n	800dc0e <__swsetup_r+0xba>
 800db90:	4b25      	ldr	r3, [pc, #148]	; (800dc28 <__swsetup_r+0xd4>)
 800db92:	429c      	cmp	r4, r3
 800db94:	d101      	bne.n	800db9a <__swsetup_r+0x46>
 800db96:	68ac      	ldr	r4, [r5, #8]
 800db98:	e7eb      	b.n	800db72 <__swsetup_r+0x1e>
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <__swsetup_r+0xd8>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	bf08      	it	eq
 800dba0:	68ec      	ldreq	r4, [r5, #12]
 800dba2:	e7e6      	b.n	800db72 <__swsetup_r+0x1e>
 800dba4:	0751      	lsls	r1, r2, #29
 800dba6:	d512      	bpl.n	800dbce <__swsetup_r+0x7a>
 800dba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbaa:	b141      	cbz	r1, 800dbbe <__swsetup_r+0x6a>
 800dbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbb0:	4299      	cmp	r1, r3
 800dbb2:	d002      	beq.n	800dbba <__swsetup_r+0x66>
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff fb21 	bl	800d1fc <_free_r>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	6363      	str	r3, [r4, #52]	; 0x34
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	6063      	str	r3, [r4, #4]
 800dbca:	6923      	ldr	r3, [r4, #16]
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	f043 0308 	orr.w	r3, r3, #8
 800dbd4:	81a3      	strh	r3, [r4, #12]
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	b94b      	cbnz	r3, 800dbee <__swsetup_r+0x9a>
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe4:	d003      	beq.n	800dbee <__swsetup_r+0x9a>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff fab3 	bl	800d154 <__smakebuf_r>
 800dbee:	89a2      	ldrh	r2, [r4, #12]
 800dbf0:	f012 0301 	ands.w	r3, r2, #1
 800dbf4:	d00c      	beq.n	800dc10 <__swsetup_r+0xbc>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60a3      	str	r3, [r4, #8]
 800dbfa:	6963      	ldr	r3, [r4, #20]
 800dbfc:	425b      	negs	r3, r3
 800dbfe:	61a3      	str	r3, [r4, #24]
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	b953      	cbnz	r3, 800dc1a <__swsetup_r+0xc6>
 800dc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dc0c:	d1ba      	bne.n	800db84 <__swsetup_r+0x30>
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}
 800dc10:	0792      	lsls	r2, r2, #30
 800dc12:	bf58      	it	pl
 800dc14:	6963      	ldrpl	r3, [r4, #20]
 800dc16:	60a3      	str	r3, [r4, #8]
 800dc18:	e7f2      	b.n	800dc00 <__swsetup_r+0xac>
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	e7f7      	b.n	800dc0e <__swsetup_r+0xba>
 800dc1e:	bf00      	nop
 800dc20:	200002c8 	.word	0x200002c8
 800dc24:	0800ded8 	.word	0x0800ded8
 800dc28:	0800def8 	.word	0x0800def8
 800dc2c:	0800deb8 	.word	0x0800deb8

0800dc30 <_close_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4c06      	ldr	r4, [pc, #24]	; (800dc4c <_close_r+0x1c>)
 800dc34:	2300      	movs	r3, #0
 800dc36:	4605      	mov	r5, r0
 800dc38:	4608      	mov	r0, r1
 800dc3a:	6023      	str	r3, [r4, #0]
 800dc3c:	f7f4 ffb5 	bl	8002baa <_close>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d102      	bne.n	800dc4a <_close_r+0x1a>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	b103      	cbz	r3, 800dc4a <_close_r+0x1a>
 800dc48:	602b      	str	r3, [r5, #0]
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	20000c48 	.word	0x20000c48

0800dc50 <_fstat_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4c07      	ldr	r4, [pc, #28]	; (800dc70 <_fstat_r+0x20>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4605      	mov	r5, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	f7f4 ffb0 	bl	8002bc2 <_fstat>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	d102      	bne.n	800dc6c <_fstat_r+0x1c>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	b103      	cbz	r3, 800dc6c <_fstat_r+0x1c>
 800dc6a:	602b      	str	r3, [r5, #0]
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}
 800dc6e:	bf00      	nop
 800dc70:	20000c48 	.word	0x20000c48

0800dc74 <_isatty_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4c06      	ldr	r4, [pc, #24]	; (800dc90 <_isatty_r+0x1c>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	6023      	str	r3, [r4, #0]
 800dc80:	f7f4 ffaf 	bl	8002be2 <_isatty>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_isatty_r+0x1a>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_isatty_r+0x1a>
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	20000c48 	.word	0x20000c48

0800dc94 <_lseek_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4c07      	ldr	r4, [pc, #28]	; (800dcb4 <_lseek_r+0x20>)
 800dc98:	4605      	mov	r5, r0
 800dc9a:	4608      	mov	r0, r1
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	2200      	movs	r2, #0
 800dca0:	6022      	str	r2, [r4, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	f7f4 ffa8 	bl	8002bf8 <_lseek>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d102      	bne.n	800dcb2 <_lseek_r+0x1e>
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	b103      	cbz	r3, 800dcb2 <_lseek_r+0x1e>
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	bd38      	pop	{r3, r4, r5, pc}
 800dcb4:	20000c48 	.word	0x20000c48

0800dcb8 <__malloc_lock>:
 800dcb8:	4770      	bx	lr

0800dcba <__malloc_unlock>:
 800dcba:	4770      	bx	lr

0800dcbc <_read_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4c07      	ldr	r4, [pc, #28]	; (800dcdc <_read_r+0x20>)
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	6022      	str	r2, [r4, #0]
 800dcca:	461a      	mov	r2, r3
 800dccc:	f7f4 ff50 	bl	8002b70 <_read>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_read_r+0x1e>
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_read_r+0x1e>
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	20000c48 	.word	0x20000c48

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
